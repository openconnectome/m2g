*MR OCP TODO list Disa
===========================
- Zips of downloads need to be saved to disk and managed
- Check fly graph
1. Click handler buildgraph to show email address if given big-graph, else not.

Add Dependencies
================
- get settings for mbp
- Fix all programmatic for igraph intergration
- [GNU R >= 3.0.2](http://www.r-project.org/)
- [igraph](http://igraph.sourceforge.net/) >= version 7.0
  - C, R, Python 
- python Rpy2

* Viewer: http://cmtk.org/viewer/ visualization tool
* Refactor views with programmatic access to shorten views.py
* Add feedback for graph too big & estimated time to completion

- Add sql queries to ...
- Programmatic options
- Sample case of enforcing visibility of project on disk
html:
  - Display all projects for a user in a drop downlist
  - Then use selection to determine what must be displayed at lower levels
- Create app to hold all common data e.g http://stackoverflow.com/questions/890942/django-how-to-have-a-project-wide-templatetags-shared-among-all-my-apps-in-th

- Hook up registration form with lastname & firstname to registration system
- Add sql queries to retrieve all private projects for a single user
- Add projects page for users
- Create sharing tokens

*Recently completed*
=====================
- Install django-table2 on mrbrain:
  - sudo easy_install -Z django-tables2
  - python manage.py syncdb collectstatic
- Change anywhere with download links of http://mrbrain to generic from headers
- Fix all zip browser uploads
- Allow Graphupload for all informat formats
- Find all occurences of loadAnyMat and make sure the import is file_util
- Alter views to use clean for Email verification
* Alter url to: openconnecto.me/graph-services
- Finish work on convert fibergraph, lcc, svd to csv
- Resolve biggraph degree and eigenvalue non-conversion to csv
* Add ability to name graphs anything for all products
* Add clear html documentation of supported file upload formats
* Create a Will only branch
* Example script for Will
- Big Eigenvectors to large to convert to csv -> 500 MB
* Add ability to upload arbitrary .mat files to graphupload with some size limit for invariant computation
* Refactor & repackage all invariant code
- Strip ROIs from lcc computation in webservices
- Complete ssl of django -  Not enabled yet
- Handle wrong input files by using error message - Javascripted
- Add Eigenvector to convert files
- Fix html header
- Update models used for saving files only
- Add private project DBing
Private project Rules:
- Select new project or add to existing
- Each project name must be unique for a single user or else we add to project
- If project exists - add to project
- If proj...scanID exists - return error for existing scan (stored procedure checks if scan exists given user and project name)

- Enforce each project being unique for private projects of a single user
- Add to project create -> private project
<-- 0. Merge to master to update examples on mrbrain site -->
<-- 0. Check email activation failure view -->
<-- 2. Fix placement of login/logout buttons on views -->
<-- 0. Alter default.css for buttons and user status THEN manage.py staticfiles -->
<-- registration/logout.html -->
<-- registration/logged_out.html -->
<-- Log in/out button in all templates -->
<-- 3. Get static content to load via apache for production mode -->
<-- -1. Registration, Authentication, Login, Logout -->
<-- 0. Run djangoSyncdb.py on mrbrain & apt-get-install python-django-registration -->
<-- 1. Production Test programmatic examples -->
<-- Enable SSL on mrbrain -->
<-- 0. Resolve url for non-uniform file names (spaces etc) -->
<-- * Add graph specs to html -->
<-- Test non-uniform file names -->
<-- Dev server Test programmatic examples -->
<-- LoadGraphInv programmatic view, examples and html update for big as well -->
<-- 0. Fix import errors -->
<-- 5. Redo confirmDownload to account for csv addition -->
<-- 6. Get rid of lccnpytomat -->
<-- 7. Move convertTo to computation -->
<-- 2. Finish graphupload view -->
<-- 5. Fix Eigenvalue add to other services -->
<-- Rename computation.Eigenvalues & update all others. -->
<-- 7. Figure out where I use maxavedegree.py -->
<-- 6. Make convert after graph processing also convert all invariants -->
<-- 7. Fix runInvariants() method camelCase problems - views.py -->
<-- 0. Update html for programmatic uses -->

* Web server dev mode
- MPLCONFIGURE
- Eig imports
-- doc.save()
-- processdata - True
