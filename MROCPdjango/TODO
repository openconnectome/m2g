*MR OCP TODO list Disa
===========================
- Unpack zips
- Rename incorrectly named ones
- Add project name attribute to graphs

- Alter ingest to account for project name
- Alter models ||   ||    ||    ||    ||
- Alter table rendering to account for project name

- complete manage_zips.py

- Zips of downloads need to be saved to disk and managed
1. Click handler buildgraph to show email address if given big-graph, else not.

* viewer: http://cmtk.org/viewer/ visualization tool
* refactor views with programmatic access to shorten views.py
* add feedback for graph too big & estimated time to completion

- add sql queries to ...
- programmatic options
- sample case of enforcing visibility of project on disk
html:
  - display all projects for a user in a drop downlist
  - then use selection to determine what must be displayed at lower levels
- create app to hold all common data e.g http://stackoverflow.com/questions/890942/django-how-to-have-a-project-wide-templatetags-shared-among-all-my-apps-in-th

- hook up registration form with lastname & firstname to registration system
- add sql queries to retrieve all private projects for a single user
- add projects page for users
- create sharing tokens

*recently completed*
=====================
- remove checkbox from heading: --> Used as checkall
- handle checkbox selection of graphs to download
- Delete mrcap/lcc, mrcap/svd, MROCPdjango/loadAdjMatrix and all refs
- fix all programmatic for igraph intergration
- [gnu r >= 3.0.2](http://www.r-project.org/)
- [igraph](http://igraph.sourceforge.net/) >= version 7.0
  - c, r, python 
- python rpy2
- check fly graph
- install django-table2 on mrbrain:
  - sudo easy_install -z django-tables2
  - python manage.py syncdb collectstatic
- change anywhere with download links of http://mrbrain to generic from headers
- fix all zip browser uploads
- allow graphupload for all informat formats
- find all occurences of loadanymat and make sure the import is file_util
- alter views to use clean for email verification
* alter url to: openconnecto.me/graph-services
- finish work on convert fibergraph, lcc, svd to csv
- resolve biggraph degree and eigenvalue non-conversion to csv
* add ability to name graphs anything for all products
* add clear html documentation of supported file upload formats
* create a will only branch
* example script for will
- big eigenvectors to large to convert to csv -> 500 mb
* add ability to upload arbitrary .mat files to graphupload with some size limit for invariant computation
* refactor & repackage all invariant code
- strip rois from lcc computation in webservices
- complete ssl of django -  not enabled yet
- handle wrong input files by using error message - javascripted
- add eigenvector to convert files
- fix html header
- update models used for saving files only
- add private project dbing
private project rules:
- select new project or add to existing
- each project name must be unique for a single user or else we add to project
- if project exists - add to project
- if proj...scanid exists - return error for existing scan (stored procedure checks if scan exists given user and project name)

- enforce each project being unique for private projects of a single user
- add to project create -> private project
<-- 0. merge to master to update examples on mrbrain site -->
<-- 0. check email activation failure view -->
<-- 2. fix placement of login/logout buttons on views -->
<-- 0. alter default.css for buttons and user status then manage.py staticfiles -->
<-- registration/logout.html -->
<-- registration/logged_out.html -->
<-- log in/out button in all templates -->
<-- 3. get static content to load via apache for production mode -->
<-- -1. registration, authentication, login, logout -->
<-- 0. run djangosyncdb.py on mrbrain & apt-get-install python-django-registration -->
<-- 1. production test programmatic examples -->
<-- enable ssl on mrbrain -->
<-- 0. resolve url for non-uniform file names (spaces etc) -->
<-- * add graph specs to html -->
<-- test non-uniform file names -->
<-- dev server test programmatic examples -->
<-- loadgraphinv programmatic view, examples and html update for big as well -->
<-- 0. fix import errors -->
<-- 5. redo confirmdownload to account for csv addition -->
<-- 6. get rid of lccnpytomat -->
<-- 7. move convertto to computation -->
<-- 2. finish graphupload view -->
<-- 5. fix eigenvalue add to other services -->
<-- rename computation.eigenvalues & update all others. -->
<-- 7. figure out where i use maxavedegree.py -->
<-- 6. make convert after graph processing also convert all invariants -->
<-- 7. fix runinvariants() method camelcase problems - views.py -->
<-- 0. update html for programmatic uses -->

* web server dev mode
- mplconfigure
- eig imports
-- doc.save()
-- processdata - True
