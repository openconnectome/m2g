#!/usr/bin/python

# inv_exec
# Created by Disa Mhembere on 2013-03-21.
# Email: dmhembe1@jhu.edu
# Copyright (c) 2013. All rights reserved.

"""
A python script to run invariants on a file based on CL flag
"""

import argparse
import sys
import os

import computation.composite.invariants as invariants
from  mrcap.gengraph import genGraph
from computation.utils.getBaseName import getBaseName

from computation.utils.file_util import getPathLeaf, makeDirIfNone

################################################################################
#                             COMPUTE INVARIANTS                               #
################################################################################
def compute_inv(inv_dict):
  '''
  Used to call code to run invariat computation

  positional args:
  ================
  inv_dict: current session dict containing session varibles
  '''
  # Add filenames with None attached since invariant computations look
  # for filenames when asked to compute an invariant - if they see 'None'
  # they will compute it & populate the file name. If they see a file name,
  # they won't recompute it.

  print 'Computing invariants for graph %s...' % inv_dict['graph_fn']
  invariants.compute(inv_dict, sep_save=False, gformat=inv_dict['format'])
  print 'Invariant computation complete'


def main():
  """
  Command line parser to determine what invariants to compute and
  what data is passed in. This is the meat of the script
  """
  # Constants
  mr_data_dir = os.path.join(os.path.dirname(__file__), 'mrdata')

  parser = argparse.ArgumentParser(description='A script run selected/all invariants on a graph\
                                   connected component of a graph. Pass minimally only graph_fn \
                                   [s|b] [-A|-d|-e|-c|-t|-s|-m|-g|-v]')

  # If fiber_fn is passed the assumption is that you don't have a
  # graph & want it made under the default name or G_fn if provided

  # Files and storage
  parser.add_argument('graph_fn', action='store',help='the full filename of the  \
                      CSC matrix representing a graph (.mat format) to have *NOTE DO NOT USE UNDERSCORES (_)\
                      in path leaf. eg. /foo/bar_bar/foo.mat is OK but /foo/bar/foo_bar.mat is NOT. [TODO fix]')

  parser.add_argument('-f', '--format', action='store', default='graphml', help='input format of the graph. Default is \'graphml\'')
  parser.add_argument('-D', '--data_elem', action='store', default=None, help='the name of the data element within the .mat matrix.')
  parser.add_argument('-S', '--save_dir', action='store', default= mr_data_dir, help='the directory where the invariants \
                      are to be stored (each invariant will create its own subdirectory within this). \
                      The defualt is %s' % mr_data_dir)

  # Invariant options
  parser.add_argument('-A', '--all', action='store_true', help='pass to compute ALL invariants')
  parser.add_argument('-d', '--deg', action='store_true', help='pass to compute local degree')
  parser.add_argument('-e', '--eig', action='store_true', help='pass to compute global top k eigenvalues & eigenvectors')
  parser.add_argument('-c', '--cc', action='store_true', help='pass to compute local clustering coefficient')
  parser.add_argument('-t', '--tri', action='store_true', help='pass to compute local triangle count')
  parser.add_argument('-s', '--ss1', action='store_true', help='pass to compute scan 1 statistic')
  parser.add_argument('-m', '--mad', action='store_true', help='pass to compute global max. average degree')
  parser.add_argument('-g', '--edge', action='store_true', help='pass to compute global egde count')
  parser.add_argument('-v', '--ver', action='store_true', help='pass to compute global vertex count')

  parser.add_argument('-k', action='store', type = int, help='The number of eigenvalues to compute. Max is 50')

  result = parser.parse_args()

  if result.all:
    for key in result.__dict__:
      if result.__dict__[key] == False:
        result.__dict__[key] = True

  compute_inv(result.__dict__)

if __name__ == '__main__':
  main()
