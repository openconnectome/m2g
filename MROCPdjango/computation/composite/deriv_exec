#!/usr/bin/python

# deriv_exec
# Created by Disa Mhembere on 2013-04-02.
# Email: dmhembe1@jhu.edu
# Copyright (c) 2013. All rights reserved.

# Script to provide CL interface to computing Largest Connected Component and
# Single Value Decomposition

import argparse
import os
import sys

import mrcap.svd as svd
import mrcap.lcc as lcc

from computation.utils.file_util import getPathLeaf, makeDirIfNone
from computation.utils.getBaseName import getBaseName

################################################################################
#                      LARGEST CONNECTED COMPONENT                             #
################################################################################
def compute_lcc(graph_fn, save_dir, lcc_fn=None):
  lcc_dir = os.path.join(save_dir, "LCC")
  LCC_FN_SFX = '_concomp'

  if lcc_fn is None:
    lcc_fn = os.path.join(lcc_dir, getBaseName(graph_fn) + LCC_FN_SFX + '.npy')
  else:
    if not os.path.splitext(lcc_fn) == '.npy':
      lcc_fn = os.path.splitext(lcc_fn)[0] + '.npy'

    lcc_fn = os.path.join(save_dir, lcc_fn)

  print "Computing lcc ..."
  lcc.process_single_brain (graph_fn, lcc_fn)
  return lcc_fn

################################################################################
#                        SINGLE VALUE DECOMPOSITION                            #
################################################################################
def compute_svd(lcc_fn, graph_fn, save_dir, svd_fn, dim=10):
  svd_dir = os.path.join(save_dir, "SVD")
  SVD_FN_SFX = '_embed'

  if lcc_fn is None: # No lcc given so we must compute it first
    lcc_fn = compute_lcc(graph_fn, save_dir)
  if svd_fn is None:
    svd_fn = os.path.join(svd_dir, getBaseName(graph_fn) + SVD_FN_SFX + '.npy')
  else:
    if not os.path.splitext(graph_fn) == '.npy':
      svd_fn = os.path.splitext(svd_fn)[0] + '.npy'

    svd_fn = os.path.join(svd_dir, svd_fn)

  svd.embed_graph(lcc_fn, graph_fn, svd_fn, dim=10)


def main():
  default_save_dir = os.path.join(os.path.dirname(__file__), 'mrdata', 'derivatives')

  parser = argparse.ArgumentParser(description='Run graph generation code based on size of graph')

  parser.add_argument('graph_fn', action='store', help='the full file name of the fiber streamline file (.mat only)')

  parser.add_argument('-V', '--svd_fn', action='store', help='the full file name you would like the resulting svd to have')
  parser.add_argument('-L', '--lcc_fn', action='store', help='the full file name of the connected component (.npy only)')

  parser.add_argument('-l', '--lcc', action='store_true', help='MUST pass to compute lcc')
  parser.add_argument('-v', '--svd', action='store_true', help='MUST pass to compute svd')
  parser.add_argument('-d', '--svd_dim', type=int, default=10, action='store', help='Level of svd embedding. Default is 10')

  parser.add_argument('-S', '--save_dir', action='store', help='the directory where the invariants \
                      are to stored (each invariant will create its own subdirectory within this). \
                      The default is %s' % default_save_dir)
  result = parser.parse_args()

  if not (result.lcc or result.svd):
    sys.stderr.write("At least one of '-l' or '-v' flag must be provided\n")
    sys.exit(-1)

  if result.save_dir is None:
    result.save_dir = default_save_dir

  if result.lcc:
    result.lcc_fn = compute_lcc(result.graph_fn, result.save_dir, result.lcc_fn)

  if result.svd:
    compute_svd(result.lcc_fn, result.graph_fn, result.save_dir, result.svd_fn, result.svd_dim)

if __name__ == '__main__':
  main()