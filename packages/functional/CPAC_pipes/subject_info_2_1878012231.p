(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(g6
g7
Ntp18
Rp19
(dp20
g11
g5
(g12
g7
Ntp21
Rp22
(dp23
g16
(dp24
g5
(cnipype.pipeline.engine
Node
p25
g7
Ntp26
Rp27
(dp28
S'input_source'
p29
(dp30
sS'_interface'
p31
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p32
g7
Ntp33
Rp34
(dp35
S'inputs'
p36
ctraits.traits
__newobj__
p37
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p38
tp39
Rp40
(dp41
S'ignore_exception'
p42
I00
sS'nan2zeros'
p43
ctraits.trait_base
_Undefined
p44
(tRp45
sS'op_string'
p46
S'-mas %s '
p47
sS'out_file'
p48
g45
sS'args'
p49
g45
sS'internal_datatype'
p50
g45
sS'__traits_version__'
p51
S'4.5.0'
p52
sS'terminal_output'
p53
S'stream'
p54
sS'environ'
p55
g5
(ctraits.trait_handlers
TraitDictObject
p56
c__builtin__
dict
p57
(dp58
S'FSLOUTPUTTYPE'
p59
S'NIFTI_GZ'
p60
stp61
Rp62
(dp63
S'name_items'
p64
S'environ_items'
p65
sS'name'
p66
g55
sbsS'in_file'
p67
g45
sS'output_type'
p68
g60
sS'output_datatype'
p69
g45
sS'operand_files'
p70
g45
sbsS'_output_type'
p71
g60
sS'_environ'
p72
NsS'_terminal_output'
p73
g54
sbsS'_result'
p74
Nsg66
S'overlap_GM_map_with_prior'
p75
sS'plugin_args'
p76
(dp77
sS'_hierarchy'
p78
S'GM'
p79
sS'itersource'
p80
NsS'run_without_submitting'
p81
I00
sS'synchronize'
p82
I00
sS'parameterization'
p83
NsS'iterables'
p84
NsS'_got_inputs'
p85
I00
sS'_id'
p86
g75
sS'config'
p87
NsS'needed_outputs'
p88
(lp89
sS'overwrite'
p90
NsS'base_dir'
p91
Nsb(dp92
sg5
(g25
g7
Ntp93
Rp94
(dp95
g29
(dp96
sg31
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p97
g7
Ntp98
Rp99
(dp100
g36
g37
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p101
tp102
Rp103
(dp104
S'rigid2D'
p105
g45
sg51
g52
sS'in_matrix_file'
p106
g45
sS'verbose'
p107
g45
sS'reference'
p108
g45
sS'padding_size'
p109
g45
sS'sinc_window'
p110
g45
sS'interp'
p111
S'nearestneighbour'
p112
sS'wmnorms'
p113
g45
sS'coarse_search'
p114
g45
sS'no_resample'
p115
g45
sS'sinc_width'
p116
g45
sS'in_weight'
p117
g45
sS'fieldmap'
p118
g45
sS'echospacing'
p119
g45
sS'ref_weight'
p120
g45
sS'apply_isoxfm'
p121
g45
sS'fieldmapmask'
p122
g45
sg67
g45
sS'bbrtype'
p123
g45
sS'no_clamp'
p124
g45
sS'force_scaling'
p125
g45
sS'pedir'
p126
g45
sg42
I00
sS'display_init'
p127
g45
sS'schedule'
p128
g45
sg49
g45
sS'uses_qform'
p129
g45
sS'wmcoords'
p130
g45
sg53
g54
sS'fine_search'
p131
g45
sS'angle_rep'
p132
g45
sS'no_search'
p133
g45
sS'apply_xfm'
p134
I01
sS'wm_seg'
p135
g45
sg48
g45
sS'bbrslope'
p136
g45
sS'datatype'
p137
g45
sS'save_log'
p138
g45
sS'dof'
p139
g45
sS'out_matrix_file'
p140
g45
sS'no_resample_blur'
p141
g45
sS'min_sampling'
p142
g45
sS'cost_func'
p143
g45
sS'cost'
p144
g45
sg55
g5
(g56
g57
(dp145
g59
g60
stp146
Rp147
(dp148
g64
S'environ_items'
p149
sg66
g55
sbsS'searchr_x'
p150
g45
sS'out_log'
p151
g45
sg68
g60
sS'searchr_z'
p152
g45
sS'bins'
p153
g45
sS'searchr_y'
p154
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'GM_prior_mni_to_t1'
p155
sg76
(dp156
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g155
sg87
Nsg88
(lp157
sg90
Nsg91
Nsb(dp158
sg5
(g25
g7
Ntp159
Rp160
(dp161
g29
(dp162
sg31
g5
(cnipype.interfaces.utility
IdentityInterface
p163
g7
Ntp164
Rp165
(dp166
g36
g37
(cnipype.interfaces.base
DynamicTraitedSpec
p167
tp168
Rp169
(dp170
S'standard2highres_rig'
p171
g45
sg51
g52
sS'standard2highres_init'
p172
g45
sS'tissue_prior'
p173
g45
sS'standard2highres_mat'
p174
g45
sS'brain'
p175
g45
sS'probability_map'
p176
g45
sS'threshold'
p177
g45
sbsS'_fields'
p178
(lp179
g173
ag177
ag175
ag176
ag172
ag174
ag171
asS'_mandatory_inputs'
p180
I01
sbsg74
Nsg66
S'inputspec'
p181
sg76
(dp182
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp183
sg90
Nsg91
Nsb(dp184
sg5
(g25
g7
Ntp185
Rp186
(dp187
g29
(dp188
sg31
g5
(g32
g7
Ntp189
Rp190
(dp191
g36
g37
(g38
tp192
Rp193
(dp194
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp195
g59
g60
stp196
Rp197
(dp198
g64
S'environ_items'
p199
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'GM_mask'
p200
sg76
(dp201
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp202
sg90
Nsg91
Nsb(dp203
sg5
(g25
g7
Ntp204
Rp205
(dp206
g29
(dp207
sg31
g5
(g163
g7
Ntp208
Rp209
(dp210
g36
g37
(g167
tp211
Rp212
(dp213
g51
g52
sS'segment_combo'
p214
g45
sS'segment_mask'
p215
g45
sS'tissueprior_mni2t1'
p216
g45
sS'segment_bin'
p217
g45
sbsg178
(lp218
g216
ag214
ag217
ag215
asg180
I01
sbsg74
Nsg66
S'outputspec'
p219
sg76
(dp220
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp221
sg90
Nsg91
Nsb(dp222
sg5
(g25
g7
Ntp223
Rp224
(dp225
g29
(dp226
sg31
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p227
g7
Ntp228
Rp229
(dp230
g36
g37
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p231
tp232
Rp233
(dp234
g42
I00
sg51
g52
sg46
g45
sS'out_data_type'
p235
g45
sg48
g45
sg49
g45
sS'in_file2'
p236
g45
sg53
g54
sg55
g5
(g56
g57
(dp237
g59
g60
stp238
Rp239
(dp240
g64
S'environ_items'
p241
sg66
g55
sbsg67
g45
sg68
g60
sS'suffix'
p242
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'binarize_threshold_GM'
p243
sg76
(dp244
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp245
sg90
Nsg91
Nsb(dp246
ssS'graph'
p247
(dp248
sS'succ'
p249
(dp250
g27
(dp251
g205
(dp252
S'connect'
p253
(lp254
(g48
g214
tp255
assg224
(dp256
g253
(lp257
(g48
g67
tp258
asssg94
(dp259
g27
(dp260
g253
(lp261
(g48
g70
tp262
assg186
(dp263
g253
(lp264
(g48
g70
tp265
assg205
(dp266
g253
(lp267
(g48
g216
tp268
asssg160
(dp269
g94
(dp270
g253
(lp271
(g173
g67
tp272
a(g175
g108
tp273
a(g174
g106
tp274
assg224
(dp275
g253
(lp276
((g177
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p277
(ttp278
g46
tp279
assg27
(dp280
g253
(lp281
(g176
g67
tp282
asssg186
(dp283
g205
(dp284
g253
(lp285
(g48
g215
tp286
asssg205
(dp287
sg224
(dp288
g205
(dp289
g253
(lp290
(g48
g217
tp291
assg186
(dp292
g253
(lp293
(g48
g67
tp294
assssS'edge'
p295
g250
sS'pred'
p296
(dp297
g27
(dp298
g160
g280
sg94
g260
ssg94
(dp299
g160
g270
ssg160
(dp300
sg186
(dp301
g94
g263
sg224
g292
ssg205
(dp302
g94
g266
sg186
g284
sg224
g289
sg27
g252
ssg224
(dp303
g27
g256
sg160
g275
sssS'adj'
p304
g250
sbsg66
g79
sg78
S'seg_preproc_0'
p305
sg86
g79
sg87
ccollections
OrderedDict
p306
((lp307
(lp308
S'logging'
p309
ag306
((lp310
(lp311
S'__name__'
p312
ag309
aa(lp313
S'workflow_level'
p314
aS'INFO'
p315
aa(lp316
S'filemanip_level'
p317
aS'INFO'
p318
aa(lp319
S'interface_level'
p320
aS'INFO'
p321
aa(lp322
S'log_to_file'
p323
aS'True'
p324
aa(lp325
S'log_directory'
p326
aS'/mnt/ssd1/data/outputs/CPAC/CPAC_test1/outputs/logs/2_1878012231'
p327
aa(lp328
S'log_size'
p329
aS'16384000'
p330
aa(lp331
S'log_rotate'
p332
aS'4'
p333
aatp334
Rp335
aa(lp336
S'execution'
p337
ag306
((lp338
(lp339
g312
ag337
aa(lp340
S'create_report'
p341
aS'true'
p342
aa(lp343
S'crashdump_dir'
p344
aS'/home/eric/Documents/m2g/packages/functional/CPAC_pipes'
p345
aa(lp346
S'display_variable'
p347
aS':1'
p348
aa(lp349
S'hash_method'
p350
aS'timestamp'
p351
aa(lp352
S'job_finished_timeout'
p353
aS'5'
p354
aa(lp355
S'keep_inputs'
p356
aS'false'
p357
aa(lp358
S'local_hash_check'
p359
aS'true'
p360
aa(lp361
S'matplotlib_backend'
p362
aS'Agg'
p363
aa(lp364
S'plugin'
p365
aS'Linear'
p366
aa(lp367
S'remove_node_directories'
p368
aS'false'
p369
aa(lp370
S'remove_unnecessary_outputs'
p371
aS'true'
p372
aa(lp373
S'single_thread_matlab'
p374
aS'true'
p375
aa(lp376
S'stop_on_first_crash'
p377
aS'false'
p378
aa(lp379
S'stop_on_first_rerun'
p380
aS'false'
p381
aa(lp382
S'use_relative_paths'
p383
aS'false'
p384
aa(lp385
S'stop_on_unknown_version'
p386
aS'false'
p387
aa(lp388
S'write_provenance'
p389
aS'false'
p390
aa(lp391
S'parameterize_dirs'
p392
aS'true'
p393
aatp394
Rp395
aa(lp396
S'check'
p397
ag306
((lp398
(lp399
g312
ag397
aa(lp400
S'interval'
p401
aS'1209600'
p402
aatp403
Rp404
aatp405
Rp406
sg91
Nsb(dp407
sg5
(g25
g7
Ntp408
Rp409
(dp410
g29
(dp411
sg31
g5
(g163
g7
Ntp412
Rp413
(dp414
g36
g37
(g167
tp415
Rp416
(dp417
g171
g45
sg51
g52
sg172
g45
sg175
g45
sS'PRIOR_GRAY'
p418
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p419
sg174
g45
sS'PRIOR_CSF'
p420
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p421
sS'PRIOR_WHITE'
p422
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p423
sbsg178
(lp424
g175
ag172
ag174
ag171
ag420
ag418
ag422
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp425
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp426
sg90
Nsg91
Nsb(dp427
sg5
(g25
g7
Ntp428
Rp429
(dp430
g29
(dp431
sg31
g5
(g163
g7
Ntp432
Rp433
(dp434
g36
g37
(g167
tp435
Rp436
(dp437
S'partial_volume_files'
p438
g45
sg51
g52
sS'gm_combo'
p439
g45
sS'mixeltype'
p440
g45
sS'csf_mni2t1'
p441
g45
sS'wm_bin'
p442
g45
sS'csf_bin'
p443
g45
sS'probability_maps'
p444
g45
sS'wm_mni2t1'
p445
g45
sS'csf_combo'
p446
g45
sS'wm_combo'
p447
g45
sS'wm_mask'
p448
g45
sS'gm_mask'
p449
g45
sS'csf_mask'
p450
g45
sS'gm_bin'
p451
g45
sS'partial_volume_map'
p452
g45
sS'gm_mni2t1'
p453
g45
sbsg178
(lp454
g441
ag446
ag443
ag450
ag453
ag439
ag451
ag449
ag445
ag447
ag442
ag444
ag440
ag452
ag438
ag448
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp455
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp456
sg90
Nsg91
Nsb(dp457
sg5
(g25
g7
Ntp458
Rp459
(dp460
g29
(dp461
sg31
g5
(g163
g7
Ntp462
Rp463
(dp464
g36
g37
(g167
tp465
Rp466
(dp467
g51
g52
sS'csf_threshold'
p468
(lp469
F0.96
asbsg178
(lp470
g468
asg180
I01
sbsg74
Nsg66
g468
sg76
(dp471
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g468
(lp472
F0.96
atp473
sg85
I00
sg86
g468
sg87
Nsg88
(lp474
sg90
Nsg91
Nsb(dp475
sg5
(g6
g7
Ntp476
Rp477
(dp478
g11
g5
(g12
g7
Ntp479
Rp480
(dp481
g16
(dp482
g5
(g25
g7
Ntp483
Rp484
(dp485
g29
(dp486
sg31
g5
(g227
g7
Ntp487
Rp488
(dp489
g36
g37
(g231
tp490
Rp491
(dp492
g42
I00
sg51
g52
sg46
g45
sg235
g45
sg48
g45
sg49
g45
sg236
g45
sg53
g54
sg55
g5
(g56
g57
(dp493
g59
g60
stp494
Rp495
(dp496
g64
S'environ_items'
p497
sg66
g55
sbsg67
g45
sg68
g60
sg242
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'binarize_threshold_WM'
p498
sg76
(dp499
sg78
S'WM'
p500
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g498
sg87
Nsg88
(lp501
sg90
Nsg91
Nsb(dp502
sg5
(g25
g7
Ntp503
Rp504
(dp505
g29
(dp506
sg31
g5
(g32
g7
Ntp507
Rp508
(dp509
g36
g37
(g38
tp510
Rp511
(dp512
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp513
g59
g60
stp514
Rp515
(dp516
g64
S'environ_items'
p517
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'overlap_WM_map_with_prior'
p518
sg76
(dp519
sg78
g500
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g518
sg87
Nsg88
(lp520
sg90
Nsg91
Nsb(dp521
sg5
(g25
g7
Ntp522
Rp523
(dp524
g29
(dp525
sg31
g5
(g163
g7
Ntp526
Rp527
(dp528
g36
g37
(g167
tp529
Rp530
(dp531
g51
g52
sg214
g45
sg215
g45
sg216
g45
sg217
g45
sbsg178
(lp532
g216
ag214
ag217
ag215
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp533
sg78
g500
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp534
sg90
Nsg91
Nsb(dp535
sg5
(g25
g7
Ntp536
Rp537
(dp538
g29
(dp539
sg31
g5
(g32
g7
Ntp540
Rp541
(dp542
g36
g37
(g38
tp543
Rp544
(dp545
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp546
g59
g60
stp547
Rp548
(dp549
g64
S'environ_items'
p550
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'WM_mask'
p551
sg76
(dp552
sg78
g500
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g551
sg87
Nsg88
(lp553
sg90
Nsg91
Nsb(dp554
sg5
(g25
g7
Ntp555
Rp556
(dp557
g29
(dp558
sg31
g5
(g163
g7
Ntp559
Rp560
(dp561
g36
g37
(g167
tp562
Rp563
(dp564
g171
g45
sg51
g52
sg172
g45
sg173
g45
sg174
g45
sg175
g45
sg176
g45
sg177
g45
sbsg178
(lp565
g173
ag177
ag175
ag176
ag172
ag174
ag171
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp566
sg78
g500
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp567
sg90
Nsg91
Nsb(dp568
sg5
(g25
g7
Ntp569
Rp570
(dp571
g29
(dp572
sg31
g5
(g97
g7
Ntp573
Rp574
(dp575
g36
g37
(g101
tp576
Rp577
(dp578
g105
g45
sg51
g52
sg106
g45
sg107
g45
sg108
g45
sg109
g45
sg110
g45
sg111
g112
sg113
g45
sg114
g45
sg115
g45
sg116
g45
sg117
g45
sg118
g45
sg119
g45
sg120
g45
sg121
g45
sg122
g45
sg67
g45
sg123
g45
sg124
g45
sg125
g45
sg126
g45
sg42
I00
sg127
g45
sg128
g45
sg49
g45
sg129
g45
sg130
g45
sg53
g54
sg131
g45
sg132
g45
sg133
g45
sg134
I01
sg135
g45
sg48
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg142
g45
sg143
g45
sg144
g45
sg55
g5
(g56
g57
(dp579
g59
g60
stp580
Rp581
(dp582
g64
S'environ_items'
p583
sg66
g55
sbsg150
g45
sg151
g45
sg68
g60
sg152
g45
sg153
g45
sg154
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'WM_prior_mni_to_t1'
p584
sg76
(dp585
sg78
g500
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g584
sg87
Nsg88
(lp586
sg90
Nsg91
Nsb(dp587
ssg247
(dp588
sg249
(dp589
g484
(dp590
g537
(dp591
g253
(lp592
(g48
g67
tp593
assg523
(dp594
g253
(lp595
(g48
g217
tp596
asssg504
(dp597
g484
(dp598
g253
(lp599
(g48
g67
tp600
assg523
(dp601
g253
(lp602
(g48
g214
tp603
asssg523
(dp604
sg537
(dp605
g523
(dp606
g253
(lp607
(g48
g215
tp608
asssg556
(dp609
g484
(dp610
g253
(lp611
((g177
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p612
(ttp613
g46
tp614
assg570
(dp615
g253
(lp616
(g173
g67
tp617
a(g175
g108
tp618
a(g174
g106
tp619
assg504
(dp620
g253
(lp621
(g176
g67
tp622
asssg570
(dp623
g537
(dp624
g253
(lp625
(g48
g70
tp626
assg504
(dp627
g253
(lp628
(g48
g70
tp629
assg523
(dp630
g253
(lp631
(g48
g216
tp632
assssg295
g589
sg296
(dp633
g484
(dp634
g504
g598
sg556
g610
ssg504
(dp635
g556
g620
sg570
g627
ssg523
(dp636
g537
g606
sg484
g594
sg570
g630
sg504
g601
ssg537
(dp637
g484
g591
sg570
g624
ssg556
(dp638
sg570
(dp639
g556
g615
sssg304
g589
sbsg66
g500
sg78
g305
sg86
g500
sg87
g306
((lp640
(lp641
g309
ag306
((lp642
(lp643
g312
ag309
aa(lp644
g314
ag315
aa(lp645
g317
ag318
aa(lp646
g320
ag321
aa(lp647
g323
ag324
aa(lp648
g326
ag327
aa(lp649
g329
ag330
aa(lp650
g332
ag333
aatp651
Rp652
aa(lp653
g337
ag306
((lp654
(lp655
g312
ag337
aa(lp656
g341
ag342
aa(lp657
g344
ag345
aa(lp658
g347
ag348
aa(lp659
g350
ag351
aa(lp660
g353
ag354
aa(lp661
g356
ag357
aa(lp662
g359
ag360
aa(lp663
g362
ag363
aa(lp664
g365
ag366
aa(lp665
g368
ag369
aa(lp666
g371
ag372
aa(lp667
g374
ag375
aa(lp668
g377
ag378
aa(lp669
g380
ag381
aa(lp670
g383
ag384
aa(lp671
g386
ag387
aa(lp672
g389
ag390
aa(lp673
g392
ag393
aatp674
Rp675
aa(lp676
g397
ag306
((lp677
(lp678
g312
ag397
aa(lp679
g401
ag402
aatp680
Rp681
aatp682
Rp683
sg91
Nsb(dp684
sg5
(g25
g7
Ntp685
Rp686
(dp687
g29
(dp688
sg31
g5
(cnipype.interfaces.fsl.preprocess
FAST
p689
g7
Ntp690
Rp691
(dp692
g36
g37
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p693
tp694
Rp695
(dp696
S'number_classes'
p697
g45
sS'out_basename'
p698
S'segment'
p699
sS'hyper'
p700
g45
sg107
g45
sS'init_seg_smooth'
p701
g45
sS'init_transform'
p702
g45
sS'no_pve'
p703
g45
sS'output_biascorrected'
p704
g45
sS'mixel_smooth'
p705
g45
sS'segments'
p706
I01
sS'iters_afterbias'
p707
g45
sS'bias_lowpass'
p708
g45
sS'other_priors'
p709
g45
sg51
g52
sg42
I00
sS'img_type'
p710
I1
sg49
g45
sg444
I01
sS'manual_seg'
p711
g45
sg53
g54
sS'output_biasfield'
p712
g45
sS'no_bias'
p713
g45
sS'use_priors'
p714
g45
sS'in_files'
p715
g45
sS'segment_iters'
p716
g45
sg55
g5
(g56
g57
(dp717
g59
g60
stp718
Rp719
(dp720
g64
S'environ_items'
p721
sg66
g55
sbsg68
g60
sS'bias_iters'
p722
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
g699
sg76
(dp723
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g699
sg87
Nsg88
(lp724
sg90
Nsg91
Nsb(dp725
sg5
(g25
g7
Ntp726
Rp727
(dp728
g29
(dp729
sg31
g5
(g163
g7
Ntp730
Rp731
(dp732
g36
g37
(g167
tp733
Rp734
(dp735
g51
g52
sS'wm_threshold'
p736
(lp737
F0.96
asbsg178
(lp738
g736
asg180
I01
sbsg74
Nsg66
g736
sg76
(dp739
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g736
(lp740
F0.96
atp741
sg85
I00
sg86
g736
sg87
Nsg88
(lp742
sg90
Nsg91
Nsb(dp743
sg5
(g25
g7
Ntp744
Rp745
(dp746
g29
(dp747
sg31
g5
(g163
g7
Ntp748
Rp749
(dp750
g36
g37
(g167
tp751
Rp752
(dp753
g51
g52
sS'gm_threshold'
p754
(lp755
F0.7
asbsg178
(lp756
g754
asg180
I01
sbsg74
Nsg66
g754
sg76
(dp757
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g754
(lp758
F0.7
atp759
sg85
I00
sg86
g754
sg87
Nsg88
(lp760
sg90
Nsg91
Nsb(dp761
sg5
(g6
g7
Ntp762
Rp763
(dp764
g11
g5
(g12
g7
Ntp765
Rp766
(dp767
g16
(dp768
g5
(g25
g7
Ntp769
Rp770
(dp771
g29
(dp772
sg31
g5
(g227
g7
Ntp773
Rp774
(dp775
g36
g37
(g231
tp776
Rp777
(dp778
g42
I00
sg51
g52
sg46
g45
sg235
g45
sg48
g45
sg49
g45
sg236
g45
sg53
g54
sg55
g5
(g56
g57
(dp779
g59
g60
stp780
Rp781
(dp782
g64
S'environ_items'
p783
sg66
g55
sbsg67
g45
sg68
g60
sg242
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'binarize_threshold_CSF'
p784
sg76
(dp785
sg78
S'CSF'
p786
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g784
sg87
Nsg88
(lp787
sg90
Nsg91
Nsb(dp788
sg5
(g25
g7
Ntp789
Rp790
(dp791
g29
(dp792
sg31
g5
(g97
g7
Ntp793
Rp794
(dp795
g36
g37
(g101
tp796
Rp797
(dp798
g105
g45
sg51
g52
sg106
g45
sg107
g45
sg108
g45
sg109
g45
sg110
g45
sg111
g112
sg113
g45
sg114
g45
sg115
g45
sg116
g45
sg117
g45
sg118
g45
sg119
g45
sg120
g45
sg121
g45
sg122
g45
sg67
g45
sg123
g45
sg124
g45
sg125
g45
sg126
g45
sg42
I00
sg127
g45
sg128
g45
sg49
g45
sg129
g45
sg130
g45
sg53
g54
sg131
g45
sg132
g45
sg133
g45
sg134
I01
sg135
g45
sg48
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg142
g45
sg143
g45
sg144
g45
sg55
g5
(g56
g57
(dp799
g59
g60
stp800
Rp801
(dp802
g64
S'environ_items'
p803
sg66
g55
sbsg150
g45
sg151
g45
sg68
g60
sg152
g45
sg153
g45
sg154
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'CSF_prior_mni_to_t1'
p804
sg76
(dp805
sg78
g786
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g804
sg87
Nsg88
(lp806
sg90
Nsg91
Nsb(dp807
sg5
(g25
g7
Ntp808
Rp809
(dp810
g29
(dp811
sg31
g5
(g163
g7
Ntp812
Rp813
(dp814
g36
g37
(g167
tp815
Rp816
(dp817
g171
g45
sg51
g52
sg172
g45
sg173
g45
sg174
g45
sg175
g45
sg176
g45
sg177
g45
sbsg178
(lp818
g173
ag177
ag175
ag176
ag172
ag174
ag171
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp819
sg78
g786
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp820
sg90
Nsg91
Nsb(dp821
sg5
(g25
g7
Ntp822
Rp823
(dp824
g29
(dp825
sg31
g5
(g163
g7
Ntp826
Rp827
(dp828
g36
g37
(g167
tp829
Rp830
(dp831
g51
g52
sg214
g45
sg215
g45
sg216
g45
sg217
g45
sbsg178
(lp832
g216
ag214
ag217
ag215
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp833
sg78
g786
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp834
sg90
Nsg91
Nsb(dp835
sg5
(g25
g7
Ntp836
Rp837
(dp838
g29
(dp839
sg31
g5
(g32
g7
Ntp840
Rp841
(dp842
g36
g37
(g38
tp843
Rp844
(dp845
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp846
g59
g60
stp847
Rp848
(dp849
g64
S'environ_items'
p850
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'CSF_mask'
p851
sg76
(dp852
sg78
g786
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g851
sg87
Nsg88
(lp853
sg90
Nsg91
Nsb(dp854
sg5
(g25
g7
Ntp855
Rp856
(dp857
g29
(dp858
sg31
g5
(g32
g7
Ntp859
Rp860
(dp861
g36
g37
(g38
tp862
Rp863
(dp864
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp865
g59
g60
stp866
Rp867
(dp868
g64
S'environ_items'
p869
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'overlap_CSF_map_with_prior'
p870
sg76
(dp871
sg78
g786
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g870
sg87
Nsg88
(lp872
sg90
Nsg91
Nsb(dp873
ssg247
(dp874
sg249
(dp875
g770
(dp876
g823
(dp877
g253
(lp878
(g48
g217
tp879
assg837
(dp880
g253
(lp881
(g48
g67
tp882
asssg790
(dp883
g823
(dp884
g253
(lp885
(g48
g216
tp886
assg856
(dp887
g253
(lp888
(g48
g70
tp889
assg837
(dp890
g253
(lp891
(g48
g70
tp892
asssg809
(dp893
g790
(dp894
g253
(lp895
(g173
g67
tp896
a(g175
g108
tp897
a(g174
g106
tp898
assg856
(dp899
g253
(lp900
(g176
g67
tp901
assg770
(dp902
g253
(lp903
((g177
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p904
(ttp905
g46
tp906
asssg823
(dp907
sg837
(dp908
g823
(dp909
g253
(lp910
(g48
g215
tp911
asssg856
(dp912
g770
(dp913
g253
(lp914
(g48
g67
tp915
assg823
(dp916
g253
(lp917
(g48
g214
tp918
assssg295
g875
sg296
(dp919
g770
(dp920
g856
g913
sg809
g902
ssg790
(dp921
g809
g894
ssg809
(dp922
sg823
(dp923
g790
g884
sg856
g916
sg837
g909
sg770
g877
ssg837
(dp924
g770
g880
sg790
g890
ssg856
(dp925
g790
g887
sg809
g899
sssg304
g875
sbsg66
g786
sg78
g305
sg86
g786
sg87
g306
((lp926
(lp927
g309
ag306
((lp928
(lp929
g312
ag309
aa(lp930
g314
ag315
aa(lp931
g317
ag318
aa(lp932
g320
ag321
aa(lp933
g323
ag324
aa(lp934
g326
ag327
aa(lp935
g329
ag330
aa(lp936
g332
ag333
aatp937
Rp938
aa(lp939
g337
ag306
((lp940
(lp941
g312
ag337
aa(lp942
g341
ag342
aa(lp943
g344
ag345
aa(lp944
g347
ag348
aa(lp945
g350
ag351
aa(lp946
g353
ag354
aa(lp947
g356
ag357
aa(lp948
g359
ag360
aa(lp949
g362
ag363
aa(lp950
g365
ag366
aa(lp951
g368
ag369
aa(lp952
g371
ag372
aa(lp953
g374
ag375
aa(lp954
g377
ag378
aa(lp955
g380
ag381
aa(lp956
g383
ag384
aa(lp957
g386
ag387
aa(lp958
g389
ag390
aa(lp959
g392
ag393
aatp960
Rp961
aa(lp962
g397
ag306
((lp963
(lp964
g312
ag397
aa(lp965
g401
ag402
aatp966
Rp967
aatp968
Rp969
sg91
Nsb(dp970
ssg247
(dp971
sg249
(dp972
g19
(dp973
g429
(dp974
g253
(lp975
(S'outputspec.tissueprior_mni2t1'
p976
g453
tp977
a(S'outputspec.segment_combo'
p978
g439
tp979
a(S'outputspec.segment_bin'
p980
g451
tp981
a(S'outputspec.segment_mask'
p982
g449
tp983
asssg409
(dp984
g19
(dp985
g253
(lp986
(g175
S'inputspec.brain'
p987
tp988
a(g418
S'inputspec.tissue_prior'
p989
tp990
a(g174
S'inputspec.standard2highres_mat'
p991
tp992
assg477
(dp993
g253
(lp994
(g175
g987
tp995
a(g422
g989
tp996
a(g174
g991
tp997
assg686
(dp998
g253
(lp999
(g175
g715
tp1000
assg763
(dp1001
g253
(lp1002
(g175
g987
tp1003
a(g420
g989
tp1004
a(g174
g991
tp1005
asssg429
(dp1006
sg459
(dp1007
g763
(dp1008
g253
(lp1009
(g468
S'inputspec.threshold'
p1010
tp1011
asssg477
(dp1012
g429
(dp1013
g253
(lp1014
(g976
g445
tp1015
a(g978
g447
tp1016
a(g980
g442
tp1017
a(g982
g448
tp1018
asssg686
(dp1019
g429
(dp1020
g253
(lp1021
(g444
g444
tp1022
a(g440
g440
tp1023
a(g438
g438
tp1024
a(g452
g452
tp1025
assg19
(dp1026
g253
(lp1027
((g444
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1028
(ttp1029
S'inputspec.probability_map'
p1030
tp1031
assg763
(dp1032
g253
(lp1033
((g444
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1034
(ttp1035
g1030
tp1036
assg477
(dp1037
g253
(lp1038
((g444
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1039
(ttp1040
g1030
tp1041
asssg727
(dp1042
g477
(dp1043
g253
(lp1044
(g736
g1010
tp1045
asssg745
(dp1046
g19
(dp1047
g253
(lp1048
(g754
g1010
tp1049
asssg763
(dp1050
g429
(dp1051
g253
(lp1052
(g976
g441
tp1053
a(g978
g446
tp1054
a(g980
g443
tp1055
a(g982
g450
tp1056
assssg295
g972
sg296
(dp1057
g19
(dp1058
g745
g1047
sg409
g985
sg686
g1026
ssg409
(dp1059
sg429
(dp1060
g19
g974
sg477
g1013
sg686
g1020
sg763
g1051
ssg459
(dp1061
sg477
(dp1062
g727
g1043
sg409
g993
sg686
g1037
ssg686
(dp1063
g409
g998
ssg727
(dp1064
sg745
(dp1065
sg763
(dp1066
g409
g1001
sg459
g1008
sg686
g1032
sssg304
g972
sbsg66
g305
sg78
S'resting_preproc_2_1878012231'
p1067
sg86
g305
sg87
g306
((lp1068
(lp1069
g309
ag306
((lp1070
(lp1071
g312
ag309
aa(lp1072
g314
ag315
aa(lp1073
g317
ag318
aa(lp1074
g320
ag321
aa(lp1075
g323
ag324
aa(lp1076
g326
ag327
aa(lp1077
g329
ag330
aa(lp1078
g332
ag333
aatp1079
Rp1080
aa(lp1081
g337
ag306
((lp1082
(lp1083
g312
ag337
aa(lp1084
g341
ag342
aa(lp1085
g344
ag345
aa(lp1086
g347
ag348
aa(lp1087
g350
ag351
aa(lp1088
g353
ag354
aa(lp1089
g356
ag357
aa(lp1090
g359
ag360
aa(lp1091
g362
ag363
aa(lp1092
g365
ag366
aa(lp1093
g368
ag369
aa(lp1094
g371
ag372
aa(lp1095
g374
ag375
aa(lp1096
g377
ag378
aa(lp1097
g380
ag381
aa(lp1098
g383
ag384
aa(lp1099
g386
ag387
aa(lp1100
g389
ag390
aa(lp1101
g392
ag393
aatp1102
Rp1103
aa(lp1104
g397
ag306
((lp1105
(lp1106
g312
ag397
aa(lp1107
g401
ag402
aatp1108
Rp1109
aatp1110
Rp1111
sg91
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g25
g7
Ntp1122
Rp1123
(dp1124
g29
(dp1125
sg31
g5
(g163
g7
Ntp1126
Rp1127
(dp1128
g36
g37
(g167
tp1129
Rp1130
(dp1131
g51
g52
sS'output_brain'
p1132
g45
sS'nonlinear_xfm'
p1133
g45
sS'invlinear_xfm'
p1134
g45
sS'linear_xfm'
p1135
g45
sbsg178
(lp1136
g1132
ag1135
ag1134
ag1133
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp1137
sg78
S'anat_mni_fnirt_register_0'
p1138
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp1139
sg90
Nsg91
Nsb(dp1140
sg5
(g25
g7
Ntp1141
Rp1142
(dp1143
g29
(dp1144
sg31
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1145
g7
Ntp1146
Rp1147
(dp1148
g36
g37
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1149
tp1150
Rp1151
(dp1152
g51
g52
sS'derive_from_ref'
p1153
g45
sS'in_intensitymap_file'
p1154
g45
sS'modulatedref_file'
p1155
g45
sS'refmask_val'
p1156
g45
sS'hessian_precision'
p1157
g45
sS'in_fwhm'
p1158
g45
sS'skip_implicit_in_masking'
p1159
g45
sS'inmask_file'
p1160
g45
sS'refmask_file'
p1161
g45
sS'inwarp_file'
p1162
g45
sS'skip_lambda_ssq'
p1163
g45
sS'intensity_mapping_model'
p1164
g45
sS'affine_file'
p1165
g45
sS'apply_inmask'
p1166
g45
sS'spline_order'
p1167
g45
sS'apply_refmask'
p1168
g45
sS'subsampling_scheme'
p1169
g45
sg67
g45
sS'warped_file'
p1170
g45
sS'skip_refmask'
p1171
g45
sg42
I00
sS'ref_fwhm'
p1172
g45
sS'inmask_val'
p1173
g45
sS'config_file'
p1174
g45
sS'field_file'
p1175
g45
sg49
g45
sS'apply_intensity_mapping'
p1176
g45
sS'regularization_lambda'
p1177
g45
sg53
g54
sS'regularization_model'
p1178
g45
sS'jacobian_range'
p1179
g45
sS'out_intensitymap_file'
p1180
g45
sS'skip_implicit_ref_masking'
p1181
g45
sS'ref_file'
p1182
g45
sS'skip_inmask'
p1183
g45
sS'fieldcoeff_file'
p1184
I01
sS'warp_resolution'
p1185
g45
sS'jacobian_file'
p1186
I01
sg55
g5
(g56
g57
(dp1187
g59
g60
stp1188
Rp1189
(dp1190
g64
S'environ_items'
p1191
sg66
g55
sbsS'bias_regularization_lambda'
p1192
g45
sg68
g60
sS'skip_intensity_mapping'
p1193
g45
sS'log_file'
p1194
g45
sS'biasfield_resolution'
p1195
g45
sS'intensity_mapping_order'
p1196
g45
sS'max_nonlin_iter'
p1197
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'nonlinear_reg_1'
p1198
sg76
(dp1199
sg78
g1138
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1198
sg87
Nsg88
(lp1200
sg90
Nsg91
Nsb(dp1201
sg5
(g25
g7
Ntp1202
Rp1203
(dp1204
g29
(dp1205
sg31
g5
(g97
g7
Ntp1206
Rp1207
(dp1208
g36
g37
(g101
tp1209
Rp1210
(dp1211
g105
g45
sg51
g52
sg106
g45
sg107
g45
sg108
g45
sg109
g45
sg110
g45
sg111
g45
sg113
g45
sg114
g45
sg115
g45
sg116
g45
sg117
g45
sg118
g45
sg119
g45
sg120
g45
sg121
g45
sg122
g45
sg67
g45
sg123
g45
sg124
g45
sg125
g45
sg126
g45
sg42
I00
sg127
g45
sg128
g45
sg49
g45
sg129
g45
sg130
g45
sg53
g54
sg131
g45
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg48
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg142
g45
sg143
g45
sg144
S'corratio'
p1212
sg55
g5
(g56
g57
(dp1213
g59
g60
stp1214
Rp1215
(dp1216
g64
S'environ_items'
p1217
sg66
g55
sbsg150
g45
sg151
g45
sg68
g60
sg152
g45
sg153
g45
sg154
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'linear_reg_0'
p1218
sg76
(dp1219
sg78
g1138
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1218
sg87
Nsg88
(lp1220
sg90
Nsg91
Nsb(dp1221
sg5
(g25
g7
Ntp1222
Rp1223
(dp1224
g29
(dp1225
sg31
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1226
g7
Ntp1227
Rp1228
(dp1229
g36
g37
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1230
tp1231
Rp1232
(dp1233
g42
I00
sS'supersample'
p1234
g45
sg67
g45
sS'superlevel'
p1235
g45
sg48
g45
sg137
g45
sg49
g45
sg111
g45
sg1175
g45
sg1182
g45
sg53
g54
sg55
g5
(g56
g57
(dp1236
g59
g60
stp1237
Rp1238
(dp1239
g64
S'environ_items'
p1240
sg66
g55
sbsS'premat'
p1241
g45
sS'mask_file'
p1242
g45
sg68
g60
sS'relwarp'
p1243
g45
sS'abswarp'
p1244
g45
sg51
g52
sS'postmat'
p1245
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'brain_warp'
p1246
sg76
(dp1247
sg78
g1138
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1246
sg87
Nsg88
(lp1248
sg90
Nsg91
Nsb(dp1249
sg5
(g25
g7
Ntp1250
Rp1251
(dp1252
g29
(dp1253
sg31
g5
(g163
g7
Ntp1254
Rp1255
(dp1256
g36
g37
(g167
tp1257
Rp1258
(dp1259
S'fnirt_config'
p1260
S'T1_2_MNI152_2mm'
p1261
sg51
g52
sS'input_brain'
p1262
g45
sS'reference_skull'
p1263
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1264
sS'reference_brain'
p1265
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1266
sS'input_skull'
p1267
g45
sbsg178
(lp1268
g1262
ag1267
ag1265
ag1263
ag1260
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp1269
sg78
g1138
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp1270
sg90
Nsg91
Nsb(dp1271
sg5
(g25
g7
Ntp1272
Rp1273
(dp1274
g29
(dp1275
sg31
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1276
g7
Ntp1277
Rp1278
(dp1279
g36
g37
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1280
tp1281
Rp1282
(dp1283
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg236
g45
sS'fix_scale_skew'
p1284
g45
sS'invert_xfm'
p1285
I01
sg53
g54
sS'concat_xfm'
p1286
g45
sg67
g45
sg68
g60
sg55
g5
(g56
g57
(dp1287
g59
g60
stp1288
Rp1289
(dp1290
g64
S'environ_items'
p1291
sg66
g55
sbsbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'inv_linear_reg0_xfm'
p1292
sg76
(dp1293
sg78
g1138
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1292
sg87
Nsg88
(lp1294
sg90
Nsg91
Nsb(dp1295
ssg247
(dp1296
sg249
(dp1297
g1123
(dp1298
sg1142
(dp1299
g1123
(dp1300
g253
(lp1301
(g1184
g1133
tp1302
assg1223
(dp1303
g253
(lp1304
(g1184
g1175
tp1305
asssg1203
(dp1306
g1123
(dp1307
g253
(lp1308
(g140
g1135
tp1309
assg1142
(dp1310
g253
(lp1311
(g140
g1165
tp1312
assg1273
(dp1313
g253
(lp1314
(g140
g67
tp1315
asssg1223
(dp1316
g1123
(dp1317
g253
(lp1318
(g48
g1132
tp1319
asssg1251
(dp1320
g1203
(dp1321
g253
(lp1322
(g1262
g67
tp1323
a(g1265
g108
tp1324
assg1142
(dp1325
g253
(lp1326
(g1267
g67
tp1327
a(g1263
g1182
tp1328
a(g1260
g1174
tp1329
assg1223
(dp1330
g253
(lp1331
(g1262
g67
tp1332
a(g1265
g1182
tp1333
asssg1273
(dp1334
g1123
(dp1335
g253
(lp1336
(g48
g1134
tp1337
assssg295
g1297
sg296
(dp1338
g1123
(dp1339
g1223
g1317
sg1203
g1307
sg1142
g1300
sg1273
g1335
ssg1142
(dp1340
g1251
g1325
sg1203
g1310
ssg1203
(dp1341
g1251
g1321
ssg1223
(dp1342
g1251
g1330
sg1142
g1303
ssg1251
(dp1343
sg1273
(dp1344
g1203
g1313
sssg304
g1297
sbsg66
g1138
sg78
g1067
sg86
g1138
sg87
g306
((lp1345
(lp1346
g309
ag306
((lp1347
(lp1348
g312
ag309
aa(lp1349
g314
ag315
aa(lp1350
g317
ag318
aa(lp1351
g320
ag321
aa(lp1352
g323
ag324
aa(lp1353
g326
ag327
aa(lp1354
g329
ag330
aa(lp1355
g332
ag333
aatp1356
Rp1357
aa(lp1358
g337
ag306
((lp1359
(lp1360
g312
ag337
aa(lp1361
g341
ag342
aa(lp1362
g344
ag345
aa(lp1363
g347
ag348
aa(lp1364
g350
ag351
aa(lp1365
g353
ag354
aa(lp1366
g356
ag357
aa(lp1367
g359
ag360
aa(lp1368
g362
ag363
aa(lp1369
g365
ag366
aa(lp1370
g368
ag369
aa(lp1371
g371
ag372
aa(lp1372
g374
ag375
aa(lp1373
g377
ag378
aa(lp1374
g380
ag381
aa(lp1375
g383
ag384
aa(lp1376
g386
ag387
aa(lp1377
g389
ag390
aa(lp1378
g392
ag393
aatp1379
Rp1380
aa(lp1381
g397
ag306
((lp1382
(lp1383
g312
ag397
aa(lp1384
g401
ag402
aatp1385
Rp1386
aatp1387
Rp1388
sg91
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g25
g7
Ntp1399
Rp1400
(dp1401
g29
(dp1402
sg31
g5
(cnipype.interfaces.utility
Function
p1403
g7
Ntp1404
Rp1405
(dp1406
S'_input_names'
p1407
(lp1408
S'file_'
p1409
asg36
g37
(cnipype.interfaces.utility
FunctionInputSpec
p1410
tp1411
Rp1412
(dp1413
g42
I00
sS'function_str'
p1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1415
sg1409
g45
sg51
g52
sbsS'_out'
p1416
(dp1417
S'new_fname'
p1418
NssS'_output_names'
p1419
(lp1420
g1418
asS'imports'
p1421
Nsbsg74
Nsg81
I00
sg76
(dp1422
sg83
Nsg80
Nsg90
Nsg66
S'resample_o'
p1423
sg78
S'montage_mfi_0'
p1424
sg82
I00
sg84
Nsg85
I00
sg86
g1423
sg87
Nsg88
(lp1425
sg91
Nsb(dp1426
sg5
(g25
g7
Ntp1427
Rp1428
(dp1429
g29
(dp1430
sg31
g5
(g163
g7
Ntp1431
Rp1432
(dp1433
g36
g37
(g167
tp1434
Rp1435
(dp1436
g51
g52
sS'underlay'
p1437
g45
sS'overlay'
p1438
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1439
sbsg178
(lp1440
g1437
ag1438
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp1441
sg78
g1424
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp1442
sg90
Nsg91
Nsb(dp1443
sg5
(g25
g7
Ntp1444
Rp1445
(dp1446
g29
(dp1447
sg31
g5
(g1403
g7
Ntp1448
Rp1449
(dp1450
g1407
(lp1451
g1438
ag1437
aS'png_name'
p1452
aS'cbar_name'
p1453
asg36
g37
(g1410
tp1454
Rp1455
(dp1456
g42
I00
sg1452
S'MNI_edge_on_mean_func_mni_a.png'
p1457
sg1438
g45
sg1453
S'red'
p1458
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1459
sg1437
g45
sg51
g52
sbsg1416
(dp1460
g1452
Nssg1419
(lp1461
g1452
asg1421
Nsbsg74
Nsg66
S'montage_a'
p1462
sg76
(dp1463
sg78
g1424
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1462
sg87
Nsg88
(lp1464
sg90
Nsg91
Nsb(dp1465
sg5
(g25
g7
Ntp1466
Rp1467
(dp1468
g29
(dp1469
sg31
g5
(g163
g7
Ntp1470
Rp1471
(dp1472
g36
g37
(g167
tp1473
Rp1474
(dp1475
g51
g52
sS'resampled_underlay'
p1476
g45
sS'axial_png'
p1477
g45
sS'sagittal_png'
p1478
g45
sS'resampled_overlay'
p1479
g45
sbsg178
(lp1480
g1477
ag1478
ag1476
ag1479
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp1481
sg78
g1424
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp1482
sg90
Nsg91
Nsb(dp1483
sg5
(g25
g7
Ntp1484
Rp1485
(dp1486
g29
(dp1487
sg31
g5
(g1403
g7
Ntp1488
Rp1489
(dp1490
g1407
(lp1491
g1438
ag1437
ag1452
ag1453
asg36
g37
(g1410
tp1492
Rp1493
(dp1494
g42
I00
sg1452
S'MNI_edge_on_mean_func_mni_s.png'
p1495
sg1438
g45
sg1453
g1458
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1496
sg1437
g45
sg51
g52
sbsg1416
(dp1497
g1452
Nssg1419
(lp1498
g1452
asg1421
Nsbsg74
Nsg66
S'montage_s'
p1499
sg76
(dp1500
sg78
g1424
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp1501
sg90
Nsg91
Nsb(dp1502
sg5
(g25
g7
Ntp1503
Rp1504
(dp1505
g29
(dp1506
sg31
g5
(g1403
g7
Ntp1507
Rp1508
(dp1509
g1407
(lp1510
g1409
asg36
g37
(g1410
tp1511
Rp1512
(dp1513
g42
I00
sg1414
g1415
sg1409
g45
sg51
g52
sbsg1416
(dp1514
g1418
Nssg1419
(lp1515
g1418
asg1421
Nsbsg74
Nsg66
S'resample_u'
p1516
sg76
(dp1517
sg78
g1424
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp1518
sg90
Nsg91
Nsb(dp1519
ssg247
(dp1520
sg249
(dp1521
g1400
(dp1522
g1445
(dp1523
g253
(lp1524
(g1418
g1438
tp1525
assg1467
(dp1526
g253
(lp1527
(g1418
g1479
tp1528
assg1485
(dp1529
g253
(lp1530
(g1418
g1438
tp1531
asssg1428
(dp1532
g1400
(dp1533
g253
(lp1534
(g1438
g1409
tp1535
assg1504
(dp1536
g253
(lp1537
(g1437
g1409
tp1538
asssg1445
(dp1539
g1467
(dp1540
g253
(lp1541
(g1452
g1477
tp1542
asssg1467
(dp1543
sg1485
(dp1544
g1467
(dp1545
g253
(lp1546
(g1452
g1478
tp1547
asssg1504
(dp1548
g1445
(dp1549
g253
(lp1550
(g1418
g1437
tp1551
assg1467
(dp1552
g253
(lp1553
(g1418
g1476
tp1554
assg1485
(dp1555
g253
(lp1556
(g1418
g1437
tp1557
assssg295
g1521
sg296
(dp1558
g1400
(dp1559
g1428
g1533
ssg1428
(dp1560
sg1445
(dp1561
g1400
g1523
sg1504
g1549
ssg1467
(dp1562
g1400
g1526
sg1504
g1552
sg1485
g1545
sg1445
g1540
ssg1485
(dp1563
g1400
g1529
sg1504
g1555
ssg1504
(dp1564
g1428
g1536
sssg304
g1521
sbsg66
g1424
sg78
g1067
sg86
g1424
sg87
g306
((lp1565
(lp1566
g309
ag306
((lp1567
(lp1568
g312
ag309
aa(lp1569
g314
ag315
aa(lp1570
g317
ag318
aa(lp1571
g320
ag321
aa(lp1572
g323
ag324
aa(lp1573
g326
ag327
aa(lp1574
g329
ag330
aa(lp1575
g332
ag333
aatp1576
Rp1577
aa(lp1578
g337
ag306
((lp1579
(lp1580
g312
ag337
aa(lp1581
g341
ag342
aa(lp1582
g344
ag345
aa(lp1583
g347
ag348
aa(lp1584
g350
ag351
aa(lp1585
g353
ag354
aa(lp1586
g356
ag357
aa(lp1587
g359
ag360
aa(lp1588
g362
ag363
aa(lp1589
g365
ag366
aa(lp1590
g368
ag369
aa(lp1591
g371
ag372
aa(lp1592
g374
ag375
aa(lp1593
g377
ag378
aa(lp1594
g380
ag381
aa(lp1595
g383
ag384
aa(lp1596
g386
ag387
aa(lp1597
g389
ag390
aa(lp1598
g392
ag393
aatp1599
Rp1600
aa(lp1601
g397
ag306
((lp1602
(lp1603
g312
ag397
aa(lp1604
g401
ag402
aatp1605
Rp1606
aatp1607
Rp1608
sg91
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g25
g7
Ntp1619
Rp1620
(dp1621
g29
(dp1622
sg31
g5
(g1403
g7
Ntp1623
Rp1624
(dp1625
g1407
(lp1626
g1438
ag1437
ag1452
ag1453
asg36
g37
(g1410
tp1627
Rp1628
(dp1629
g42
I00
sg1452
S'snr_s.png'
p1630
sg1438
g45
sg1453
S'red_to_blue'
p1631
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1632
sg1437
g45
sg51
g52
sbsg1416
(dp1633
g1452
Nssg1419
(lp1634
g1452
asg1421
Nsbsg74
Nsg66
g1499
sg76
(dp1635
sg78
S'montage_snr_0'
p1636
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp1637
sg90
Nsg91
Nsb(dp1638
sg5
(g25
g7
Ntp1639
Rp1640
(dp1641
g29
(dp1642
sg31
g5
(g1403
g7
Ntp1643
Rp1644
(dp1645
g1407
(lp1646
g1409
asg36
g37
(g1410
tp1647
Rp1648
(dp1649
g42
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1650
sg1409
g45
sg51
g52
sbsg1416
(dp1651
g1418
Nssg1419
(lp1652
g1418
asg1421
Nsbsg74
Nsg66
g1516
sg76
(dp1653
sg78
g1636
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp1654
sg90
Nsg91
Nsb(dp1655
sg5
(g25
g7
Ntp1656
Rp1657
(dp1658
g29
(dp1659
sg31
g5
(g163
g7
Ntp1660
Rp1661
(dp1662
g36
g37
(g167
tp1663
Rp1664
(dp1665
g51
g52
sg1476
g45
sg1477
g45
sg1478
g45
sg1479
g45
sbsg178
(lp1666
g1477
ag1478
ag1476
ag1479
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp1667
sg78
g1636
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp1668
sg90
Nsg91
Nsb(dp1669
sg5
(g25
g7
Ntp1670
Rp1671
(dp1672
g29
(dp1673
sg31
g5
(g163
g7
Ntp1674
Rp1675
(dp1676
g36
g37
(g167
tp1677
Rp1678
(dp1679
g51
g52
sg1437
g45
sg1438
g45
sbsg178
(lp1680
g1437
ag1438
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp1681
sg78
g1636
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp1682
sg90
Nsg91
Nsb(dp1683
sg5
(g25
g7
Ntp1684
Rp1685
(dp1686
g29
(dp1687
sg31
g5
(g1403
g7
Ntp1688
Rp1689
(dp1690
g1407
(lp1691
g1438
ag1437
ag1452
ag1453
asg36
g37
(g1410
tp1692
Rp1693
(dp1694
g42
I00
sg1452
S'snr_a.png'
p1695
sg1438
g45
sg1453
g1631
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1696
sg1437
g45
sg51
g52
sbsg1416
(dp1697
g1452
Nssg1419
(lp1698
g1452
asg1421
Nsbsg74
Nsg66
g1462
sg76
(dp1699
sg78
g1636
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1462
sg87
Nsg88
(lp1700
sg90
Nsg91
Nsb(dp1701
sg5
(g25
g7
Ntp1702
Rp1703
(dp1704
g29
(dp1705
sg31
g5
(g1403
g7
Ntp1706
Rp1707
(dp1708
g1407
(lp1709
g1409
asg36
g37
(g1410
tp1710
Rp1711
(dp1712
g42
I00
sg1414
g1650
sg1409
g45
sg51
g52
sbsg1416
(dp1713
g1418
Nssg1419
(lp1714
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp1715
sg83
Nsg80
Nsg90
Nsg66
g1423
sg78
g1636
sg82
I00
sg84
Nsg85
I00
sg86
g1423
sg87
Nsg88
(lp1716
sg91
Nsb(dp1717
ssg247
(dp1718
sg249
(dp1719
g1620
(dp1720
g1657
(dp1721
g253
(lp1722
(g1452
g1478
tp1723
asssg1640
(dp1724
g1685
(dp1725
g253
(lp1726
(g1418
g1437
tp1727
assg1657
(dp1728
g253
(lp1729
(g1418
g1476
tp1730
assg1620
(dp1731
g253
(lp1732
(g1418
g1437
tp1733
asssg1657
(dp1734
sg1671
(dp1735
g1703
(dp1736
g253
(lp1737
(g1438
g1409
tp1738
assg1640
(dp1739
g253
(lp1740
(g1437
g1409
tp1741
asssg1685
(dp1742
g1657
(dp1743
g253
(lp1744
(g1452
g1477
tp1745
asssg1703
(dp1746
g1685
(dp1747
g253
(lp1748
(g1418
g1438
tp1749
assg1657
(dp1750
g253
(lp1751
(g1418
g1479
tp1752
assg1620
(dp1753
g253
(lp1754
(g1418
g1438
tp1755
assssg295
g1719
sg296
(dp1756
g1620
(dp1757
g1703
g1753
sg1640
g1731
ssg1640
(dp1758
g1671
g1739
ssg1657
(dp1759
g1620
g1721
sg1703
g1750
sg1640
g1728
sg1685
g1743
ssg1671
(dp1760
sg1685
(dp1761
g1703
g1747
sg1640
g1725
ssg1703
(dp1762
g1671
g1736
sssg304
g1719
sbsg66
g1636
sg78
g1067
sg86
g1636
sg87
g306
((lp1763
(lp1764
g309
ag306
((lp1765
(lp1766
g312
ag309
aa(lp1767
g314
ag315
aa(lp1768
g317
ag318
aa(lp1769
g320
ag321
aa(lp1770
g323
ag324
aa(lp1771
g326
ag327
aa(lp1772
g329
ag330
aa(lp1773
g332
ag333
aatp1774
Rp1775
aa(lp1776
g337
ag306
((lp1777
(lp1778
g312
ag337
aa(lp1779
g341
ag342
aa(lp1780
g344
ag345
aa(lp1781
g347
ag348
aa(lp1782
g350
ag351
aa(lp1783
g353
ag354
aa(lp1784
g356
ag357
aa(lp1785
g359
ag360
aa(lp1786
g362
ag363
aa(lp1787
g365
ag366
aa(lp1788
g368
ag369
aa(lp1789
g371
ag372
aa(lp1790
g374
ag375
aa(lp1791
g377
ag378
aa(lp1792
g380
ag381
aa(lp1793
g383
ag384
aa(lp1794
g386
ag387
aa(lp1795
g389
ag390
aa(lp1796
g392
ag393
aatp1797
Rp1798
aa(lp1799
g397
ag306
((lp1800
(lp1801
g312
ag397
aa(lp1802
g401
ag402
aatp1803
Rp1804
aatp1805
Rp1806
sg91
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g25
g7
Ntp1810
Rp1811
(dp1812
g29
(dp1813
sg31
g5
(g1226
g7
Ntp1814
Rp1815
(dp1816
g36
g37
(g1230
tp1817
Rp1818
(dp1819
g42
I00
sg1234
g45
sg67
g45
sg1235
g45
sg48
g45
sg137
g45
sg49
g45
sg111
g45
sg1175
g45
sg1182
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg53
g54
sg55
g5
(g56
g57
(dp1821
g59
g60
stp1822
Rp1823
(dp1824
g64
S'environ_items'
p1825
sg66
g55
sbsg1241
g45
sg1242
g45
sg68
g60
sg1243
g45
sg1244
g45
sg51
g52
sg1245
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'mean_func_fsl_warp_0'
p1826
sg76
(dp1827
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1826
sg87
Nsg88
(lp1828
sg90
Nsg91
Nsbg48
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g25
g7
Ntp1831
Rp1832
(dp1833
g29
(dp1834
sg31
g5
(g1403
g7
Ntp1835
Rp1836
(dp1837
g1407
(lp1838
S'motion_parameters'
p1839
asg36
g37
(g1410
tp1840
Rp1841
(dp1842
g42
I00
sg1414
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g45
sg51
g52
sbsg1416
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1419
(lp1847
g1845
ag1846
asg1421
Nsbsg74
Nsg66
S'motion_plt_0'
p1848
sg76
(dp1849
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1848
sg87
Nsg88
(lp1850
sg90
Nsg91
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g25
g7
Ntp1853
Rp1854
(dp1855
g29
(dp1856
sg31
g5
(g1403
g7
Ntp1857
Rp1858
(dp1859
g1407
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg36
g37
(g1410
tp1864
Rp1865
(dp1866
g42
I00
sg51
g52
sg1861
g45
sg1414
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g45
sbsg1416
(dp1869
S'hist_path'
p1870
Nssg1419
(lp1871
g1870
asg1421
Nsbsg74
Nsg66
S'fd_plot_0'
p1872
sg76
(dp1873
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1872
sg87
Nsg88
(lp1874
sg90
Nsg91
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g25
g7
Ntp1884
Rp1885
(dp1886
g29
(dp1887
sg31
g5
(g1403
g7
Ntp1888
Rp1889
(dp1890
g1407
(lp1891
g67
ag177
aS'exclude_list'
p1892
asg36
g37
(g1410
tp1893
Rp1894
(dp1895
g42
I00
sg1892
g45
sg1414
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1896
sg67
g45
sg177
g45
sg51
g52
sbsg1416
(dp1897
g48
Nssg1419
(lp1898
g48
asg1421
Nsbsg74
Nsg66
S'include_frames'
p1899
sg76
(dp1900
sg78
S'gen_motion_stats_0'
p1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1899
sg87
Nsg88
(lp1902
sg90
Nsg91
Nsb(dp1903
sg5
(g25
g7
Ntp1904
Rp1905
(dp1906
g29
(dp1907
sg31
g5
(g1403
g7
Ntp1908
Rp1909
(dp1910
g1407
(lp1911
g67
asg36
g37
(g1410
tp1912
Rp1913
(dp1914
g42
I00
sg51
g52
sg1414
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p1915
sg67
g45
sbsg1416
(dp1916
g48
Nssg1419
(lp1917
g48
asg1421
Nsbsg74
Nsg66
S'calculate_FDJ'
p1918
sg76
(dp1919
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1918
sg87
Nsg88
(lp1920
sg90
Nsg91
Nsb(dp1921
sg5
(g25
g7
Ntp1922
Rp1923
(dp1924
g29
(dp1925
sg31
g5
(g163
g7
Ntp1926
Rp1927
(dp1928
g36
g37
(g167
tp1929
Rp1930
(dp1931
g177
(lp1932
F0.2
asg51
g52
sS'remove_frames_before'
p1933
I1
sS'remove_frames_after'
p1934
I2
sbsg178
(lp1935
g177
ag1933
ag1934
asg180
I01
sbsg74
Nsg66
S'scrubbing_input'
p1936
sg76
(dp1937
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g177
(lp1938
F0.2
atp1939
sg85
I00
sg86
g1936
sg87
Nsg88
(lp1940
sg90
Nsg91
Nsb(dp1941
sg5
(g25
g7
Ntp1942
Rp1943
(dp1944
g29
(dp1945
sg31
g5
(g1403
g7
Ntp1946
Rp1947
(dp1948
g1407
(lp1949
S'subject_id'
p1950
aS'scan_id'
p1951
aS'FD_1D'
p1952
aS'FDJ_1D'
p1953
ag177
aS'DVARS'
p1954
asg36
g37
(g1410
tp1955
Rp1956
(dp1957
g42
I00
sg51
g52
sg1951
g45
sg1950
g45
sg1954
g45
sg1414
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1958
sg1953
g45
sg1952
g45
sg177
g45
sbsg1416
(dp1959
g48
Nssg1419
(lp1960
g48
asg1421
Nsbsg74
Nsg66
S'calc_power_parameters'
p1961
sg76
(dp1962
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1961
sg87
Nsg88
(lp1963
sg90
Nsg91
Nsb(dp1964
sg5
(g25
g7
Ntp1965
Rp1966
(dp1967
g29
(dp1968
sg31
g5
(g1403
g7
Ntp1969
Rp1970
(dp1971
g1407
(lp1972
S'rest'
p1973
aS'mask'
p1974
asg36
g37
(g1410
tp1975
Rp1976
(dp1977
g42
I00
sg1974
g45
sg51
g52
sg1414
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p1978
sg1973
g45
sbsg1416
(dp1979
g48
Nssg1419
(lp1980
g48
asg1421
Nsbsg74
Nsg66
S'cal_DVARS'
p1981
sg76
(dp1982
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1981
sg87
Nsg88
(lp1983
sg90
Nsg91
Nsb(dp1984
sg5
(g25
g7
Ntp1985
Rp1986
(dp1987
g29
(dp1988
sg31
g5
(g1403
g7
Ntp1989
Rp1990
(dp1991
g1407
(lp1992
g67
ag177
aS'frames_before'
p1993
aS'frames_after'
p1994
asg36
g37
(g1410
tp1995
Rp1996
(dp1997
g42
I00
sg1994
g45
sg1414
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1998
sg67
g45
sg177
g45
sg51
g52
sg1993
g45
sbsg1416
(dp1999
g48
Nssg1419
(lp2000
g48
asg1421
Nsbsg74
Nsg66
S'exclude_frames'
p2001
sg76
(dp2002
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2001
sg87
Nsg88
(lp2003
sg90
Nsg91
Nsb(dp2004
sg5
(g25
g7
Ntp2005
Rp2006
(dp2007
g29
(dp2008
sg31
g5
(g1403
g7
Ntp2009
Rp2010
(dp2011
g1407
(lp2012
g67
asg36
g37
(g1410
tp2013
Rp2014
(dp2015
g42
I00
sg51
g52
sg1414
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p2016
sg67
g45
sbsg1416
(dp2017
g48
Nssg1419
(lp2018
g48
asg1421
Nsbsg74
Nsg66
S'calculate_FD'
p2019
sg76
(dp2020
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2019
sg87
Nsg88
(lp2021
sg90
Nsg91
Nsb(dp2022
sg5
(g25
g7
Ntp2023
Rp2024
(dp2025
g29
(dp2026
sg31
g5
(g163
g7
Ntp2027
Rp2028
(dp2029
g36
g37
(g167
tp2030
Rp2031
(dp2032
S'max_displacement'
p2033
g45
sg51
g52
sg1951
g45
sg1950
g45
sg1974
g45
sS'movement_parameters'
p2034
g45
sS'oned_matrix_save'
p2035
g45
sS'motion_correct'
p2036
g45
sbsg178
(lp2037
g1950
ag1951
ag2034
ag2033
ag2036
ag1974
ag2035
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp2038
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp2039
sg90
Nsg91
Nsb(dp2040
sg5
(g25
g7
Ntp2041
Rp2042
(dp2043
g29
(dp2044
sg31
g5
(g1403
g7
Ntp2045
Rp2046
(dp2047
g1407
(lp2048
g1950
ag1951
ag2034
ag2033
asg36
g37
(g1410
tp2049
Rp2050
(dp2051
g42
I00
sg2033
g45
sg1951
g45
sg1950
g45
sg1414
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p2052
sg2034
g45
sg51
g52
sbsg1416
(dp2053
g48
Nssg1419
(lp2054
g48
asg1421
Nsbsg74
Nsg66
S'calc_motion_parameters'
p2055
sg76
(dp2056
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2055
sg87
Nsg88
(lp2057
sg90
Nsg91
Nsb(dp2058
sg5
(g25
g7
Ntp2059
Rp2060
(dp2061
g29
(dp2062
sg31
g5
(g163
g7
Ntp2063
Rp2064
(dp2065
g36
g37
(g167
tp2066
Rp2067
(dp2068
g51
g52
sS'frames_ex_1D'
p2069
g45
sg1953
g45
sg1952
g45
sS'frames_in_1D'
p2070
g45
sS'motion_params'
p2071
g45
sS'power_params'
p2072
g45
sbsg178
(lp2073
g1952
ag1953
ag2069
ag2070
ag2072
ag2071
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp2074
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp2075
sg90
Nsg91
Nsb(dp2076
ssg247
(dp2077
sg249
(dp2078
g1885
(dp2079
g2060
(dp2080
g253
(lp2081
(g48
g2070
tp2082
asssg1905
(dp2083
g1943
(dp2084
g253
(lp2085
(g48
g1953
tp2086
assg2060
(dp2087
g253
(lp2088
(g48
g1953
tp2089
asssg1923
(dp2090
g1885
(dp2091
g253
(lp2092
(g177
g177
tp2093
assg1986
(dp2094
g253
(lp2095
(g177
g177
tp2096
a(g1933
g1993
tp2097
a(g1934
g1994
tp2098
assg1943
(dp2099
g253
(lp2100
(g177
g177
tp2101
asssg1943
(dp2102
g2060
(dp2103
g253
(lp2104
(g48
g2072
tp2105
asssg1966
(dp2106
g1943
(dp2107
g253
(lp2108
(g48
g1954
tp2109
asssg1986
(dp2110
g1885
(dp2111
g253
(lp2112
(g48
g1892
tp2113
assg2060
(dp2114
g253
(lp2115
(g48
g2069
tp2116
asssg2006
(dp2117
g1885
(dp2118
g253
(lp2119
(g48
g67
tp2120
assg1943
(dp2121
g253
(lp2122
(g48
g1952
tp2123
assg2060
(dp2124
g253
(lp2125
(g48
g1952
tp2126
assg1986
(dp2127
g253
(lp2128
(g48
g67
tp2129
asssg2024
(dp2130
g1966
(dp2131
g253
(lp2132
(g2036
g1973
tp2133
a(g1974
g1974
tp2134
assg1943
(dp2135
g253
(lp2136
(g1950
g1950
tp2137
a(g1951
g1951
tp2138
assg2042
(dp2139
g253
(lp2140
(g1950
g1950
tp2141
a(g1951
g1951
tp2142
a(g2034
g2034
tp2143
a(g2033
g2033
tp2144
assg1905
(dp2145
g253
(lp2146
(g2035
g67
tp2147
assg2006
(dp2148
g253
(lp2149
(g2034
g67
tp2150
asssg2042
(dp2151
g2060
(dp2152
g253
(lp2153
(g48
g2071
tp2154
asssg2060
(dp2155
ssg295
g2078
sg296
(dp2156
g1885
(dp2157
g2006
g2118
sg1923
g2091
sg1986
g2111
ssg1905
(dp2158
g2024
g2145
ssg1923
(dp2159
sg1943
(dp2160
g2024
g2135
sg2006
g2121
sg1923
g2099
sg1905
g2084
sg1966
g2107
ssg1966
(dp2161
g2024
g2131
ssg1986
(dp2162
g2006
g2127
sg1923
g2094
ssg2006
(dp2163
g2024
g2148
ssg2024
(dp2164
sg2042
(dp2165
g2024
g2139
ssg2060
(dp2166
g1885
g2080
sg1905
g2087
sg1943
g2103
sg1986
g2114
sg2006
g2124
sg2042
g2152
sssg304
g2078
sbsg66
g1901
sg78
g1067
sg86
g1901
sg87
g306
((lp2167
(lp2168
g309
ag306
((lp2169
(lp2170
g312
ag309
aa(lp2171
g314
ag315
aa(lp2172
g317
ag318
aa(lp2173
g320
ag321
aa(lp2174
g323
ag324
aa(lp2175
g326
ag327
aa(lp2176
g329
ag330
aa(lp2177
g332
ag333
aatp2178
Rp2179
aa(lp2180
g337
ag306
((lp2181
(lp2182
g312
ag337
aa(lp2183
g341
ag342
aa(lp2184
g344
ag345
aa(lp2185
g347
ag348
aa(lp2186
g350
ag351
aa(lp2187
g353
ag354
aa(lp2188
g356
ag357
aa(lp2189
g359
ag360
aa(lp2190
g362
ag363
aa(lp2191
g365
ag366
aa(lp2192
g368
ag369
aa(lp2193
g371
ag372
aa(lp2194
g374
ag375
aa(lp2195
g377
ag378
aa(lp2196
g380
ag381
aa(lp2197
g383
ag384
aa(lp2198
g386
ag387
aa(lp2199
g389
ag390
aa(lp2200
g392
ag393
aatp2201
Rp2202
aa(lp2203
g397
ag306
((lp2204
(lp2205
g312
ag397
aa(lp2206
g401
ag402
aatp2207
Rp2208
aatp2209
Rp2210
sg91
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g25
g7
Ntp2224
Rp2225
(dp2226
g29
(dp2227
sg31
g5
(g163
g7
Ntp2228
Rp2229
(dp2230
g36
g37
(g167
tp2231
Rp2232
(dp2233
S'reorient'
p2234
g45
sg175
g45
sS'refit'
p2235
g45
sg51
g52
sS'skullstrip'
p2236
g45
sbsg178
(lp2237
g2235
ag2234
ag2236
ag175
asg180
I01
sbsg74
Nsg81
I00
sg76
(dp2238
sg83
Nsg80
Nsg90
Nsg66
g219
sg78
S'anat_preproc_0'
p2239
sg82
I00
sg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp2240
sg91
Nsb(dp2241
sg5
(g25
g7
Ntp2242
Rp2243
(dp2244
g29
(dp2245
sg31
g5
(g163
g7
Ntp2246
Rp2247
(dp2248
g36
g37
(g167
tp2249
Rp2250
(dp2251
g51
g52
sS'anat'
p2252
g45
sbsg178
(lp2253
g2252
asg180
I01
sbsg74
Nsg81
I00
sg76
(dp2254
sg83
Nsg80
Nsg90
Nsg66
g181
sg78
g2239
sg82
I00
sg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp2255
sg91
Nsb(dp2256
sg5
(g25
g7
Ntp2257
Rp2258
(dp2259
g29
(dp2260
sg31
g5
(cnipype.interfaces.afni.preprocess
Resample
p2261
g7
Ntp2262
Rp2263
(dp2264
g36
g37
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2265
tp2266
Rp2267
(dp2268
g42
I00
sg51
g52
sg48
g45
sg49
g45
sS'outputtype'
p2269
S'NIFTI_GZ'
p2270
sS'resample_mode'
p2271
g45
sS'voxel_size'
p2272
g45
sg53
g54
sS'master'
p2273
g45
sg67
g45
sg55
g5
(g56
g57
(dp2274
tp2275
Rp2276
(dp2277
g64
S'environ_items'
p2278
sg66
g55
sbsS'orientation'
p2279
S'RPI'
p2280
sbsS'_outputtype'
p2281
g2270
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2282
sg83
Nsg80
Nsg90
Nsg66
S'anat_reorient'
p2283
sg78
g2239
sg82
I00
sg84
Nsg85
I00
sg86
g2283
sg87
Nsg88
(lp2284
sg91
Nsb(dp2285
sg5
(g25
g7
Ntp2286
Rp2287
(dp2288
g29
(dp2289
sg31
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2290
g7
Ntp2291
Rp2292
(dp2293
g36
g37
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2294
tp2295
Rp2296
(dp2297
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2269
S'AFNI'
p2298
sg53
g54
sg55
g5
(g56
g57
(dp2299
tp2300
Rp2301
(dp2302
g64
S'environ_items'
p2303
sg66
g55
sbsg67
g45
sbsg2281
g2298
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2304
sg83
Nsg80
Nsg90
Nsg66
S'anat_skullstrip'
p2305
sg78
g2239
sg82
I00
sg84
Nsg85
I00
sg86
g2305
sg87
Nsg88
(lp2306
sg91
Nsb(dp2307
sg5
(g25
g7
Ntp2308
Rp2309
(dp2310
g29
(dp2311
sg31
g5
(cnipype.interfaces.afni.preprocess
Calc
p2312
g7
Ntp2313
Rp2314
(dp2315
g36
g37
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2316
tp2317
Rp2318
(dp2319
S'stop_idx'
p2320
g45
sg42
I00
sg51
g52
sg48
g45
sS'expr'
p2321
S'a*step(b)'
p2322
sg49
g45
sg2269
g2270
sS'in_file_b'
p2323
g45
sS'in_file_c'
p2324
g45
sS'in_file_a'
p2325
g45
sg55
g5
(g56
g57
(dp2326
tp2327
Rp2328
(dp2329
g64
S'environ_items'
p2330
sg66
g55
sbsS'single_idx'
p2331
g45
sS'other'
p2332
g45
sS'start_idx'
p2333
g45
sg53
g54
sbsg2281
g2270
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2334
sg83
Nsg80
Nsg90
Nsg66
S'anat_brain_only'
p2335
sg78
g2239
sg82
I00
sg84
Nsg85
I00
sg86
g2335
sg87
Nsg88
(lp2336
sg91
Nsb(dp2337
sg5
(g25
g7
Ntp2338
Rp2339
(dp2340
g29
(dp2341
sg31
g5
(cnipype.interfaces.afni.preprocess
Refit
p2342
g7
Ntp2343
Rp2344
(dp2345
g36
g37
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2346
tp2347
Rp2348
(dp2349
g42
I00
sg51
g52
sS'deoblique'
p2350
I01
sg49
g45
sS'yorigin'
p2351
g45
sg53
g54
sg55
g5
(g56
g57
(dp2352
tp2353
Rp2354
(dp2355
g64
S'environ_items'
p2356
sg66
g55
sbsg67
g45
sS'xorigin'
p2357
g45
sS'zorigin'
p2358
g45
sbsg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2359
sg83
Nsg80
Nsg90
Nsg66
S'anat_deoblique'
p2360
sg78
g2239
sg82
I00
sg84
Nsg85
I00
sg86
g2360
sg87
Nsg88
(lp2361
sg91
Nsb(dp2362
ssg249
(dp2363
g2225
(dp2364
sg2243
(dp2365
g2339
(dp2366
g253
(lp2367
(g2252
g67
tp2368
asssg2258
(dp2369
g2287
(dp2370
g253
(lp2371
(g48
g67
tp2372
assg2225
(dp2373
g253
(lp2374
(g48
g2234
tp2375
assg2309
(dp2376
g253
(lp2377
(g48
g2325
tp2378
asssg2287
(dp2379
g2225
(dp2380
g253
(lp2381
(g48
g2236
tp2382
assg2309
(dp2383
g253
(lp2384
(g48
g2323
tp2385
asssg2309
(dp2386
g2225
(dp2387
g253
(lp2388
(g48
g175
tp2389
asssg2339
(dp2390
g2225
(dp2391
g253
(lp2392
(g48
g2235
tp2393
assg2258
(dp2394
g253
(lp2395
(g48
g67
tp2396
assssg295
g2363
sg296
(dp2397
g2225
(dp2398
g2339
g2391
sg2287
g2380
sg2258
g2373
sg2309
g2387
ssg2243
(dp2399
sg2258
(dp2400
g2339
g2394
ssg2287
(dp2401
g2258
g2370
ssg2309
(dp2402
g2287
g2383
sg2258
g2376
ssg2339
(dp2403
g2243
g2366
sssg247
(dp2404
sg304
g2363
sbsg66
g2239
sg78
g1067
sg86
g2239
sg87
g306
((lp2405
(lp2406
g309
ag306
((lp2407
(lp2408
g312
ag309
aa(lp2409
g314
ag315
aa(lp2410
g317
ag318
aa(lp2411
g320
ag321
aa(lp2412
g323
ag324
aa(lp2413
g326
ag327
aa(lp2414
g329
ag330
aa(lp2415
g332
ag333
aatp2416
Rp2417
aa(lp2418
g337
ag306
((lp2419
(lp2420
g312
ag337
aa(lp2421
g341
ag342
aa(lp2422
g344
ag345
aa(lp2423
g347
ag348
aa(lp2424
g350
ag351
aa(lp2425
g353
ag354
aa(lp2426
g356
ag357
aa(lp2427
g359
ag360
aa(lp2428
g362
ag363
aa(lp2429
g365
ag366
aa(lp2430
g368
ag369
aa(lp2431
g371
ag372
aa(lp2432
g374
ag375
aa(lp2433
g377
ag378
aa(lp2434
g380
ag381
aa(lp2435
g383
ag384
aa(lp2436
g386
ag387
aa(lp2437
g389
ag390
aa(lp2438
g392
ag393
aatp2439
Rp2440
aa(lp2441
g397
ag306
((lp2442
(lp2443
g312
ag397
aa(lp2444
g401
ag402
aatp2445
Rp2446
aatp2447
Rp2448
sg91
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g25
g7
Ntp2459
Rp2460
(dp2461
g29
(dp2462
sg31
g5
(g227
g7
Ntp2463
Rp2464
(dp2465
g36
g37
(g231
tp2466
Rp2467
(dp2468
g42
I00
sg51
g52
sg46
S'-Tmin -bin'
p2469
sg235
S'char'
p2470
sg48
g45
sg49
g45
sg236
g45
sg53
g54
sg55
g5
(g56
g57
(dp2471
g59
g60
stp2472
Rp2473
(dp2474
g64
S'environ_items'
p2475
sg66
g55
sbsg67
g45
sg68
g60
sg242
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mask_normalize'
p2476
sg76
(dp2477
sg78
S'func_preproc_automask_0'
p2478
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2476
sg87
Nsg88
(lp2479
sg90
Nsg91
Nsb(dp2480
sg5
(g25
g7
Ntp2481
Rp2482
(dp2483
g29
(dp2484
sg31
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2485
g7
Ntp2486
Rp2487
(dp2488
g36
g37
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2489
tp2490
Rp2491
(dp2492
S'oned_file'
p2493
g45
sg42
I00
sg107
g45
sS'timeshift'
p2494
g45
sS'basefile'
p2495
g45
sg49
S'-Fourier -twopass'
p2496
sg2269
g2270
sS'zpad'
p2497
I4
sg53
g54
sS'md1d_file'
p2498
S'max_displacement.1D'
p2499
sg67
g45
sS'copyorigin'
p2500
g45
sg55
g5
(g56
g57
(dp2501
tp2502
Rp2503
(dp2504
g64
S'environ_items'
p2505
sg66
g55
sbsg2035
g45
sg51
g52
sg48
g45
sbsg2281
g2270
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2506
sg83
Nsg80
Nsg90
Nsg66
S'func_motion_correct_A'
p2507
sg78
g2478
sg82
I00
sg84
Nsg85
I00
sg86
g2507
sg87
Nsg88
(lp2508
sg91
Nsb(dp2509
sg5
(g25
g7
Ntp2510
Rp2511
(dp2512
g29
(dp2513
sg31
g5
(g163
g7
Ntp2514
Rp2515
(dp2516
g36
g37
(g167
tp2517
Rp2518
(dp2519
g2033
g45
sS'motion_correct_ref'
p2520
g45
sg51
g52
sS'preprocessed_mask'
p2521
g45
sg1974
g45
sg2235
g45
sg2236
g45
sg2234
g45
sS'preprocessed'
p2522
g45
sS'slice_time_corrected'
p2523
g45
sg2034
g45
sS'example_func'
p2524
g45
sg2035
g45
sS'reorient_mean'
p2525
g45
sg2036
g45
sbsg178
(lp2526
g2235
ag2234
ag2525
ag2036
ag2520
ag2034
ag2033
ag1974
ag2236
ag2524
ag2522
ag2521
ag2523
ag2035
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp2527
sg78
g2478
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp2528
sg90
Nsg91
Nsb(dp2529
sg5
(g25
g7
Ntp2530
Rp2531
(dp2532
g29
(dp2533
sg31
g5
(g163
g7
Ntp2534
Rp2535
(dp2536
g36
g37
(g167
tp2537
Rp2538
(dp2539
g51
g52
sS'func'
p2540
g45
sbsg178
(lp2541
g2540
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp2542
sg78
g2478
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp2543
sg90
Nsg91
Nsb(dp2544
sg5
(g25
g7
Ntp2545
Rp2546
(dp2547
g29
(dp2548
sg31
g5
(g227
g7
Ntp2549
Rp2550
(dp2551
g36
g37
(g231
tp2552
Rp2553
(dp2554
g42
I00
sg51
g52
sg46
S'-ing 10000'
p2555
sg235
S'float'
p2556
sg48
g45
sg49
g45
sg236
g45
sg53
g54
sg55
g5
(g56
g57
(dp2557
g59
g60
stp2558
Rp2559
(dp2560
g64
S'environ_items'
p2561
sg66
g55
sbsg67
g45
sg68
g60
sg242
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_normalize'
p2562
sg76
(dp2563
sg78
g2478
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2562
sg87
Nsg88
(lp2564
sg90
Nsg91
Nsb(dp2565
sg5
(g25
g7
Ntp2566
Rp2567
(dp2568
g29
(dp2569
sg31
g5
(g2261
g7
Ntp2570
Rp2571
(dp2572
g36
g37
(g2265
tp2573
Rp2574
(dp2575
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2269
g2270
sg2271
g45
sg2272
g45
sg53
g54
sg2273
g45
sg67
g45
sg55
g5
(g56
g57
(dp2576
tp2577
Rp2578
(dp2579
g64
S'environ_items'
p2580
sg66
g55
sbsg2279
g2280
sbsg2281
g2270
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_reorient'
p2581
sg76
(dp2582
sg78
g2478
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2581
sg87
Nsg88
(lp2583
sg90
Nsg91
Nsb(dp2584
sg5
(g25
g7
Ntp2585
Rp2586
(dp2587
g29
(dp2588
sg31
g5
(g2342
g7
Ntp2589
Rp2590
(dp2591
g36
g37
(g2346
tp2592
Rp2593
(dp2594
g42
I00
sg51
g52
sg2350
I01
sg49
g45
sg2351
g45
sg53
g54
sg55
g5
(g56
g57
(dp2595
tp2596
Rp2597
(dp2598
g64
S'environ_items'
p2599
sg66
g55
sbsg67
g45
sg2357
g45
sg2358
g45
sbsg72
Nsg73
g54
sbsg74
Nsg66
S'func_deoblique'
p2600
sg76
(dp2601
sg78
g2478
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2600
sg87
Nsg88
(lp2602
sg90
Nsg91
Nsb(dp2603
sg5
(g25
g7
Ntp2604
Rp2605
(dp2606
g29
(dp2607
sg31
g5
(cnipype.interfaces.afni.preprocess
TStat
p2608
g7
Ntp2609
Rp2610
(dp2611
g36
g37
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2612
tp2613
Rp2614
(dp2615
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg1974
g45
sg2269
g2270
sg53
g54
sg55
g5
(g56
g57
(dp2616
tp2617
Rp2618
(dp2619
g64
S'environ_items'
p2620
sg66
g55
sbsg67
g45
sS'options'
p2621
S'-mean'
p2622
sbsg2281
g2270
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mean_skullstrip'
p2623
sg76
(dp2624
sg78
g2478
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2623
sg87
Nsg88
(lp2625
sg90
Nsg91
Nsb(dp2626
sg5
(g25
g7
Ntp2627
Rp2628
(dp2629
g29
(dp2630
sg31
g5
(g2485
g7
Ntp2631
Rp2632
(dp2633
g36
g37
(g2489
tp2634
Rp2635
(dp2636
g2493
g45
sg42
I00
sg107
g45
sg2494
g45
sg2495
g45
sg49
g2496
sg2269
g2270
sg2497
I4
sg53
g54
sg2498
g45
sg67
g45
sg2500
g45
sg55
g5
(g56
g57
(dp2637
tp2638
Rp2639
(dp2640
g64
S'environ_items'
p2641
sg66
g55
sbsg2035
g45
sg51
g52
sg48
g45
sbsg2281
g2270
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_motion_correct'
p2642
sg76
(dp2643
sg78
g2478
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2642
sg87
Nsg88
(lp2644
sg90
Nsg91
Nsb(dp2645
sg5
(g25
g7
Ntp2646
Rp2647
(dp2648
g29
(dp2649
sg31
g5
(g2608
g7
Ntp2650
Rp2651
(dp2652
g36
g37
(g2612
tp2653
Rp2654
(dp2655
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg1974
g45
sg2269
g2270
sg53
g54
sg55
g5
(g56
g57
(dp2656
tp2657
Rp2658
(dp2659
g64
S'environ_items'
p2660
sg66
g55
sbsg67
g45
sg2621
g2622
sbsg2281
g2270
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2661
sg83
Nsg80
Nsg90
Nsg66
S'func_get_mean_motion'
p2662
sg78
g2478
sg82
I00
sg84
Nsg85
I00
sg86
g2662
sg87
Nsg88
(lp2663
sg91
Nsb(dp2664
sg5
(g25
g7
Ntp2665
Rp2666
(dp2667
g29
(dp2668
sg31
g5
(g2608
g7
Ntp2669
Rp2670
(dp2671
g36
g37
(g2612
tp2672
Rp2673
(dp2674
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg1974
g45
sg2269
g2270
sg53
g54
sg55
g5
(g56
g57
(dp2675
tp2676
Rp2677
(dp2678
g64
S'environ_items'
p2679
sg66
g55
sbsg67
g45
sg2621
g2622
sbsg2281
g2270
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_get_mean_RPI'
p2680
sg76
(dp2681
sg78
g2478
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2680
sg87
Nsg88
(lp2682
sg90
Nsg91
Nsb(dp2683
sg5
(g25
g7
Ntp2684
Rp2685
(dp2686
g29
(dp2687
sg31
g5
(cnipype.interfaces.afni.preprocess
Automask
p2688
g7
Ntp2689
Rp2690
(dp2691
g36
g37
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2692
tp2693
Rp2694
(dp2695
g42
I00
sg51
g52
sg49
g45
sS'erode'
p2696
g45
sg48
g45
sS'dilate'
p2697
g45
sS'clfrac'
p2698
g45
sg2269
g2270
sS'brain_file'
p2699
g45
sg53
g54
sg55
g5
(g56
g57
(dp2700
tp2701
Rp2702
(dp2703
g64
S'environ_items'
p2704
sg66
g55
sbsg67
g45
sbsg2281
g2270
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_get_brain_mask'
p2705
sg76
(dp2706
sg78
g2478
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2705
sg87
Nsg88
(lp2707
sg90
Nsg91
Nsb(dp2708
sg5
(g25
g7
Ntp2709
Rp2710
(dp2711
g29
(dp2712
sg31
g5
(g2312
g7
Ntp2713
Rp2714
(dp2715
g36
g37
(g2316
tp2716
Rp2717
(dp2718
g2320
g45
sg42
I00
sg51
g52
sg48
g45
sg2321
S'a*b'
p2719
sg49
g45
sg2269
g2270
sg2323
g45
sg2324
g45
sg2325
g45
sg55
g5
(g56
g57
(dp2720
tp2721
Rp2722
(dp2723
g64
S'environ_items'
p2724
sg66
g55
sbsg2331
g45
sg2332
g45
sg2333
g45
sg53
g54
sbsg2281
g2270
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_edge_detect'
p2725
sg76
(dp2726
sg78
g2478
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2725
sg87
Nsg88
(lp2727
sg90
Nsg91
Nsb(dp2728
ssg247
(dp2729
sg249
(dp2730
g2460
(dp2731
g2511
(dp2732
g253
(lp2733
(g48
g2521
tp2734
asssg2482
(dp2735
g2511
(dp2736
g253
(lp2737
(g48
g2036
tp2738
a(g2498
g2033
tp2739
a(g2493
g2034
tp2740
a(g2035
g2035
tp2741
assg2710
(dp2742
g253
(lp2743
(g48
g2325
tp2744
assg2685
(dp2745
g253
(lp2746
(g48
g67
tp2747
asssg2511
(dp2748
sg2531
(dp2749
g2586
(dp2750
g253
(lp2751
(g2540
g67
tp2752
asssg2546
(dp2753
g2511
(dp2754
g253
(lp2755
(g48
g2522
tp2756
assg2460
(dp2757
g253
(lp2758
(g48
g67
tp2759
asssg2567
(dp2760
g2511
(dp2761
g253
(lp2762
(g48
g2234
tp2763
assg2628
(dp2764
g253
(lp2765
(g48
g67
tp2766
assg2482
(dp2767
g253
(lp2768
(g48
g67
tp2769
assg2666
(dp2770
g253
(lp2771
(g48
g67
tp2772
asssg2586
(dp2773
g2567
(dp2774
g253
(lp2775
(g48
g67
tp2776
asssg2605
(dp2777
g2511
(dp2778
g253
(lp2779
(g48
g2524
tp2780
asssg2628
(dp2781
g2647
(dp2782
g253
(lp2783
(g48
g67
tp2784
asssg2647
(dp2785
g2511
(dp2786
g253
(lp2787
(g48
g2520
tp2788
assg2482
(dp2789
g253
(lp2790
(g48
g2495
tp2791
asssg2666
(dp2792
g2628
(dp2793
g253
(lp2794
(g48
g2495
tp2795
asssg2685
(dp2796
g2511
(dp2797
g253
(lp2798
(g48
g1974
tp2799
assg2710
(dp2800
g253
(lp2801
(g48
g2323
tp2802
asssg2710
(dp2803
g2511
(dp2804
g253
(lp2805
(g48
g2236
tp2806
assg2546
(dp2807
g253
(lp2808
(g48
g67
tp2809
assg2605
(dp2810
g253
(lp2811
(g48
g67
tp2812
assssg295
g2730
sg296
(dp2813
g2460
(dp2814
g2546
g2757
ssg2482
(dp2815
g2567
g2767
sg2647
g2789
ssg2511
(dp2816
g2460
g2732
sg2482
g2736
sg2605
g2778
sg2567
g2761
sg2546
g2754
sg2685
g2797
sg2710
g2804
sg2647
g2786
ssg2531
(dp2817
sg2546
(dp2818
g2710
g2807
ssg2567
(dp2819
g2586
g2774
ssg2586
(dp2820
g2531
g2750
ssg2605
(dp2821
g2710
g2810
ssg2628
(dp2822
g2666
g2793
sg2567
g2764
ssg2647
(dp2823
g2628
g2782
ssg2666
(dp2824
g2567
g2770
ssg2685
(dp2825
g2482
g2745
ssg2710
(dp2826
g2685
g2800
sg2482
g2742
sssg304
g2730
sbsg66
g2478
sg78
g1067
sg86
g2478
sg87
g306
((lp2827
(lp2828
g309
ag306
((lp2829
(lp2830
g312
ag309
aa(lp2831
g314
ag315
aa(lp2832
g317
ag318
aa(lp2833
g320
ag321
aa(lp2834
g323
ag324
aa(lp2835
g326
ag327
aa(lp2836
g329
ag330
aa(lp2837
g332
ag333
aatp2838
Rp2839
aa(lp2840
g337
ag306
((lp2841
(lp2842
g312
ag337
aa(lp2843
g341
ag342
aa(lp2844
g344
ag345
aa(lp2845
g347
ag348
aa(lp2846
g350
ag351
aa(lp2847
g353
ag354
aa(lp2848
g356
ag357
aa(lp2849
g359
ag360
aa(lp2850
g362
ag363
aa(lp2851
g365
ag366
aa(lp2852
g368
ag369
aa(lp2853
g371
ag372
aa(lp2854
g374
ag375
aa(lp2855
g377
ag378
aa(lp2856
g380
ag381
aa(lp2857
g383
ag384
aa(lp2858
g386
ag387
aa(lp2859
g389
ag390
aa(lp2860
g392
ag393
aatp2861
Rp2862
aa(lp2863
g397
ag306
((lp2864
(lp2865
g312
ag397
aa(lp2866
g401
ag402
aatp2867
Rp2868
aatp2869
Rp2870
sg91
NsbS'outputspec.example_func'
p2871
tp2872
sg2034
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g25
g7
Ntp2880
Rp2881
(dp2882
g29
(dp2883
sg31
g5
(g163
g7
Ntp2884
Rp2885
(dp2886
g36
g37
(g167
tp2887
Rp2888
(dp2889
g51
g52
sS'movement_file'
p2890
g45
sbsg178
(lp2891
g2890
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp2892
sg78
S'fristons_parameter_model_0'
p2893
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp2894
sg90
Nsg91
Nsb(dp2895
sg5
(g25
g7
Ntp2896
Rp2897
(dp2898
g29
(dp2899
sg31
g5
(g1403
g7
Ntp2900
Rp2901
(dp2902
g1407
(lp2903
g67
asg36
g37
(g1410
tp2904
Rp2905
(dp2906
g42
I00
sg51
g52
sg1414
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2907
sg67
g45
sbsg1416
(dp2908
g48
Nssg1419
(lp2909
g48
asg1421
Nsbsg74
Nsg66
S'calc_friston'
p2910
sg76
(dp2911
sg78
g2893
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2910
sg87
Nsg88
(lp2912
sg90
Nsg91
Nsb(dp2913
sg5
(g25
g7
Ntp2914
Rp2915
(dp2916
g29
(dp2917
sg31
g5
(g163
g7
Ntp2918
Rp2919
(dp2920
g36
g37
(g167
tp2921
Rp2922
(dp2923
g51
g52
sg2890
g45
sbsg178
(lp2924
g2890
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp2925
sg78
g2893
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp2926
sg90
Nsg91
Nsb(dp2927
ssg247
(dp2928
sg249
(dp2929
g2881
(dp2930
g2897
(dp2931
g253
(lp2932
(g2890
g67
tp2933
asssg2897
(dp2934
g2915
(dp2935
g253
(lp2936
(g48
g2890
tp2937
asssg2915
(dp2938
ssg295
g2929
sg296
(dp2939
g2881
(dp2940
sg2897
(dp2941
g2881
g2931
ssg2915
(dp2942
g2897
g2935
sssg304
g2929
sbsg66
g2893
sg78
g1067
sg86
g2893
sg87
g306
((lp2943
(lp2944
g309
ag306
((lp2945
(lp2946
g312
ag309
aa(lp2947
g314
ag315
aa(lp2948
g317
ag318
aa(lp2949
g320
ag321
aa(lp2950
g323
ag324
aa(lp2951
g326
ag327
aa(lp2952
g329
ag330
aa(lp2953
g332
ag333
aatp2954
Rp2955
aa(lp2956
g337
ag306
((lp2957
(lp2958
g312
ag337
aa(lp2959
g341
ag342
aa(lp2960
g344
ag345
aa(lp2961
g347
ag348
aa(lp2962
g350
ag351
aa(lp2963
g353
ag354
aa(lp2964
g356
ag357
aa(lp2965
g359
ag360
aa(lp2966
g362
ag363
aa(lp2967
g365
ag366
aa(lp2968
g368
ag369
aa(lp2969
g371
ag372
aa(lp2970
g374
ag375
aa(lp2971
g377
ag378
aa(lp2972
g380
ag381
aa(lp2973
g383
ag384
aa(lp2974
g386
ag387
aa(lp2975
g389
ag390
aa(lp2976
g392
ag393
aatp2977
Rp2978
aa(lp2979
g397
ag306
((lp2980
(lp2981
g312
ag397
aa(lp2982
g401
ag402
aatp2983
Rp2984
aatp2985
Rp2986
sg91
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g25
g7
Ntp2997
Rp2998
(dp2999
g29
(dp3000
sg31
g5
(g1403
g7
Ntp3001
Rp3002
(dp3003
g1407
(lp3004
g1409
asg36
g37
(g1410
tp3005
Rp3006
(dp3007
g42
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3008
sg1409
g45
sg51
g52
sbsg1416
(dp3009
g1418
Nssg1419
(lp3010
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp3011
sg83
Nsg80
Nsg90
Nsg66
g1423
sg78
S'montage_anat_0'
p3012
sg82
I00
sg84
Nsg85
I00
sg86
g1423
sg87
Nsg88
(lp3013
sg91
Nsb(dp3014
sg5
(g25
g7
Ntp3015
Rp3016
(dp3017
g29
(dp3018
sg31
g5
(g163
g7
Ntp3019
Rp3020
(dp3021
g36
g37
(g167
tp3022
Rp3023
(dp3024
g51
g52
sg1476
g45
sg1477
g45
sg1478
g45
sg1479
g45
sbsg178
(lp3025
g1477
ag1478
ag1476
ag1479
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp3026
sg78
g3012
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp3027
sg90
Nsg91
Nsb(dp3028
sg5
(g25
g7
Ntp3029
Rp3030
(dp3031
g29
(dp3032
sg31
g5
(g1403
g7
Ntp3033
Rp3034
(dp3035
g1407
(lp3036
g1438
ag1437
ag1452
ag1453
asg36
g37
(g1410
tp3037
Rp3038
(dp3039
g42
I00
sg1452
S't1_edge_on_mean_func_in_t1_a.png'
p3040
sg1438
g45
sg1453
g1458
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3041
sg1437
g45
sg51
g52
sbsg1416
(dp3042
g1452
Nssg1419
(lp3043
g1452
asg1421
Nsbsg74
Nsg66
g1462
sg76
(dp3044
sg78
g3012
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1462
sg87
Nsg88
(lp3045
sg90
Nsg91
Nsb(dp3046
sg5
(g25
g7
Ntp3047
Rp3048
(dp3049
g29
(dp3050
sg31
g5
(g1403
g7
Ntp3051
Rp3052
(dp3053
g1407
(lp3054
g1438
ag1437
ag1452
ag1453
asg36
g37
(g1410
tp3055
Rp3056
(dp3057
g42
I00
sg1452
S't1_edge_on_mean_func_in_t1_s.png'
p3058
sg1438
g45
sg1453
g1458
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3059
sg1437
g45
sg51
g52
sbsg1416
(dp3060
g1452
Nssg1419
(lp3061
g1452
asg1421
Nsbsg74
Nsg66
g1499
sg76
(dp3062
sg78
g3012
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp3063
sg90
Nsg91
Nsb(dp3064
sg5
(g25
g7
Ntp3065
Rp3066
(dp3067
g29
(dp3068
sg31
g5
(g1403
g7
Ntp3069
Rp3070
(dp3071
g1407
(lp3072
g1409
asg36
g37
(g1410
tp3073
Rp3074
(dp3075
g42
I00
sg1414
g3008
sg1409
g45
sg51
g52
sbsg1416
(dp3076
g1418
Nssg1419
(lp3077
g1418
asg1421
Nsbsg74
Nsg66
g1516
sg76
(dp3078
sg78
g3012
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp3079
sg90
Nsg91
Nsb(dp3080
sg5
(g25
g7
Ntp3081
Rp3082
(dp3083
g29
(dp3084
sg31
g5
(g163
g7
Ntp3085
Rp3086
(dp3087
g36
g37
(g167
tp3088
Rp3089
(dp3090
g51
g52
sg1437
g45
sg1438
g45
sbsg178
(lp3091
g1437
ag1438
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp3092
sg78
g3012
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp3093
sg90
Nsg91
Nsb(dp3094
ssg247
(dp3095
sg249
(dp3096
g2998
(dp3097
g3048
(dp3098
g253
(lp3099
(g1418
g1438
tp3100
assg3030
(dp3101
g253
(lp3102
(g1418
g1438
tp3103
assg3016
(dp3104
g253
(lp3105
(g1418
g1479
tp3106
asssg3016
(dp3107
sg3030
(dp3108
g3016
(dp3109
g253
(lp3110
(g1452
g1477
tp3111
asssg3048
(dp3112
g3016
(dp3113
g253
(lp3114
(g1452
g1478
tp3115
asssg3066
(dp3116
g3048
(dp3117
g253
(lp3118
(g1418
g1437
tp3119
assg3030
(dp3120
g253
(lp3121
(g1418
g1437
tp3122
assg3016
(dp3123
g253
(lp3124
(g1418
g1476
tp3125
asssg3082
(dp3126
g3066
(dp3127
g253
(lp3128
(g1437
g1409
tp3129
assg2998
(dp3130
g253
(lp3131
(g1438
g1409
tp3132
assssg295
g3096
sg296
(dp3133
g2998
(dp3134
g3082
g3130
ssg3016
(dp3135
g3048
g3113
sg3066
g3123
sg3030
g3109
sg2998
g3104
ssg3030
(dp3136
g3066
g3120
sg2998
g3101
ssg3048
(dp3137
g3066
g3117
sg2998
g3098
ssg3066
(dp3138
g3082
g3127
ssg3082
(dp3139
ssg304
g3096
sbsg66
g3012
sg78
g1067
sg86
g3012
sg87
g306
((lp3140
(lp3141
g309
ag306
((lp3142
(lp3143
g312
ag309
aa(lp3144
g314
ag315
aa(lp3145
g317
ag318
aa(lp3146
g320
ag321
aa(lp3147
g323
ag324
aa(lp3148
g326
ag327
aa(lp3149
g329
ag330
aa(lp3150
g332
ag333
aatp3151
Rp3152
aa(lp3153
g337
ag306
((lp3154
(lp3155
g312
ag337
aa(lp3156
g341
ag342
aa(lp3157
g344
ag345
aa(lp3158
g347
ag348
aa(lp3159
g350
ag351
aa(lp3160
g353
ag354
aa(lp3161
g356
ag357
aa(lp3162
g359
ag360
aa(lp3163
g362
ag363
aa(lp3164
g365
ag366
aa(lp3165
g368
ag369
aa(lp3166
g371
ag372
aa(lp3167
g374
ag375
aa(lp3168
g377
ag378
aa(lp3169
g380
ag381
aa(lp3170
g383
ag384
aa(lp3171
g386
ag387
aa(lp3172
g389
ag390
aa(lp3173
g392
ag393
aatp3174
Rp3175
aa(lp3176
g397
ag306
((lp3177
(lp3178
g312
ag397
aa(lp3179
g401
ag402
aatp3180
Rp3181
aatp3182
Rp3183
sg91
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg2033
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g25
g7
Ntp3201
Rp3202
(dp3203
g29
(dp3204
sg31
g5
(g1403
g7
Ntp3205
Rp3206
(dp3207
g1407
(lp3208
g1409
asg36
g37
(g1410
tp3209
Rp3210
(dp3211
g42
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3212
sg1409
g45
sg51
g52
sbsg1416
(dp3213
g1418
Nssg1419
(lp3214
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp3215
sg83
Nsg80
Nsg90
Nsg66
S'resample_o_gm'
p3216
sg78
S'montage_csf_gm_wm_0'
p3217
sg82
I00
sg84
Nsg85
I00
sg86
g3216
sg87
Nsg88
(lp3218
sg91
Nsb(dp3219
sg5
(g25
g7
Ntp3220
Rp3221
(dp3222
g29
(dp3223
sg31
g5
(g163
g7
Ntp3224
Rp3225
(dp3226
g36
g37
(g167
tp3227
Rp3228
(dp3229
g51
g52
sS'resampled_overlay_csf'
p3230
g45
sS'resampled_overlay_gm'
p3231
g45
sg1477
g45
sg1478
g45
sg1476
g45
sS'resampled_overlay_wm'
p3232
g45
sbsg178
(lp3233
g1477
ag1478
ag1476
ag3230
ag3232
ag3231
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp3234
sg78
g3217
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp3235
sg90
Nsg91
Nsb(dp3236
sg5
(g25
g7
Ntp3237
Rp3238
(dp3239
g29
(dp3240
sg31
g5
(g1403
g7
Ntp3241
Rp3242
(dp3243
g1407
(lp3244
S'overlay_csf'
p3245
aS'overlay_wm'
p3246
aS'overlay_gm'
p3247
ag1437
ag1452
asg36
g37
(g1410
tp3248
Rp3249
(dp3250
g42
I00
sg1452
S'montage_csf_gm_wm_s.png'
p3251
sg3247
g45
sg1414
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3252
sg3245
g45
sg3246
g45
sg1437
g45
sg51
g52
sbsg1416
(dp3253
g1452
Nssg1419
(lp3254
g1452
asg1421
Nsbsg74
Nsg66
g1499
sg76
(dp3255
sg78
g3217
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp3256
sg90
Nsg91
Nsb(dp3257
sg5
(g25
g7
Ntp3258
Rp3259
(dp3260
g29
(dp3261
sg31
g5
(g163
g7
Ntp3262
Rp3263
(dp3264
g36
g37
(g167
tp3265
Rp3266
(dp3267
g51
g52
sg3247
g45
sg1437
g45
sg3245
g45
sg3246
g45
sbsg178
(lp3268
g1437
ag3245
ag3246
ag3247
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp3269
sg78
g3217
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp3270
sg90
Nsg91
Nsb(dp3271
sg5
(g25
g7
Ntp3272
Rp3273
(dp3274
g29
(dp3275
sg31
g5
(g1403
g7
Ntp3276
Rp3277
(dp3278
g1407
(lp3279
g3245
ag3246
ag3247
ag1437
ag1452
asg36
g37
(g1410
tp3280
Rp3281
(dp3282
g42
I00
sg1452
S'montage_csf_gm_wm_a.png'
p3283
sg3247
g45
sg1414
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3284
sg3245
g45
sg3246
g45
sg1437
g45
sg51
g52
sbsg1416
(dp3285
g1452
Nssg1419
(lp3286
g1452
asg1421
Nsbsg74
Nsg66
g1462
sg76
(dp3287
sg78
g3217
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1462
sg87
Nsg88
(lp3288
sg90
Nsg91
Nsb(dp3289
sg5
(g25
g7
Ntp3290
Rp3291
(dp3292
g29
(dp3293
sg31
g5
(g1403
g7
Ntp3294
Rp3295
(dp3296
g1407
(lp3297
g1409
asg36
g37
(g1410
tp3298
Rp3299
(dp3300
g42
I00
sg1414
g3212
sg1409
g45
sg51
g52
sbsg1416
(dp3301
g1418
Nssg1419
(lp3302
g1418
asg1421
Nsbsg74
Nsg66
g1516
sg76
(dp3303
sg78
g3217
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp3304
sg90
Nsg91
Nsb(dp3305
sg5
(g25
g7
Ntp3306
Rp3307
(dp3308
g29
(dp3309
sg31
g5
(g1403
g7
Ntp3310
Rp3311
(dp3312
g1407
(lp3313
g1409
asg36
g37
(g1410
tp3314
Rp3315
(dp3316
g42
I00
sg1414
g3212
sg1409
g45
sg51
g52
sbsg1416
(dp3317
g1418
Nssg1419
(lp3318
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp3319
sg83
Nsg80
Nsg90
Nsg66
S'resample_o_wm'
p3320
sg78
g3217
sg82
I00
sg84
Nsg85
I00
sg86
g3320
sg87
Nsg88
(lp3321
sg91
Nsb(dp3322
sg5
(g25
g7
Ntp3323
Rp3324
(dp3325
g29
(dp3326
sg31
g5
(g1403
g7
Ntp3327
Rp3328
(dp3329
g1407
(lp3330
g1409
asg36
g37
(g1410
tp3331
Rp3332
(dp3333
g42
I00
sg1414
g3212
sg1409
g45
sg51
g52
sbsg1416
(dp3334
g1418
Nssg1419
(lp3335
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp3336
sg83
Nsg80
Nsg90
Nsg66
S'resample_o_csf'
p3337
sg78
g3217
sg82
I00
sg84
Nsg85
I00
sg86
g3337
sg87
Nsg88
(lp3338
sg91
Nsb(dp3339
ssg247
(dp3340
sg249
(dp3341
g3202
(dp3342
g3221
(dp3343
g253
(lp3344
(g1418
g3231
tp3345
assg3273
(dp3346
g253
(lp3347
(g1418
g3247
tp3348
assg3238
(dp3349
g253
(lp3350
(g1418
g3247
tp3351
asssg3221
(dp3352
sg3238
(dp3353
g3221
(dp3354
g253
(lp3355
(g1452
g1478
tp3356
asssg3259
(dp3357
g3307
(dp3358
g253
(lp3359
(g3246
g1409
tp3360
assg3291
(dp3361
g253
(lp3362
(g1437
g1409
tp3363
assg3324
(dp3364
g253
(lp3365
(g3245
g1409
tp3366
assg3202
(dp3367
g253
(lp3368
(g3247
g1409
tp3369
asssg3273
(dp3370
g3221
(dp3371
g253
(lp3372
(g1452
g1477
tp3373
asssg3291
(dp3374
g3221
(dp3375
g253
(lp3376
(g1418
g1476
tp3377
assg3273
(dp3378
g253
(lp3379
(g1418
g1437
tp3380
assg3238
(dp3381
g253
(lp3382
(g1418
g1437
tp3383
asssg3307
(dp3384
g3221
(dp3385
g253
(lp3386
(g1418
g3232
tp3387
assg3273
(dp3388
g253
(lp3389
(g1418
g3246
tp3390
assg3238
(dp3391
g253
(lp3392
(g1418
g3246
tp3393
asssg3324
(dp3394
g3221
(dp3395
g253
(lp3396
(g1418
g3230
tp3397
assg3273
(dp3398
g253
(lp3399
(g1418
g3245
tp3400
assg3238
(dp3401
g253
(lp3402
(g1418
g3245
tp3403
assssg295
g3341
sg296
(dp3404
g3202
(dp3405
g3259
g3367
ssg3221
(dp3406
g3202
g3343
sg3307
g3385
sg3324
g3395
sg3291
g3375
sg3238
g3354
sg3273
g3371
ssg3238
(dp3407
g3307
g3391
sg3291
g3381
sg3324
g3401
sg3202
g3349
ssg3259
(dp3408
sg3273
(dp3409
g3307
g3388
sg3291
g3378
sg3324
g3398
sg3202
g3346
ssg3291
(dp3410
g3259
g3361
ssg3307
(dp3411
g3259
g3358
ssg3324
(dp3412
g3259
g3364
sssg304
g3341
sbsg66
g3217
sg78
g1067
sg86
g3217
sg87
g306
((lp3413
(lp3414
g309
ag306
((lp3415
(lp3416
g312
ag309
aa(lp3417
g314
ag315
aa(lp3418
g317
ag318
aa(lp3419
g320
ag321
aa(lp3420
g323
ag324
aa(lp3421
g326
ag327
aa(lp3422
g329
ag330
aa(lp3423
g332
ag333
aatp3424
Rp3425
aa(lp3426
g337
ag306
((lp3427
(lp3428
g312
ag337
aa(lp3429
g341
ag342
aa(lp3430
g344
ag345
aa(lp3431
g347
ag348
aa(lp3432
g350
ag351
aa(lp3433
g353
ag354
aa(lp3434
g356
ag357
aa(lp3435
g359
ag360
aa(lp3436
g362
ag363
aa(lp3437
g365
ag366
aa(lp3438
g368
ag369
aa(lp3439
g371
ag372
aa(lp3440
g374
ag375
aa(lp3441
g377
ag378
aa(lp3442
g380
ag381
aa(lp3443
g383
ag384
aa(lp3444
g386
ag387
aa(lp3445
g389
ag390
aa(lp3446
g392
ag393
aatp3447
Rp3448
aa(lp3449
g397
ag306
((lp3450
(lp3451
g312
ag397
aa(lp3452
g401
ag402
aatp3453
Rp3454
aatp3455
Rp3456
sg91
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g25
g7
Ntp3466
Rp3467
(dp3468
g29
(dp3469
sg31
g5
(g227
g7
Ntp3470
Rp3471
(dp3472
g36
g37
(g231
tp3473
Rp3474
(dp3475
g42
I00
sg51
g52
sg46
S'-thr 0.5 -bin'
p3476
sg235
g45
sg48
g45
sg49
g45
sg236
g45
sg53
g54
sg55
g5
(g56
g57
(dp3477
g59
g60
stp3478
Rp3479
(dp3480
g64
S'environ_items'
p3481
sg66
g55
sbsg67
g45
sg68
g60
sg242
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'wm_bb_mask'
p3482
sg76
(dp3483
sg78
S'func_to_anat_bbreg_0'
p3484
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3482
sg87
Nsg88
(lp3485
sg90
Nsg91
Nsb(dp3486
sg5
(g25
g7
Ntp3487
Rp3488
(dp3489
g29
(dp3490
sg31
g5
(g163
g7
Ntp3491
Rp3492
(dp3493
g36
g37
(g167
tp3494
Rp3495
(dp3496
g51
g52
sS'linear_reg_matrix'
p3497
g45
sS'bbr_schedule'
p3498
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3499
sS'anat_wm_segmentation'
p3500
g45
sS'anat_skull'
p3501
g45
sg2540
g45
sbsg178
(lp3502
g2540
ag3501
ag3497
ag3500
ag3498
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp3503
sg78
g3484
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp3504
sg90
Nsg91
Nsb(dp3505
sg5
(g25
g7
Ntp3506
Rp3507
(dp3508
g29
(dp3509
sg31
g5
(g163
g7
Ntp3510
Rp3511
(dp3512
g36
g37
(g167
tp3513
Rp3514
(dp3515
S'func_to_anat_linear_xfm'
p3516
g45
sg51
g52
sS'anat_func'
p3517
g45
sbsg178
(lp3518
g3516
ag3517
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp3519
sg78
g3484
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp3520
sg90
Nsg91
Nsb(dp3521
sg5
(g25
g7
Ntp3522
Rp3523
(dp3524
g29
(dp3525
sg31
g5
(g97
g7
Ntp3526
Rp3527
(dp3528
g36
g37
(g101
tp3529
Rp3530
(dp3531
g105
g45
sg51
g52
sg106
g45
sg107
g45
sg108
g45
sg109
g45
sg110
g45
sg111
g45
sg113
g45
sg114
g45
sg115
g45
sg116
g45
sg117
g45
sg118
g45
sg119
g45
sg120
g45
sg121
g45
sg122
g45
sg67
g45
sg123
g45
sg124
g45
sg125
g45
sg126
g45
sg42
I00
sg127
g45
sg128
g45
sg49
g45
sg129
g45
sg130
g45
sg53
g54
sg131
g45
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg48
g45
sg136
g45
sg137
g45
sg138
g45
sg139
I6
sg140
g45
sg141
g45
sg142
g45
sg143
g45
sg144
g45
sg55
g5
(g56
g57
(dp3532
g59
g60
stp3533
Rp3534
(dp3535
g64
S'environ_items'
p3536
sg66
g55
sbsg150
g45
sg151
g45
sg68
g60
sg152
g45
sg153
g45
sg154
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'bbreg_func_to_anat'
p3537
sg76
(dp3538
sg78
g3484
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3537
sg87
Nsg88
(lp3539
sg90
Nsg91
Nsb(dp3540
ssg247
(dp3541
sg249
(dp3542
g3467
(dp3543
g3523
(dp3544
g253
(lp3545
((g48
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3546
(ttp3547
g49
tp3548
asssg3488
(dp3549
g3467
(dp3550
g253
(lp3551
(g3500
g67
tp3552
assg3523
(dp3553
g253
(lp3554
(g3498
g128
tp3555
a(g2540
g67
tp3556
a(g3501
g108
tp3557
a(g3497
g106
tp3558
asssg3507
(dp3559
sg3523
(dp3560
g3507
(dp3561
g253
(lp3562
(g140
g3516
tp3563
a(g48
g3517
tp3564
assssg295
g3542
sg296
(dp3565
g3467
(dp3566
g3488
g3550
ssg3488
(dp3567
sg3507
(dp3568
g3523
g3561
ssg3523
(dp3569
g3467
g3544
sg3488
g3553
sssg304
g3542
sbsg66
g3484
sg78
g1067
sg86
g3484
sg87
g306
((lp3570
(lp3571
g309
ag306
((lp3572
(lp3573
g312
ag309
aa(lp3574
g314
ag315
aa(lp3575
g317
ag318
aa(lp3576
g320
ag321
aa(lp3577
g323
ag324
aa(lp3578
g326
ag327
aa(lp3579
g329
ag330
aa(lp3580
g332
ag333
aatp3581
Rp3582
aa(lp3583
g337
ag306
((lp3584
(lp3585
g312
ag337
aa(lp3586
g341
ag342
aa(lp3587
g344
ag345
aa(lp3588
g347
ag348
aa(lp3589
g350
ag351
aa(lp3590
g353
ag354
aa(lp3591
g356
ag357
aa(lp3592
g359
ag360
aa(lp3593
g362
ag363
aa(lp3594
g365
ag366
aa(lp3595
g368
ag369
aa(lp3596
g371
ag372
aa(lp3597
g374
ag375
aa(lp3598
g377
ag378
aa(lp3599
g380
ag381
aa(lp3600
g383
ag384
aa(lp3601
g386
ag387
aa(lp3602
g389
ag390
aa(lp3603
g392
ag393
aatp3604
Rp3605
aa(lp3606
g397
ag306
((lp3607
(lp3608
g312
ag397
aa(lp3609
g401
ag402
aatp3610
Rp3611
aatp3612
Rp3613
sg91
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g25
g7
Ntp3620
Rp3621
(dp3622
g29
(dp3623
sg31
g5
(g1403
g7
Ntp3624
Rp3625
(dp3626
g1407
(lp3627
S'measure_file'
p3628
asg36
g37
(g1410
tp3629
Rp3630
(dp3631
g42
I00
sg51
g52
sg1414
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g45
sbsg1416
(dp3633
S'snr_storefl'
p3634
Nssg1419
(lp3635
g3634
asg1421
Nsbsg74
Nsg66
S'snr_val0'
p3636
sg76
(dp3637
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3636
sg87
Nsg88
(lp3638
sg90
Nsg91
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g25
g7
Ntp3648
Rp3649
(dp3650
g29
(dp3651
sg31
g5
(g1403
g7
Ntp3652
Rp3653
(dp3654
g1407
(lp3655
g3628
ag1863
asg36
g37
(g1410
tp3656
Rp3657
(dp3658
g42
I00
sg51
g52
sg1414
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g45
sg1863
S'snr'
p3660
sbsg1416
(dp3661
g1870
Nssg1419
(lp3662
g1870
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp3663
sg83
Nsg80
Nsg90
Nsg66
S'hist_snr_0'
p3664
sg78
g1067
sg82
I00
sg84
Nsg85
I00
sg86
g3664
sg87
Nsg88
(lp3665
sg91
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g25
g7
Ntp3678
Rp3679
(dp3680
g29
(dp3681
sg31
g5
(g163
g7
Ntp3682
Rp3683
(dp3684
g36
g37
(g167
tp3685
Rp3686
(dp3687
g51
g52
sS'scan'
p3688
g45
sS'subject'
p3689
S'2_1878012231'
p3690
sbsg178
(lp3691
g3689
ag3688
asg180
I01
sbsg74
Nsg66
S'inputnode'
p3692
sg76
(dp3693
sg78
S'func_gather_0'
p3694
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(lp3695
(g3688
(lp3696
S'rest_1_rest'
p3697
atp3698
asg85
I00
sg86
g3692
sg87
Nsg88
(lp3699
sg90
Nsg91
Nsb(dp3700
sg5
(g25
g7
Ntp3701
Rp3702
(dp3703
g29
(dp3704
sg31
g5
(g163
g7
Ntp3705
Rp3706
(dp3707
g36
g37
(g167
tp3708
Rp3709
(dp3710
g51
g52
sg3688
g45
sg1973
g45
sg3689
g45
sbsg178
(lp3711
g3689
ag1973
ag3688
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp3712
sg78
g3694
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp3713
sg90
Nsg91
Nsb(dp3714
sg5
(g25
g7
Ntp3715
Rp3716
(dp3717
g29
(dp3718
sg31
g5
(g1403
g7
Ntp3719
Rp3720
(dp3721
g1407
(lp3722
g3688
aS'rest_dict'
p3723
asg36
g37
(g1410
tp3724
Rp3725
(dp3726
g42
I00
sg3723
(dp3727
g3697
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-07/KKI2009-07-fMRI.nii'
p3728
ssg1414
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3729
sg51
g52
sg3688
g45
sbsg1416
(dp3730
g1973
Nssg1419
(lp3731
g1973
asg1421
Nsbsg74
Nsg66
S'selectrest'
p3732
sg76
(dp3733
sg78
g3694
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3732
sg87
Nsg88
(lp3734
sg90
Nsg91
Nsb(dp3735
ssg247
(dp3736
sg249
(dp3737
g3679
(dp3738
g3716
(dp3739
g253
(lp3740
(g3688
g3688
tp3741
assg3702
(dp3742
g253
(lp3743
(g3689
g3689
tp3744
a(g3688
g3688
tp3745
asssg3702
(dp3746
sg3716
(dp3747
g3702
(dp3748
g253
(lp3749
(g1973
g1973
tp3750
assssg295
g3737
sg296
(dp3751
g3679
(dp3752
sg3702
(dp3753
g3679
g3742
sg3716
g3748
ssg3716
(dp3754
g3679
g3739
sssg304
g3737
sbsg66
g3694
sg78
g1067
sg86
g3694
sg87
g306
((lp3755
(lp3756
g309
ag306
((lp3757
(lp3758
g312
ag309
aa(lp3759
g314
ag315
aa(lp3760
g317
ag318
aa(lp3761
g320
ag321
aa(lp3762
g323
ag324
aa(lp3763
g326
ag327
aa(lp3764
g329
ag330
aa(lp3765
g332
ag333
aatp3766
Rp3767
aa(lp3768
g337
ag306
((lp3769
(lp3770
g312
ag337
aa(lp3771
g341
ag342
aa(lp3772
g344
ag345
aa(lp3773
g347
ag348
aa(lp3774
g350
ag351
aa(lp3775
g353
ag354
aa(lp3776
g356
ag357
aa(lp3777
g359
ag360
aa(lp3778
g362
ag363
aa(lp3779
g365
ag366
aa(lp3780
g368
ag369
aa(lp3781
g371
ag372
aa(lp3782
g374
ag375
aa(lp3783
g377
ag378
aa(lp3784
g380
ag381
aa(lp3785
g383
ag384
aa(lp3786
g386
ag387
aa(lp3787
g389
ag390
aa(lp3788
g392
ag393
aatp3789
Rp3790
aa(lp3791
g397
ag306
((lp3792
(lp3793
g312
ag397
aa(lp3794
g401
ag402
aatp3795
Rp3796
aatp3797
Rp3798
sg91
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g25
g7
Ntp3808
Rp3809
(dp3810
g29
(dp3811
sg31
g5
(g1226
g7
Ntp3812
Rp3813
(dp3814
g36
g37
(g1230
tp3815
Rp3816
(dp3817
g42
I00
sg1234
g45
sg67
g45
sg1235
g45
sg48
g45
sg137
g45
sg49
g45
sg111
g45
sg1175
g45
sg1182
g1820
sg53
g54
sg55
g5
(g56
g57
(dp3818
g59
g60
stp3819
Rp3820
(dp3821
g64
S'environ_items'
p3822
sg66
g55
sbsg1241
g45
sg1242
g45
sg68
g60
sg1243
g45
sg1244
g45
sg51
g52
sg1245
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mni_fsl_warp_0'
p3823
sg76
(dp3824
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3823
sg87
Nsg88
(lp3825
sg90
Nsg91
Nsbg48
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g25
g7
Ntp3835
Rp3836
(dp3837
g29
(dp3838
sg31
g5
(g163
g7
Ntp3839
Rp3840
(dp3841
g36
g37
(g167
tp3842
Rp3843
(dp3844
g51
g52
sg68
(lp3845
I01
aI01
asg1973
g45
sbsg178
(lp3846
g1973
ag68
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp3847
sg78
S'voxel_timeseries_0'
p3848
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp3849
sg90
Nsg91
Nsb(dp3850
sg5
(g25
g7
Ntp3851
Rp3852
(dp3853
g29
(dp3854
sg31
g5
(g1403
g7
Ntp3855
Rp3856
(dp3857
g1407
(lp3858
S'data_file'
p3859
aS'template'
p3860
ag68
asg36
g37
(g1410
tp3861
Rp3862
(dp3863
g42
I00
sg51
g52
sg3859
g45
sg1414
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3864
sg3860
g45
sg68
g45
sbsg1416
(dp3865
g48
Nssg1419
(lp3866
g48
asg1421
Nsbsg74
Nsg66
S'timeseries_voxel'
p3867
sg76
(dp3868
sg78
g3848
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3867
sg87
Nsg88
(lp3869
sg90
Nsg91
Nsb(dp3870
sg5
(g25
g7
Ntp3871
Rp3872
(dp3873
g29
(dp3874
sg31
g5
(g163
g7
Ntp3875
Rp3876
(dp3877
g36
g37
(g167
tp3878
Rp3879
(dp3880
g51
g52
sS'mask_outputs'
p3881
g45
sbsg178
(lp3882
g3881
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp3883
sg78
g3848
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp3884
sg90
Nsg91
Nsb(dp3885
sg5
(g25
g7
Ntp3886
Rp3887
(dp3888
g29
(dp3889
sg31
g5
(g163
g7
Ntp3890
Rp3891
(dp3892
g36
g37
(g167
tp3893
Rp3894
(dp3895
g51
g52
sg1974
g45
sbsg178
(lp3896
g1974
asg180
I01
sbsg74
Nsg66
S'input_mask'
p3897
sg76
(dp3898
sg78
g3848
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3897
sg87
Nsg88
(lp3899
sg90
Nsg91
Nsb(dp3900
ssg247
(dp3901
sg249
(dp3902
g3836
(dp3903
g3852
(dp3904
g253
(lp3905
(g1973
g3859
tp3906
a(g68
g68
tp3907
asssg3852
(dp3908
g3872
(dp3909
g253
(lp3910
(g48
g3881
tp3911
asssg3872
(dp3912
sg3887
(dp3913
g3852
(dp3914
g253
(lp3915
(g1974
g3860
tp3916
assssg295
g3902
sg296
(dp3917
g3836
(dp3918
sg3852
(dp3919
g3836
g3904
sg3887
g3914
ssg3872
(dp3920
g3852
g3909
ssg3887
(dp3921
ssg304
g3902
sbsg66
g3848
sg78
g1067
sg86
g3848
sg87
g306
((lp3922
(lp3923
g309
ag306
((lp3924
(lp3925
g312
ag309
aa(lp3926
g314
ag315
aa(lp3927
g317
ag318
aa(lp3928
g320
ag321
aa(lp3929
g323
ag324
aa(lp3930
g326
ag327
aa(lp3931
g329
ag330
aa(lp3932
g332
ag333
aatp3933
Rp3934
aa(lp3935
g337
ag306
((lp3936
(lp3937
g312
ag337
aa(lp3938
g341
ag342
aa(lp3939
g344
ag345
aa(lp3940
g347
ag348
aa(lp3941
g350
ag351
aa(lp3942
g353
ag354
aa(lp3943
g356
ag357
aa(lp3944
g359
ag360
aa(lp3945
g362
ag363
aa(lp3946
g365
ag366
aa(lp3947
g368
ag369
aa(lp3948
g371
ag372
aa(lp3949
g374
ag375
aa(lp3950
g377
ag378
aa(lp3951
g380
ag381
aa(lp3952
g383
ag384
aa(lp3953
g386
ag387
aa(lp3954
g389
ag390
aa(lp3955
g392
ag393
aatp3956
Rp3957
aa(lp3958
g397
ag306
((lp3959
(lp3960
g312
ag397
aa(lp3961
g401
ag402
aatp3962
Rp3963
aatp3964
Rp3965
sg91
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g25
g7
Ntp3986
Rp3987
(dp3988
g29
(dp3989
sg31
g5
(g163
g7
Ntp3990
Rp3991
(dp3992
g36
g37
(g167
tp3993
Rp3994
(dp3995
g51
g52
sg1476
g45
sg1477
g45
sg1478
g45
sg1479
g45
sbsg178
(lp3996
g1477
ag1478
ag1476
ag1479
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp3997
sg78
S'montage_mni_anat_0'
p3998
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp3999
sg90
Nsg91
Nsb(dp4000
sg5
(g25
g7
Ntp4001
Rp4002
(dp4003
g29
(dp4004
sg31
g5
(g163
g7
Ntp4005
Rp4006
(dp4007
g36
g37
(g167
tp4008
Rp4009
(dp4010
g51
g52
sg1437
g45
sg1438
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p4011
sbsg178
(lp4012
g1437
ag1438
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp4013
sg78
g3998
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp4014
sg90
Nsg91
Nsb(dp4015
sg5
(g25
g7
Ntp4016
Rp4017
(dp4018
g29
(dp4019
sg31
g5
(g1403
g7
Ntp4020
Rp4021
(dp4022
g1407
(lp4023
g1438
ag1437
ag1452
ag1453
asg36
g37
(g1410
tp4024
Rp4025
(dp4026
g42
I00
sg1452
S'mni_anat_s.png'
p4027
sg1438
g45
sg1453
g1458
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4028
sg1437
g45
sg51
g52
sbsg1416
(dp4029
g1452
Nssg1419
(lp4030
g1452
asg1421
Nsbsg74
Nsg66
g1499
sg76
(dp4031
sg78
g3998
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp4032
sg90
Nsg91
Nsb(dp4033
sg5
(g25
g7
Ntp4034
Rp4035
(dp4036
g29
(dp4037
sg31
g5
(g1403
g7
Ntp4038
Rp4039
(dp4040
g1407
(lp4041
g1438
ag1437
ag1452
ag1453
asg36
g37
(g1410
tp4042
Rp4043
(dp4044
g42
I00
sg1452
S'mni_anat_a.png'
p4045
sg1438
g45
sg1453
g1458
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4046
sg1437
g45
sg51
g52
sbsg1416
(dp4047
g1452
Nssg1419
(lp4048
g1452
asg1421
Nsbsg74
Nsg66
g1462
sg76
(dp4049
sg78
g3998
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1462
sg87
Nsg88
(lp4050
sg90
Nsg91
Nsb(dp4051
sg5
(g25
g7
Ntp4052
Rp4053
(dp4054
g29
(dp4055
sg31
g5
(g1403
g7
Ntp4056
Rp4057
(dp4058
g1407
(lp4059
g1409
asg36
g37
(g1410
tp4060
Rp4061
(dp4062
g42
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4063
sg1409
g45
sg51
g52
sbsg1416
(dp4064
g1418
Nssg1419
(lp4065
g1418
asg1421
Nsbsg74
Nsg66
g1516
sg76
(dp4066
sg78
g3998
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp4067
sg90
Nsg91
Nsb(dp4068
sg5
(g25
g7
Ntp4069
Rp4070
(dp4071
g29
(dp4072
sg31
g5
(g1403
g7
Ntp4073
Rp4074
(dp4075
g1407
(lp4076
g1409
asg36
g37
(g1410
tp4077
Rp4078
(dp4079
g42
I00
sg1414
g4063
sg1409
g45
sg51
g52
sbsg1416
(dp4080
g1418
Nssg1419
(lp4081
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp4082
sg83
Nsg80
Nsg90
Nsg66
g1423
sg78
g3998
sg82
I00
sg84
Nsg85
I00
sg86
g1423
sg87
Nsg88
(lp4083
sg91
Nsb(dp4084
ssg247
(dp4085
sg249
(dp4086
g3987
(dp4087
sg4002
(dp4088
g4053
(dp4089
g253
(lp4090
(g1437
g1409
tp4091
assg4070
(dp4092
g253
(lp4093
(g1438
g1409
tp4094
asssg4017
(dp4095
g3987
(dp4096
g253
(lp4097
(g1452
g1478
tp4098
asssg4035
(dp4099
g3987
(dp4100
g253
(lp4101
(g1452
g1477
tp4102
asssg4053
(dp4103
g4017
(dp4104
g253
(lp4105
(g1418
g1437
tp4106
assg4035
(dp4107
g253
(lp4108
(g1418
g1437
tp4109
assg3987
(dp4110
g253
(lp4111
(g1418
g1476
tp4112
asssg4070
(dp4113
g4017
(dp4114
g253
(lp4115
(g1418
g1438
tp4116
assg4035
(dp4117
g253
(lp4118
(g1418
g1438
tp4119
assg3987
(dp4120
g253
(lp4121
(g1418
g1479
tp4122
assssg295
g4086
sg296
(dp4123
g3987
(dp4124
g4053
g4110
sg4017
g4096
sg4070
g4120
sg4035
g4100
ssg4002
(dp4125
sg4017
(dp4126
g4053
g4104
sg4070
g4114
ssg4035
(dp4127
g4053
g4107
sg4070
g4117
ssg4053
(dp4128
g4002
g4089
ssg4070
(dp4129
g4002
g4092
sssg304
g4086
sbsg66
g3998
sg78
g1067
sg86
g3998
sg87
g306
((lp4130
(lp4131
g309
ag306
((lp4132
(lp4133
g312
ag309
aa(lp4134
g314
ag315
aa(lp4135
g317
ag318
aa(lp4136
g320
ag321
aa(lp4137
g323
ag324
aa(lp4138
g326
ag327
aa(lp4139
g329
ag330
aa(lp4140
g332
ag333
aatp4141
Rp4142
aa(lp4143
g337
ag306
((lp4144
(lp4145
g312
ag337
aa(lp4146
g341
ag342
aa(lp4147
g344
ag345
aa(lp4148
g347
ag348
aa(lp4149
g350
ag351
aa(lp4150
g353
ag354
aa(lp4151
g356
ag357
aa(lp4152
g359
ag360
aa(lp4153
g362
ag363
aa(lp4154
g365
ag366
aa(lp4155
g368
ag369
aa(lp4156
g371
ag372
aa(lp4157
g374
ag375
aa(lp4158
g377
ag378
aa(lp4159
g380
ag381
aa(lp4160
g383
ag384
aa(lp4161
g386
ag387
aa(lp4162
g389
ag390
aa(lp4163
g392
ag393
aatp4164
Rp4165
aa(lp4166
g397
ag306
((lp4167
(lp4168
g312
ag397
aa(lp4169
g401
ag402
aatp4170
Rp4171
aatp4172
Rp4173
sg91
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg2036
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g25
g7
Ntp4188
Rp4189
(dp4190
g29
(dp4191
sg31
g5
(g1226
g7
Ntp4192
Rp4193
(dp4194
g36
g37
(g1230
tp4195
Rp4196
(dp4197
g42
I00
sg1234
g45
sg67
g45
sg1235
g45
sg48
g45
sg137
g45
sg49
g45
sg111
S'nn'
p4198
sg1175
g45
sg1182
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg53
g54
sg55
g5
(g56
g57
(dp4200
g59
g60
stp4201
Rp4202
(dp4203
g64
S'environ_items'
p4204
sg66
g55
sbsg1241
g45
sg1242
g45
sg68
g60
sg1243
g45
sg1244
g45
sg51
g52
sg1245
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mni_fsl_warp_mask_0'
p4205
sg76
(dp4206
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4205
sg87
Nsg88
(lp4207
sg90
Nsg91
Nsbg48
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g25
g7
Ntp4217
Rp4218
(dp4219
g29
(dp4220
sg31
g5
(g1403
g7
Ntp4221
Rp4222
(dp4223
g1407
(lp4224
g1438
ag1437
ag1452
ag1453
asg36
g37
(g1410
tp4225
Rp4226
(dp4227
g42
I00
sg1452
S'skull_vis_a.png'
p4228
sg1438
g45
sg1453
g1458
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4229
sg1437
g45
sg51
g52
sbsg1416
(dp4230
g1452
Nssg1419
(lp4231
g1452
asg1421
Nsbsg74
Nsg66
g1462
sg76
(dp4232
sg78
S'montage_skull_0'
p4233
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1462
sg87
Nsg88
(lp4234
sg90
Nsg91
Nsb(dp4235
sg5
(g25
g7
Ntp4236
Rp4237
(dp4238
g29
(dp4239
sg31
g5
(g163
g7
Ntp4240
Rp4241
(dp4242
g36
g37
(g167
tp4243
Rp4244
(dp4245
g51
g52
sg1476
g45
sg1477
g45
sg1478
g45
sg1479
g45
sbsg178
(lp4246
g1477
ag1478
ag1476
ag1479
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp4247
sg78
g4233
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp4248
sg90
Nsg91
Nsb(dp4249
sg5
(g25
g7
Ntp4250
Rp4251
(dp4252
g29
(dp4253
sg31
g5
(g1403
g7
Ntp4254
Rp4255
(dp4256
g1407
(lp4257
g1409
asg36
g37
(g1410
tp4258
Rp4259
(dp4260
g42
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4261
sg1409
g45
sg51
g52
sbsg1416
(dp4262
g1418
Nssg1419
(lp4263
g1418
asg1421
Nsbsg74
Nsg66
g1516
sg76
(dp4264
sg78
g4233
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp4265
sg90
Nsg91
Nsb(dp4266
sg5
(g25
g7
Ntp4267
Rp4268
(dp4269
g29
(dp4270
sg31
g5
(g1403
g7
Ntp4271
Rp4272
(dp4273
g1407
(lp4274
g1438
ag1437
ag1452
ag1453
asg36
g37
(g1410
tp4275
Rp4276
(dp4277
g42
I00
sg1452
S'skull_vis_s.png'
p4278
sg1438
g45
sg1453
g1458
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4279
sg1437
g45
sg51
g52
sbsg1416
(dp4280
g1452
Nssg1419
(lp4281
g1452
asg1421
Nsbsg74
Nsg66
g1499
sg76
(dp4282
sg78
g4233
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp4283
sg90
Nsg91
Nsb(dp4284
sg5
(g25
g7
Ntp4285
Rp4286
(dp4287
g29
(dp4288
sg31
g5
(g1403
g7
Ntp4289
Rp4290
(dp4291
g1407
(lp4292
g1409
asg36
g37
(g1410
tp4293
Rp4294
(dp4295
g42
I00
sg1414
g4261
sg1409
g45
sg51
g52
sbsg1416
(dp4296
g1418
Nssg1419
(lp4297
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp4298
sg83
Nsg80
Nsg90
Nsg66
g1423
sg78
g4233
sg82
I00
sg84
Nsg85
I00
sg86
g1423
sg87
Nsg88
(lp4299
sg91
Nsb(dp4300
sg5
(g25
g7
Ntp4301
Rp4302
(dp4303
g29
(dp4304
sg31
g5
(g163
g7
Ntp4305
Rp4306
(dp4307
g36
g37
(g167
tp4308
Rp4309
(dp4310
g51
g52
sg1437
g45
sg1438
g45
sbsg178
(lp4311
g1437
ag1438
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp4312
sg78
g4233
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp4313
sg90
Nsg91
Nsb(dp4314
ssg247
(dp4315
sg249
(dp4316
g4218
(dp4317
g4237
(dp4318
g253
(lp4319
(g1452
g1477
tp4320
asssg4237
(dp4321
sg4251
(dp4322
g4218
(dp4323
g253
(lp4324
(g1418
g1437
tp4325
assg4237
(dp4326
g253
(lp4327
(g1418
g1476
tp4328
assg4268
(dp4329
g253
(lp4330
(g1418
g1437
tp4331
asssg4268
(dp4332
g4237
(dp4333
g253
(lp4334
(g1452
g1478
tp4335
asssg4286
(dp4336
g4218
(dp4337
g253
(lp4338
(g1418
g1438
tp4339
assg4237
(dp4340
g253
(lp4341
(g1418
g1479
tp4342
assg4268
(dp4343
g253
(lp4344
(g1418
g1438
tp4345
asssg4302
(dp4346
g4286
(dp4347
g253
(lp4348
(g1438
g1409
tp4349
assg4251
(dp4350
g253
(lp4351
(g1437
g1409
tp4352
assssg295
g4316
sg296
(dp4353
g4218
(dp4354
g4286
g4337
sg4251
g4323
ssg4237
(dp4355
g4286
g4340
sg4268
g4333
sg4251
g4326
sg4218
g4318
ssg4251
(dp4356
g4302
g4350
ssg4268
(dp4357
g4286
g4343
sg4251
g4329
ssg4286
(dp4358
g4302
g4347
ssg4302
(dp4359
ssg304
g4316
sbsg66
g4233
sg78
g1067
sg86
g4233
sg87
g306
((lp4360
(lp4361
g309
ag306
((lp4362
(lp4363
g312
ag309
aa(lp4364
g314
ag315
aa(lp4365
g317
ag318
aa(lp4366
g320
ag321
aa(lp4367
g323
ag324
aa(lp4368
g326
ag327
aa(lp4369
g329
ag330
aa(lp4370
g332
ag333
aatp4371
Rp4372
aa(lp4373
g337
ag306
((lp4374
(lp4375
g312
ag337
aa(lp4376
g341
ag342
aa(lp4377
g344
ag345
aa(lp4378
g347
ag348
aa(lp4379
g350
ag351
aa(lp4380
g353
ag354
aa(lp4381
g356
ag357
aa(lp4382
g359
ag360
aa(lp4383
g362
ag363
aa(lp4384
g365
ag366
aa(lp4385
g368
ag369
aa(lp4386
g371
ag372
aa(lp4387
g374
ag375
aa(lp4388
g377
ag378
aa(lp4389
g380
ag381
aa(lp4390
g383
ag384
aa(lp4391
g386
ag387
aa(lp4392
g389
ag390
aa(lp4393
g392
ag393
aatp4394
Rp4395
aa(lp4396
g397
ag306
((lp4397
(lp4398
g312
ag397
aa(lp4399
g401
ag402
aatp4400
Rp4401
aatp4402
Rp4403
sg91
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2522
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2523
(g5
(g25
g7
Ntp4413
Rp4414
(dp4415
g29
(dp4416
sg31
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g36
g37
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g42
I00
sg51
g52
sS'tpattern'
p4425
g45
sg48
g45
sS'tr'
p4426
g45
sg49
g45
sg111
g45
sg2269
g2270
sS'tzero'
p4427
g45
sS'ignore'
p4428
g45
sS'rltplus'
p4429
g45
sg53
g54
sS'tslice'
p4430
g45
sg67
g45
sS'rlt'
p4431
g45
sg55
g5
(g56
g57
(dp4432
tp4433
Rp4434
(dp4435
g64
S'environ_items'
p4436
sg66
g55
sbsbsg2281
g2270
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_slice_timing_correction_0'
p4437
sg76
(dp4438
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4437
sg87
Nsg88
(lp4439
sg90
Nsg91
Nsbg48
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g25
g7
Ntp4449
Rp4450
(dp4451
g29
(dp4452
sg31
g5
(g163
g7
Ntp4453
Rp4454
(dp4455
g36
g37
(g167
tp4456
Rp4457
(dp4458
g51
g52
sg68
(lp4459
I01
aI01
asg1973
g45
sbsg178
(lp4460
g1973
ag68
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp4461
sg78
S'roi_timeseries_0'
p4462
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp4463
sg90
Nsg91
Nsb(dp4464
sg5
(g25
g7
Ntp4465
Rp4466
(dp4467
g29
(dp4468
sg31
g5
(g163
g7
Ntp4469
Rp4470
(dp4471
g36
g37
(g167
tp4472
Rp4473
(dp4474
g51
g52
sS'roi_outputs'
p4475
g45
sbsg178
(lp4476
g4475
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp4477
sg78
g4462
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp4478
sg90
Nsg91
Nsb(dp4479
sg5
(g25
g7
Ntp4480
Rp4481
(dp4482
g29
(dp4483
sg31
g5
(g163
g7
Ntp4484
Rp4485
(dp4486
g36
g37
(g167
tp4487
Rp4488
(dp4489
g51
g52
sS'roi'
p4490
g45
sbsg178
(lp4491
g4490
asg180
I01
sbsg74
Nsg66
S'input_roi'
p4492
sg76
(dp4493
sg78
g4462
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4492
sg87
Nsg88
(lp4494
sg90
Nsg91
Nsb(dp4495
sg5
(g25
g7
Ntp4496
Rp4497
(dp4498
g29
(dp4499
sg31
g5
(g1403
g7
Ntp4500
Rp4501
(dp4502
g1407
(lp4503
g3859
ag3860
ag68
asg36
g37
(g1410
tp4504
Rp4505
(dp4506
g42
I00
sg51
g52
sg3859
g45
sg1414
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4507
sg3860
g45
sg68
g45
sbsg1416
(dp4508
g48
Nssg1419
(lp4509
g48
asg1421
Nsbsg74
Nsg66
S'timeseries_roi'
p4510
sg76
(dp4511
sg78
g4462
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4510
sg87
Nsg88
(lp4512
sg90
Nsg91
Nsb(dp4513
ssg247
(dp4514
sg249
(dp4515
g4450
(dp4516
g4497
(dp4517
g253
(lp4518
(g1973
g3859
tp4519
a(g68
g68
tp4520
asssg4466
(dp4521
sg4481
(dp4522
g4497
(dp4523
g253
(lp4524
(g4490
g3860
tp4525
asssg4497
(dp4526
g4466
(dp4527
g253
(lp4528
(g48
g4475
tp4529
assssg295
g4515
sg296
(dp4530
g4450
(dp4531
sg4466
(dp4532
g4497
g4527
ssg4481
(dp4533
sg4497
(dp4534
g4450
g4517
sg4481
g4523
sssg304
g4515
sbsg66
g4462
sg78
g1067
sg86
g4462
sg87
g306
((lp4535
(lp4536
g309
ag306
((lp4537
(lp4538
g312
ag309
aa(lp4539
g314
ag315
aa(lp4540
g317
ag318
aa(lp4541
g320
ag321
aa(lp4542
g323
ag324
aa(lp4543
g326
ag327
aa(lp4544
g329
ag330
aa(lp4545
g332
ag333
aatp4546
Rp4547
aa(lp4548
g337
ag306
((lp4549
(lp4550
g312
ag337
aa(lp4551
g341
ag342
aa(lp4552
g344
ag345
aa(lp4553
g347
ag348
aa(lp4554
g350
ag351
aa(lp4555
g353
ag354
aa(lp4556
g356
ag357
aa(lp4557
g359
ag360
aa(lp4558
g362
ag363
aa(lp4559
g365
ag366
aa(lp4560
g368
ag369
aa(lp4561
g371
ag372
aa(lp4562
g374
ag375
aa(lp4563
g377
ag378
aa(lp4564
g380
ag381
aa(lp4565
g383
ag384
aa(lp4566
g386
ag387
aa(lp4567
g389
ag390
aa(lp4568
g392
ag393
aatp4569
Rp4570
aa(lp4571
g397
ag306
((lp4572
(lp4573
g312
ag397
aa(lp4574
g401
ag402
aatp4575
Rp4576
aatp4577
Rp4578
sg91
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g25
g7
Ntp4589
Rp4590
(dp4591
g29
(dp4592
sg31
g5
(g97
g7
Ntp4593
Rp4594
(dp4595
g36
g37
(g101
tp4596
Rp4597
(dp4598
g105
g45
sg51
g52
sg106
g45
sg107
g45
sg108
g45
sg109
g45
sg110
g45
sg111
g112
sg113
g45
sg114
g45
sg115
g45
sg116
g45
sg117
g45
sg118
g45
sg119
g45
sg120
g45
sg121
g45
sg122
g45
sg67
g45
sg123
g45
sg124
g45
sg125
g45
sg126
g45
sg42
I00
sg127
g45
sg128
g45
sg49
S'-applyisoxfm 2'
p4599
sg129
g45
sg130
g45
sg53
g54
sg131
g45
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg48
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg142
g45
sg143
g45
sg144
g45
sg55
g5
(g56
g57
(dp4600
g59
g60
stp4601
Rp4602
(dp4603
g64
S'environ_items'
p4604
sg66
g55
sbsg150
g45
sg151
g45
sg68
g60
sg152
g45
sg153
g45
sg154
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'wm_anat_to_2mm_flirt_applyxfm'
p4605
sg76
(dp4606
sg78
S'nuisance_0'
p4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4605
sg87
Nsg88
(lp4608
sg90
Nsg91
Nsb(dp4609
sg5
(g25
g7
Ntp4610
Rp4611
(dp4612
g29
(dp4613
sg31
g5
(g97
g7
Ntp4614
Rp4615
(dp4616
g36
g37
(g101
tp4617
Rp4618
(dp4619
g105
g45
sg51
g52
sg106
g45
sg107
g45
sg108
g45
sg109
g45
sg110
g45
sg111
g112
sg113
g45
sg114
g45
sg115
g45
sg116
g45
sg117
g45
sg118
g45
sg119
g45
sg120
g45
sg121
g45
sg122
g45
sg67
g45
sg123
g45
sg124
g45
sg125
g45
sg126
g45
sg42
I00
sg127
g45
sg128
g45
sg49
g4599
sg129
g45
sg130
g45
sg53
g54
sg131
g45
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg48
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg142
g45
sg143
g45
sg144
g45
sg55
g5
(g56
g57
(dp4620
g59
g60
stp4621
Rp4622
(dp4623
g64
S'environ_items'
p4624
sg66
g55
sbsg150
g45
sg151
g45
sg68
g60
sg152
g45
sg153
g45
sg154
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'ho_mni_to_2mm_flirt_applyxfm'
p4625
sg76
(dp4626
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4625
sg87
Nsg88
(lp4627
sg90
Nsg91
Nsb(dp4628
sg5
(g25
g7
Ntp4629
Rp4630
(dp4631
g29
(dp4632
sg31
g5
(g163
g7
Ntp4633
Rp4634
(dp4635
g36
g37
(g167
tp4636
Rp4637
(dp4638
g51
g52
sS'regressors'
p4639
g45
sg3689
g45
sbsg178
(lp4640
g3689
ag4639
asg180
I01
sbsg74
Nsg66
g219
sg76
(dp4641
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g219
sg87
Nsg88
(lp4642
sg90
Nsg91
Nsb(dp4643
sg5
(g25
g7
Ntp4644
Rp4645
(dp4646
g29
(dp4647
sg31
g5
(g97
g7
Ntp4648
Rp4649
(dp4650
g36
g37
(g101
tp4651
Rp4652
(dp4653
g105
g45
sg51
g52
sg106
g45
sg107
g45
sg108
g45
sg109
g45
sg110
g45
sg111
g112
sg113
g45
sg114
g45
sg115
g45
sg116
g45
sg117
g45
sg118
g45
sg119
g45
sg120
g45
sg121
g45
sg122
g45
sg67
g45
sg123
g45
sg124
g45
sg125
g45
sg126
g45
sg42
I00
sg127
g45
sg128
g45
sg49
g4599
sg129
g45
sg130
g45
sg53
g54
sg131
g45
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg48
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg142
g45
sg143
g45
sg144
g45
sg55
g5
(g56
g57
(dp4654
g59
g60
stp4655
Rp4656
(dp4657
g64
S'environ_items'
p4658
sg66
g55
sbsg150
g45
sg151
g45
sg68
g60
sg152
g45
sg153
g45
sg154
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'csf_anat_to_2mm_flirt_applyxfm'
p4659
sg76
(dp4660
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4659
sg87
Nsg88
(lp4661
sg90
Nsg91
Nsb(dp4662
sg5
(g25
g7
Ntp4663
Rp4664
(dp4665
g29
(dp4666
sg31
g5
(g1403
g7
Ntp4667
Rp4668
(dp4669
g1407
(lp4670
g3859
aS'ventricles_mask_file'
p4671
aS'wm_seg_file'
p4672
aS'csf_seg_file'
p4673
aS'gm_seg_file'
p4674
ag736
ag468
ag754
asg36
g37
(g1410
tp4675
Rp4676
(dp4677
g42
I00
sg51
g52
sg736
g45
sg468
g45
sg3859
g45
sg1414
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4678
sg4674
g45
sg4671
g45
sg754
g45
sg4673
g45
sg4672
g45
sbsg1416
(dp4679
S'file_gm'
p4680
NsS'file_wm'
p4681
NsS'file_csf'
p4682
Nssg1419
(lp4683
g4681
ag4682
ag4680
asg1421
Nsbsg74
Nsg66
S'tissue_masks'
p4684
sg76
(dp4685
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4684
sg87
Nsg88
(lp4686
sg90
Nsg91
Nsb(dp4687
sg5
(g25
g7
Ntp4688
Rp4689
(dp4690
g29
(dp4691
sg31
g5
(g97
g7
Ntp4692
Rp4693
(dp4694
g36
g37
(g101
tp4695
Rp4696
(dp4697
g105
g45
sg51
g52
sg106
g45
sg107
g45
sg108
g45
sg109
g45
sg110
g45
sg111
g112
sg113
g45
sg114
g45
sg115
g45
sg116
g45
sg117
g45
sg118
g45
sg119
g45
sg120
g45
sg121
g45
sg122
g45
sg67
g45
sg123
g45
sg124
g45
sg125
g45
sg126
g45
sg42
I00
sg127
g45
sg128
g45
sg49
g4599
sg129
g45
sg130
g45
sg53
g54
sg131
g45
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg48
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg142
g45
sg143
g45
sg144
g45
sg55
g5
(g56
g57
(dp4698
g59
g60
stp4699
Rp4700
(dp4701
g64
S'environ_items'
p4702
sg66
g55
sbsg150
g45
sg151
g45
sg68
g60
sg152
g45
sg153
g45
sg154
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'gm_anat_to_2mm_flirt_applyxfm'
p4703
sg76
(dp4704
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4703
sg87
Nsg88
(lp4705
sg90
Nsg91
Nsb(dp4706
sg5
(g25
g7
Ntp4707
Rp4708
(dp4709
g29
(dp4710
sg31
g5
(g1403
g7
Ntp4711
Rp4712
(dp4713
g1407
(lp4714
g3689
aS'selector'
p4715
aS'wm_sig_file'
p4716
aS'csf_sig_file'
p4717
aS'gm_sig_file'
p4718
aS'motion_file'
p4719
aS'compcor_ncomponents'
p4720
asg36
g37
(g1410
tp4721
Rp4722
(dp4723
g42
I00
sg51
g52
sg4719
g45
sg4720
g45
sg1414
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4724
sg4717
g45
sg4716
g45
sg4718
g45
sg4715
g45
sg3689
g45
sbsg1416
(dp4725
S'regressors_file'
p4726
NsS'residual_file'
p4727
Nssg1419
(lp4728
g4727
ag4726
asg1421
Nsbsg74
Nsg66
S'residuals'
p4729
sg76
(dp4730
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(lp4731
(g4715
(lp4732
(dp4733
S'global'
p4734
I0
sS'linear'
p4735
I1
sS'wm'
p4736
I0
sS'pc1'
p4737
I0
sS'motion'
p4738
I0
sS'quadratic'
p4739
I1
sS'gm'
p4740
I0
sS'compcor'
p4741
I1
sS'csf'
p4742
I1
satp4743
a(g4720
(lp4744
I5
atp4745
asg85
I00
sg86
g4729
sg87
Nsg88
(lp4746
sg90
Nsg91
Nsb(dp4747
sg5
(g25
g7
Ntp4748
Rp4749
(dp4750
g29
(dp4751
sg31
g5
(g163
g7
Ntp4752
Rp4753
(dp4754
g36
g37
(g167
tp4755
Rp4756
(dp4757
S'motion_components'
p4758
g45
sS'anat_to_mni_initial_xfm'
p4759
g45
sS'lat_ventricles_mask'
p4760
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4761
sg449
g45
sS'anat_to_mni_rigid_xfm'
p4762
g45
sg4720
g45
sS'anat_to_mni_affine_xfm'
p4763
g45
sg4715
g45
sg448
g45
sS'template_brain'
p4764
g45
sg3516
g45
sS'mni_to_anat_linear_xfm'
p4765
g45
sg450
g45
sg51
g52
sg3689
g45
sbsg178
(lp4766
g3689
ag448
ag450
ag449
ag4765
ag4759
ag4762
ag4763
ag3516
ag4760
ag4758
ag4715
ag4720
ag4764
asg180
I01
sbsg74
Nsg66
g181
sg76
(dp4767
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g181
sg87
Nsg88
(lp4768
sg90
Nsg91
Nsb(dp4769
sg5
(g25
g7
Ntp4770
Rp4771
(dp4772
g29
(dp4773
sg31
g5
(g97
g7
Ntp4774
Rp4775
(dp4776
g36
g37
(g101
tp4777
Rp4778
(dp4779
g105
g45
sg51
g52
sg106
g45
sg107
g45
sg108
g45
sg109
g45
sg110
g45
sg111
g45
sg113
g45
sg114
g45
sg115
g45
sg116
g45
sg117
g45
sg118
g45
sg119
g45
sg120
g45
sg121
g45
sg122
g45
sg67
g45
sg123
g45
sg124
g45
sg125
g45
sg126
g45
sg42
I00
sg127
g45
sg128
g45
sg49
g4599
sg129
g45
sg130
g45
sg53
g54
sg131
g45
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg48
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg142
g45
sg143
g45
sg144
g45
sg55
g5
(g56
g57
(dp4780
g59
g60
stp4781
Rp4782
(dp4783
g64
S'environ_items'
p4784
sg66
g55
sbsg150
g45
sg151
g45
sg68
g60
sg152
g45
sg153
g45
sg154
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_to_2mm_flirt_applyxfm'
p4785
sg76
(dp4786
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4785
sg87
Nsg88
(lp4787
sg90
Nsg91
Nsb(dp4788
ssg247
(dp4789
sg249
(dp4790
g4590
(dp4791
g4664
(dp4792
g253
(lp4793
(g48
g4672
tp4794
asssg4611
(dp4795
g4664
(dp4796
g253
(lp4797
(g48
g4671
tp4798
asssg4630
(dp4799
sg4645
(dp4800
g4664
(dp4801
g253
(lp4802
(g48
g4673
tp4803
asssg4664
(dp4804
g4708
(dp4805
g253
(lp4806
(g4681
g4716
tp4807
a(g4682
g4717
tp4808
a(g4680
g4718
tp4809
asssg4689
(dp4810
g4664
(dp4811
g253
(lp4812
(g48
g4674
tp4813
asssg4708
(dp4814
g4630
(dp4815
g253
(lp4816
(g4727
g3689
tp4817
a(g4726
g4639
tp4818
asssg4749
(dp4819
g4590
(dp4820
g253
(lp4821
(g448
g67
tp4822
a(g448
g108
tp4823
assg4611
(dp4824
g253
(lp4825
(g4765
g106
tp4826
a(g4760
g67
tp4827
a(g450
g108
tp4828
assg4689
(dp4829
g253
(lp4830
(g449
g67
tp4831
a(g449
g108
tp4832
assg4708
(dp4833
g253
(lp4834
(g3689
g3689
tp4835
a(g4758
g4719
tp4836
a(g4715
g4715
tp4837
a(g4720
g4720
tp4838
assg4645
(dp4839
g253
(lp4840
(g450
g67
tp4841
a(g450
g108
tp4842
assg4771
(dp4843
g253
(lp4844
(g3689
g67
tp4845
a(g450
g108
tp4846
a(g3516
g106
tp4847
asssg4771
(dp4848
g4664
(dp4849
g253
(lp4850
(g48
g3859
tp4851
assssg295
g4790
sg296
(dp4852
g4590
(dp4853
g4749
g4820
ssg4611
(dp4854
g4749
g4824
ssg4630
(dp4855
g4708
g4815
ssg4645
(dp4856
g4749
g4839
ssg4664
(dp4857
g4590
g4792
sg4689
g4811
sg4771
g4849
sg4611
g4796
sg4645
g4801
ssg4689
(dp4858
g4749
g4829
ssg4708
(dp4859
g4749
g4833
sg4664
g4805
ssg4749
(dp4860
sg4771
(dp4861
g4749
g4843
sssg304
g4790
sbsg66
g4607
sg78
g1067
sg86
g4607
sg87
g306
((lp4862
(lp4863
g309
ag306
((lp4864
(lp4865
g312
ag309
aa(lp4866
g314
ag315
aa(lp4867
g317
ag318
aa(lp4868
g320
ag321
aa(lp4869
g323
ag324
aa(lp4870
g326
ag327
aa(lp4871
g329
ag330
aa(lp4872
g332
ag333
aatp4873
Rp4874
aa(lp4875
g337
ag306
((lp4876
(lp4877
g312
ag337
aa(lp4878
g341
ag342
aa(lp4879
g344
ag345
aa(lp4880
g347
ag348
aa(lp4881
g350
ag351
aa(lp4882
g353
ag354
aa(lp4883
g356
ag357
aa(lp4884
g359
ag360
aa(lp4885
g362
ag363
aa(lp4886
g365
ag366
aa(lp4887
g368
ag369
aa(lp4888
g371
ag372
aa(lp4889
g374
ag375
aa(lp4890
g377
ag378
aa(lp4891
g380
ag381
aa(lp4892
g383
ag384
aa(lp4893
g386
ag387
aa(lp4894
g389
ag390
aa(lp4895
g392
ag393
aatp4896
Rp4897
aa(lp4898
g397
ag306
((lp4899
(lp4900
g312
ag397
aa(lp4901
g401
ag402
aatp4902
Rp4903
aatp4904
Rp4905
sg91
NsbS'outputspec.subject'
p4906
tp4907
sg2071
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg2072
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Completed'
p4921
sS'strat_0'
p4922
(lp4923
g2239
ag1138
ag305
ag4437
ag2478
ag2893
aS'func_to_anat_FLIRT_0'
p4924
ag3484
ag1901
ag4607
ag3823
ag4462
ag3848
asg1950
g3690
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1430297621.022822
s.