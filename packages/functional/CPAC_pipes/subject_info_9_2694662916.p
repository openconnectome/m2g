(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(g6
g7
Ntp18
Rp19
(dp20
g11
g5
(g12
g7
Ntp21
Rp22
(dp23
g16
(dp24
g5
(cnipype.pipeline.engine
Node
p25
g7
Ntp26
Rp27
(dp28
S'input_source'
p29
(dp30
sS'_interface'
p31
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p32
g7
Ntp33
Rp34
(dp35
S'inputs'
p36
ctraits.traits
__newobj__
p37
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p38
tp39
Rp40
(dp41
S'ignore_exception'
p42
I00
sS'nan2zeros'
p43
ctraits.trait_base
_Undefined
p44
(tRp45
sS'op_string'
p46
S'-mas %s '
p47
sS'out_file'
p48
g45
sS'args'
p49
g45
sS'internal_datatype'
p50
g45
sS'__traits_version__'
p51
S'4.5.0'
p52
sS'terminal_output'
p53
S'stream'
p54
sS'environ'
p55
g5
(ctraits.trait_handlers
TraitDictObject
p56
c__builtin__
dict
p57
(dp58
S'FSLOUTPUTTYPE'
p59
S'NIFTI_GZ'
p60
stp61
Rp62
(dp63
S'name_items'
p64
S'environ_items'
p65
sS'name'
p66
g55
sbsS'in_file'
p67
g45
sS'output_type'
p68
g60
sS'output_datatype'
p69
g45
sS'operand_files'
p70
g45
sbsS'_output_type'
p71
g60
sS'_environ'
p72
NsS'_terminal_output'
p73
g54
sbsS'_result'
p74
Nsg66
S'GM_mask'
p75
sS'plugin_args'
p76
(dp77
sS'_hierarchy'
p78
S'GM'
p79
sS'itersource'
p80
NsS'run_without_submitting'
p81
I00
sS'synchronize'
p82
I00
sS'parameterization'
p83
NsS'iterables'
p84
NsS'_got_inputs'
p85
I00
sS'_id'
p86
g75
sS'config'
p87
NsS'needed_outputs'
p88
(lp89
sS'overwrite'
p90
NsS'base_dir'
p91
Nsb(dp92
sg5
(g25
g7
Ntp93
Rp94
(dp95
g29
(dp96
sg31
g5
(g32
g7
Ntp97
Rp98
(dp99
g36
g37
(g38
tp100
Rp101
(dp102
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp103
g59
g60
stp104
Rp105
(dp106
g64
S'environ_items'
p107
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'overlap_GM_map_with_prior'
p108
sg76
(dp109
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g108
sg87
Nsg88
(lp110
sg90
Nsg91
Nsb(dp111
sg5
(g25
g7
Ntp112
Rp113
(dp114
g29
(dp115
sg31
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p116
g7
Ntp117
Rp118
(dp119
g36
g37
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p120
tp121
Rp122
(dp123
S'rigid2D'
p124
g45
sg51
g52
sS'in_matrix_file'
p125
g45
sS'verbose'
p126
g45
sS'reference'
p127
g45
sS'padding_size'
p128
g45
sS'sinc_window'
p129
g45
sS'interp'
p130
S'nearestneighbour'
p131
sS'wmnorms'
p132
g45
sS'coarse_search'
p133
g45
sS'no_resample'
p134
g45
sS'sinc_width'
p135
g45
sS'in_weight'
p136
g45
sS'fieldmap'
p137
g45
sS'echospacing'
p138
g45
sS'ref_weight'
p139
g45
sS'apply_isoxfm'
p140
g45
sS'fieldmapmask'
p141
g45
sg67
g45
sS'bbrtype'
p142
g45
sS'no_clamp'
p143
g45
sS'force_scaling'
p144
g45
sS'pedir'
p145
g45
sg42
I00
sS'display_init'
p146
g45
sS'schedule'
p147
g45
sg49
g45
sS'uses_qform'
p148
g45
sS'wmcoords'
p149
g45
sg53
g54
sS'fine_search'
p150
g45
sS'angle_rep'
p151
g45
sS'no_search'
p152
g45
sS'apply_xfm'
p153
I01
sS'wm_seg'
p154
g45
sg48
g45
sS'bbrslope'
p155
g45
sS'datatype'
p156
g45
sS'save_log'
p157
g45
sS'dof'
p158
g45
sS'out_matrix_file'
p159
g45
sS'no_resample_blur'
p160
g45
sS'min_sampling'
p161
g45
sS'cost_func'
p162
g45
sS'cost'
p163
g45
sg55
g5
(g56
g57
(dp164
g59
g60
stp165
Rp166
(dp167
g64
S'environ_items'
p168
sg66
g55
sbsS'searchr_x'
p169
g45
sS'out_log'
p170
g45
sg68
g60
sS'searchr_z'
p171
g45
sS'bins'
p172
g45
sS'searchr_y'
p173
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'GM_prior_mni_to_t1'
p174
sg76
(dp175
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g174
sg87
Nsg88
(lp176
sg90
Nsg91
Nsb(dp177
sg5
(g25
g7
Ntp178
Rp179
(dp180
g29
(dp181
sg31
g5
(cnipype.interfaces.utility
IdentityInterface
p182
g7
Ntp183
Rp184
(dp185
g36
g37
(cnipype.interfaces.base
DynamicTraitedSpec
p186
tp187
Rp188
(dp189
S'standard2highres_rig'
p190
g45
sg51
g52
sS'standard2highres_init'
p191
g45
sS'tissue_prior'
p192
g45
sS'standard2highres_mat'
p193
g45
sS'brain'
p194
g45
sS'probability_map'
p195
g45
sS'threshold'
p196
g45
sbsS'_fields'
p197
(lp198
g192
ag196
ag194
ag195
ag191
ag193
ag190
asS'_mandatory_inputs'
p199
I01
sbsg74
Nsg66
S'inputspec'
p200
sg76
(dp201
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp202
sg90
Nsg91
Nsb(dp203
sg5
(g25
g7
Ntp204
Rp205
(dp206
g29
(dp207
sg31
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p208
g7
Ntp209
Rp210
(dp211
g36
g37
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p212
tp213
Rp214
(dp215
g42
I00
sg51
g52
sg46
g45
sS'out_data_type'
p216
g45
sg48
g45
sg49
g45
sS'in_file2'
p217
g45
sg53
g54
sg55
g5
(g56
g57
(dp218
g59
g60
stp219
Rp220
(dp221
g64
S'environ_items'
p222
sg66
g55
sbsg67
g45
sg68
g60
sS'suffix'
p223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'binarize_threshold_GM'
p224
sg76
(dp225
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g224
sg87
Nsg88
(lp226
sg90
Nsg91
Nsb(dp227
sg5
(g25
g7
Ntp228
Rp229
(dp230
g29
(dp231
sg31
g5
(g182
g7
Ntp232
Rp233
(dp234
g36
g37
(g186
tp235
Rp236
(dp237
g51
g52
sS'segment_combo'
p238
g45
sS'segment_mask'
p239
g45
sS'tissueprior_mni2t1'
p240
g45
sS'segment_bin'
p241
g45
sbsg197
(lp242
g240
ag238
ag241
ag239
asg199
I01
sbsg74
Nsg66
S'outputspec'
p243
sg76
(dp244
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp245
sg90
Nsg91
Nsb(dp246
ssS'graph'
p247
(dp248
sS'succ'
p249
(dp250
g27
(dp251
g229
(dp252
S'connect'
p253
(lp254
(g48
g239
tp255
asssg94
(dp256
g205
(dp257
g253
(lp258
(g48
g67
tp259
assg229
(dp260
g253
(lp261
(g48
g238
tp262
asssg113
(dp263
g229
(dp264
g253
(lp265
(g48
g240
tp266
assg94
(dp267
g253
(lp268
(g48
g70
tp269
assg27
(dp270
g253
(lp271
(g48
g70
tp272
asssg179
(dp273
g113
(dp274
g253
(lp275
(g192
g67
tp276
a(g194
g127
tp277
a(g193
g125
tp278
assg94
(dp279
g253
(lp280
(g195
g67
tp281
assg205
(dp282
g253
(lp283
((g196
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p284
(ttp285
g46
tp286
asssg205
(dp287
g27
(dp288
g253
(lp289
(g48
g67
tp290
assg229
(dp291
g253
(lp292
(g48
g241
tp293
asssg229
(dp294
ssS'edge'
p295
g250
sS'pred'
p296
(dp297
g27
(dp298
g205
g288
sg113
g270
ssg94
(dp299
g113
g267
sg179
g279
ssg113
(dp300
g179
g274
ssg179
(dp301
sg205
(dp302
g94
g257
sg179
g282
ssg229
(dp303
g113
g264
sg27
g252
sg94
g260
sg205
g291
sssS'adj'
p304
g250
sbsg66
g79
sg78
S'seg_preproc_0'
p305
sg86
g79
sg87
ccollections
OrderedDict
p306
((lp307
(lp308
S'logging'
p309
ag306
((lp310
(lp311
S'__name__'
p312
ag309
aa(lp313
S'workflow_level'
p314
aS'INFO'
p315
aa(lp316
S'filemanip_level'
p317
aS'INFO'
p318
aa(lp319
S'interface_level'
p320
aS'INFO'
p321
aa(lp322
S'log_to_file'
p323
aS'True'
p324
aa(lp325
S'log_directory'
p326
aS'/mnt/ssd1/data/outputs/CPAC/CPAC_test1/outputs/logs/9_2694662916'
p327
aa(lp328
S'log_size'
p329
aS'16384000'
p330
aa(lp331
S'log_rotate'
p332
aS'4'
p333
aatp334
Rp335
aa(lp336
S'execution'
p337
ag306
((lp338
(lp339
g312
ag337
aa(lp340
S'create_report'
p341
aS'true'
p342
aa(lp343
S'crashdump_dir'
p344
aS'/home/eric/Documents/m2g/packages/functional/CPAC_pipes'
p345
aa(lp346
S'display_variable'
p347
aS':1'
p348
aa(lp349
S'hash_method'
p350
aS'timestamp'
p351
aa(lp352
S'job_finished_timeout'
p353
aS'5'
p354
aa(lp355
S'keep_inputs'
p356
aS'false'
p357
aa(lp358
S'local_hash_check'
p359
aS'true'
p360
aa(lp361
S'matplotlib_backend'
p362
aS'Agg'
p363
aa(lp364
S'plugin'
p365
aS'Linear'
p366
aa(lp367
S'remove_node_directories'
p368
aS'false'
p369
aa(lp370
S'remove_unnecessary_outputs'
p371
aS'true'
p372
aa(lp373
S'single_thread_matlab'
p374
aS'true'
p375
aa(lp376
S'stop_on_first_crash'
p377
aS'false'
p378
aa(lp379
S'stop_on_first_rerun'
p380
aS'false'
p381
aa(lp382
S'use_relative_paths'
p383
aS'false'
p384
aa(lp385
S'stop_on_unknown_version'
p386
aS'false'
p387
aa(lp388
S'write_provenance'
p389
aS'false'
p390
aa(lp391
S'parameterize_dirs'
p392
aS'true'
p393
aatp394
Rp395
aa(lp396
S'check'
p397
ag306
((lp398
(lp399
g312
ag397
aa(lp400
S'interval'
p401
aS'1209600'
p402
aatp403
Rp404
aatp405
Rp406
sg91
Nsb(dp407
sg5
(g25
g7
Ntp408
Rp409
(dp410
g29
(dp411
sg31
g5
(g182
g7
Ntp412
Rp413
(dp414
g36
g37
(g186
tp415
Rp416
(dp417
S'partial_volume_files'
p418
g45
sg51
g52
sS'gm_combo'
p419
g45
sS'mixeltype'
p420
g45
sS'csf_mni2t1'
p421
g45
sS'wm_bin'
p422
g45
sS'csf_bin'
p423
g45
sS'probability_maps'
p424
g45
sS'wm_mni2t1'
p425
g45
sS'csf_combo'
p426
g45
sS'wm_combo'
p427
g45
sS'wm_mask'
p428
g45
sS'gm_mask'
p429
g45
sS'csf_mask'
p430
g45
sS'gm_bin'
p431
g45
sS'partial_volume_map'
p432
g45
sS'gm_mni2t1'
p433
g45
sbsg197
(lp434
g421
ag426
ag423
ag430
ag433
ag419
ag431
ag429
ag425
ag427
ag422
ag424
ag420
ag432
ag418
ag428
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp435
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp436
sg90
Nsg91
Nsb(dp437
sg5
(g25
g7
Ntp438
Rp439
(dp440
g29
(dp441
sg31
g5
(g182
g7
Ntp442
Rp443
(dp444
g36
g37
(g186
tp445
Rp446
(dp447
g51
g52
sS'wm_threshold'
p448
(lp449
F0.96
asbsg197
(lp450
g448
asg199
I01
sbsg74
Nsg66
g448
sg76
(dp451
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g448
(lp452
F0.96
atp453
sg85
I00
sg86
g448
sg87
Nsg88
(lp454
sg90
Nsg91
Nsb(dp455
sg5
(g6
g7
Ntp456
Rp457
(dp458
g11
g5
(g12
g7
Ntp459
Rp460
(dp461
g16
(dp462
g5
(g25
g7
Ntp463
Rp464
(dp465
g29
(dp466
sg31
g5
(g182
g7
Ntp467
Rp468
(dp469
g36
g37
(g186
tp470
Rp471
(dp472
g51
g52
sg238
g45
sg239
g45
sg240
g45
sg241
g45
sbsg197
(lp473
g240
ag238
ag241
ag239
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp474
sg78
S'WM'
p475
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp476
sg90
Nsg91
Nsb(dp477
sg5
(g25
g7
Ntp478
Rp479
(dp480
g29
(dp481
sg31
g5
(g208
g7
Ntp482
Rp483
(dp484
g36
g37
(g212
tp485
Rp486
(dp487
g42
I00
sg51
g52
sg46
g45
sg216
g45
sg48
g45
sg49
g45
sg217
g45
sg53
g54
sg55
g5
(g56
g57
(dp488
g59
g60
stp489
Rp490
(dp491
g64
S'environ_items'
p492
sg66
g55
sbsg67
g45
sg68
g60
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'binarize_threshold_WM'
p493
sg76
(dp494
sg78
g475
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g493
sg87
Nsg88
(lp495
sg90
Nsg91
Nsb(dp496
sg5
(g25
g7
Ntp497
Rp498
(dp499
g29
(dp500
sg31
g5
(g32
g7
Ntp501
Rp502
(dp503
g36
g37
(g38
tp504
Rp505
(dp506
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp507
g59
g60
stp508
Rp509
(dp510
g64
S'environ_items'
p511
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'overlap_WM_map_with_prior'
p512
sg76
(dp513
sg78
g475
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g512
sg87
Nsg88
(lp514
sg90
Nsg91
Nsb(dp515
sg5
(g25
g7
Ntp516
Rp517
(dp518
g29
(dp519
sg31
g5
(g116
g7
Ntp520
Rp521
(dp522
g36
g37
(g120
tp523
Rp524
(dp525
g124
g45
sg51
g52
sg125
g45
sg126
g45
sg127
g45
sg128
g45
sg129
g45
sg130
g131
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg67
g45
sg142
g45
sg143
g45
sg144
g45
sg145
g45
sg42
I00
sg146
g45
sg147
g45
sg49
g45
sg148
g45
sg149
g45
sg53
g54
sg150
g45
sg151
g45
sg152
g45
sg153
I01
sg154
g45
sg48
g45
sg155
g45
sg156
g45
sg157
g45
sg158
g45
sg159
g45
sg160
g45
sg161
g45
sg162
g45
sg163
g45
sg55
g5
(g56
g57
(dp526
g59
g60
stp527
Rp528
(dp529
g64
S'environ_items'
p530
sg66
g55
sbsg169
g45
sg170
g45
sg68
g60
sg171
g45
sg172
g45
sg173
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'WM_prior_mni_to_t1'
p531
sg76
(dp532
sg78
g475
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g531
sg87
Nsg88
(lp533
sg90
Nsg91
Nsb(dp534
sg5
(g25
g7
Ntp535
Rp536
(dp537
g29
(dp538
sg31
g5
(g32
g7
Ntp539
Rp540
(dp541
g36
g37
(g38
tp542
Rp543
(dp544
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp545
g59
g60
stp546
Rp547
(dp548
g64
S'environ_items'
p549
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'WM_mask'
p550
sg76
(dp551
sg78
g475
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g550
sg87
Nsg88
(lp552
sg90
Nsg91
Nsb(dp553
sg5
(g25
g7
Ntp554
Rp555
(dp556
g29
(dp557
sg31
g5
(g182
g7
Ntp558
Rp559
(dp560
g36
g37
(g186
tp561
Rp562
(dp563
g190
g45
sg51
g52
sg191
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg196
g45
sbsg197
(lp564
g192
ag196
ag194
ag195
ag191
ag193
ag190
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp565
sg78
g475
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp566
sg90
Nsg91
Nsb(dp567
ssg247
(dp568
sg249
(dp569
g464
(dp570
sg479
(dp571
g536
(dp572
g253
(lp573
(g48
g67
tp574
assg464
(dp575
g253
(lp576
(g48
g241
tp577
asssg498
(dp578
g464
(dp579
g253
(lp580
(g48
g238
tp581
assg479
(dp582
g253
(lp583
(g48
g67
tp584
asssg517
(dp585
g536
(dp586
g253
(lp587
(g48
g70
tp588
assg498
(dp589
g253
(lp590
(g48
g70
tp591
assg464
(dp592
g253
(lp593
(g48
g240
tp594
asssg536
(dp595
g464
(dp596
g253
(lp597
(g48
g239
tp598
asssg555
(dp599
g479
(dp600
g253
(lp601
((g196
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p602
(ttp603
g46
tp604
assg517
(dp605
g253
(lp606
(g192
g67
tp607
a(g194
g127
tp608
a(g193
g125
tp609
assg498
(dp610
g253
(lp611
(g195
g67
tp612
assssg295
g569
sg296
(dp613
g464
(dp614
g536
g596
sg479
g575
sg517
g592
sg498
g579
ssg479
(dp615
g498
g582
sg555
g600
ssg498
(dp616
g555
g610
sg517
g589
ssg517
(dp617
g555
g605
ssg536
(dp618
g479
g572
sg517
g586
ssg555
(dp619
ssg304
g569
sbsg66
g475
sg78
g305
sg86
g475
sg87
g306
((lp620
(lp621
g309
ag306
((lp622
(lp623
g312
ag309
aa(lp624
g314
ag315
aa(lp625
g317
ag318
aa(lp626
g320
ag321
aa(lp627
g323
ag324
aa(lp628
g326
ag327
aa(lp629
g329
ag330
aa(lp630
g332
ag333
aatp631
Rp632
aa(lp633
g337
ag306
((lp634
(lp635
g312
ag337
aa(lp636
g341
ag342
aa(lp637
g344
ag345
aa(lp638
g347
ag348
aa(lp639
g350
ag351
aa(lp640
g353
ag354
aa(lp641
g356
ag357
aa(lp642
g359
ag360
aa(lp643
g362
ag363
aa(lp644
g365
ag366
aa(lp645
g368
ag369
aa(lp646
g371
ag372
aa(lp647
g374
ag375
aa(lp648
g377
ag378
aa(lp649
g380
ag381
aa(lp650
g383
ag384
aa(lp651
g386
ag387
aa(lp652
g389
ag390
aa(lp653
g392
ag393
aatp654
Rp655
aa(lp656
g397
ag306
((lp657
(lp658
g312
ag397
aa(lp659
g401
ag402
aatp660
Rp661
aatp662
Rp663
sg91
Nsb(dp664
sg5
(g25
g7
Ntp665
Rp666
(dp667
g29
(dp668
sg31
g5
(g182
g7
Ntp669
Rp670
(dp671
g36
g37
(g186
tp672
Rp673
(dp674
g190
g45
sg51
g52
sg191
g45
sg194
g45
sS'PRIOR_GRAY'
p675
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p676
sg193
g45
sS'PRIOR_CSF'
p677
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p678
sS'PRIOR_WHITE'
p679
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p680
sbsg197
(lp681
g194
ag191
ag193
ag190
ag677
ag675
ag679
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp682
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp683
sg90
Nsg91
Nsb(dp684
sg5
(g6
g7
Ntp685
Rp686
(dp687
g11
g5
(g12
g7
Ntp688
Rp689
(dp690
g16
(dp691
g5
(g25
g7
Ntp692
Rp693
(dp694
g29
(dp695
sg31
g5
(g208
g7
Ntp696
Rp697
(dp698
g36
g37
(g212
tp699
Rp700
(dp701
g42
I00
sg51
g52
sg46
g45
sg216
g45
sg48
g45
sg49
g45
sg217
g45
sg53
g54
sg55
g5
(g56
g57
(dp702
g59
g60
stp703
Rp704
(dp705
g64
S'environ_items'
p706
sg66
g55
sbsg67
g45
sg68
g60
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'binarize_threshold_CSF'
p707
sg76
(dp708
sg78
S'CSF'
p709
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g707
sg87
Nsg88
(lp710
sg90
Nsg91
Nsb(dp711
sg5
(g25
g7
Ntp712
Rp713
(dp714
g29
(dp715
sg31
g5
(g182
g7
Ntp716
Rp717
(dp718
g36
g37
(g186
tp719
Rp720
(dp721
g190
g45
sg51
g52
sg191
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg196
g45
sbsg197
(lp722
g192
ag196
ag194
ag195
ag191
ag193
ag190
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp723
sg78
g709
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp724
sg90
Nsg91
Nsb(dp725
sg5
(g25
g7
Ntp726
Rp727
(dp728
g29
(dp729
sg31
g5
(g32
g7
Ntp730
Rp731
(dp732
g36
g37
(g38
tp733
Rp734
(dp735
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp736
g59
g60
stp737
Rp738
(dp739
g64
S'environ_items'
p740
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'overlap_CSF_map_with_prior'
p741
sg76
(dp742
sg78
g709
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g741
sg87
Nsg88
(lp743
sg90
Nsg91
Nsb(dp744
sg5
(g25
g7
Ntp745
Rp746
(dp747
g29
(dp748
sg31
g5
(g182
g7
Ntp749
Rp750
(dp751
g36
g37
(g186
tp752
Rp753
(dp754
g51
g52
sg238
g45
sg239
g45
sg240
g45
sg241
g45
sbsg197
(lp755
g240
ag238
ag241
ag239
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp756
sg78
g709
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp757
sg90
Nsg91
Nsb(dp758
sg5
(g25
g7
Ntp759
Rp760
(dp761
g29
(dp762
sg31
g5
(g116
g7
Ntp763
Rp764
(dp765
g36
g37
(g120
tp766
Rp767
(dp768
g124
g45
sg51
g52
sg125
g45
sg126
g45
sg127
g45
sg128
g45
sg129
g45
sg130
g131
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg67
g45
sg142
g45
sg143
g45
sg144
g45
sg145
g45
sg42
I00
sg146
g45
sg147
g45
sg49
g45
sg148
g45
sg149
g45
sg53
g54
sg150
g45
sg151
g45
sg152
g45
sg153
I01
sg154
g45
sg48
g45
sg155
g45
sg156
g45
sg157
g45
sg158
g45
sg159
g45
sg160
g45
sg161
g45
sg162
g45
sg163
g45
sg55
g5
(g56
g57
(dp769
g59
g60
stp770
Rp771
(dp772
g64
S'environ_items'
p773
sg66
g55
sbsg169
g45
sg170
g45
sg68
g60
sg171
g45
sg172
g45
sg173
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'CSF_prior_mni_to_t1'
p774
sg76
(dp775
sg78
g709
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g774
sg87
Nsg88
(lp776
sg90
Nsg91
Nsb(dp777
sg5
(g25
g7
Ntp778
Rp779
(dp780
g29
(dp781
sg31
g5
(g32
g7
Ntp782
Rp783
(dp784
g36
g37
(g38
tp785
Rp786
(dp787
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp788
g59
g60
stp789
Rp790
(dp791
g64
S'environ_items'
p792
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'CSF_mask'
p793
sg76
(dp794
sg78
g709
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g793
sg87
Nsg88
(lp795
sg90
Nsg91
Nsb(dp796
ssg247
(dp797
sg249
(dp798
g693
(dp799
g746
(dp800
g253
(lp801
(g48
g241
tp802
assg779
(dp803
g253
(lp804
(g48
g67
tp805
asssg713
(dp806
g760
(dp807
g253
(lp808
(g192
g67
tp809
a(g194
g127
tp810
a(g193
g125
tp811
assg727
(dp812
g253
(lp813
(g195
g67
tp814
assg693
(dp815
g253
(lp816
((g196
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p817
(ttp818
g46
tp819
asssg727
(dp820
g693
(dp821
g253
(lp822
(g48
g67
tp823
assg746
(dp824
g253
(lp825
(g48
g238
tp826
asssg746
(dp827
sg760
(dp828
g746
(dp829
g253
(lp830
(g48
g240
tp831
assg727
(dp832
g253
(lp833
(g48
g70
tp834
assg779
(dp835
g253
(lp836
(g48
g70
tp837
asssg779
(dp838
g746
(dp839
g253
(lp840
(g48
g239
tp841
assssg295
g798
sg296
(dp842
g693
(dp843
g713
g815
sg727
g821
ssg713
(dp844
sg727
(dp845
g713
g812
sg760
g832
ssg746
(dp846
g760
g829
sg779
g839
sg727
g824
sg693
g800
ssg760
(dp847
g713
g807
ssg779
(dp848
g693
g803
sg760
g835
sssg304
g798
sbsg66
g709
sg78
g305
sg86
g709
sg87
g306
((lp849
(lp850
g309
ag306
((lp851
(lp852
g312
ag309
aa(lp853
g314
ag315
aa(lp854
g317
ag318
aa(lp855
g320
ag321
aa(lp856
g323
ag324
aa(lp857
g326
ag327
aa(lp858
g329
ag330
aa(lp859
g332
ag333
aatp860
Rp861
aa(lp862
g337
ag306
((lp863
(lp864
g312
ag337
aa(lp865
g341
ag342
aa(lp866
g344
ag345
aa(lp867
g347
ag348
aa(lp868
g350
ag351
aa(lp869
g353
ag354
aa(lp870
g356
ag357
aa(lp871
g359
ag360
aa(lp872
g362
ag363
aa(lp873
g365
ag366
aa(lp874
g368
ag369
aa(lp875
g371
ag372
aa(lp876
g374
ag375
aa(lp877
g377
ag378
aa(lp878
g380
ag381
aa(lp879
g383
ag384
aa(lp880
g386
ag387
aa(lp881
g389
ag390
aa(lp882
g392
ag393
aatp883
Rp884
aa(lp885
g397
ag306
((lp886
(lp887
g312
ag397
aa(lp888
g401
ag402
aatp889
Rp890
aatp891
Rp892
sg91
Nsb(dp893
sg5
(g25
g7
Ntp894
Rp895
(dp896
g29
(dp897
sg31
g5
(g182
g7
Ntp898
Rp899
(dp900
g36
g37
(g186
tp901
Rp902
(dp903
g51
g52
sS'gm_threshold'
p904
(lp905
F0.7
asbsg197
(lp906
g904
asg199
I01
sbsg74
Nsg66
g904
sg76
(dp907
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g904
(lp908
F0.7
atp909
sg85
I00
sg86
g904
sg87
Nsg88
(lp910
sg90
Nsg91
Nsb(dp911
sg5
(g25
g7
Ntp912
Rp913
(dp914
g29
(dp915
sg31
g5
(cnipype.interfaces.fsl.preprocess
FAST
p916
g7
Ntp917
Rp918
(dp919
g36
g37
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p920
tp921
Rp922
(dp923
S'number_classes'
p924
g45
sS'out_basename'
p925
S'segment'
p926
sS'hyper'
p927
g45
sg126
g45
sS'init_seg_smooth'
p928
g45
sS'init_transform'
p929
g45
sS'no_pve'
p930
g45
sS'output_biascorrected'
p931
g45
sS'mixel_smooth'
p932
g45
sS'segments'
p933
I01
sS'iters_afterbias'
p934
g45
sS'bias_lowpass'
p935
g45
sS'other_priors'
p936
g45
sg51
g52
sg42
I00
sS'img_type'
p937
I1
sg49
g45
sg424
I01
sS'manual_seg'
p938
g45
sg53
g54
sS'output_biasfield'
p939
g45
sS'no_bias'
p940
g45
sS'use_priors'
p941
g45
sS'in_files'
p942
g45
sS'segment_iters'
p943
g45
sg55
g5
(g56
g57
(dp944
g59
g60
stp945
Rp946
(dp947
g64
S'environ_items'
p948
sg66
g55
sbsg68
g60
sS'bias_iters'
p949
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
g926
sg76
(dp950
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g926
sg87
Nsg88
(lp951
sg90
Nsg91
Nsb(dp952
sg5
(g25
g7
Ntp953
Rp954
(dp955
g29
(dp956
sg31
g5
(g182
g7
Ntp957
Rp958
(dp959
g36
g37
(g186
tp960
Rp961
(dp962
g51
g52
sS'csf_threshold'
p963
(lp964
F0.96
asbsg197
(lp965
g963
asg199
I01
sbsg74
Nsg66
g963
sg76
(dp966
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g963
(lp967
F0.96
atp968
sg85
I00
sg86
g963
sg87
Nsg88
(lp969
sg90
Nsg91
Nsb(dp970
ssg247
(dp971
sg249
(dp972
g19
(dp973
g409
(dp974
g253
(lp975
(S'outputspec.tissueprior_mni2t1'
p976
g433
tp977
a(S'outputspec.segment_combo'
p978
g419
tp979
a(S'outputspec.segment_bin'
p980
g431
tp981
a(S'outputspec.segment_mask'
p982
g429
tp983
asssg409
(dp984
sg439
(dp985
g457
(dp986
g253
(lp987
(g448
S'inputspec.threshold'
p988
tp989
asssg457
(dp990
g409
(dp991
g253
(lp992
(g976
g425
tp993
a(g978
g427
tp994
a(g980
g422
tp995
a(g982
g428
tp996
asssg666
(dp997
g913
(dp998
g253
(lp999
(g194
g942
tp1000
assg19
(dp1001
g253
(lp1002
(g194
S'inputspec.brain'
p1003
tp1004
a(g675
S'inputspec.tissue_prior'
p1005
tp1006
a(g193
S'inputspec.standard2highres_mat'
p1007
tp1008
assg686
(dp1009
g253
(lp1010
(g194
g1003
tp1011
a(g677
g1005
tp1012
a(g193
g1007
tp1013
assg457
(dp1014
g253
(lp1015
(g194
g1003
tp1016
a(g679
g1005
tp1017
a(g193
g1007
tp1018
asssg686
(dp1019
g409
(dp1020
g253
(lp1021
(g976
g421
tp1022
a(g978
g426
tp1023
a(g980
g423
tp1024
a(g982
g430
tp1025
asssg895
(dp1026
g19
(dp1027
g253
(lp1028
(g904
g988
tp1029
asssg913
(dp1030
g457
(dp1031
g253
(lp1032
((g424
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1033
(ttp1034
S'inputspec.probability_map'
p1035
tp1036
assg19
(dp1037
g253
(lp1038
((g424
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1039
(ttp1040
g1035
tp1041
assg409
(dp1042
g253
(lp1043
(g424
g424
tp1044
a(g420
g420
tp1045
a(g418
g418
tp1046
a(g432
g432
tp1047
assg686
(dp1048
g253
(lp1049
((g424
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1050
(ttp1051
g1035
tp1052
asssg954
(dp1053
g686
(dp1054
g253
(lp1055
(g963
g988
tp1056
assssg295
g972
sg296
(dp1057
g19
(dp1058
g913
g1037
sg666
g1001
sg895
g1027
ssg409
(dp1059
g913
g1042
sg19
g974
sg686
g1020
sg457
g991
ssg439
(dp1060
sg457
(dp1061
g913
g1031
sg666
g1014
sg439
g986
ssg666
(dp1062
sg686
(dp1063
g913
g1048
sg666
g1009
sg954
g1054
ssg895
(dp1064
sg913
(dp1065
g666
g998
ssg954
(dp1066
ssg304
g972
sbsg66
g305
sg78
S'resting_preproc_9_2694662916'
p1067
sg86
g305
sg87
g306
((lp1068
(lp1069
g309
ag306
((lp1070
(lp1071
g312
ag309
aa(lp1072
g314
ag315
aa(lp1073
g317
ag318
aa(lp1074
g320
ag321
aa(lp1075
g323
ag324
aa(lp1076
g326
ag327
aa(lp1077
g329
ag330
aa(lp1078
g332
ag333
aatp1079
Rp1080
aa(lp1081
g337
ag306
((lp1082
(lp1083
g312
ag337
aa(lp1084
g341
ag342
aa(lp1085
g344
ag345
aa(lp1086
g347
ag348
aa(lp1087
g350
ag351
aa(lp1088
g353
ag354
aa(lp1089
g356
ag357
aa(lp1090
g359
ag360
aa(lp1091
g362
ag363
aa(lp1092
g365
ag366
aa(lp1093
g368
ag369
aa(lp1094
g371
ag372
aa(lp1095
g374
ag375
aa(lp1096
g377
ag378
aa(lp1097
g380
ag381
aa(lp1098
g383
ag384
aa(lp1099
g386
ag387
aa(lp1100
g389
ag390
aa(lp1101
g392
ag393
aatp1102
Rp1103
aa(lp1104
g397
ag306
((lp1105
(lp1106
g312
ag397
aa(lp1107
g401
ag402
aatp1108
Rp1109
aatp1110
Rp1111
sg91
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g25
g7
Ntp1122
Rp1123
(dp1124
g29
(dp1125
sg31
g5
(g116
g7
Ntp1126
Rp1127
(dp1128
g36
g37
(g120
tp1129
Rp1130
(dp1131
g124
g45
sg51
g52
sg125
g45
sg126
g45
sg127
g45
sg128
g45
sg129
g45
sg130
g45
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg67
g45
sg142
g45
sg143
g45
sg144
g45
sg145
g45
sg42
I00
sg146
g45
sg147
g45
sg49
g45
sg148
g45
sg149
g45
sg53
g54
sg150
g45
sg151
g45
sg152
g45
sg153
g45
sg154
g45
sg48
g45
sg155
g45
sg156
g45
sg157
g45
sg158
g45
sg159
g45
sg160
g45
sg161
g45
sg162
g45
sg163
S'corratio'
p1132
sg55
g5
(g56
g57
(dp1133
g59
g60
stp1134
Rp1135
(dp1136
g64
S'environ_items'
p1137
sg66
g55
sbsg169
g45
sg170
g45
sg68
g60
sg171
g45
sg172
g45
sg173
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'linear_reg_0'
p1138
sg76
(dp1139
sg78
S'anat_mni_fnirt_register_0'
p1140
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1138
sg87
Nsg88
(lp1141
sg90
Nsg91
Nsb(dp1142
sg5
(g25
g7
Ntp1143
Rp1144
(dp1145
g29
(dp1146
sg31
g5
(g182
g7
Ntp1147
Rp1148
(dp1149
g36
g37
(g186
tp1150
Rp1151
(dp1152
g51
g52
sS'output_brain'
p1153
g45
sS'nonlinear_xfm'
p1154
g45
sS'invlinear_xfm'
p1155
g45
sS'linear_xfm'
p1156
g45
sbsg197
(lp1157
g1153
ag1156
ag1155
ag1154
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp1158
sg78
g1140
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp1159
sg90
Nsg91
Nsb(dp1160
sg5
(g25
g7
Ntp1161
Rp1162
(dp1163
g29
(dp1164
sg31
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1165
g7
Ntp1166
Rp1167
(dp1168
g36
g37
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1169
tp1170
Rp1171
(dp1172
g42
I00
sS'supersample'
p1173
g45
sg67
g45
sS'superlevel'
p1174
g45
sg48
g45
sg156
g45
sg49
g45
sg130
g45
sS'field_file'
p1175
g45
sS'ref_file'
p1176
g45
sg53
g54
sg55
g5
(g56
g57
(dp1177
g59
g60
stp1178
Rp1179
(dp1180
g64
S'environ_items'
p1181
sg66
g55
sbsS'premat'
p1182
g45
sS'mask_file'
p1183
g45
sg68
g60
sS'relwarp'
p1184
g45
sS'abswarp'
p1185
g45
sg51
g52
sS'postmat'
p1186
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'brain_warp'
p1187
sg76
(dp1188
sg78
g1140
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1187
sg87
Nsg88
(lp1189
sg90
Nsg91
Nsb(dp1190
sg5
(g25
g7
Ntp1191
Rp1192
(dp1193
g29
(dp1194
sg31
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1195
g7
Ntp1196
Rp1197
(dp1198
g36
g37
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1199
tp1200
Rp1201
(dp1202
g51
g52
sS'derive_from_ref'
p1203
g45
sS'in_intensitymap_file'
p1204
g45
sS'modulatedref_file'
p1205
g45
sS'refmask_val'
p1206
g45
sS'hessian_precision'
p1207
g45
sS'in_fwhm'
p1208
g45
sS'skip_implicit_in_masking'
p1209
g45
sS'inmask_file'
p1210
g45
sS'refmask_file'
p1211
g45
sS'inwarp_file'
p1212
g45
sS'skip_lambda_ssq'
p1213
g45
sS'intensity_mapping_model'
p1214
g45
sS'affine_file'
p1215
g45
sS'apply_inmask'
p1216
g45
sS'spline_order'
p1217
g45
sS'apply_refmask'
p1218
g45
sS'subsampling_scheme'
p1219
g45
sg67
g45
sS'warped_file'
p1220
g45
sS'skip_refmask'
p1221
g45
sg42
I00
sS'ref_fwhm'
p1222
g45
sS'inmask_val'
p1223
g45
sS'config_file'
p1224
g45
sg1175
g45
sg49
g45
sS'apply_intensity_mapping'
p1225
g45
sS'regularization_lambda'
p1226
g45
sg53
g54
sS'regularization_model'
p1227
g45
sS'jacobian_range'
p1228
g45
sS'out_intensitymap_file'
p1229
g45
sS'skip_implicit_ref_masking'
p1230
g45
sg1176
g45
sS'skip_inmask'
p1231
g45
sS'fieldcoeff_file'
p1232
I01
sS'warp_resolution'
p1233
g45
sS'jacobian_file'
p1234
I01
sg55
g5
(g56
g57
(dp1235
g59
g60
stp1236
Rp1237
(dp1238
g64
S'environ_items'
p1239
sg66
g55
sbsS'bias_regularization_lambda'
p1240
g45
sg68
g60
sS'skip_intensity_mapping'
p1241
g45
sS'log_file'
p1242
g45
sS'biasfield_resolution'
p1243
g45
sS'intensity_mapping_order'
p1244
g45
sS'max_nonlin_iter'
p1245
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'nonlinear_reg_1'
p1246
sg76
(dp1247
sg78
g1140
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1246
sg87
Nsg88
(lp1248
sg90
Nsg91
Nsb(dp1249
sg5
(g25
g7
Ntp1250
Rp1251
(dp1252
g29
(dp1253
sg31
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1254
g7
Ntp1255
Rp1256
(dp1257
g36
g37
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1258
tp1259
Rp1260
(dp1261
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg217
g45
sS'fix_scale_skew'
p1262
g45
sS'invert_xfm'
p1263
I01
sg53
g54
sS'concat_xfm'
p1264
g45
sg67
g45
sg68
g60
sg55
g5
(g56
g57
(dp1265
g59
g60
stp1266
Rp1267
(dp1268
g64
S'environ_items'
p1269
sg66
g55
sbsbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'inv_linear_reg0_xfm'
p1270
sg76
(dp1271
sg78
g1140
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1270
sg87
Nsg88
(lp1272
sg90
Nsg91
Nsb(dp1273
sg5
(g25
g7
Ntp1274
Rp1275
(dp1276
g29
(dp1277
sg31
g5
(g182
g7
Ntp1278
Rp1279
(dp1280
g36
g37
(g186
tp1281
Rp1282
(dp1283
S'fnirt_config'
p1284
S'T1_2_MNI152_2mm'
p1285
sg51
g52
sS'input_brain'
p1286
g45
sS'reference_skull'
p1287
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1288
sS'reference_brain'
p1289
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1290
sS'input_skull'
p1291
g45
sbsg197
(lp1292
g1286
ag1291
ag1289
ag1287
ag1284
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp1293
sg78
g1140
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp1294
sg90
Nsg91
Nsb(dp1295
ssg247
(dp1296
sg249
(dp1297
g1123
(dp1298
g1192
(dp1299
g253
(lp1300
(g159
g1215
tp1301
assg1144
(dp1302
g253
(lp1303
(g159
g1156
tp1304
assg1251
(dp1305
g253
(lp1306
(g159
g67
tp1307
asssg1144
(dp1308
sg1162
(dp1309
g1144
(dp1310
g253
(lp1311
(g48
g1153
tp1312
asssg1192
(dp1313
g1144
(dp1314
g253
(lp1315
(g1232
g1154
tp1316
assg1162
(dp1317
g253
(lp1318
(g1232
g1175
tp1319
asssg1251
(dp1320
g1144
(dp1321
g253
(lp1322
(g48
g1155
tp1323
asssg1275
(dp1324
g1123
(dp1325
g253
(lp1326
(g1286
g67
tp1327
a(g1289
g127
tp1328
assg1162
(dp1329
g253
(lp1330
(g1286
g67
tp1331
a(g1289
g1176
tp1332
assg1192
(dp1333
g253
(lp1334
(g1291
g67
tp1335
a(g1287
g1176
tp1336
a(g1284
g1224
tp1337
assssg295
g1297
sg296
(dp1338
g1123
(dp1339
g1275
g1325
ssg1144
(dp1340
g1192
g1314
sg1123
g1302
sg1162
g1310
sg1251
g1321
ssg1162
(dp1341
g1192
g1317
sg1275
g1329
ssg1192
(dp1342
g1123
g1299
sg1275
g1333
ssg1251
(dp1343
g1123
g1305
ssg1275
(dp1344
ssg304
g1297
sbsg66
g1140
sg78
g1067
sg86
g1140
sg87
g306
((lp1345
(lp1346
g309
ag306
((lp1347
(lp1348
g312
ag309
aa(lp1349
g314
ag315
aa(lp1350
g317
ag318
aa(lp1351
g320
ag321
aa(lp1352
g323
ag324
aa(lp1353
g326
ag327
aa(lp1354
g329
ag330
aa(lp1355
g332
ag333
aatp1356
Rp1357
aa(lp1358
g337
ag306
((lp1359
(lp1360
g312
ag337
aa(lp1361
g341
ag342
aa(lp1362
g344
ag345
aa(lp1363
g347
ag348
aa(lp1364
g350
ag351
aa(lp1365
g353
ag354
aa(lp1366
g356
ag357
aa(lp1367
g359
ag360
aa(lp1368
g362
ag363
aa(lp1369
g365
ag366
aa(lp1370
g368
ag369
aa(lp1371
g371
ag372
aa(lp1372
g374
ag375
aa(lp1373
g377
ag378
aa(lp1374
g380
ag381
aa(lp1375
g383
ag384
aa(lp1376
g386
ag387
aa(lp1377
g389
ag390
aa(lp1378
g392
ag393
aatp1379
Rp1380
aa(lp1381
g397
ag306
((lp1382
(lp1383
g312
ag397
aa(lp1384
g401
ag402
aatp1385
Rp1386
aatp1387
Rp1388
sg91
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g25
g7
Ntp1399
Rp1400
(dp1401
g29
(dp1402
sg31
g5
(cnipype.interfaces.utility
Function
p1403
g7
Ntp1404
Rp1405
(dp1406
S'_input_names'
p1407
(lp1408
S'file_'
p1409
asg36
g37
(cnipype.interfaces.utility
FunctionInputSpec
p1410
tp1411
Rp1412
(dp1413
g42
I00
sS'function_str'
p1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1415
sg1409
g45
sg51
g52
sbsS'_out'
p1416
(dp1417
S'new_fname'
p1418
NssS'_output_names'
p1419
(lp1420
g1418
asS'imports'
p1421
Nsbsg74
Nsg81
I00
sg76
(dp1422
sg83
Nsg80
Nsg90
Nsg66
S'resample_o'
p1423
sg78
S'montage_mfi_0'
p1424
sg82
I00
sg84
Nsg85
I00
sg86
g1423
sg87
Nsg88
(lp1425
sg91
Nsb(dp1426
sg5
(g25
g7
Ntp1427
Rp1428
(dp1429
g29
(dp1430
sg31
g5
(g182
g7
Ntp1431
Rp1432
(dp1433
g36
g37
(g186
tp1434
Rp1435
(dp1436
g51
g52
sS'resampled_underlay'
p1437
g45
sS'axial_png'
p1438
g45
sS'sagittal_png'
p1439
g45
sS'resampled_overlay'
p1440
g45
sbsg197
(lp1441
g1438
ag1439
ag1437
ag1440
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp1442
sg78
g1424
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp1443
sg90
Nsg91
Nsb(dp1444
sg5
(g25
g7
Ntp1445
Rp1446
(dp1447
g29
(dp1448
sg31
g5
(g1403
g7
Ntp1449
Rp1450
(dp1451
g1407
(lp1452
S'overlay'
p1453
aS'underlay'
p1454
aS'png_name'
p1455
aS'cbar_name'
p1456
asg36
g37
(g1410
tp1457
Rp1458
(dp1459
g42
I00
sg1455
S'MNI_edge_on_mean_func_mni_a.png'
p1460
sg1453
g45
sg1456
S'red'
p1461
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1462
sg1454
g45
sg51
g52
sbsg1416
(dp1463
g1455
Nssg1419
(lp1464
g1455
asg1421
Nsbsg74
Nsg66
S'montage_a'
p1465
sg76
(dp1466
sg78
g1424
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1465
sg87
Nsg88
(lp1467
sg90
Nsg91
Nsb(dp1468
sg5
(g25
g7
Ntp1469
Rp1470
(dp1471
g29
(dp1472
sg31
g5
(g182
g7
Ntp1473
Rp1474
(dp1475
g36
g37
(g186
tp1476
Rp1477
(dp1478
g51
g52
sg1454
g45
sg1453
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1479
sbsg197
(lp1480
g1454
ag1453
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp1481
sg78
g1424
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp1482
sg90
Nsg91
Nsb(dp1483
sg5
(g25
g7
Ntp1484
Rp1485
(dp1486
g29
(dp1487
sg31
g5
(g1403
g7
Ntp1488
Rp1489
(dp1490
g1407
(lp1491
g1453
ag1454
ag1455
ag1456
asg36
g37
(g1410
tp1492
Rp1493
(dp1494
g42
I00
sg1455
S'MNI_edge_on_mean_func_mni_s.png'
p1495
sg1453
g45
sg1456
g1461
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1496
sg1454
g45
sg51
g52
sbsg1416
(dp1497
g1455
Nssg1419
(lp1498
g1455
asg1421
Nsbsg74
Nsg66
S'montage_s'
p1499
sg76
(dp1500
sg78
g1424
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp1501
sg90
Nsg91
Nsb(dp1502
sg5
(g25
g7
Ntp1503
Rp1504
(dp1505
g29
(dp1506
sg31
g5
(g1403
g7
Ntp1507
Rp1508
(dp1509
g1407
(lp1510
g1409
asg36
g37
(g1410
tp1511
Rp1512
(dp1513
g42
I00
sg1414
g1415
sg1409
g45
sg51
g52
sbsg1416
(dp1514
g1418
Nssg1419
(lp1515
g1418
asg1421
Nsbsg74
Nsg66
S'resample_u'
p1516
sg76
(dp1517
sg78
g1424
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp1518
sg90
Nsg91
Nsb(dp1519
ssg247
(dp1520
sg249
(dp1521
g1400
(dp1522
g1446
(dp1523
g253
(lp1524
(g1418
g1453
tp1525
assg1428
(dp1526
g253
(lp1527
(g1418
g1440
tp1528
assg1485
(dp1529
g253
(lp1530
(g1418
g1453
tp1531
asssg1428
(dp1532
sg1446
(dp1533
g1428
(dp1534
g253
(lp1535
(g1455
g1438
tp1536
asssg1470
(dp1537
g1400
(dp1538
g253
(lp1539
(g1453
g1409
tp1540
assg1504
(dp1541
g253
(lp1542
(g1454
g1409
tp1543
asssg1485
(dp1544
g1428
(dp1545
g253
(lp1546
(g1455
g1439
tp1547
asssg1504
(dp1548
g1446
(dp1549
g253
(lp1550
(g1418
g1454
tp1551
assg1428
(dp1552
g253
(lp1553
(g1418
g1437
tp1554
assg1485
(dp1555
g253
(lp1556
(g1418
g1454
tp1557
assssg295
g1521
sg296
(dp1558
g1400
(dp1559
g1470
g1538
ssg1428
(dp1560
g1485
g1545
sg1400
g1526
sg1504
g1552
sg1446
g1534
ssg1446
(dp1561
g1400
g1523
sg1504
g1549
ssg1470
(dp1562
sg1485
(dp1563
g1400
g1529
sg1504
g1555
ssg1504
(dp1564
g1470
g1541
sssg304
g1521
sbsg66
g1424
sg78
g1067
sg86
g1424
sg87
g306
((lp1565
(lp1566
g309
ag306
((lp1567
(lp1568
g312
ag309
aa(lp1569
g314
ag315
aa(lp1570
g317
ag318
aa(lp1571
g320
ag321
aa(lp1572
g323
ag324
aa(lp1573
g326
ag327
aa(lp1574
g329
ag330
aa(lp1575
g332
ag333
aatp1576
Rp1577
aa(lp1578
g337
ag306
((lp1579
(lp1580
g312
ag337
aa(lp1581
g341
ag342
aa(lp1582
g344
ag345
aa(lp1583
g347
ag348
aa(lp1584
g350
ag351
aa(lp1585
g353
ag354
aa(lp1586
g356
ag357
aa(lp1587
g359
ag360
aa(lp1588
g362
ag363
aa(lp1589
g365
ag366
aa(lp1590
g368
ag369
aa(lp1591
g371
ag372
aa(lp1592
g374
ag375
aa(lp1593
g377
ag378
aa(lp1594
g380
ag381
aa(lp1595
g383
ag384
aa(lp1596
g386
ag387
aa(lp1597
g389
ag390
aa(lp1598
g392
ag393
aatp1599
Rp1600
aa(lp1601
g397
ag306
((lp1602
(lp1603
g312
ag397
aa(lp1604
g401
ag402
aatp1605
Rp1606
aatp1607
Rp1608
sg91
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g25
g7
Ntp1619
Rp1620
(dp1621
g29
(dp1622
sg31
g5
(g182
g7
Ntp1623
Rp1624
(dp1625
g36
g37
(g186
tp1626
Rp1627
(dp1628
g51
g52
sg1437
g45
sg1438
g45
sg1439
g45
sg1440
g45
sbsg197
(lp1629
g1438
ag1439
ag1437
ag1440
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp1630
sg78
S'montage_snr_0'
p1631
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp1632
sg90
Nsg91
Nsb(dp1633
sg5
(g25
g7
Ntp1634
Rp1635
(dp1636
g29
(dp1637
sg31
g5
(g1403
g7
Ntp1638
Rp1639
(dp1640
g1407
(lp1641
g1453
ag1454
ag1455
ag1456
asg36
g37
(g1410
tp1642
Rp1643
(dp1644
g42
I00
sg1455
S'snr_a.png'
p1645
sg1453
g45
sg1456
S'red_to_blue'
p1646
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1647
sg1454
g45
sg51
g52
sbsg1416
(dp1648
g1455
Nssg1419
(lp1649
g1455
asg1421
Nsbsg74
Nsg66
g1465
sg76
(dp1650
sg78
g1631
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1465
sg87
Nsg88
(lp1651
sg90
Nsg91
Nsb(dp1652
sg5
(g25
g7
Ntp1653
Rp1654
(dp1655
g29
(dp1656
sg31
g5
(g1403
g7
Ntp1657
Rp1658
(dp1659
g1407
(lp1660
g1409
asg36
g37
(g1410
tp1661
Rp1662
(dp1663
g42
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1664
sg1409
g45
sg51
g52
sbsg1416
(dp1665
g1418
Nssg1419
(lp1666
g1418
asg1421
Nsbsg74
Nsg66
g1516
sg76
(dp1667
sg78
g1631
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp1668
sg90
Nsg91
Nsb(dp1669
sg5
(g25
g7
Ntp1670
Rp1671
(dp1672
g29
(dp1673
sg31
g5
(g1403
g7
Ntp1674
Rp1675
(dp1676
g1407
(lp1677
g1409
asg36
g37
(g1410
tp1678
Rp1679
(dp1680
g42
I00
sg1414
g1664
sg1409
g45
sg51
g52
sbsg1416
(dp1681
g1418
Nssg1419
(lp1682
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp1683
sg83
Nsg80
Nsg90
Nsg66
g1423
sg78
g1631
sg82
I00
sg84
Nsg85
I00
sg86
g1423
sg87
Nsg88
(lp1684
sg91
Nsb(dp1685
sg5
(g25
g7
Ntp1686
Rp1687
(dp1688
g29
(dp1689
sg31
g5
(g1403
g7
Ntp1690
Rp1691
(dp1692
g1407
(lp1693
g1453
ag1454
ag1455
ag1456
asg36
g37
(g1410
tp1694
Rp1695
(dp1696
g42
I00
sg1455
S'snr_s.png'
p1697
sg1453
g45
sg1456
g1646
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1698
sg1454
g45
sg51
g52
sbsg1416
(dp1699
g1455
Nssg1419
(lp1700
g1455
asg1421
Nsbsg74
Nsg66
g1499
sg76
(dp1701
sg78
g1631
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp1702
sg90
Nsg91
Nsb(dp1703
sg5
(g25
g7
Ntp1704
Rp1705
(dp1706
g29
(dp1707
sg31
g5
(g182
g7
Ntp1708
Rp1709
(dp1710
g36
g37
(g186
tp1711
Rp1712
(dp1713
g51
g52
sg1454
g45
sg1453
g45
sbsg197
(lp1714
g1454
ag1453
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp1715
sg78
g1631
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp1716
sg90
Nsg91
Nsb(dp1717
ssg247
(dp1718
sg249
(dp1719
g1620
(dp1720
sg1635
(dp1721
g1620
(dp1722
g253
(lp1723
(g1455
g1438
tp1724
asssg1654
(dp1725
g1620
(dp1726
g253
(lp1727
(g1418
g1437
tp1728
assg1635
(dp1729
g253
(lp1730
(g1418
g1454
tp1731
assg1687
(dp1732
g253
(lp1733
(g1418
g1454
tp1734
asssg1671
(dp1735
g1620
(dp1736
g253
(lp1737
(g1418
g1440
tp1738
assg1635
(dp1739
g253
(lp1740
(g1418
g1453
tp1741
assg1687
(dp1742
g253
(lp1743
(g1418
g1453
tp1744
asssg1687
(dp1745
g1620
(dp1746
g253
(lp1747
(g1455
g1439
tp1748
asssg1705
(dp1749
g1671
(dp1750
g253
(lp1751
(g1453
g1409
tp1752
assg1654
(dp1753
g253
(lp1754
(g1454
g1409
tp1755
assssg295
g1719
sg296
(dp1756
g1620
(dp1757
g1671
g1736
sg1654
g1726
sg1687
g1746
sg1635
g1722
ssg1635
(dp1758
g1671
g1739
sg1654
g1729
ssg1654
(dp1759
g1705
g1753
ssg1671
(dp1760
g1705
g1750
ssg1687
(dp1761
g1671
g1742
sg1654
g1732
ssg1705
(dp1762
ssg304
g1719
sbsg66
g1631
sg78
g1067
sg86
g1631
sg87
g306
((lp1763
(lp1764
g309
ag306
((lp1765
(lp1766
g312
ag309
aa(lp1767
g314
ag315
aa(lp1768
g317
ag318
aa(lp1769
g320
ag321
aa(lp1770
g323
ag324
aa(lp1771
g326
ag327
aa(lp1772
g329
ag330
aa(lp1773
g332
ag333
aatp1774
Rp1775
aa(lp1776
g337
ag306
((lp1777
(lp1778
g312
ag337
aa(lp1779
g341
ag342
aa(lp1780
g344
ag345
aa(lp1781
g347
ag348
aa(lp1782
g350
ag351
aa(lp1783
g353
ag354
aa(lp1784
g356
ag357
aa(lp1785
g359
ag360
aa(lp1786
g362
ag363
aa(lp1787
g365
ag366
aa(lp1788
g368
ag369
aa(lp1789
g371
ag372
aa(lp1790
g374
ag375
aa(lp1791
g377
ag378
aa(lp1792
g380
ag381
aa(lp1793
g383
ag384
aa(lp1794
g386
ag387
aa(lp1795
g389
ag390
aa(lp1796
g392
ag393
aatp1797
Rp1798
aa(lp1799
g397
ag306
((lp1800
(lp1801
g312
ag397
aa(lp1802
g401
ag402
aatp1803
Rp1804
aatp1805
Rp1806
sg91
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g25
g7
Ntp1810
Rp1811
(dp1812
g29
(dp1813
sg31
g5
(g1165
g7
Ntp1814
Rp1815
(dp1816
g36
g37
(g1169
tp1817
Rp1818
(dp1819
g42
I00
sg1173
g45
sg67
g45
sg1174
g45
sg48
g45
sg156
g45
sg49
g45
sg130
g45
sg1175
g45
sg1176
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg53
g54
sg55
g5
(g56
g57
(dp1821
g59
g60
stp1822
Rp1823
(dp1824
g64
S'environ_items'
p1825
sg66
g55
sbsg1182
g45
sg1183
g45
sg68
g60
sg1184
g45
sg1185
g45
sg51
g52
sg1186
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'mean_func_fsl_warp_0'
p1826
sg76
(dp1827
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1826
sg87
Nsg88
(lp1828
sg90
Nsg91
Nsbg48
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g25
g7
Ntp1831
Rp1832
(dp1833
g29
(dp1834
sg31
g5
(g1403
g7
Ntp1835
Rp1836
(dp1837
g1407
(lp1838
S'motion_parameters'
p1839
asg36
g37
(g1410
tp1840
Rp1841
(dp1842
g42
I00
sg1414
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g45
sg51
g52
sbsg1416
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1419
(lp1847
g1845
ag1846
asg1421
Nsbsg74
Nsg66
S'motion_plt_0'
p1848
sg76
(dp1849
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1848
sg87
Nsg88
(lp1850
sg90
Nsg91
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g25
g7
Ntp1853
Rp1854
(dp1855
g29
(dp1856
sg31
g5
(g1403
g7
Ntp1857
Rp1858
(dp1859
g1407
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg36
g37
(g1410
tp1864
Rp1865
(dp1866
g42
I00
sg51
g52
sg1861
g45
sg1414
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g45
sbsg1416
(dp1869
S'hist_path'
p1870
Nssg1419
(lp1871
g1870
asg1421
Nsbsg74
Nsg66
S'fd_plot_0'
p1872
sg76
(dp1873
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1872
sg87
Nsg88
(lp1874
sg90
Nsg91
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g25
g7
Ntp1884
Rp1885
(dp1886
g29
(dp1887
sg31
g5
(g1403
g7
Ntp1888
Rp1889
(dp1890
g1407
(lp1891
g67
ag196
aS'exclude_list'
p1892
asg36
g37
(g1410
tp1893
Rp1894
(dp1895
g42
I00
sg1892
g45
sg1414
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1896
sg67
g45
sg196
g45
sg51
g52
sbsg1416
(dp1897
g48
Nssg1419
(lp1898
g48
asg1421
Nsbsg74
Nsg66
S'include_frames'
p1899
sg76
(dp1900
sg78
S'gen_motion_stats_0'
p1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1899
sg87
Nsg88
(lp1902
sg90
Nsg91
Nsb(dp1903
sg5
(g25
g7
Ntp1904
Rp1905
(dp1906
g29
(dp1907
sg31
g5
(g1403
g7
Ntp1908
Rp1909
(dp1910
g1407
(lp1911
S'subject_id'
p1912
aS'scan_id'
p1913
aS'FD_1D'
p1914
aS'FDJ_1D'
p1915
ag196
aS'DVARS'
p1916
asg36
g37
(g1410
tp1917
Rp1918
(dp1919
g42
I00
sg51
g52
sg1913
g45
sg1912
g45
sg1916
g45
sg1414
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1920
sg1915
g45
sg1914
g45
sg196
g45
sbsg1416
(dp1921
g48
Nssg1419
(lp1922
g48
asg1421
Nsbsg74
Nsg66
S'calc_power_parameters'
p1923
sg76
(dp1924
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1923
sg87
Nsg88
(lp1925
sg90
Nsg91
Nsb(dp1926
sg5
(g25
g7
Ntp1927
Rp1928
(dp1929
g29
(dp1930
sg31
g5
(g182
g7
Ntp1931
Rp1932
(dp1933
g36
g37
(g186
tp1934
Rp1935
(dp1936
g196
(lp1937
F0.2
asg51
g52
sS'remove_frames_before'
p1938
I1
sS'remove_frames_after'
p1939
I2
sbsg197
(lp1940
g196
ag1938
ag1939
asg199
I01
sbsg74
Nsg66
S'scrubbing_input'
p1941
sg76
(dp1942
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g196
(lp1943
F0.2
atp1944
sg85
I00
sg86
g1941
sg87
Nsg88
(lp1945
sg90
Nsg91
Nsb(dp1946
sg5
(g25
g7
Ntp1947
Rp1948
(dp1949
g29
(dp1950
sg31
g5
(g1403
g7
Ntp1951
Rp1952
(dp1953
g1407
(lp1954
g67
asg36
g37
(g1410
tp1955
Rp1956
(dp1957
g42
I00
sg51
g52
sg1414
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p1958
sg67
g45
sbsg1416
(dp1959
g48
Nssg1419
(lp1960
g48
asg1421
Nsbsg74
Nsg66
S'calculate_FDJ'
p1961
sg76
(dp1962
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1961
sg87
Nsg88
(lp1963
sg90
Nsg91
Nsb(dp1964
sg5
(g25
g7
Ntp1965
Rp1966
(dp1967
g29
(dp1968
sg31
g5
(g182
g7
Ntp1969
Rp1970
(dp1971
g36
g37
(g186
tp1972
Rp1973
(dp1974
g51
g52
sS'frames_ex_1D'
p1975
g45
sg1915
g45
sg1914
g45
sS'frames_in_1D'
p1976
g45
sS'motion_params'
p1977
g45
sS'power_params'
p1978
g45
sbsg197
(lp1979
g1914
ag1915
ag1975
ag1976
ag1978
ag1977
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp1980
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp1981
sg90
Nsg91
Nsb(dp1982
sg5
(g25
g7
Ntp1983
Rp1984
(dp1985
g29
(dp1986
sg31
g5
(g1403
g7
Ntp1987
Rp1988
(dp1989
g1407
(lp1990
g1912
ag1913
aS'movement_parameters'
p1991
aS'max_displacement'
p1992
asg36
g37
(g1410
tp1993
Rp1994
(dp1995
g42
I00
sg1992
g45
sg1913
g45
sg1912
g45
sg1414
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1996
sg1991
g45
sg51
g52
sbsg1416
(dp1997
g48
Nssg1419
(lp1998
g48
asg1421
Nsbsg74
Nsg66
S'calc_motion_parameters'
p1999
sg76
(dp2000
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1999
sg87
Nsg88
(lp2001
sg90
Nsg91
Nsb(dp2002
sg5
(g25
g7
Ntp2003
Rp2004
(dp2005
g29
(dp2006
sg31
g5
(g1403
g7
Ntp2007
Rp2008
(dp2009
g1407
(lp2010
g67
ag196
aS'frames_before'
p2011
aS'frames_after'
p2012
asg36
g37
(g1410
tp2013
Rp2014
(dp2015
g42
I00
sg2012
g45
sg1414
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p2016
sg67
g45
sg196
g45
sg51
g52
sg2011
g45
sbsg1416
(dp2017
g48
Nssg1419
(lp2018
g48
asg1421
Nsbsg74
Nsg66
S'exclude_frames'
p2019
sg76
(dp2020
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2019
sg87
Nsg88
(lp2021
sg90
Nsg91
Nsb(dp2022
sg5
(g25
g7
Ntp2023
Rp2024
(dp2025
g29
(dp2026
sg31
g5
(g182
g7
Ntp2027
Rp2028
(dp2029
g36
g37
(g186
tp2030
Rp2031
(dp2032
g1992
g45
sg51
g52
sg1913
g45
sg1912
g45
sS'mask'
p2033
g45
sg1991
g45
sS'oned_matrix_save'
p2034
g45
sS'motion_correct'
p2035
g45
sbsg197
(lp2036
g1912
ag1913
ag1991
ag1992
ag2035
ag2033
ag2034
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp2037
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp2038
sg90
Nsg91
Nsb(dp2039
sg5
(g25
g7
Ntp2040
Rp2041
(dp2042
g29
(dp2043
sg31
g5
(g1403
g7
Ntp2044
Rp2045
(dp2046
g1407
(lp2047
S'rest'
p2048
ag2033
asg36
g37
(g1410
tp2049
Rp2050
(dp2051
g42
I00
sg2033
g45
sg51
g52
sg1414
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p2052
sg2048
g45
sbsg1416
(dp2053
g48
Nssg1419
(lp2054
g48
asg1421
Nsbsg74
Nsg66
S'cal_DVARS'
p2055
sg76
(dp2056
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2055
sg87
Nsg88
(lp2057
sg90
Nsg91
Nsb(dp2058
sg5
(g25
g7
Ntp2059
Rp2060
(dp2061
g29
(dp2062
sg31
g5
(g1403
g7
Ntp2063
Rp2064
(dp2065
g1407
(lp2066
g67
asg36
g37
(g1410
tp2067
Rp2068
(dp2069
g42
I00
sg51
g52
sg1414
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p2070
sg67
g45
sbsg1416
(dp2071
g48
Nssg1419
(lp2072
g48
asg1421
Nsbsg74
Nsg66
S'calculate_FD'
p2073
sg76
(dp2074
sg78
g1901
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2073
sg87
Nsg88
(lp2075
sg90
Nsg91
Nsb(dp2076
ssg247
(dp2077
sg249
(dp2078
g1885
(dp2079
g1966
(dp2080
g253
(lp2081
(g48
g1976
tp2082
asssg1905
(dp2083
g1966
(dp2084
g253
(lp2085
(g48
g1978
tp2086
asssg1928
(dp2087
g1885
(dp2088
g253
(lp2089
(g196
g196
tp2090
assg2004
(dp2091
g253
(lp2092
(g196
g196
tp2093
a(g1938
g2011
tp2094
a(g1939
g2012
tp2095
assg1905
(dp2096
g253
(lp2097
(g196
g196
tp2098
asssg1948
(dp2099
g1966
(dp2100
g253
(lp2101
(g48
g1915
tp2102
assg1905
(dp2103
g253
(lp2104
(g48
g1915
tp2105
asssg1966
(dp2106
sg1984
(dp2107
g1966
(dp2108
g253
(lp2109
(g48
g1977
tp2110
asssg2004
(dp2111
g1885
(dp2112
g253
(lp2113
(g48
g1892
tp2114
assg1966
(dp2115
g253
(lp2116
(g48
g1975
tp2117
asssg2024
(dp2118
g1984
(dp2119
g253
(lp2120
(g1912
g1912
tp2121
a(g1913
g1913
tp2122
a(g1991
g1991
tp2123
a(g1992
g1992
tp2124
assg2041
(dp2125
g253
(lp2126
(g2035
g2048
tp2127
a(g2033
g2033
tp2128
assg1905
(dp2129
g253
(lp2130
(g1912
g1912
tp2131
a(g1913
g1913
tp2132
assg2060
(dp2133
g253
(lp2134
(g1991
g67
tp2135
assg1948
(dp2136
g253
(lp2137
(g2034
g67
tp2138
asssg2041
(dp2139
g1905
(dp2140
g253
(lp2141
(g48
g1916
tp2142
asssg2060
(dp2143
g1885
(dp2144
g253
(lp2145
(g48
g67
tp2146
assg1905
(dp2147
g253
(lp2148
(g48
g1914
tp2149
assg1966
(dp2150
g253
(lp2151
(g48
g1914
tp2152
assg2004
(dp2153
g253
(lp2154
(g48
g67
tp2155
assssg295
g2078
sg296
(dp2156
g1885
(dp2157
g1928
g2088
sg2060
g2144
sg2004
g2112
ssg1905
(dp2158
g1948
g2103
sg2024
g2129
sg2060
g2147
sg1928
g2096
sg2041
g2140
ssg1928
(dp2159
sg1948
(dp2160
g2024
g2136
ssg1966
(dp2161
g1885
g2080
sg1905
g2084
sg1948
g2100
sg2060
g2150
sg2004
g2115
sg1984
g2108
ssg1984
(dp2162
g2024
g2119
ssg2004
(dp2163
g1928
g2091
sg2060
g2153
ssg2024
(dp2164
sg2041
(dp2165
g2024
g2125
ssg2060
(dp2166
g2024
g2133
sssg304
g2078
sbsg66
g1901
sg78
g1067
sg86
g1901
sg87
g306
((lp2167
(lp2168
g309
ag306
((lp2169
(lp2170
g312
ag309
aa(lp2171
g314
ag315
aa(lp2172
g317
ag318
aa(lp2173
g320
ag321
aa(lp2174
g323
ag324
aa(lp2175
g326
ag327
aa(lp2176
g329
ag330
aa(lp2177
g332
ag333
aatp2178
Rp2179
aa(lp2180
g337
ag306
((lp2181
(lp2182
g312
ag337
aa(lp2183
g341
ag342
aa(lp2184
g344
ag345
aa(lp2185
g347
ag348
aa(lp2186
g350
ag351
aa(lp2187
g353
ag354
aa(lp2188
g356
ag357
aa(lp2189
g359
ag360
aa(lp2190
g362
ag363
aa(lp2191
g365
ag366
aa(lp2192
g368
ag369
aa(lp2193
g371
ag372
aa(lp2194
g374
ag375
aa(lp2195
g377
ag378
aa(lp2196
g380
ag381
aa(lp2197
g383
ag384
aa(lp2198
g386
ag387
aa(lp2199
g389
ag390
aa(lp2200
g392
ag393
aatp2201
Rp2202
aa(lp2203
g397
ag306
((lp2204
(lp2205
g312
ag397
aa(lp2206
g401
ag402
aatp2207
Rp2208
aatp2209
Rp2210
sg91
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g25
g7
Ntp2224
Rp2225
(dp2226
g29
(dp2227
sg31
g5
(cnipype.interfaces.afni.preprocess
Refit
p2228
g7
Ntp2229
Rp2230
(dp2231
g36
g37
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2232
tp2233
Rp2234
(dp2235
g42
I00
sg51
g52
sS'deoblique'
p2236
I01
sg49
g45
sS'yorigin'
p2237
g45
sg53
g54
sg55
g5
(g56
g57
(dp2238
tp2239
Rp2240
(dp2241
g64
S'environ_items'
p2242
sg66
g55
sbsg67
g45
sS'xorigin'
p2243
g45
sS'zorigin'
p2244
g45
sbsg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2245
sg83
Nsg80
Nsg90
Nsg66
S'anat_deoblique'
p2246
sg78
S'anat_preproc_0'
p2247
sg82
I00
sg84
Nsg85
I00
sg86
g2246
sg87
Nsg88
(lp2248
sg91
Nsb(dp2249
sg5
(g25
g7
Ntp2250
Rp2251
(dp2252
g29
(dp2253
sg31
g5
(cnipype.interfaces.afni.preprocess
Calc
p2254
g7
Ntp2255
Rp2256
(dp2257
g36
g37
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2258
tp2259
Rp2260
(dp2261
S'stop_idx'
p2262
g45
sg42
I00
sg51
g52
sg48
g45
sS'expr'
p2263
S'a*step(b)'
p2264
sg49
g45
sS'outputtype'
p2265
S'NIFTI_GZ'
p2266
sS'in_file_b'
p2267
g45
sS'in_file_c'
p2268
g45
sS'in_file_a'
p2269
g45
sg55
g5
(g56
g57
(dp2270
tp2271
Rp2272
(dp2273
g64
S'environ_items'
p2274
sg66
g55
sbsS'single_idx'
p2275
g45
sS'other'
p2276
g45
sS'start_idx'
p2277
g45
sg53
g54
sbsS'_outputtype'
p2278
g2266
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2279
sg83
Nsg80
Nsg90
Nsg66
S'anat_brain_only'
p2280
sg78
g2247
sg82
I00
sg84
Nsg85
I00
sg86
g2280
sg87
Nsg88
(lp2281
sg91
Nsb(dp2282
sg5
(g25
g7
Ntp2283
Rp2284
(dp2285
g29
(dp2286
sg31
g5
(g182
g7
Ntp2287
Rp2288
(dp2289
g36
g37
(g186
tp2290
Rp2291
(dp2292
S'reorient'
p2293
g45
sg194
g45
sS'refit'
p2294
g45
sg51
g52
sS'skullstrip'
p2295
g45
sbsg197
(lp2296
g2294
ag2293
ag2295
ag194
asg199
I01
sbsg74
Nsg81
I00
sg76
(dp2297
sg83
Nsg80
Nsg90
Nsg66
g243
sg78
g2247
sg82
I00
sg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp2298
sg91
Nsb(dp2299
sg5
(g25
g7
Ntp2300
Rp2301
(dp2302
g29
(dp2303
sg31
g5
(g182
g7
Ntp2304
Rp2305
(dp2306
g36
g37
(g186
tp2307
Rp2308
(dp2309
g51
g52
sS'anat'
p2310
g45
sbsg197
(lp2311
g2310
asg199
I01
sbsg74
Nsg81
I00
sg76
(dp2312
sg83
Nsg80
Nsg90
Nsg66
g200
sg78
g2247
sg82
I00
sg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp2313
sg91
Nsb(dp2314
sg5
(g25
g7
Ntp2315
Rp2316
(dp2317
g29
(dp2318
sg31
g5
(cnipype.interfaces.afni.preprocess
Resample
p2319
g7
Ntp2320
Rp2321
(dp2322
g36
g37
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2323
tp2324
Rp2325
(dp2326
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2265
g2266
sS'resample_mode'
p2327
g45
sS'voxel_size'
p2328
g45
sg53
g54
sS'master'
p2329
g45
sg67
g45
sg55
g5
(g56
g57
(dp2330
tp2331
Rp2332
(dp2333
g64
S'environ_items'
p2334
sg66
g55
sbsS'orientation'
p2335
S'RPI'
p2336
sbsg2278
g2266
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2337
sg83
Nsg80
Nsg90
Nsg66
S'anat_reorient'
p2338
sg78
g2247
sg82
I00
sg84
Nsg85
I00
sg86
g2338
sg87
Nsg88
(lp2339
sg91
Nsb(dp2340
sg5
(g25
g7
Ntp2341
Rp2342
(dp2343
g29
(dp2344
sg31
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2345
g7
Ntp2346
Rp2347
(dp2348
g36
g37
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2349
tp2350
Rp2351
(dp2352
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2265
S'AFNI'
p2353
sg53
g54
sg55
g5
(g56
g57
(dp2354
tp2355
Rp2356
(dp2357
g64
S'environ_items'
p2358
sg66
g55
sbsg67
g45
sbsg2278
g2353
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2359
sg83
Nsg80
Nsg90
Nsg66
S'anat_skullstrip'
p2360
sg78
g2247
sg82
I00
sg84
Nsg85
I00
sg86
g2360
sg87
Nsg88
(lp2361
sg91
Nsb(dp2362
ssg249
(dp2363
g2225
(dp2364
g2316
(dp2365
g253
(lp2366
(g48
g67
tp2367
assg2284
(dp2368
g253
(lp2369
(g48
g2294
tp2370
asssg2251
(dp2371
g2284
(dp2372
g253
(lp2373
(g48
g194
tp2374
asssg2284
(dp2375
sg2301
(dp2376
g2225
(dp2377
g253
(lp2378
(g2310
g67
tp2379
asssg2316
(dp2380
g2284
(dp2381
g253
(lp2382
(g48
g2293
tp2383
assg2251
(dp2384
g253
(lp2385
(g48
g2269
tp2386
assg2342
(dp2387
g253
(lp2388
(g48
g67
tp2389
asssg2342
(dp2390
g2251
(dp2391
g253
(lp2392
(g48
g2267
tp2393
assg2284
(dp2394
g253
(lp2395
(g48
g2295
tp2396
assssg295
g2363
sg296
(dp2397
g2225
(dp2398
g2301
g2377
ssg2251
(dp2399
g2316
g2384
sg2342
g2391
ssg2284
(dp2400
g2225
g2368
sg2316
g2381
sg2342
g2394
sg2251
g2372
ssg2301
(dp2401
sg2316
(dp2402
g2225
g2365
ssg2342
(dp2403
g2316
g2387
sssg247
(dp2404
sg304
g2363
sbsg66
g2247
sg78
g1067
sg86
g2247
sg87
g306
((lp2405
(lp2406
g309
ag306
((lp2407
(lp2408
g312
ag309
aa(lp2409
g314
ag315
aa(lp2410
g317
ag318
aa(lp2411
g320
ag321
aa(lp2412
g323
ag324
aa(lp2413
g326
ag327
aa(lp2414
g329
ag330
aa(lp2415
g332
ag333
aatp2416
Rp2417
aa(lp2418
g337
ag306
((lp2419
(lp2420
g312
ag337
aa(lp2421
g341
ag342
aa(lp2422
g344
ag345
aa(lp2423
g347
ag348
aa(lp2424
g350
ag351
aa(lp2425
g353
ag354
aa(lp2426
g356
ag357
aa(lp2427
g359
ag360
aa(lp2428
g362
ag363
aa(lp2429
g365
ag366
aa(lp2430
g368
ag369
aa(lp2431
g371
ag372
aa(lp2432
g374
ag375
aa(lp2433
g377
ag378
aa(lp2434
g380
ag381
aa(lp2435
g383
ag384
aa(lp2436
g386
ag387
aa(lp2437
g389
ag390
aa(lp2438
g392
ag393
aatp2439
Rp2440
aa(lp2441
g397
ag306
((lp2442
(lp2443
g312
ag397
aa(lp2444
g401
ag402
aatp2445
Rp2446
aatp2447
Rp2448
sg91
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g25
g7
Ntp2459
Rp2460
(dp2461
g29
(dp2462
sg31
g5
(g2228
g7
Ntp2463
Rp2464
(dp2465
g36
g37
(g2232
tp2466
Rp2467
(dp2468
g42
I00
sg51
g52
sg2236
I01
sg49
g45
sg2237
g45
sg53
g54
sg55
g5
(g56
g57
(dp2469
tp2470
Rp2471
(dp2472
g64
S'environ_items'
p2473
sg66
g55
sbsg67
g45
sg2243
g45
sg2244
g45
sbsg72
Nsg73
g54
sbsg74
Nsg66
S'func_deoblique'
p2474
sg76
(dp2475
sg78
S'func_preproc_automask_0'
p2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2474
sg87
Nsg88
(lp2477
sg90
Nsg91
Nsb(dp2478
sg5
(g25
g7
Ntp2479
Rp2480
(dp2481
g29
(dp2482
sg31
g5
(cnipype.interfaces.afni.preprocess
TStat
p2483
g7
Ntp2484
Rp2485
(dp2486
g36
g37
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2487
tp2488
Rp2489
(dp2490
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2033
g45
sg2265
g2266
sg53
g54
sg55
g5
(g56
g57
(dp2491
tp2492
Rp2493
(dp2494
g64
S'environ_items'
p2495
sg66
g55
sbsg67
g45
sS'options'
p2496
S'-mean'
p2497
sbsg2278
g2266
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_get_mean_RPI'
p2498
sg76
(dp2499
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2498
sg87
Nsg88
(lp2500
sg90
Nsg91
Nsb(dp2501
sg5
(g25
g7
Ntp2502
Rp2503
(dp2504
g29
(dp2505
sg31
g5
(g2483
g7
Ntp2506
Rp2507
(dp2508
g36
g37
(g2487
tp2509
Rp2510
(dp2511
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2033
g45
sg2265
g2266
sg53
g54
sg55
g5
(g56
g57
(dp2512
tp2513
Rp2514
(dp2515
g64
S'environ_items'
p2516
sg66
g55
sbsg67
g45
sg2496
g2497
sbsg2278
g2266
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mean_skullstrip'
p2517
sg76
(dp2518
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2517
sg87
Nsg88
(lp2519
sg90
Nsg91
Nsb(dp2520
sg5
(g25
g7
Ntp2521
Rp2522
(dp2523
g29
(dp2524
sg31
g5
(g208
g7
Ntp2525
Rp2526
(dp2527
g36
g37
(g212
tp2528
Rp2529
(dp2530
g42
I00
sg51
g52
sg46
S'-ing 10000'
p2531
sg216
S'float'
p2532
sg48
g45
sg49
g45
sg217
g45
sg53
g54
sg55
g5
(g56
g57
(dp2533
g59
g60
stp2534
Rp2535
(dp2536
g64
S'environ_items'
p2537
sg66
g55
sbsg67
g45
sg68
g60
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_normalize'
p2538
sg76
(dp2539
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2538
sg87
Nsg88
(lp2540
sg90
Nsg91
Nsb(dp2541
sg5
(g25
g7
Ntp2542
Rp2543
(dp2544
g29
(dp2545
sg31
g5
(g208
g7
Ntp2546
Rp2547
(dp2548
g36
g37
(g212
tp2549
Rp2550
(dp2551
g42
I00
sg51
g52
sg46
S'-Tmin -bin'
p2552
sg216
S'char'
p2553
sg48
g45
sg49
g45
sg217
g45
sg53
g54
sg55
g5
(g56
g57
(dp2554
g59
g60
stp2555
Rp2556
(dp2557
g64
S'environ_items'
p2558
sg66
g55
sbsg67
g45
sg68
g60
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mask_normalize'
p2559
sg76
(dp2560
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2559
sg87
Nsg88
(lp2561
sg90
Nsg91
Nsb(dp2562
sg5
(g25
g7
Ntp2563
Rp2564
(dp2565
g29
(dp2566
sg31
g5
(g182
g7
Ntp2567
Rp2568
(dp2569
g36
g37
(g186
tp2570
Rp2571
(dp2572
g1992
g45
sS'motion_correct_ref'
p2573
g45
sg51
g52
sS'preprocessed_mask'
p2574
g45
sg2033
g45
sg2294
g45
sg2295
g45
sg2293
g45
sS'preprocessed'
p2575
g45
sS'slice_time_corrected'
p2576
g45
sg1991
g45
sS'example_func'
p2577
g45
sg2034
g45
sS'reorient_mean'
p2578
g45
sg2035
g45
sbsg197
(lp2579
g2294
ag2293
ag2578
ag2035
ag2573
ag1991
ag1992
ag2033
ag2295
ag2577
ag2575
ag2574
ag2576
ag2034
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp2580
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp2581
sg90
Nsg91
Nsb(dp2582
sg5
(g25
g7
Ntp2583
Rp2584
(dp2585
g29
(dp2586
sg31
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2587
g7
Ntp2588
Rp2589
(dp2590
g36
g37
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2591
tp2592
Rp2593
(dp2594
S'oned_file'
p2595
g45
sg42
I00
sg126
g45
sS'timeshift'
p2596
g45
sS'basefile'
p2597
g45
sg49
S'-Fourier -twopass'
p2598
sg2265
g2266
sS'zpad'
p2599
I4
sg53
g54
sS'md1d_file'
p2600
S'max_displacement.1D'
p2601
sg67
g45
sS'copyorigin'
p2602
g45
sg55
g5
(g56
g57
(dp2603
tp2604
Rp2605
(dp2606
g64
S'environ_items'
p2607
sg66
g55
sbsg2034
g45
sg51
g52
sg48
g45
sbsg2278
g2266
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2608
sg83
Nsg80
Nsg90
Nsg66
S'func_motion_correct_A'
p2609
sg78
g2476
sg82
I00
sg84
Nsg85
I00
sg86
g2609
sg87
Nsg88
(lp2610
sg91
Nsb(dp2611
sg5
(g25
g7
Ntp2612
Rp2613
(dp2614
g29
(dp2615
sg31
g5
(g2483
g7
Ntp2616
Rp2617
(dp2618
g36
g37
(g2487
tp2619
Rp2620
(dp2621
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2033
g45
sg2265
g2266
sg53
g54
sg55
g5
(g56
g57
(dp2622
tp2623
Rp2624
(dp2625
g64
S'environ_items'
p2626
sg66
g55
sbsg67
g45
sg2496
g2497
sbsg2278
g2266
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2627
sg83
Nsg80
Nsg90
Nsg66
S'func_get_mean_motion'
p2628
sg78
g2476
sg82
I00
sg84
Nsg85
I00
sg86
g2628
sg87
Nsg88
(lp2629
sg91
Nsb(dp2630
sg5
(g25
g7
Ntp2631
Rp2632
(dp2633
g29
(dp2634
sg31
g5
(g2254
g7
Ntp2635
Rp2636
(dp2637
g36
g37
(g2258
tp2638
Rp2639
(dp2640
g2262
g45
sg42
I00
sg51
g52
sg48
g45
sg2263
S'a*b'
p2641
sg49
g45
sg2265
g2266
sg2267
g45
sg2268
g45
sg2269
g45
sg55
g5
(g56
g57
(dp2642
tp2643
Rp2644
(dp2645
g64
S'environ_items'
p2646
sg66
g55
sbsg2275
g45
sg2276
g45
sg2277
g45
sg53
g54
sbsg2278
g2266
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_edge_detect'
p2647
sg76
(dp2648
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2647
sg87
Nsg88
(lp2649
sg90
Nsg91
Nsb(dp2650
sg5
(g25
g7
Ntp2651
Rp2652
(dp2653
g29
(dp2654
sg31
g5
(cnipype.interfaces.afni.preprocess
Automask
p2655
g7
Ntp2656
Rp2657
(dp2658
g36
g37
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2659
tp2660
Rp2661
(dp2662
g42
I00
sg51
g52
sg49
g45
sS'erode'
p2663
g45
sg48
g45
sS'dilate'
p2664
g45
sS'clfrac'
p2665
g45
sg2265
g2266
sS'brain_file'
p2666
g45
sg53
g54
sg55
g5
(g56
g57
(dp2667
tp2668
Rp2669
(dp2670
g64
S'environ_items'
p2671
sg66
g55
sbsg67
g45
sbsg2278
g2266
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_get_brain_mask'
p2672
sg76
(dp2673
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2672
sg87
Nsg88
(lp2674
sg90
Nsg91
Nsb(dp2675
sg5
(g25
g7
Ntp2676
Rp2677
(dp2678
g29
(dp2679
sg31
g5
(g2319
g7
Ntp2680
Rp2681
(dp2682
g36
g37
(g2323
tp2683
Rp2684
(dp2685
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2265
g2266
sg2327
g45
sg2328
g45
sg53
g54
sg2329
g45
sg67
g45
sg55
g5
(g56
g57
(dp2686
tp2687
Rp2688
(dp2689
g64
S'environ_items'
p2690
sg66
g55
sbsg2335
g2336
sbsg2278
g2266
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_reorient'
p2691
sg76
(dp2692
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2691
sg87
Nsg88
(lp2693
sg90
Nsg91
Nsb(dp2694
sg5
(g25
g7
Ntp2695
Rp2696
(dp2697
g29
(dp2698
sg31
g5
(g2587
g7
Ntp2699
Rp2700
(dp2701
g36
g37
(g2591
tp2702
Rp2703
(dp2704
g2595
g45
sg42
I00
sg126
g45
sg2596
g45
sg2597
g45
sg49
g2598
sg2265
g2266
sg2599
I4
sg53
g54
sg2600
g45
sg67
g45
sg2602
g45
sg55
g5
(g56
g57
(dp2705
tp2706
Rp2707
(dp2708
g64
S'environ_items'
p2709
sg66
g55
sbsg2034
g45
sg51
g52
sg48
g45
sbsg2278
g2266
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_motion_correct'
p2710
sg76
(dp2711
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2710
sg87
Nsg88
(lp2712
sg90
Nsg91
Nsb(dp2713
sg5
(g25
g7
Ntp2714
Rp2715
(dp2716
g29
(dp2717
sg31
g5
(g182
g7
Ntp2718
Rp2719
(dp2720
g36
g37
(g186
tp2721
Rp2722
(dp2723
g51
g52
sS'func'
p2724
g45
sbsg197
(lp2725
g2724
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp2726
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp2727
sg90
Nsg91
Nsb(dp2728
ssg247
(dp2729
sg249
(dp2730
g2460
(dp2731
g2677
(dp2732
g253
(lp2733
(g48
g67
tp2734
asssg2480
(dp2735
g2696
(dp2736
g253
(lp2737
(g48
g2597
tp2738
asssg2503
(dp2739
g2564
(dp2740
g253
(lp2741
(g48
g2577
tp2742
asssg2522
(dp2743
g2564
(dp2744
g253
(lp2745
(g48
g2575
tp2746
assg2543
(dp2747
g253
(lp2748
(g48
g67
tp2749
asssg2543
(dp2750
g2564
(dp2751
g253
(lp2752
(g48
g2574
tp2753
asssg2564
(dp2754
sg2584
(dp2755
g2652
(dp2756
g253
(lp2757
(g48
g67
tp2758
assg2564
(dp2759
g253
(lp2760
(g48
g2035
tp2761
a(g2600
g1992
tp2762
a(g2595
g1991
tp2763
a(g2034
g2034
tp2764
assg2632
(dp2765
g253
(lp2766
(g48
g2269
tp2767
asssg2613
(dp2768
g2564
(dp2769
g253
(lp2770
(g48
g2573
tp2771
assg2584
(dp2772
g253
(lp2773
(g48
g2597
tp2774
asssg2632
(dp2775
g2522
(dp2776
g253
(lp2777
(g48
g67
tp2778
assg2564
(dp2779
g253
(lp2780
(g48
g2295
tp2781
assg2503
(dp2782
g253
(lp2783
(g48
g67
tp2784
asssg2652
(dp2785
g2564
(dp2786
g253
(lp2787
(g48
g2033
tp2788
assg2632
(dp2789
g253
(lp2790
(g48
g2267
tp2791
asssg2677
(dp2792
g2584
(dp2793
g253
(lp2794
(g48
g67
tp2795
assg2696
(dp2796
g253
(lp2797
(g48
g67
tp2798
assg2564
(dp2799
g253
(lp2800
(g48
g2293
tp2801
assg2480
(dp2802
g253
(lp2803
(g48
g67
tp2804
asssg2696
(dp2805
g2613
(dp2806
g253
(lp2807
(g48
g67
tp2808
asssg2715
(dp2809
g2460
(dp2810
g253
(lp2811
(g2724
g67
tp2812
assssg295
g2730
sg296
(dp2813
g2460
(dp2814
g2715
g2810
ssg2480
(dp2815
g2677
g2802
ssg2503
(dp2816
g2632
g2782
ssg2522
(dp2817
g2632
g2776
ssg2543
(dp2818
g2522
g2747
ssg2564
(dp2819
g2503
g2740
sg2522
g2744
sg2543
g2751
sg2584
g2759
sg2613
g2769
sg2652
g2786
sg2632
g2779
sg2677
g2799
ssg2584
(dp2820
g2613
g2772
sg2677
g2793
ssg2613
(dp2821
g2696
g2806
ssg2632
(dp2822
g2652
g2789
sg2584
g2765
ssg2652
(dp2823
g2584
g2756
ssg2677
(dp2824
g2460
g2732
ssg2696
(dp2825
g2677
g2796
sg2480
g2736
ssg2715
(dp2826
ssg304
g2730
sbsg66
g2476
sg78
g1067
sg86
g2476
sg87
g306
((lp2827
(lp2828
g309
ag306
((lp2829
(lp2830
g312
ag309
aa(lp2831
g314
ag315
aa(lp2832
g317
ag318
aa(lp2833
g320
ag321
aa(lp2834
g323
ag324
aa(lp2835
g326
ag327
aa(lp2836
g329
ag330
aa(lp2837
g332
ag333
aatp2838
Rp2839
aa(lp2840
g337
ag306
((lp2841
(lp2842
g312
ag337
aa(lp2843
g341
ag342
aa(lp2844
g344
ag345
aa(lp2845
g347
ag348
aa(lp2846
g350
ag351
aa(lp2847
g353
ag354
aa(lp2848
g356
ag357
aa(lp2849
g359
ag360
aa(lp2850
g362
ag363
aa(lp2851
g365
ag366
aa(lp2852
g368
ag369
aa(lp2853
g371
ag372
aa(lp2854
g374
ag375
aa(lp2855
g377
ag378
aa(lp2856
g380
ag381
aa(lp2857
g383
ag384
aa(lp2858
g386
ag387
aa(lp2859
g389
ag390
aa(lp2860
g392
ag393
aatp2861
Rp2862
aa(lp2863
g397
ag306
((lp2864
(lp2865
g312
ag397
aa(lp2866
g401
ag402
aatp2867
Rp2868
aatp2869
Rp2870
sg91
NsbS'outputspec.example_func'
p2871
tp2872
sg1991
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g25
g7
Ntp2880
Rp2881
(dp2882
g29
(dp2883
sg31
g5
(g1403
g7
Ntp2884
Rp2885
(dp2886
g1407
(lp2887
g67
asg36
g37
(g1410
tp2888
Rp2889
(dp2890
g42
I00
sg51
g52
sg1414
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2891
sg67
g45
sbsg1416
(dp2892
g48
Nssg1419
(lp2893
g48
asg1421
Nsbsg74
Nsg66
S'calc_friston'
p2894
sg76
(dp2895
sg78
S'fristons_parameter_model_0'
p2896
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2894
sg87
Nsg88
(lp2897
sg90
Nsg91
Nsb(dp2898
sg5
(g25
g7
Ntp2899
Rp2900
(dp2901
g29
(dp2902
sg31
g5
(g182
g7
Ntp2903
Rp2904
(dp2905
g36
g37
(g186
tp2906
Rp2907
(dp2908
g51
g52
sS'movement_file'
p2909
g45
sbsg197
(lp2910
g2909
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp2911
sg78
g2896
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp2912
sg90
Nsg91
Nsb(dp2913
sg5
(g25
g7
Ntp2914
Rp2915
(dp2916
g29
(dp2917
sg31
g5
(g182
g7
Ntp2918
Rp2919
(dp2920
g36
g37
(g186
tp2921
Rp2922
(dp2923
g51
g52
sg2909
g45
sbsg197
(lp2924
g2909
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp2925
sg78
g2896
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp2926
sg90
Nsg91
Nsb(dp2927
ssg247
(dp2928
sg249
(dp2929
g2881
(dp2930
g2915
(dp2931
g253
(lp2932
(g48
g2909
tp2933
asssg2900
(dp2934
g2881
(dp2935
g253
(lp2936
(g2909
g67
tp2937
asssg2915
(dp2938
ssg295
g2929
sg296
(dp2939
g2881
(dp2940
g2900
g2935
ssg2900
(dp2941
sg2915
(dp2942
g2881
g2931
sssg304
g2929
sbsg66
g2896
sg78
g1067
sg86
g2896
sg87
g306
((lp2943
(lp2944
g309
ag306
((lp2945
(lp2946
g312
ag309
aa(lp2947
g314
ag315
aa(lp2948
g317
ag318
aa(lp2949
g320
ag321
aa(lp2950
g323
ag324
aa(lp2951
g326
ag327
aa(lp2952
g329
ag330
aa(lp2953
g332
ag333
aatp2954
Rp2955
aa(lp2956
g337
ag306
((lp2957
(lp2958
g312
ag337
aa(lp2959
g341
ag342
aa(lp2960
g344
ag345
aa(lp2961
g347
ag348
aa(lp2962
g350
ag351
aa(lp2963
g353
ag354
aa(lp2964
g356
ag357
aa(lp2965
g359
ag360
aa(lp2966
g362
ag363
aa(lp2967
g365
ag366
aa(lp2968
g368
ag369
aa(lp2969
g371
ag372
aa(lp2970
g374
ag375
aa(lp2971
g377
ag378
aa(lp2972
g380
ag381
aa(lp2973
g383
ag384
aa(lp2974
g386
ag387
aa(lp2975
g389
ag390
aa(lp2976
g392
ag393
aatp2977
Rp2978
aa(lp2979
g397
ag306
((lp2980
(lp2981
g312
ag397
aa(lp2982
g401
ag402
aatp2983
Rp2984
aatp2985
Rp2986
sg91
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g25
g7
Ntp2997
Rp2998
(dp2999
g29
(dp3000
sg31
g5
(g1403
g7
Ntp3001
Rp3002
(dp3003
g1407
(lp3004
g1409
asg36
g37
(g1410
tp3005
Rp3006
(dp3007
g42
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3008
sg1409
g45
sg51
g52
sbsg1416
(dp3009
g1418
Nssg1419
(lp3010
g1418
asg1421
Nsbsg74
Nsg66
g1516
sg76
(dp3011
sg78
S'montage_anat_0'
p3012
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp3013
sg90
Nsg91
Nsb(dp3014
sg5
(g25
g7
Ntp3015
Rp3016
(dp3017
g29
(dp3018
sg31
g5
(g182
g7
Ntp3019
Rp3020
(dp3021
g36
g37
(g186
tp3022
Rp3023
(dp3024
g51
g52
sg1454
g45
sg1453
g45
sbsg197
(lp3025
g1454
ag1453
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp3026
sg78
g3012
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp3027
sg90
Nsg91
Nsb(dp3028
sg5
(g25
g7
Ntp3029
Rp3030
(dp3031
g29
(dp3032
sg31
g5
(g1403
g7
Ntp3033
Rp3034
(dp3035
g1407
(lp3036
g1453
ag1454
ag1455
ag1456
asg36
g37
(g1410
tp3037
Rp3038
(dp3039
g42
I00
sg1455
S't1_edge_on_mean_func_in_t1_s.png'
p3040
sg1453
g45
sg1456
g1461
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3041
sg1454
g45
sg51
g52
sbsg1416
(dp3042
g1455
Nssg1419
(lp3043
g1455
asg1421
Nsbsg74
Nsg66
g1499
sg76
(dp3044
sg78
g3012
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp3045
sg90
Nsg91
Nsb(dp3046
sg5
(g25
g7
Ntp3047
Rp3048
(dp3049
g29
(dp3050
sg31
g5
(g1403
g7
Ntp3051
Rp3052
(dp3053
g1407
(lp3054
g1453
ag1454
ag1455
ag1456
asg36
g37
(g1410
tp3055
Rp3056
(dp3057
g42
I00
sg1455
S't1_edge_on_mean_func_in_t1_a.png'
p3058
sg1453
g45
sg1456
g1461
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3059
sg1454
g45
sg51
g52
sbsg1416
(dp3060
g1455
Nssg1419
(lp3061
g1455
asg1421
Nsbsg74
Nsg66
g1465
sg76
(dp3062
sg78
g3012
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1465
sg87
Nsg88
(lp3063
sg90
Nsg91
Nsb(dp3064
sg5
(g25
g7
Ntp3065
Rp3066
(dp3067
g29
(dp3068
sg31
g5
(g182
g7
Ntp3069
Rp3070
(dp3071
g36
g37
(g186
tp3072
Rp3073
(dp3074
g51
g52
sg1437
g45
sg1438
g45
sg1439
g45
sg1440
g45
sbsg197
(lp3075
g1438
ag1439
ag1437
ag1440
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp3076
sg78
g3012
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp3077
sg90
Nsg91
Nsb(dp3078
sg5
(g25
g7
Ntp3079
Rp3080
(dp3081
g29
(dp3082
sg31
g5
(g1403
g7
Ntp3083
Rp3084
(dp3085
g1407
(lp3086
g1409
asg36
g37
(g1410
tp3087
Rp3088
(dp3089
g42
I00
sg1414
g3008
sg1409
g45
sg51
g52
sbsg1416
(dp3090
g1418
Nssg1419
(lp3091
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp3092
sg83
Nsg80
Nsg90
Nsg66
g1423
sg78
g3012
sg82
I00
sg84
Nsg85
I00
sg86
g1423
sg87
Nsg88
(lp3093
sg91
Nsb(dp3094
ssg247
(dp3095
sg249
(dp3096
g2998
(dp3097
g3066
(dp3098
g253
(lp3099
(g1418
g1437
tp3100
assg3048
(dp3101
g253
(lp3102
(g1418
g1454
tp3103
assg3030
(dp3104
g253
(lp3105
(g1418
g1454
tp3106
asssg3016
(dp3107
g2998
(dp3108
g253
(lp3109
(g1454
g1409
tp3110
assg3080
(dp3111
g253
(lp3112
(g1453
g1409
tp3113
asssg3030
(dp3114
g3066
(dp3115
g253
(lp3116
(g1455
g1439
tp3117
asssg3048
(dp3118
g3066
(dp3119
g253
(lp3120
(g1455
g1438
tp3121
asssg3066
(dp3122
sg3080
(dp3123
g3066
(dp3124
g253
(lp3125
(g1418
g1440
tp3126
assg3048
(dp3127
g253
(lp3128
(g1418
g1453
tp3129
assg3030
(dp3130
g253
(lp3131
(g1418
g1453
tp3132
assssg295
g3096
sg296
(dp3133
g2998
(dp3134
g3016
g3108
ssg3016
(dp3135
sg3030
(dp3136
g2998
g3104
sg3080
g3130
ssg3048
(dp3137
g2998
g3101
sg3080
g3127
ssg3066
(dp3138
g3048
g3119
sg2998
g3098
sg3030
g3115
sg3080
g3124
ssg3080
(dp3139
g3016
g3111
sssg304
g3096
sbsg66
g3012
sg78
g1067
sg86
g3012
sg87
g306
((lp3140
(lp3141
g309
ag306
((lp3142
(lp3143
g312
ag309
aa(lp3144
g314
ag315
aa(lp3145
g317
ag318
aa(lp3146
g320
ag321
aa(lp3147
g323
ag324
aa(lp3148
g326
ag327
aa(lp3149
g329
ag330
aa(lp3150
g332
ag333
aatp3151
Rp3152
aa(lp3153
g337
ag306
((lp3154
(lp3155
g312
ag337
aa(lp3156
g341
ag342
aa(lp3157
g344
ag345
aa(lp3158
g347
ag348
aa(lp3159
g350
ag351
aa(lp3160
g353
ag354
aa(lp3161
g356
ag357
aa(lp3162
g359
ag360
aa(lp3163
g362
ag363
aa(lp3164
g365
ag366
aa(lp3165
g368
ag369
aa(lp3166
g371
ag372
aa(lp3167
g374
ag375
aa(lp3168
g377
ag378
aa(lp3169
g380
ag381
aa(lp3170
g383
ag384
aa(lp3171
g386
ag387
aa(lp3172
g389
ag390
aa(lp3173
g392
ag393
aatp3174
Rp3175
aa(lp3176
g397
ag306
((lp3177
(lp3178
g312
ag397
aa(lp3179
g401
ag402
aatp3180
Rp3181
aatp3182
Rp3183
sg91
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg1992
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g25
g7
Ntp3201
Rp3202
(dp3203
g29
(dp3204
sg31
g5
(g182
g7
Ntp3205
Rp3206
(dp3207
g36
g37
(g186
tp3208
Rp3209
(dp3210
g51
g52
sS'overlay_gm'
p3211
g45
sg1454
g45
sS'overlay_csf'
p3212
g45
sS'overlay_wm'
p3213
g45
sbsg197
(lp3214
g1454
ag3212
ag3213
ag3211
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp3215
sg78
S'montage_csf_gm_wm_0'
p3216
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp3217
sg90
Nsg91
Nsb(dp3218
sg5
(g25
g7
Ntp3219
Rp3220
(dp3221
g29
(dp3222
sg31
g5
(g182
g7
Ntp3223
Rp3224
(dp3225
g36
g37
(g186
tp3226
Rp3227
(dp3228
g51
g52
sS'resampled_overlay_csf'
p3229
g45
sS'resampled_overlay_gm'
p3230
g45
sg1438
g45
sg1439
g45
sg1437
g45
sS'resampled_overlay_wm'
p3231
g45
sbsg197
(lp3232
g1438
ag1439
ag1437
ag3229
ag3231
ag3230
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp3233
sg78
g3216
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp3234
sg90
Nsg91
Nsb(dp3235
sg5
(g25
g7
Ntp3236
Rp3237
(dp3238
g29
(dp3239
sg31
g5
(g1403
g7
Ntp3240
Rp3241
(dp3242
g1407
(lp3243
g3212
ag3213
ag3211
ag1454
ag1455
asg36
g37
(g1410
tp3244
Rp3245
(dp3246
g42
I00
sg1455
S'montage_csf_gm_wm_a.png'
p3247
sg3211
g45
sg1414
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3248
sg3212
g45
sg3213
g45
sg1454
g45
sg51
g52
sbsg1416
(dp3249
g1455
Nssg1419
(lp3250
g1455
asg1421
Nsbsg74
Nsg66
g1465
sg76
(dp3251
sg78
g3216
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1465
sg87
Nsg88
(lp3252
sg90
Nsg91
Nsb(dp3253
sg5
(g25
g7
Ntp3254
Rp3255
(dp3256
g29
(dp3257
sg31
g5
(g1403
g7
Ntp3258
Rp3259
(dp3260
g1407
(lp3261
g1409
asg36
g37
(g1410
tp3262
Rp3263
(dp3264
g42
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3265
sg1409
g45
sg51
g52
sbsg1416
(dp3266
g1418
Nssg1419
(lp3267
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp3268
sg83
Nsg80
Nsg90
Nsg66
S'resample_o_csf'
p3269
sg78
g3216
sg82
I00
sg84
Nsg85
I00
sg86
g3269
sg87
Nsg88
(lp3270
sg91
Nsb(dp3271
sg5
(g25
g7
Ntp3272
Rp3273
(dp3274
g29
(dp3275
sg31
g5
(g1403
g7
Ntp3276
Rp3277
(dp3278
g1407
(lp3279
g1409
asg36
g37
(g1410
tp3280
Rp3281
(dp3282
g42
I00
sg1414
g3265
sg1409
g45
sg51
g52
sbsg1416
(dp3283
g1418
Nssg1419
(lp3284
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp3285
sg83
Nsg80
Nsg90
Nsg66
S'resample_o_gm'
p3286
sg78
g3216
sg82
I00
sg84
Nsg85
I00
sg86
g3286
sg87
Nsg88
(lp3287
sg91
Nsb(dp3288
sg5
(g25
g7
Ntp3289
Rp3290
(dp3291
g29
(dp3292
sg31
g5
(g1403
g7
Ntp3293
Rp3294
(dp3295
g1407
(lp3296
g1409
asg36
g37
(g1410
tp3297
Rp3298
(dp3299
g42
I00
sg1414
g3265
sg1409
g45
sg51
g52
sbsg1416
(dp3300
g1418
Nssg1419
(lp3301
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp3302
sg83
Nsg80
Nsg90
Nsg66
S'resample_o_wm'
p3303
sg78
g3216
sg82
I00
sg84
Nsg85
I00
sg86
g3303
sg87
Nsg88
(lp3304
sg91
Nsb(dp3305
sg5
(g25
g7
Ntp3306
Rp3307
(dp3308
g29
(dp3309
sg31
g5
(g1403
g7
Ntp3310
Rp3311
(dp3312
g1407
(lp3313
g3212
ag3213
ag3211
ag1454
ag1455
asg36
g37
(g1410
tp3314
Rp3315
(dp3316
g42
I00
sg1455
S'montage_csf_gm_wm_s.png'
p3317
sg3211
g45
sg1414
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3318
sg3212
g45
sg3213
g45
sg1454
g45
sg51
g52
sbsg1416
(dp3319
g1455
Nssg1419
(lp3320
g1455
asg1421
Nsbsg74
Nsg66
g1499
sg76
(dp3321
sg78
g3216
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp3322
sg90
Nsg91
Nsb(dp3323
sg5
(g25
g7
Ntp3324
Rp3325
(dp3326
g29
(dp3327
sg31
g5
(g1403
g7
Ntp3328
Rp3329
(dp3330
g1407
(lp3331
g1409
asg36
g37
(g1410
tp3332
Rp3333
(dp3334
g42
I00
sg1414
g3265
sg1409
g45
sg51
g52
sbsg1416
(dp3335
g1418
Nssg1419
(lp3336
g1418
asg1421
Nsbsg74
Nsg66
g1516
sg76
(dp3337
sg78
g3216
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp3338
sg90
Nsg91
Nsb(dp3339
ssg247
(dp3340
sg249
(dp3341
g3202
(dp3342
g3290
(dp3343
g253
(lp3344
(g3213
g1409
tp3345
assg3273
(dp3346
g253
(lp3347
(g3211
g1409
tp3348
assg3325
(dp3349
g253
(lp3350
(g1454
g1409
tp3351
assg3255
(dp3352
g253
(lp3353
(g3212
g1409
tp3354
asssg3220
(dp3355
sg3237
(dp3356
g3220
(dp3357
g253
(lp3358
(g1455
g1438
tp3359
asssg3255
(dp3360
g3220
(dp3361
g253
(lp3362
(g1418
g3229
tp3363
assg3237
(dp3364
g253
(lp3365
(g1418
g3212
tp3366
assg3307
(dp3367
g253
(lp3368
(g1418
g3212
tp3369
asssg3273
(dp3370
g3220
(dp3371
g253
(lp3372
(g1418
g3230
tp3373
assg3237
(dp3374
g253
(lp3375
(g1418
g3211
tp3376
assg3307
(dp3377
g253
(lp3378
(g1418
g3211
tp3379
asssg3290
(dp3380
g3220
(dp3381
g253
(lp3382
(g1418
g3231
tp3383
assg3237
(dp3384
g253
(lp3385
(g1418
g3213
tp3386
assg3307
(dp3387
g253
(lp3388
(g1418
g3213
tp3389
asssg3307
(dp3390
g3220
(dp3391
g253
(lp3392
(g1455
g1439
tp3393
asssg3325
(dp3394
g3220
(dp3395
g253
(lp3396
(g1418
g1437
tp3397
assg3237
(dp3398
g253
(lp3399
(g1418
g1454
tp3400
assg3307
(dp3401
g253
(lp3402
(g1418
g1454
tp3403
assssg295
g3341
sg296
(dp3404
g3202
(dp3405
sg3220
(dp3406
g3237
g3357
sg3255
g3361
sg3273
g3371
sg3290
g3381
sg3307
g3391
sg3325
g3395
ssg3237
(dp3407
g3290
g3384
sg3273
g3374
sg3325
g3398
sg3255
g3364
ssg3255
(dp3408
g3202
g3352
ssg3273
(dp3409
g3202
g3346
ssg3290
(dp3410
g3202
g3343
ssg3307
(dp3411
g3290
g3387
sg3273
g3377
sg3325
g3401
sg3255
g3367
ssg3325
(dp3412
g3202
g3349
sssg304
g3341
sbsg66
g3216
sg78
g1067
sg86
g3216
sg87
g306
((lp3413
(lp3414
g309
ag306
((lp3415
(lp3416
g312
ag309
aa(lp3417
g314
ag315
aa(lp3418
g317
ag318
aa(lp3419
g320
ag321
aa(lp3420
g323
ag324
aa(lp3421
g326
ag327
aa(lp3422
g329
ag330
aa(lp3423
g332
ag333
aatp3424
Rp3425
aa(lp3426
g337
ag306
((lp3427
(lp3428
g312
ag337
aa(lp3429
g341
ag342
aa(lp3430
g344
ag345
aa(lp3431
g347
ag348
aa(lp3432
g350
ag351
aa(lp3433
g353
ag354
aa(lp3434
g356
ag357
aa(lp3435
g359
ag360
aa(lp3436
g362
ag363
aa(lp3437
g365
ag366
aa(lp3438
g368
ag369
aa(lp3439
g371
ag372
aa(lp3440
g374
ag375
aa(lp3441
g377
ag378
aa(lp3442
g380
ag381
aa(lp3443
g383
ag384
aa(lp3444
g386
ag387
aa(lp3445
g389
ag390
aa(lp3446
g392
ag393
aatp3447
Rp3448
aa(lp3449
g397
ag306
((lp3450
(lp3451
g312
ag397
aa(lp3452
g401
ag402
aatp3453
Rp3454
aatp3455
Rp3456
sg91
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g25
g7
Ntp3466
Rp3467
(dp3468
g29
(dp3469
sg31
g5
(g182
g7
Ntp3470
Rp3471
(dp3472
g36
g37
(g186
tp3473
Rp3474
(dp3475
g51
g52
sS'linear_reg_matrix'
p3476
g45
sS'bbr_schedule'
p3477
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3478
sS'anat_wm_segmentation'
p3479
g45
sS'anat_skull'
p3480
g45
sg2724
g45
sbsg197
(lp3481
g2724
ag3480
ag3476
ag3479
ag3477
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp3482
sg78
S'func_to_anat_bbreg_0'
p3483
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp3484
sg90
Nsg91
Nsb(dp3485
sg5
(g25
g7
Ntp3486
Rp3487
(dp3488
g29
(dp3489
sg31
g5
(g182
g7
Ntp3490
Rp3491
(dp3492
g36
g37
(g186
tp3493
Rp3494
(dp3495
S'func_to_anat_linear_xfm'
p3496
g45
sg51
g52
sS'anat_func'
p3497
g45
sbsg197
(lp3498
g3496
ag3497
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp3499
sg78
g3483
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp3500
sg90
Nsg91
Nsb(dp3501
sg5
(g25
g7
Ntp3502
Rp3503
(dp3504
g29
(dp3505
sg31
g5
(g208
g7
Ntp3506
Rp3507
(dp3508
g36
g37
(g212
tp3509
Rp3510
(dp3511
g42
I00
sg51
g52
sg46
S'-thr 0.5 -bin'
p3512
sg216
g45
sg48
g45
sg49
g45
sg217
g45
sg53
g54
sg55
g5
(g56
g57
(dp3513
g59
g60
stp3514
Rp3515
(dp3516
g64
S'environ_items'
p3517
sg66
g55
sbsg67
g45
sg68
g60
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'wm_bb_mask'
p3518
sg76
(dp3519
sg78
g3483
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3518
sg87
Nsg88
(lp3520
sg90
Nsg91
Nsb(dp3521
sg5
(g25
g7
Ntp3522
Rp3523
(dp3524
g29
(dp3525
sg31
g5
(g116
g7
Ntp3526
Rp3527
(dp3528
g36
g37
(g120
tp3529
Rp3530
(dp3531
g124
g45
sg51
g52
sg125
g45
sg126
g45
sg127
g45
sg128
g45
sg129
g45
sg130
g45
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg67
g45
sg142
g45
sg143
g45
sg144
g45
sg145
g45
sg42
I00
sg146
g45
sg147
g45
sg49
g45
sg148
g45
sg149
g45
sg53
g54
sg150
g45
sg151
g45
sg152
g45
sg153
g45
sg154
g45
sg48
g45
sg155
g45
sg156
g45
sg157
g45
sg158
I6
sg159
g45
sg160
g45
sg161
g45
sg162
g45
sg163
g45
sg55
g5
(g56
g57
(dp3532
g59
g60
stp3533
Rp3534
(dp3535
g64
S'environ_items'
p3536
sg66
g55
sbsg169
g45
sg170
g45
sg68
g60
sg171
g45
sg172
g45
sg173
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'bbreg_func_to_anat'
p3537
sg76
(dp3538
sg78
g3483
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3537
sg87
Nsg88
(lp3539
sg90
Nsg91
Nsb(dp3540
ssg247
(dp3541
sg249
(dp3542
g3467
(dp3543
g3523
(dp3544
g253
(lp3545
(g3477
g147
tp3546
a(g2724
g67
tp3547
a(g3480
g127
tp3548
a(g3476
g125
tp3549
assg3503
(dp3550
g253
(lp3551
(g3479
g67
tp3552
asssg3487
(dp3553
sg3503
(dp3554
g3523
(dp3555
g253
(lp3556
((g48
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3557
(ttp3558
g49
tp3559
asssg3523
(dp3560
g3487
(dp3561
g253
(lp3562
(g159
g3496
tp3563
a(g48
g3497
tp3564
assssg295
g3542
sg296
(dp3565
g3467
(dp3566
sg3487
(dp3567
g3523
g3561
ssg3503
(dp3568
g3467
g3550
ssg3523
(dp3569
g3467
g3544
sg3503
g3555
sssg304
g3542
sbsg66
g3483
sg78
g1067
sg86
g3483
sg87
g306
((lp3570
(lp3571
g309
ag306
((lp3572
(lp3573
g312
ag309
aa(lp3574
g314
ag315
aa(lp3575
g317
ag318
aa(lp3576
g320
ag321
aa(lp3577
g323
ag324
aa(lp3578
g326
ag327
aa(lp3579
g329
ag330
aa(lp3580
g332
ag333
aatp3581
Rp3582
aa(lp3583
g337
ag306
((lp3584
(lp3585
g312
ag337
aa(lp3586
g341
ag342
aa(lp3587
g344
ag345
aa(lp3588
g347
ag348
aa(lp3589
g350
ag351
aa(lp3590
g353
ag354
aa(lp3591
g356
ag357
aa(lp3592
g359
ag360
aa(lp3593
g362
ag363
aa(lp3594
g365
ag366
aa(lp3595
g368
ag369
aa(lp3596
g371
ag372
aa(lp3597
g374
ag375
aa(lp3598
g377
ag378
aa(lp3599
g380
ag381
aa(lp3600
g383
ag384
aa(lp3601
g386
ag387
aa(lp3602
g389
ag390
aa(lp3603
g392
ag393
aatp3604
Rp3605
aa(lp3606
g397
ag306
((lp3607
(lp3608
g312
ag397
aa(lp3609
g401
ag402
aatp3610
Rp3611
aatp3612
Rp3613
sg91
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g25
g7
Ntp3620
Rp3621
(dp3622
g29
(dp3623
sg31
g5
(g1403
g7
Ntp3624
Rp3625
(dp3626
g1407
(lp3627
S'measure_file'
p3628
asg36
g37
(g1410
tp3629
Rp3630
(dp3631
g42
I00
sg51
g52
sg1414
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g45
sbsg1416
(dp3633
S'snr_storefl'
p3634
Nssg1419
(lp3635
g3634
asg1421
Nsbsg74
Nsg66
S'snr_val0'
p3636
sg76
(dp3637
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3636
sg87
Nsg88
(lp3638
sg90
Nsg91
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g25
g7
Ntp3648
Rp3649
(dp3650
g29
(dp3651
sg31
g5
(g1403
g7
Ntp3652
Rp3653
(dp3654
g1407
(lp3655
g3628
ag1863
asg36
g37
(g1410
tp3656
Rp3657
(dp3658
g42
I00
sg51
g52
sg1414
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g45
sg1863
S'snr'
p3660
sbsg1416
(dp3661
g1870
Nssg1419
(lp3662
g1870
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp3663
sg83
Nsg80
Nsg90
Nsg66
S'hist_snr_0'
p3664
sg78
g1067
sg82
I00
sg84
Nsg85
I00
sg86
g3664
sg87
Nsg88
(lp3665
sg91
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g25
g7
Ntp3678
Rp3679
(dp3680
g29
(dp3681
sg31
g5
(g182
g7
Ntp3682
Rp3683
(dp3684
g36
g37
(g186
tp3685
Rp3686
(dp3687
g51
g52
sS'scan'
p3688
g45
sS'subject'
p3689
S'9_2694662916'
p3690
sbsg197
(lp3691
g3689
ag3688
asg199
I01
sbsg74
Nsg66
S'inputnode'
p3692
sg76
(dp3693
sg78
S'func_gather_0'
p3694
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(lp3695
(g3688
(lp3696
S'rest_1_rest'
p3697
atp3698
asg85
I00
sg86
g3692
sg87
Nsg88
(lp3699
sg90
Nsg91
Nsb(dp3700
sg5
(g25
g7
Ntp3701
Rp3702
(dp3703
g29
(dp3704
sg31
g5
(g1403
g7
Ntp3705
Rp3706
(dp3707
g1407
(lp3708
g3688
aS'rest_dict'
p3709
asg36
g37
(g1410
tp3710
Rp3711
(dp3712
g42
I00
sg3709
(dp3713
g3697
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-33/KKI2009-33-fMRI.nii'
p3714
ssg1414
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3715
sg51
g52
sg3688
g45
sbsg1416
(dp3716
g2048
Nssg1419
(lp3717
g2048
asg1421
Nsbsg74
Nsg66
S'selectrest'
p3718
sg76
(dp3719
sg78
g3694
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3718
sg87
Nsg88
(lp3720
sg90
Nsg91
Nsb(dp3721
sg5
(g25
g7
Ntp3722
Rp3723
(dp3724
g29
(dp3725
sg31
g5
(g182
g7
Ntp3726
Rp3727
(dp3728
g36
g37
(g186
tp3729
Rp3730
(dp3731
g51
g52
sg3688
g45
sg2048
g45
sg3689
g45
sbsg197
(lp3732
g3689
ag2048
ag3688
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp3733
sg78
g3694
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp3734
sg90
Nsg91
Nsb(dp3735
ssg247
(dp3736
sg249
(dp3737
g3679
(dp3738
g3723
(dp3739
g253
(lp3740
(g3689
g3689
tp3741
a(g3688
g3688
tp3742
assg3702
(dp3743
g253
(lp3744
(g3688
g3688
tp3745
asssg3702
(dp3746
g3723
(dp3747
g253
(lp3748
(g2048
g2048
tp3749
asssg3723
(dp3750
ssg295
g3737
sg296
(dp3751
g3679
(dp3752
sg3702
(dp3753
g3679
g3743
ssg3723
(dp3754
g3679
g3739
sg3702
g3747
sssg304
g3737
sbsg66
g3694
sg78
g1067
sg86
g3694
sg87
g306
((lp3755
(lp3756
g309
ag306
((lp3757
(lp3758
g312
ag309
aa(lp3759
g314
ag315
aa(lp3760
g317
ag318
aa(lp3761
g320
ag321
aa(lp3762
g323
ag324
aa(lp3763
g326
ag327
aa(lp3764
g329
ag330
aa(lp3765
g332
ag333
aatp3766
Rp3767
aa(lp3768
g337
ag306
((lp3769
(lp3770
g312
ag337
aa(lp3771
g341
ag342
aa(lp3772
g344
ag345
aa(lp3773
g347
ag348
aa(lp3774
g350
ag351
aa(lp3775
g353
ag354
aa(lp3776
g356
ag357
aa(lp3777
g359
ag360
aa(lp3778
g362
ag363
aa(lp3779
g365
ag366
aa(lp3780
g368
ag369
aa(lp3781
g371
ag372
aa(lp3782
g374
ag375
aa(lp3783
g377
ag378
aa(lp3784
g380
ag381
aa(lp3785
g383
ag384
aa(lp3786
g386
ag387
aa(lp3787
g389
ag390
aa(lp3788
g392
ag393
aatp3789
Rp3790
aa(lp3791
g397
ag306
((lp3792
(lp3793
g312
ag397
aa(lp3794
g401
ag402
aatp3795
Rp3796
aatp3797
Rp3798
sg91
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g25
g7
Ntp3808
Rp3809
(dp3810
g29
(dp3811
sg31
g5
(g1165
g7
Ntp3812
Rp3813
(dp3814
g36
g37
(g1169
tp3815
Rp3816
(dp3817
g42
I00
sg1173
g45
sg67
g45
sg1174
g45
sg48
g45
sg156
g45
sg49
g45
sg130
g45
sg1175
g45
sg1176
g1820
sg53
g54
sg55
g5
(g56
g57
(dp3818
g59
g60
stp3819
Rp3820
(dp3821
g64
S'environ_items'
p3822
sg66
g55
sbsg1182
g45
sg1183
g45
sg68
g60
sg1184
g45
sg1185
g45
sg51
g52
sg1186
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mni_fsl_warp_0'
p3823
sg76
(dp3824
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3823
sg87
Nsg88
(lp3825
sg90
Nsg91
Nsbg48
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g25
g7
Ntp3835
Rp3836
(dp3837
g29
(dp3838
sg31
g5
(g182
g7
Ntp3839
Rp3840
(dp3841
g36
g37
(g186
tp3842
Rp3843
(dp3844
g51
g52
sS'mask_outputs'
p3845
g45
sbsg197
(lp3846
g3845
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp3847
sg78
S'voxel_timeseries_0'
p3848
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp3849
sg90
Nsg91
Nsb(dp3850
sg5
(g25
g7
Ntp3851
Rp3852
(dp3853
g29
(dp3854
sg31
g5
(g1403
g7
Ntp3855
Rp3856
(dp3857
g1407
(lp3858
S'data_file'
p3859
aS'template'
p3860
ag68
asg36
g37
(g1410
tp3861
Rp3862
(dp3863
g42
I00
sg51
g52
sg3859
g45
sg1414
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3864
sg3860
g45
sg68
g45
sbsg1416
(dp3865
g48
Nssg1419
(lp3866
g48
asg1421
Nsbsg74
Nsg66
S'timeseries_voxel'
p3867
sg76
(dp3868
sg78
g3848
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3867
sg87
Nsg88
(lp3869
sg90
Nsg91
Nsb(dp3870
sg5
(g25
g7
Ntp3871
Rp3872
(dp3873
g29
(dp3874
sg31
g5
(g182
g7
Ntp3875
Rp3876
(dp3877
g36
g37
(g186
tp3878
Rp3879
(dp3880
g51
g52
sg68
(lp3881
I01
aI01
asg2048
g45
sbsg197
(lp3882
g2048
ag68
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp3883
sg78
g3848
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp3884
sg90
Nsg91
Nsb(dp3885
sg5
(g25
g7
Ntp3886
Rp3887
(dp3888
g29
(dp3889
sg31
g5
(g182
g7
Ntp3890
Rp3891
(dp3892
g36
g37
(g186
tp3893
Rp3894
(dp3895
g51
g52
sg2033
g45
sbsg197
(lp3896
g2033
asg199
I01
sbsg74
Nsg66
S'input_mask'
p3897
sg76
(dp3898
sg78
g3848
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3897
sg87
Nsg88
(lp3899
sg90
Nsg91
Nsb(dp3900
ssg247
(dp3901
sg249
(dp3902
g3836
(dp3903
sg3852
(dp3904
g3836
(dp3905
g253
(lp3906
(g48
g3845
tp3907
asssg3872
(dp3908
g3852
(dp3909
g253
(lp3910
(g2048
g3859
tp3911
a(g68
g68
tp3912
asssg3887
(dp3913
g3852
(dp3914
g253
(lp3915
(g2033
g3860
tp3916
assssg295
g3902
sg296
(dp3917
g3836
(dp3918
g3852
g3905
ssg3852
(dp3919
g3872
g3909
sg3887
g3914
ssg3872
(dp3920
sg3887
(dp3921
ssg304
g3902
sbsg66
g3848
sg78
g1067
sg86
g3848
sg87
g306
((lp3922
(lp3923
g309
ag306
((lp3924
(lp3925
g312
ag309
aa(lp3926
g314
ag315
aa(lp3927
g317
ag318
aa(lp3928
g320
ag321
aa(lp3929
g323
ag324
aa(lp3930
g326
ag327
aa(lp3931
g329
ag330
aa(lp3932
g332
ag333
aatp3933
Rp3934
aa(lp3935
g337
ag306
((lp3936
(lp3937
g312
ag337
aa(lp3938
g341
ag342
aa(lp3939
g344
ag345
aa(lp3940
g347
ag348
aa(lp3941
g350
ag351
aa(lp3942
g353
ag354
aa(lp3943
g356
ag357
aa(lp3944
g359
ag360
aa(lp3945
g362
ag363
aa(lp3946
g365
ag366
aa(lp3947
g368
ag369
aa(lp3948
g371
ag372
aa(lp3949
g374
ag375
aa(lp3950
g377
ag378
aa(lp3951
g380
ag381
aa(lp3952
g383
ag384
aa(lp3953
g386
ag387
aa(lp3954
g389
ag390
aa(lp3955
g392
ag393
aatp3956
Rp3957
aa(lp3958
g397
ag306
((lp3959
(lp3960
g312
ag397
aa(lp3961
g401
ag402
aatp3962
Rp3963
aatp3964
Rp3965
sg91
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g25
g7
Ntp3986
Rp3987
(dp3988
g29
(dp3989
sg31
g5
(g1403
g7
Ntp3990
Rp3991
(dp3992
g1407
(lp3993
g1453
ag1454
ag1455
ag1456
asg36
g37
(g1410
tp3994
Rp3995
(dp3996
g42
I00
sg1455
S'mni_anat_s.png'
p3997
sg1453
g45
sg1456
g1461
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3998
sg1454
g45
sg51
g52
sbsg1416
(dp3999
g1455
Nssg1419
(lp4000
g1455
asg1421
Nsbsg74
Nsg66
g1499
sg76
(dp4001
sg78
S'montage_mni_anat_0'
p4002
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp4003
sg90
Nsg91
Nsb(dp4004
sg5
(g25
g7
Ntp4005
Rp4006
(dp4007
g29
(dp4008
sg31
g5
(g1403
g7
Ntp4009
Rp4010
(dp4011
g1407
(lp4012
g1453
ag1454
ag1455
ag1456
asg36
g37
(g1410
tp4013
Rp4014
(dp4015
g42
I00
sg1455
S'mni_anat_a.png'
p4016
sg1453
g45
sg1456
g1461
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4017
sg1454
g45
sg51
g52
sbsg1416
(dp4018
g1455
Nssg1419
(lp4019
g1455
asg1421
Nsbsg74
Nsg66
g1465
sg76
(dp4020
sg78
g4002
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1465
sg87
Nsg88
(lp4021
sg90
Nsg91
Nsb(dp4022
sg5
(g25
g7
Ntp4023
Rp4024
(dp4025
g29
(dp4026
sg31
g5
(g1403
g7
Ntp4027
Rp4028
(dp4029
g1407
(lp4030
g1409
asg36
g37
(g1410
tp4031
Rp4032
(dp4033
g42
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4034
sg1409
g45
sg51
g52
sbsg1416
(dp4035
g1418
Nssg1419
(lp4036
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp4037
sg83
Nsg80
Nsg90
Nsg66
g1423
sg78
g4002
sg82
I00
sg84
Nsg85
I00
sg86
g1423
sg87
Nsg88
(lp4038
sg91
Nsb(dp4039
sg5
(g25
g7
Ntp4040
Rp4041
(dp4042
g29
(dp4043
sg31
g5
(g182
g7
Ntp4044
Rp4045
(dp4046
g36
g37
(g186
tp4047
Rp4048
(dp4049
g51
g52
sg1454
g45
sg1453
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p4050
sbsg197
(lp4051
g1454
ag1453
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp4052
sg78
g4002
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp4053
sg90
Nsg91
Nsb(dp4054
sg5
(g25
g7
Ntp4055
Rp4056
(dp4057
g29
(dp4058
sg31
g5
(g1403
g7
Ntp4059
Rp4060
(dp4061
g1407
(lp4062
g1409
asg36
g37
(g1410
tp4063
Rp4064
(dp4065
g42
I00
sg1414
g4034
sg1409
g45
sg51
g52
sbsg1416
(dp4066
g1418
Nssg1419
(lp4067
g1418
asg1421
Nsbsg74
Nsg66
g1516
sg76
(dp4068
sg78
g4002
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp4069
sg90
Nsg91
Nsb(dp4070
sg5
(g25
g7
Ntp4071
Rp4072
(dp4073
g29
(dp4074
sg31
g5
(g182
g7
Ntp4075
Rp4076
(dp4077
g36
g37
(g186
tp4078
Rp4079
(dp4080
g51
g52
sg1437
g45
sg1438
g45
sg1439
g45
sg1440
g45
sbsg197
(lp4081
g1438
ag1439
ag1437
ag1440
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp4082
sg78
g4002
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp4083
sg90
Nsg91
Nsb(dp4084
ssg247
(dp4085
sg249
(dp4086
g3987
(dp4087
g4072
(dp4088
g253
(lp4089
(g1455
g1439
tp4090
asssg4006
(dp4091
g4072
(dp4092
g253
(lp4093
(g1455
g1438
tp4094
asssg4024
(dp4095
g4072
(dp4096
g253
(lp4097
(g1418
g1440
tp4098
assg4006
(dp4099
g253
(lp4100
(g1418
g1453
tp4101
assg3987
(dp4102
g253
(lp4103
(g1418
g1453
tp4104
asssg4041
(dp4105
g4024
(dp4106
g253
(lp4107
(g1453
g1409
tp4108
assg4056
(dp4109
g253
(lp4110
(g1454
g1409
tp4111
asssg4056
(dp4112
g4072
(dp4113
g253
(lp4114
(g1418
g1437
tp4115
assg4006
(dp4116
g253
(lp4117
(g1418
g1454
tp4118
assg3987
(dp4119
g253
(lp4120
(g1418
g1454
tp4121
asssg4072
(dp4122
ssg295
g4086
sg296
(dp4123
g3987
(dp4124
g4024
g4102
sg4056
g4119
ssg4006
(dp4125
g4024
g4099
sg4056
g4116
ssg4024
(dp4126
g4041
g4106
ssg4041
(dp4127
sg4056
(dp4128
g4041
g4109
ssg4072
(dp4129
g4024
g4096
sg3987
g4088
sg4056
g4113
sg4006
g4092
sssg304
g4086
sbsg66
g4002
sg78
g1067
sg86
g4002
sg87
g306
((lp4130
(lp4131
g309
ag306
((lp4132
(lp4133
g312
ag309
aa(lp4134
g314
ag315
aa(lp4135
g317
ag318
aa(lp4136
g320
ag321
aa(lp4137
g323
ag324
aa(lp4138
g326
ag327
aa(lp4139
g329
ag330
aa(lp4140
g332
ag333
aatp4141
Rp4142
aa(lp4143
g337
ag306
((lp4144
(lp4145
g312
ag337
aa(lp4146
g341
ag342
aa(lp4147
g344
ag345
aa(lp4148
g347
ag348
aa(lp4149
g350
ag351
aa(lp4150
g353
ag354
aa(lp4151
g356
ag357
aa(lp4152
g359
ag360
aa(lp4153
g362
ag363
aa(lp4154
g365
ag366
aa(lp4155
g368
ag369
aa(lp4156
g371
ag372
aa(lp4157
g374
ag375
aa(lp4158
g377
ag378
aa(lp4159
g380
ag381
aa(lp4160
g383
ag384
aa(lp4161
g386
ag387
aa(lp4162
g389
ag390
aa(lp4163
g392
ag393
aatp4164
Rp4165
aa(lp4166
g397
ag306
((lp4167
(lp4168
g312
ag397
aa(lp4169
g401
ag402
aatp4170
Rp4171
aatp4172
Rp4173
sg91
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg2035
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g25
g7
Ntp4188
Rp4189
(dp4190
g29
(dp4191
sg31
g5
(g1165
g7
Ntp4192
Rp4193
(dp4194
g36
g37
(g1169
tp4195
Rp4196
(dp4197
g42
I00
sg1173
g45
sg67
g45
sg1174
g45
sg48
g45
sg156
g45
sg49
g45
sg130
S'nn'
p4198
sg1175
g45
sg1176
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg53
g54
sg55
g5
(g56
g57
(dp4200
g59
g60
stp4201
Rp4202
(dp4203
g64
S'environ_items'
p4204
sg66
g55
sbsg1182
g45
sg1183
g45
sg68
g60
sg1184
g45
sg1185
g45
sg51
g52
sg1186
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mni_fsl_warp_mask_0'
p4205
sg76
(dp4206
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4205
sg87
Nsg88
(lp4207
sg90
Nsg91
Nsbg48
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g25
g7
Ntp4217
Rp4218
(dp4219
g29
(dp4220
sg31
g5
(g182
g7
Ntp4221
Rp4222
(dp4223
g36
g37
(g186
tp4224
Rp4225
(dp4226
g51
g52
sg1437
g45
sg1438
g45
sg1439
g45
sg1440
g45
sbsg197
(lp4227
g1438
ag1439
ag1437
ag1440
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp4228
sg78
S'montage_skull_0'
p4229
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp4230
sg90
Nsg91
Nsb(dp4231
sg5
(g25
g7
Ntp4232
Rp4233
(dp4234
g29
(dp4235
sg31
g5
(g1403
g7
Ntp4236
Rp4237
(dp4238
g1407
(lp4239
g1409
asg36
g37
(g1410
tp4240
Rp4241
(dp4242
g42
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4243
sg1409
g45
sg51
g52
sbsg1416
(dp4244
g1418
Nssg1419
(lp4245
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp4246
sg83
Nsg80
Nsg90
Nsg66
g1423
sg78
g4229
sg82
I00
sg84
Nsg85
I00
sg86
g1423
sg87
Nsg88
(lp4247
sg91
Nsb(dp4248
sg5
(g25
g7
Ntp4249
Rp4250
(dp4251
g29
(dp4252
sg31
g5
(g1403
g7
Ntp4253
Rp4254
(dp4255
g1407
(lp4256
g1409
asg36
g37
(g1410
tp4257
Rp4258
(dp4259
g42
I00
sg1414
g4243
sg1409
g45
sg51
g52
sbsg1416
(dp4260
g1418
Nssg1419
(lp4261
g1418
asg1421
Nsbsg74
Nsg66
g1516
sg76
(dp4262
sg78
g4229
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp4263
sg90
Nsg91
Nsb(dp4264
sg5
(g25
g7
Ntp4265
Rp4266
(dp4267
g29
(dp4268
sg31
g5
(g1403
g7
Ntp4269
Rp4270
(dp4271
g1407
(lp4272
g1453
ag1454
ag1455
ag1456
asg36
g37
(g1410
tp4273
Rp4274
(dp4275
g42
I00
sg1455
S'skull_vis_a.png'
p4276
sg1453
g45
sg1456
g1461
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4277
sg1454
g45
sg51
g52
sbsg1416
(dp4278
g1455
Nssg1419
(lp4279
g1455
asg1421
Nsbsg74
Nsg66
g1465
sg76
(dp4280
sg78
g4229
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1465
sg87
Nsg88
(lp4281
sg90
Nsg91
Nsb(dp4282
sg5
(g25
g7
Ntp4283
Rp4284
(dp4285
g29
(dp4286
sg31
g5
(g182
g7
Ntp4287
Rp4288
(dp4289
g36
g37
(g186
tp4290
Rp4291
(dp4292
g51
g52
sg1454
g45
sg1453
g45
sbsg197
(lp4293
g1454
ag1453
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp4294
sg78
g4229
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp4295
sg90
Nsg91
Nsb(dp4296
sg5
(g25
g7
Ntp4297
Rp4298
(dp4299
g29
(dp4300
sg31
g5
(g1403
g7
Ntp4301
Rp4302
(dp4303
g1407
(lp4304
g1453
ag1454
ag1455
ag1456
asg36
g37
(g1410
tp4305
Rp4306
(dp4307
g42
I00
sg1455
S'skull_vis_s.png'
p4308
sg1453
g45
sg1456
g1461
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4309
sg1454
g45
sg51
g52
sbsg1416
(dp4310
g1455
Nssg1419
(lp4311
g1455
asg1421
Nsbsg74
Nsg66
g1499
sg76
(dp4312
sg78
g4229
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp4313
sg90
Nsg91
Nsb(dp4314
ssg247
(dp4315
sg249
(dp4316
g4218
(dp4317
sg4233
(dp4318
g4266
(dp4319
g253
(lp4320
(g1418
g1453
tp4321
assg4298
(dp4322
g253
(lp4323
(g1418
g1453
tp4324
assg4218
(dp4325
g253
(lp4326
(g1418
g1440
tp4327
asssg4250
(dp4328
g4266
(dp4329
g253
(lp4330
(g1418
g1454
tp4331
assg4298
(dp4332
g253
(lp4333
(g1418
g1454
tp4334
assg4218
(dp4335
g253
(lp4336
(g1418
g1437
tp4337
asssg4266
(dp4338
g4218
(dp4339
g253
(lp4340
(g1455
g1438
tp4341
asssg4284
(dp4342
g4233
(dp4343
g253
(lp4344
(g1453
g1409
tp4345
assg4250
(dp4346
g253
(lp4347
(g1454
g1409
tp4348
asssg4298
(dp4349
g4218
(dp4350
g253
(lp4351
(g1455
g1439
tp4352
assssg295
g4316
sg296
(dp4353
g4218
(dp4354
g4233
g4325
sg4250
g4335
sg4298
g4350
sg4266
g4339
ssg4233
(dp4355
g4284
g4343
ssg4250
(dp4356
g4284
g4346
ssg4266
(dp4357
g4233
g4319
sg4250
g4329
ssg4284
(dp4358
sg4298
(dp4359
g4233
g4322
sg4250
g4332
sssg304
g4316
sbsg66
g4229
sg78
g1067
sg86
g4229
sg87
g306
((lp4360
(lp4361
g309
ag306
((lp4362
(lp4363
g312
ag309
aa(lp4364
g314
ag315
aa(lp4365
g317
ag318
aa(lp4366
g320
ag321
aa(lp4367
g323
ag324
aa(lp4368
g326
ag327
aa(lp4369
g329
ag330
aa(lp4370
g332
ag333
aatp4371
Rp4372
aa(lp4373
g337
ag306
((lp4374
(lp4375
g312
ag337
aa(lp4376
g341
ag342
aa(lp4377
g344
ag345
aa(lp4378
g347
ag348
aa(lp4379
g350
ag351
aa(lp4380
g353
ag354
aa(lp4381
g356
ag357
aa(lp4382
g359
ag360
aa(lp4383
g362
ag363
aa(lp4384
g365
ag366
aa(lp4385
g368
ag369
aa(lp4386
g371
ag372
aa(lp4387
g374
ag375
aa(lp4388
g377
ag378
aa(lp4389
g380
ag381
aa(lp4390
g383
ag384
aa(lp4391
g386
ag387
aa(lp4392
g389
ag390
aa(lp4393
g392
ag393
aatp4394
Rp4395
aa(lp4396
g397
ag306
((lp4397
(lp4398
g312
ag397
aa(lp4399
g401
ag402
aatp4400
Rp4401
aatp4402
Rp4403
sg91
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2575
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2576
(g5
(g25
g7
Ntp4413
Rp4414
(dp4415
g29
(dp4416
sg31
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g36
g37
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g42
I00
sg51
g52
sS'tpattern'
p4425
g45
sg48
g45
sS'tr'
p4426
g45
sg49
g45
sg130
g45
sg2265
g2266
sS'tzero'
p4427
g45
sS'ignore'
p4428
g45
sS'rltplus'
p4429
g45
sg53
g54
sS'tslice'
p4430
g45
sg67
g45
sS'rlt'
p4431
g45
sg55
g5
(g56
g57
(dp4432
tp4433
Rp4434
(dp4435
g64
S'environ_items'
p4436
sg66
g55
sbsbsg2278
g2266
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_slice_timing_correction_0'
p4437
sg76
(dp4438
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4437
sg87
Nsg88
(lp4439
sg90
Nsg91
Nsbg48
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g25
g7
Ntp4449
Rp4450
(dp4451
g29
(dp4452
sg31
g5
(g1403
g7
Ntp4453
Rp4454
(dp4455
g1407
(lp4456
g3859
ag3860
ag68
asg36
g37
(g1410
tp4457
Rp4458
(dp4459
g42
I00
sg51
g52
sg3859
g45
sg1414
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4460
sg3860
g45
sg68
g45
sbsg1416
(dp4461
g48
Nssg1419
(lp4462
g48
asg1421
Nsbsg74
Nsg66
S'timeseries_roi'
p4463
sg76
(dp4464
sg78
S'roi_timeseries_0'
p4465
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4463
sg87
Nsg88
(lp4466
sg90
Nsg91
Nsb(dp4467
sg5
(g25
g7
Ntp4468
Rp4469
(dp4470
g29
(dp4471
sg31
g5
(g182
g7
Ntp4472
Rp4473
(dp4474
g36
g37
(g186
tp4475
Rp4476
(dp4477
g51
g52
sS'roi_outputs'
p4478
g45
sbsg197
(lp4479
g4478
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp4480
sg78
g4465
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp4481
sg90
Nsg91
Nsb(dp4482
sg5
(g25
g7
Ntp4483
Rp4484
(dp4485
g29
(dp4486
sg31
g5
(g182
g7
Ntp4487
Rp4488
(dp4489
g36
g37
(g186
tp4490
Rp4491
(dp4492
g51
g52
sg68
(lp4493
I01
aI01
asg2048
g45
sbsg197
(lp4494
g2048
ag68
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp4495
sg78
g4465
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp4496
sg90
Nsg91
Nsb(dp4497
sg5
(g25
g7
Ntp4498
Rp4499
(dp4500
g29
(dp4501
sg31
g5
(g182
g7
Ntp4502
Rp4503
(dp4504
g36
g37
(g186
tp4505
Rp4506
(dp4507
g51
g52
sS'roi'
p4508
g45
sbsg197
(lp4509
g4508
asg199
I01
sbsg74
Nsg66
S'input_roi'
p4510
sg76
(dp4511
sg78
g4465
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4510
sg87
Nsg88
(lp4512
sg90
Nsg91
Nsb(dp4513
ssg247
(dp4514
sg249
(dp4515
g4450
(dp4516
g4469
(dp4517
g253
(lp4518
(g48
g4478
tp4519
asssg4469
(dp4520
sg4484
(dp4521
g4450
(dp4522
g253
(lp4523
(g2048
g3859
tp4524
a(g68
g68
tp4525
asssg4499
(dp4526
g4450
(dp4527
g253
(lp4528
(g4508
g3860
tp4529
assssg295
g4515
sg296
(dp4530
g4450
(dp4531
g4499
g4527
sg4484
g4522
ssg4469
(dp4532
g4450
g4517
ssg4484
(dp4533
sg4499
(dp4534
ssg304
g4515
sbsg66
g4465
sg78
g1067
sg86
g4465
sg87
g306
((lp4535
(lp4536
g309
ag306
((lp4537
(lp4538
g312
ag309
aa(lp4539
g314
ag315
aa(lp4540
g317
ag318
aa(lp4541
g320
ag321
aa(lp4542
g323
ag324
aa(lp4543
g326
ag327
aa(lp4544
g329
ag330
aa(lp4545
g332
ag333
aatp4546
Rp4547
aa(lp4548
g337
ag306
((lp4549
(lp4550
g312
ag337
aa(lp4551
g341
ag342
aa(lp4552
g344
ag345
aa(lp4553
g347
ag348
aa(lp4554
g350
ag351
aa(lp4555
g353
ag354
aa(lp4556
g356
ag357
aa(lp4557
g359
ag360
aa(lp4558
g362
ag363
aa(lp4559
g365
ag366
aa(lp4560
g368
ag369
aa(lp4561
g371
ag372
aa(lp4562
g374
ag375
aa(lp4563
g377
ag378
aa(lp4564
g380
ag381
aa(lp4565
g383
ag384
aa(lp4566
g386
ag387
aa(lp4567
g389
ag390
aa(lp4568
g392
ag393
aatp4569
Rp4570
aa(lp4571
g397
ag306
((lp4572
(lp4573
g312
ag397
aa(lp4574
g401
ag402
aatp4575
Rp4576
aatp4577
Rp4578
sg91
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g25
g7
Ntp4589
Rp4590
(dp4591
g29
(dp4592
sg31
g5
(g116
g7
Ntp4593
Rp4594
(dp4595
g36
g37
(g120
tp4596
Rp4597
(dp4598
g124
g45
sg51
g52
sg125
g45
sg126
g45
sg127
g45
sg128
g45
sg129
g45
sg130
g131
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg67
g45
sg142
g45
sg143
g45
sg144
g45
sg145
g45
sg42
I00
sg146
g45
sg147
g45
sg49
S'-applyisoxfm 2'
p4599
sg148
g45
sg149
g45
sg53
g54
sg150
g45
sg151
g45
sg152
g45
sg153
g45
sg154
g45
sg48
g45
sg155
g45
sg156
g45
sg157
g45
sg158
g45
sg159
g45
sg160
g45
sg161
g45
sg162
g45
sg163
g45
sg55
g5
(g56
g57
(dp4600
g59
g60
stp4601
Rp4602
(dp4603
g64
S'environ_items'
p4604
sg66
g55
sbsg169
g45
sg170
g45
sg68
g60
sg171
g45
sg172
g45
sg173
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'gm_anat_to_2mm_flirt_applyxfm'
p4605
sg76
(dp4606
sg78
S'nuisance_0'
p4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4605
sg87
Nsg88
(lp4608
sg90
Nsg91
Nsb(dp4609
sg5
(g25
g7
Ntp4610
Rp4611
(dp4612
g29
(dp4613
sg31
g5
(g116
g7
Ntp4614
Rp4615
(dp4616
g36
g37
(g120
tp4617
Rp4618
(dp4619
g124
g45
sg51
g52
sg125
g45
sg126
g45
sg127
g45
sg128
g45
sg129
g45
sg130
g131
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg67
g45
sg142
g45
sg143
g45
sg144
g45
sg145
g45
sg42
I00
sg146
g45
sg147
g45
sg49
g4599
sg148
g45
sg149
g45
sg53
g54
sg150
g45
sg151
g45
sg152
g45
sg153
g45
sg154
g45
sg48
g45
sg155
g45
sg156
g45
sg157
g45
sg158
g45
sg159
g45
sg160
g45
sg161
g45
sg162
g45
sg163
g45
sg55
g5
(g56
g57
(dp4620
g59
g60
stp4621
Rp4622
(dp4623
g64
S'environ_items'
p4624
sg66
g55
sbsg169
g45
sg170
g45
sg68
g60
sg171
g45
sg172
g45
sg173
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'ho_mni_to_2mm_flirt_applyxfm'
p4625
sg76
(dp4626
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4625
sg87
Nsg88
(lp4627
sg90
Nsg91
Nsb(dp4628
sg5
(g25
g7
Ntp4629
Rp4630
(dp4631
g29
(dp4632
sg31
g5
(g116
g7
Ntp4633
Rp4634
(dp4635
g36
g37
(g120
tp4636
Rp4637
(dp4638
g124
g45
sg51
g52
sg125
g45
sg126
g45
sg127
g45
sg128
g45
sg129
g45
sg130
g131
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg67
g45
sg142
g45
sg143
g45
sg144
g45
sg145
g45
sg42
I00
sg146
g45
sg147
g45
sg49
g4599
sg148
g45
sg149
g45
sg53
g54
sg150
g45
sg151
g45
sg152
g45
sg153
g45
sg154
g45
sg48
g45
sg155
g45
sg156
g45
sg157
g45
sg158
g45
sg159
g45
sg160
g45
sg161
g45
sg162
g45
sg163
g45
sg55
g5
(g56
g57
(dp4639
g59
g60
stp4640
Rp4641
(dp4642
g64
S'environ_items'
p4643
sg66
g55
sbsg169
g45
sg170
g45
sg68
g60
sg171
g45
sg172
g45
sg173
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'wm_anat_to_2mm_flirt_applyxfm'
p4644
sg76
(dp4645
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4644
sg87
Nsg88
(lp4646
sg90
Nsg91
Nsb(dp4647
sg5
(g25
g7
Ntp4648
Rp4649
(dp4650
g29
(dp4651
sg31
g5
(g182
g7
Ntp4652
Rp4653
(dp4654
g36
g37
(g186
tp4655
Rp4656
(dp4657
S'motion_components'
p4658
g45
sS'anat_to_mni_initial_xfm'
p4659
g45
sS'lat_ventricles_mask'
p4660
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4661
sg429
g45
sS'anat_to_mni_rigid_xfm'
p4662
g45
sS'compcor_ncomponents'
p4663
g45
sS'anat_to_mni_affine_xfm'
p4664
g45
sS'selector'
p4665
g45
sg428
g45
sS'template_brain'
p4666
g45
sg3496
g45
sS'mni_to_anat_linear_xfm'
p4667
g45
sg430
g45
sg51
g52
sg3689
g45
sbsg197
(lp4668
g3689
ag428
ag430
ag429
ag4667
ag4659
ag4662
ag4664
ag3496
ag4660
ag4658
ag4665
ag4663
ag4666
asg199
I01
sbsg74
Nsg66
g200
sg76
(dp4669
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g200
sg87
Nsg88
(lp4670
sg90
Nsg91
Nsb(dp4671
sg5
(g25
g7
Ntp4672
Rp4673
(dp4674
g29
(dp4675
sg31
g5
(g182
g7
Ntp4676
Rp4677
(dp4678
g36
g37
(g186
tp4679
Rp4680
(dp4681
g51
g52
sS'regressors'
p4682
g45
sg3689
g45
sbsg197
(lp4683
g3689
ag4682
asg199
I01
sbsg74
Nsg66
g243
sg76
(dp4684
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp4685
sg90
Nsg91
Nsb(dp4686
sg5
(g25
g7
Ntp4687
Rp4688
(dp4689
g29
(dp4690
sg31
g5
(g1403
g7
Ntp4691
Rp4692
(dp4693
g1407
(lp4694
g3859
aS'ventricles_mask_file'
p4695
aS'wm_seg_file'
p4696
aS'csf_seg_file'
p4697
aS'gm_seg_file'
p4698
ag448
ag963
ag904
asg36
g37
(g1410
tp4699
Rp4700
(dp4701
g42
I00
sg51
g52
sg448
g45
sg963
g45
sg3859
g45
sg1414
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4702
sg4698
g45
sg4695
g45
sg904
g45
sg4697
g45
sg4696
g45
sbsg1416
(dp4703
S'file_gm'
p4704
NsS'file_wm'
p4705
NsS'file_csf'
p4706
Nssg1419
(lp4707
g4705
ag4706
ag4704
asg1421
Nsbsg74
Nsg66
S'tissue_masks'
p4708
sg76
(dp4709
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4708
sg87
Nsg88
(lp4710
sg90
Nsg91
Nsb(dp4711
sg5
(g25
g7
Ntp4712
Rp4713
(dp4714
g29
(dp4715
sg31
g5
(g116
g7
Ntp4716
Rp4717
(dp4718
g36
g37
(g120
tp4719
Rp4720
(dp4721
g124
g45
sg51
g52
sg125
g45
sg126
g45
sg127
g45
sg128
g45
sg129
g45
sg130
g131
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg67
g45
sg142
g45
sg143
g45
sg144
g45
sg145
g45
sg42
I00
sg146
g45
sg147
g45
sg49
g4599
sg148
g45
sg149
g45
sg53
g54
sg150
g45
sg151
g45
sg152
g45
sg153
g45
sg154
g45
sg48
g45
sg155
g45
sg156
g45
sg157
g45
sg158
g45
sg159
g45
sg160
g45
sg161
g45
sg162
g45
sg163
g45
sg55
g5
(g56
g57
(dp4722
g59
g60
stp4723
Rp4724
(dp4725
g64
S'environ_items'
p4726
sg66
g55
sbsg169
g45
sg170
g45
sg68
g60
sg171
g45
sg172
g45
sg173
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'csf_anat_to_2mm_flirt_applyxfm'
p4727
sg76
(dp4728
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4727
sg87
Nsg88
(lp4729
sg90
Nsg91
Nsb(dp4730
sg5
(g25
g7
Ntp4731
Rp4732
(dp4733
g29
(dp4734
sg31
g5
(g116
g7
Ntp4735
Rp4736
(dp4737
g36
g37
(g120
tp4738
Rp4739
(dp4740
g124
g45
sg51
g52
sg125
g45
sg126
g45
sg127
g45
sg128
g45
sg129
g45
sg130
g45
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sg136
g45
sg137
g45
sg138
g45
sg139
g45
sg140
g45
sg141
g45
sg67
g45
sg142
g45
sg143
g45
sg144
g45
sg145
g45
sg42
I00
sg146
g45
sg147
g45
sg49
g4599
sg148
g45
sg149
g45
sg53
g54
sg150
g45
sg151
g45
sg152
g45
sg153
g45
sg154
g45
sg48
g45
sg155
g45
sg156
g45
sg157
g45
sg158
g45
sg159
g45
sg160
g45
sg161
g45
sg162
g45
sg163
g45
sg55
g5
(g56
g57
(dp4741
g59
g60
stp4742
Rp4743
(dp4744
g64
S'environ_items'
p4745
sg66
g55
sbsg169
g45
sg170
g45
sg68
g60
sg171
g45
sg172
g45
sg173
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_to_2mm_flirt_applyxfm'
p4746
sg76
(dp4747
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4746
sg87
Nsg88
(lp4748
sg90
Nsg91
Nsb(dp4749
sg5
(g25
g7
Ntp4750
Rp4751
(dp4752
g29
(dp4753
sg31
g5
(g1403
g7
Ntp4754
Rp4755
(dp4756
g1407
(lp4757
g3689
ag4665
aS'wm_sig_file'
p4758
aS'csf_sig_file'
p4759
aS'gm_sig_file'
p4760
aS'motion_file'
p4761
ag4663
asg36
g37
(g1410
tp4762
Rp4763
(dp4764
g42
I00
sg51
g52
sg4761
g45
sg4663
g45
sg1414
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4765
sg4759
g45
sg4758
g45
sg4760
g45
sg4665
g45
sg3689
g45
sbsg1416
(dp4766
S'regressors_file'
p4767
NsS'residual_file'
p4768
Nssg1419
(lp4769
g4768
ag4767
asg1421
Nsbsg74
Nsg66
S'residuals'
p4770
sg76
(dp4771
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(lp4772
(g4665
(lp4773
(dp4774
S'global'
p4775
I0
sS'linear'
p4776
I1
sS'wm'
p4777
I0
sS'pc1'
p4778
I0
sS'motion'
p4779
I0
sS'quadratic'
p4780
I1
sS'gm'
p4781
I0
sS'compcor'
p4782
I1
sS'csf'
p4783
I1
satp4784
a(g4663
(lp4785
I5
atp4786
asg85
I00
sg86
g4770
sg87
Nsg88
(lp4787
sg90
Nsg91
Nsb(dp4788
ssg247
(dp4789
sg249
(dp4790
g4590
(dp4791
g4688
(dp4792
g253
(lp4793
(g48
g4698
tp4794
asssg4611
(dp4795
g4688
(dp4796
g253
(lp4797
(g48
g4695
tp4798
asssg4630
(dp4799
g4688
(dp4800
g253
(lp4801
(g48
g4696
tp4802
asssg4649
(dp4803
g4590
(dp4804
g253
(lp4805
(g429
g67
tp4806
a(g429
g127
tp4807
assg4611
(dp4808
g253
(lp4809
(g4667
g125
tp4810
a(g4660
g67
tp4811
a(g430
g127
tp4812
assg4630
(dp4813
g253
(lp4814
(g428
g67
tp4815
a(g428
g127
tp4816
assg4751
(dp4817
g253
(lp4818
(g3689
g3689
tp4819
a(g4658
g4761
tp4820
a(g4665
g4665
tp4821
a(g4663
g4663
tp4822
assg4713
(dp4823
g253
(lp4824
(g430
g67
tp4825
a(g430
g127
tp4826
assg4732
(dp4827
g253
(lp4828
(g3689
g67
tp4829
a(g430
g127
tp4830
a(g3496
g125
tp4831
asssg4673
(dp4832
sg4688
(dp4833
g4751
(dp4834
g253
(lp4835
(g4705
g4758
tp4836
a(g4706
g4759
tp4837
a(g4704
g4760
tp4838
asssg4713
(dp4839
g4688
(dp4840
g253
(lp4841
(g48
g4697
tp4842
asssg4732
(dp4843
g4688
(dp4844
g253
(lp4845
(g48
g3859
tp4846
asssg4751
(dp4847
g4673
(dp4848
g253
(lp4849
(g4768
g3689
tp4850
a(g4767
g4682
tp4851
assssg295
g4790
sg296
(dp4852
g4590
(dp4853
g4649
g4804
ssg4611
(dp4854
g4649
g4808
ssg4630
(dp4855
g4649
g4813
ssg4649
(dp4856
sg4673
(dp4857
g4751
g4848
ssg4688
(dp4858
g4611
g4796
sg4630
g4800
sg4590
g4792
sg4732
g4844
sg4713
g4840
ssg4713
(dp4859
g4649
g4823
ssg4732
(dp4860
g4649
g4827
ssg4751
(dp4861
g4688
g4834
sg4649
g4817
sssg304
g4790
sbsg66
g4607
sg78
g1067
sg86
g4607
sg87
g306
((lp4862
(lp4863
g309
ag306
((lp4864
(lp4865
g312
ag309
aa(lp4866
g314
ag315
aa(lp4867
g317
ag318
aa(lp4868
g320
ag321
aa(lp4869
g323
ag324
aa(lp4870
g326
ag327
aa(lp4871
g329
ag330
aa(lp4872
g332
ag333
aatp4873
Rp4874
aa(lp4875
g337
ag306
((lp4876
(lp4877
g312
ag337
aa(lp4878
g341
ag342
aa(lp4879
g344
ag345
aa(lp4880
g347
ag348
aa(lp4881
g350
ag351
aa(lp4882
g353
ag354
aa(lp4883
g356
ag357
aa(lp4884
g359
ag360
aa(lp4885
g362
ag363
aa(lp4886
g365
ag366
aa(lp4887
g368
ag369
aa(lp4888
g371
ag372
aa(lp4889
g374
ag375
aa(lp4890
g377
ag378
aa(lp4891
g380
ag381
aa(lp4892
g383
ag384
aa(lp4893
g386
ag387
aa(lp4894
g389
ag390
aa(lp4895
g392
ag393
aatp4896
Rp4897
aa(lp4898
g397
ag306
((lp4899
(lp4900
g312
ag397
aa(lp4901
g401
ag402
aatp4902
Rp4903
aatp4904
Rp4905
sg91
NsbS'outputspec.subject'
p4906
tp4907
sg1977
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg1978
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Completed'
p4921
sS'strat_0'
p4922
(lp4923
g2247
ag1140
ag305
ag4437
ag2476
ag2896
aS'func_to_anat_FLIRT_0'
p4924
ag3483
ag1901
ag4607
ag3823
ag4465
ag3848
asg1912
g3690
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1430305286.741513
s.