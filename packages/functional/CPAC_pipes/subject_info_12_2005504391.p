(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(cnipype.pipeline.engine
Node
p18
g7
Ntp19
Rp20
(dp21
S'input_source'
p22
(dp23
sS'_interface'
p24
g5
(cnipype.interfaces.utility
IdentityInterface
p25
g7
Ntp26
Rp27
(dp28
S'inputs'
p29
ctraits.traits
__newobj__
p30
(cnipype.interfaces.base
DynamicTraitedSpec
p31
tp32
Rp33
(dp34
S'standard2highres_rig'
p35
ctraits.trait_base
_Undefined
p36
(tRp37
sS'__traits_version__'
p38
S'4.5.0'
p39
sS'standard2highres_init'
p40
g37
sS'brain'
p41
g37
sS'PRIOR_GRAY'
p42
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p43
sS'standard2highres_mat'
p44
g37
sS'PRIOR_CSF'
p45
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p46
sS'PRIOR_WHITE'
p47
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p48
sbsS'_fields'
p49
(lp50
g41
ag40
ag44
ag35
ag45
ag42
ag47
asS'_mandatory_inputs'
p51
I01
sbsS'_result'
p52
NsS'name'
p53
S'inputspec'
p54
sS'plugin_args'
p55
(dp56
sS'_hierarchy'
p57
S'seg_preproc_0'
p58
sS'itersource'
p59
NsS'run_without_submitting'
p60
I00
sS'synchronize'
p61
I00
sS'parameterization'
p62
NsS'iterables'
p63
NsS'_got_inputs'
p64
I00
sS'_id'
p65
g54
sS'config'
p66
NsS'needed_outputs'
p67
(lp68
sS'overwrite'
p69
NsS'base_dir'
p70
Nsb(dp71
sg5
(g18
g7
Ntp72
Rp73
(dp74
g22
(dp75
sg24
g5
(cnipype.interfaces.fsl.preprocess
FAST
p76
g7
Ntp77
Rp78
(dp79
g29
g30
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p80
tp81
Rp82
(dp83
S'number_classes'
p84
g37
sS'out_basename'
p85
S'segment'
p86
sS'hyper'
p87
g37
sS'verbose'
p88
g37
sS'init_seg_smooth'
p89
g37
sS'init_transform'
p90
g37
sS'no_pve'
p91
g37
sS'output_biascorrected'
p92
g37
sS'mixel_smooth'
p93
g37
sS'segments'
p94
I01
sS'iters_afterbias'
p95
g37
sS'bias_lowpass'
p96
g37
sS'other_priors'
p97
g37
sg38
g39
sS'ignore_exception'
p98
I00
sS'img_type'
p99
I1
sS'args'
p100
g37
sS'probability_maps'
p101
I01
sS'manual_seg'
p102
g37
sS'terminal_output'
p103
S'stream'
p104
sS'output_biasfield'
p105
g37
sS'no_bias'
p106
g37
sS'use_priors'
p107
g37
sS'in_files'
p108
g37
sS'segment_iters'
p109
g37
sS'environ'
p110
g5
(ctraits.trait_handlers
TraitDictObject
p111
c__builtin__
dict
p112
(dp113
S'FSLOUTPUTTYPE'
p114
S'NIFTI_GZ'
p115
stp116
Rp117
(dp118
S'name_items'
p119
S'environ_items'
p120
sg53
g110
sbsS'output_type'
p121
g115
sS'bias_iters'
p122
g37
sbsS'_output_type'
p123
g115
sS'_environ'
p124
NsS'_terminal_output'
p125
g104
sbsg52
Nsg53
g86
sg55
(dp126
sg57
g58
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g86
sg66
Nsg67
(lp127
sg69
Nsg70
Nsb(dp128
sg5
(g18
g7
Ntp129
Rp130
(dp131
g22
(dp132
sg24
g5
(g25
g7
Ntp133
Rp134
(dp135
g29
g30
(g31
tp136
Rp137
(dp138
g38
g39
sS'wm_threshold'
p139
(lp140
F0.96
asbsg49
(lp141
g139
asg51
I01
sbsg52
Nsg53
g139
sg55
(dp142
sg57
g58
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
(g139
(lp143
F0.96
atp144
sg64
I00
sg65
g139
sg66
Nsg67
(lp145
sg69
Nsg70
Nsb(dp146
sg5
(g6
g7
Ntp147
Rp148
(dp149
g11
g5
(g12
g7
Ntp150
Rp151
(dp152
g16
(dp153
g5
(g18
g7
Ntp154
Rp155
(dp156
g22
(dp157
sg24
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p158
g7
Ntp159
Rp160
(dp161
g29
g30
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p162
tp163
Rp164
(dp165
g98
I00
sS'nan2zeros'
p166
g37
sS'op_string'
p167
S'-mas %s '
p168
sS'out_file'
p169
g37
sg100
g37
sS'internal_datatype'
p170
g37
sg38
g39
sg103
g104
sg110
g5
(g111
g112
(dp171
g114
g115
stp172
Rp173
(dp174
g119
S'environ_items'
p175
sg53
g110
sbsS'in_file'
p176
g37
sg121
g115
sS'output_datatype'
p177
g37
sS'operand_files'
p178
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'overlap_CSF_map_with_prior'
p179
sg55
(dp180
sg57
S'CSF'
p181
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g179
sg66
Nsg67
(lp182
sg69
Nsg70
Nsb(dp183
sg5
(g18
g7
Ntp184
Rp185
(dp186
g22
(dp187
sg24
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p188
g7
Ntp189
Rp190
(dp191
g29
g30
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p192
tp193
Rp194
(dp195
S'rigid2D'
p196
g37
sg38
g39
sS'in_matrix_file'
p197
g37
sg88
g37
sS'reference'
p198
g37
sS'padding_size'
p199
g37
sS'sinc_window'
p200
g37
sS'interp'
p201
S'nearestneighbour'
p202
sS'wmnorms'
p203
g37
sS'coarse_search'
p204
g37
sS'no_resample'
p205
g37
sS'sinc_width'
p206
g37
sS'in_weight'
p207
g37
sS'fieldmap'
p208
g37
sS'echospacing'
p209
g37
sS'ref_weight'
p210
g37
sS'apply_isoxfm'
p211
g37
sS'fieldmapmask'
p212
g37
sg176
g37
sS'bbrtype'
p213
g37
sS'no_clamp'
p214
g37
sS'force_scaling'
p215
g37
sS'pedir'
p216
g37
sg98
I00
sS'display_init'
p217
g37
sS'schedule'
p218
g37
sg100
g37
sS'uses_qform'
p219
g37
sS'wmcoords'
p220
g37
sg103
g104
sS'fine_search'
p221
g37
sS'angle_rep'
p222
g37
sS'no_search'
p223
g37
sS'apply_xfm'
p224
I01
sS'wm_seg'
p225
g37
sg169
g37
sS'bbrslope'
p226
g37
sS'datatype'
p227
g37
sS'save_log'
p228
g37
sS'dof'
p229
g37
sS'out_matrix_file'
p230
g37
sS'no_resample_blur'
p231
g37
sS'min_sampling'
p232
g37
sS'cost_func'
p233
g37
sS'cost'
p234
g37
sg110
g5
(g111
g112
(dp235
g114
g115
stp236
Rp237
(dp238
g119
S'environ_items'
p239
sg53
g110
sbsS'searchr_x'
p240
g37
sS'out_log'
p241
g37
sg121
g115
sS'searchr_z'
p242
g37
sS'bins'
p243
g37
sS'searchr_y'
p244
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'CSF_prior_mni_to_t1'
p245
sg55
(dp246
sg57
g181
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g245
sg66
Nsg67
(lp247
sg69
Nsg70
Nsb(dp248
sg5
(g18
g7
Ntp249
Rp250
(dp251
g22
(dp252
sg24
g5
(g158
g7
Ntp253
Rp254
(dp255
g29
g30
(g162
tp256
Rp257
(dp258
g98
I00
sg166
g37
sg167
g168
sg169
g37
sg100
g37
sg170
g37
sg38
g39
sg103
g104
sg110
g5
(g111
g112
(dp259
g114
g115
stp260
Rp261
(dp262
g119
S'environ_items'
p263
sg53
g110
sbsg176
g37
sg121
g115
sg177
g37
sg178
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'CSF_mask'
p264
sg55
(dp265
sg57
g181
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g264
sg66
Nsg67
(lp266
sg69
Nsg70
Nsb(dp267
sg5
(g18
g7
Ntp268
Rp269
(dp270
g22
(dp271
sg24
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p272
g7
Ntp273
Rp274
(dp275
g29
g30
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p276
tp277
Rp278
(dp279
g98
I00
sg38
g39
sg167
g37
sS'out_data_type'
p280
g37
sg169
g37
sg100
g37
sS'in_file2'
p281
g37
sg103
g104
sg110
g5
(g111
g112
(dp282
g114
g115
stp283
Rp284
(dp285
g119
S'environ_items'
p286
sg53
g110
sbsg176
g37
sg121
g115
sS'suffix'
p287
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'binarize_threshold_CSF'
p288
sg55
(dp289
sg57
g181
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g288
sg66
Nsg67
(lp290
sg69
Nsg70
Nsb(dp291
sg5
(g18
g7
Ntp292
Rp293
(dp294
g22
(dp295
sg24
g5
(g25
g7
Ntp296
Rp297
(dp298
g29
g30
(g31
tp299
Rp300
(dp301
g35
g37
sg38
g39
sg40
g37
sS'tissue_prior'
p302
g37
sg44
g37
sg41
g37
sS'probability_map'
p303
g37
sS'threshold'
p304
g37
sbsg49
(lp305
g302
ag304
ag41
ag303
ag40
ag44
ag35
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp306
sg57
g181
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp307
sg69
Nsg70
Nsb(dp308
sg5
(g18
g7
Ntp309
Rp310
(dp311
g22
(dp312
sg24
g5
(g25
g7
Ntp313
Rp314
(dp315
g29
g30
(g31
tp316
Rp317
(dp318
g38
g39
sS'segment_combo'
p319
g37
sS'segment_mask'
p320
g37
sS'tissueprior_mni2t1'
p321
g37
sS'segment_bin'
p322
g37
sbsg49
(lp323
g321
ag319
ag322
ag320
asg51
I01
sbsg52
Nsg53
S'outputspec'
p324
sg55
(dp325
sg57
g181
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp326
sg69
Nsg70
Nsb(dp327
ssS'graph'
p328
(dp329
sS'succ'
p330
(dp331
g155
(dp332
g269
(dp333
S'connect'
p334
(lp335
(g169
g176
tp336
assg310
(dp337
g334
(lp338
(g169
g319
tp339
asssg185
(dp340
g155
(dp341
g334
(lp342
(g169
g178
tp343
assg310
(dp344
g334
(lp345
(g169
g321
tp346
assg250
(dp347
g334
(lp348
(g169
g178
tp349
asssg250
(dp350
g310
(dp351
g334
(lp352
(g169
g320
tp353
asssg269
(dp354
g250
(dp355
g334
(lp356
(g169
g176
tp357
assg310
(dp358
g334
(lp359
(g169
g322
tp360
asssg293
(dp361
g155
(dp362
g334
(lp363
(g303
g176
tp364
assg185
(dp365
g334
(lp366
(g302
g176
tp367
a(g41
g198
tp368
a(g44
g197
tp369
assg269
(dp370
g334
(lp371
((g304
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p372
(ttp373
g167
tp374
asssg310
(dp375
ssS'edge'
p376
g331
sS'pred'
p377
(dp378
g155
(dp379
g293
g362
sg185
g341
ssg185
(dp380
g293
g365
ssg250
(dp381
g269
g355
sg185
g347
ssg269
(dp382
g155
g333
sg293
g370
ssg293
(dp383
sg310
(dp384
g155
g337
sg250
g351
sg185
g344
sg269
g358
sssS'adj'
p385
g331
sbsg53
g181
sg57
g58
sg65
g181
sg66
ccollections
OrderedDict
p386
((lp387
(lp388
S'logging'
p389
ag386
((lp390
(lp391
S'__name__'
p392
ag389
aa(lp393
S'workflow_level'
p394
aS'INFO'
p395
aa(lp396
S'filemanip_level'
p397
aS'INFO'
p398
aa(lp399
S'interface_level'
p400
aS'INFO'
p401
aa(lp402
S'log_to_file'
p403
aS'True'
p404
aa(lp405
S'log_directory'
p406
aS'/mnt/ssd1/data/outputs/CPAC/CPAC_test1/outputs/logs/12_2005504391'
p407
aa(lp408
S'log_size'
p409
aS'16384000'
p410
aa(lp411
S'log_rotate'
p412
aS'4'
p413
aatp414
Rp415
aa(lp416
S'execution'
p417
ag386
((lp418
(lp419
g392
ag417
aa(lp420
S'create_report'
p421
aS'true'
p422
aa(lp423
S'crashdump_dir'
p424
aS'/home/eric/Documents/m2g/packages/functional/CPAC_pipes'
p425
aa(lp426
S'display_variable'
p427
aS':1'
p428
aa(lp429
S'hash_method'
p430
aS'timestamp'
p431
aa(lp432
S'job_finished_timeout'
p433
aS'5'
p434
aa(lp435
S'keep_inputs'
p436
aS'false'
p437
aa(lp438
S'local_hash_check'
p439
aS'true'
p440
aa(lp441
S'matplotlib_backend'
p442
aS'Agg'
p443
aa(lp444
S'plugin'
p445
aS'Linear'
p446
aa(lp447
S'remove_node_directories'
p448
aS'false'
p449
aa(lp450
S'remove_unnecessary_outputs'
p451
aS'true'
p452
aa(lp453
S'single_thread_matlab'
p454
aS'true'
p455
aa(lp456
S'stop_on_first_crash'
p457
aS'false'
p458
aa(lp459
S'stop_on_first_rerun'
p460
aS'false'
p461
aa(lp462
S'use_relative_paths'
p463
aS'false'
p464
aa(lp465
S'stop_on_unknown_version'
p466
aS'false'
p467
aa(lp468
S'write_provenance'
p469
aS'false'
p470
aa(lp471
S'parameterize_dirs'
p472
aS'true'
p473
aatp474
Rp475
aa(lp476
S'check'
p477
ag386
((lp478
(lp479
g392
ag477
aa(lp480
S'interval'
p481
aS'1209600'
p482
aatp483
Rp484
aatp485
Rp486
sg70
Nsb(dp487
sg5
(g6
g7
Ntp488
Rp489
(dp490
g11
g5
(g12
g7
Ntp491
Rp492
(dp493
g16
(dp494
g5
(g18
g7
Ntp495
Rp496
(dp497
g22
(dp498
sg24
g5
(g158
g7
Ntp499
Rp500
(dp501
g29
g30
(g162
tp502
Rp503
(dp504
g98
I00
sg166
g37
sg167
g168
sg169
g37
sg100
g37
sg170
g37
sg38
g39
sg103
g104
sg110
g5
(g111
g112
(dp505
g114
g115
stp506
Rp507
(dp508
g119
S'environ_items'
p509
sg53
g110
sbsg176
g37
sg121
g115
sg177
g37
sg178
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'WM_mask'
p510
sg55
(dp511
sg57
S'WM'
p512
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g510
sg66
Nsg67
(lp513
sg69
Nsg70
Nsb(dp514
sg5
(g18
g7
Ntp515
Rp516
(dp517
g22
(dp518
sg24
g5
(g25
g7
Ntp519
Rp520
(dp521
g29
g30
(g31
tp522
Rp523
(dp524
g35
g37
sg38
g39
sg40
g37
sg302
g37
sg44
g37
sg41
g37
sg303
g37
sg304
g37
sbsg49
(lp525
g302
ag304
ag41
ag303
ag40
ag44
ag35
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp526
sg57
g512
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp527
sg69
Nsg70
Nsb(dp528
sg5
(g18
g7
Ntp529
Rp530
(dp531
g22
(dp532
sg24
g5
(g272
g7
Ntp533
Rp534
(dp535
g29
g30
(g276
tp536
Rp537
(dp538
g98
I00
sg38
g39
sg167
g37
sg280
g37
sg169
g37
sg100
g37
sg281
g37
sg103
g104
sg110
g5
(g111
g112
(dp539
g114
g115
stp540
Rp541
(dp542
g119
S'environ_items'
p543
sg53
g110
sbsg176
g37
sg121
g115
sg287
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'binarize_threshold_WM'
p544
sg55
(dp545
sg57
g512
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g544
sg66
Nsg67
(lp546
sg69
Nsg70
Nsb(dp547
sg5
(g18
g7
Ntp548
Rp549
(dp550
g22
(dp551
sg24
g5
(g25
g7
Ntp552
Rp553
(dp554
g29
g30
(g31
tp555
Rp556
(dp557
g38
g39
sg319
g37
sg320
g37
sg321
g37
sg322
g37
sbsg49
(lp558
g321
ag319
ag322
ag320
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp559
sg57
g512
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp560
sg69
Nsg70
Nsb(dp561
sg5
(g18
g7
Ntp562
Rp563
(dp564
g22
(dp565
sg24
g5
(g158
g7
Ntp566
Rp567
(dp568
g29
g30
(g162
tp569
Rp570
(dp571
g98
I00
sg166
g37
sg167
g168
sg169
g37
sg100
g37
sg170
g37
sg38
g39
sg103
g104
sg110
g5
(g111
g112
(dp572
g114
g115
stp573
Rp574
(dp575
g119
S'environ_items'
p576
sg53
g110
sbsg176
g37
sg121
g115
sg177
g37
sg178
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'overlap_WM_map_with_prior'
p577
sg55
(dp578
sg57
g512
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g577
sg66
Nsg67
(lp579
sg69
Nsg70
Nsb(dp580
sg5
(g18
g7
Ntp581
Rp582
(dp583
g22
(dp584
sg24
g5
(g188
g7
Ntp585
Rp586
(dp587
g29
g30
(g192
tp588
Rp589
(dp590
g196
g37
sg38
g39
sg197
g37
sg88
g37
sg198
g37
sg199
g37
sg200
g37
sg201
g202
sg203
g37
sg204
g37
sg205
g37
sg206
g37
sg207
g37
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg176
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg98
I00
sg217
g37
sg218
g37
sg100
g37
sg219
g37
sg220
g37
sg103
g104
sg221
g37
sg222
g37
sg223
g37
sg224
I01
sg225
g37
sg169
g37
sg226
g37
sg227
g37
sg228
g37
sg229
g37
sg230
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg110
g5
(g111
g112
(dp591
g114
g115
stp592
Rp593
(dp594
g119
S'environ_items'
p595
sg53
g110
sbsg240
g37
sg241
g37
sg121
g115
sg242
g37
sg243
g37
sg244
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'WM_prior_mni_to_t1'
p596
sg55
(dp597
sg57
g512
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g596
sg66
Nsg67
(lp598
sg69
Nsg70
Nsb(dp599
ssg328
(dp600
sg330
(dp601
g496
(dp602
g549
(dp603
g334
(lp604
(g169
g320
tp605
asssg516
(dp606
g530
(dp607
g334
(lp608
((g304
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p609
(ttp610
g167
tp611
assg582
(dp612
g334
(lp613
(g302
g176
tp614
a(g41
g198
tp615
a(g44
g197
tp616
assg563
(dp617
g334
(lp618
(g303
g176
tp619
asssg530
(dp620
g549
(dp621
g334
(lp622
(g169
g322
tp623
assg496
(dp624
g334
(lp625
(g169
g176
tp626
asssg549
(dp627
sg563
(dp628
g549
(dp629
g334
(lp630
(g169
g319
tp631
assg530
(dp632
g334
(lp633
(g169
g176
tp634
asssg582
(dp635
g549
(dp636
g334
(lp637
(g169
g321
tp638
assg563
(dp639
g334
(lp640
(g169
g178
tp641
assg496
(dp642
g334
(lp643
(g169
g178
tp644
assssg376
g601
sg377
(dp645
g496
(dp646
g530
g624
sg582
g642
ssg516
(dp647
sg530
(dp648
g516
g607
sg563
g632
ssg549
(dp649
g530
g621
sg496
g603
sg582
g636
sg563
g629
ssg563
(dp650
g516
g617
sg582
g639
ssg582
(dp651
g516
g612
sssg385
g601
sbsg53
g512
sg57
g58
sg65
g512
sg66
g386
((lp652
(lp653
g389
ag386
((lp654
(lp655
g392
ag389
aa(lp656
g394
ag395
aa(lp657
g397
ag398
aa(lp658
g400
ag401
aa(lp659
g403
ag404
aa(lp660
g406
ag407
aa(lp661
g409
ag410
aa(lp662
g412
ag413
aatp663
Rp664
aa(lp665
g417
ag386
((lp666
(lp667
g392
ag417
aa(lp668
g421
ag422
aa(lp669
g424
ag425
aa(lp670
g427
ag428
aa(lp671
g430
ag431
aa(lp672
g433
ag434
aa(lp673
g436
ag437
aa(lp674
g439
ag440
aa(lp675
g442
ag443
aa(lp676
g445
ag446
aa(lp677
g448
ag449
aa(lp678
g451
ag452
aa(lp679
g454
ag455
aa(lp680
g457
ag458
aa(lp681
g460
ag461
aa(lp682
g463
ag464
aa(lp683
g466
ag467
aa(lp684
g469
ag470
aa(lp685
g472
ag473
aatp686
Rp687
aa(lp688
g477
ag386
((lp689
(lp690
g392
ag477
aa(lp691
g481
ag482
aatp692
Rp693
aatp694
Rp695
sg70
Nsb(dp696
sg5
(g18
g7
Ntp697
Rp698
(dp699
g22
(dp700
sg24
g5
(g25
g7
Ntp701
Rp702
(dp703
g29
g30
(g31
tp704
Rp705
(dp706
g38
g39
sS'gm_threshold'
p707
(lp708
F0.7
asbsg49
(lp709
g707
asg51
I01
sbsg52
Nsg53
g707
sg55
(dp710
sg57
g58
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
(g707
(lp711
F0.7
atp712
sg64
I00
sg65
g707
sg66
Nsg67
(lp713
sg69
Nsg70
Nsb(dp714
sg5
(g6
g7
Ntp715
Rp716
(dp717
g11
g5
(g12
g7
Ntp718
Rp719
(dp720
g16
(dp721
g5
(g18
g7
Ntp722
Rp723
(dp724
g22
(dp725
sg24
g5
(g25
g7
Ntp726
Rp727
(dp728
g29
g30
(g31
tp729
Rp730
(dp731
g38
g39
sg319
g37
sg320
g37
sg321
g37
sg322
g37
sbsg49
(lp732
g321
ag319
ag322
ag320
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp733
sg57
S'GM'
p734
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp735
sg69
Nsg70
Nsb(dp736
sg5
(g18
g7
Ntp737
Rp738
(dp739
g22
(dp740
sg24
g5
(g25
g7
Ntp741
Rp742
(dp743
g29
g30
(g31
tp744
Rp745
(dp746
g35
g37
sg38
g39
sg40
g37
sg302
g37
sg44
g37
sg41
g37
sg303
g37
sg304
g37
sbsg49
(lp747
g302
ag304
ag41
ag303
ag40
ag44
ag35
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp748
sg57
g734
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp749
sg69
Nsg70
Nsb(dp750
sg5
(g18
g7
Ntp751
Rp752
(dp753
g22
(dp754
sg24
g5
(g272
g7
Ntp755
Rp756
(dp757
g29
g30
(g276
tp758
Rp759
(dp760
g98
I00
sg38
g39
sg167
g37
sg280
g37
sg169
g37
sg100
g37
sg281
g37
sg103
g104
sg110
g5
(g111
g112
(dp761
g114
g115
stp762
Rp763
(dp764
g119
S'environ_items'
p765
sg53
g110
sbsg176
g37
sg121
g115
sg287
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'binarize_threshold_GM'
p766
sg55
(dp767
sg57
g734
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g766
sg66
Nsg67
(lp768
sg69
Nsg70
Nsb(dp769
sg5
(g18
g7
Ntp770
Rp771
(dp772
g22
(dp773
sg24
g5
(g188
g7
Ntp774
Rp775
(dp776
g29
g30
(g192
tp777
Rp778
(dp779
g196
g37
sg38
g39
sg197
g37
sg88
g37
sg198
g37
sg199
g37
sg200
g37
sg201
g202
sg203
g37
sg204
g37
sg205
g37
sg206
g37
sg207
g37
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg176
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg98
I00
sg217
g37
sg218
g37
sg100
g37
sg219
g37
sg220
g37
sg103
g104
sg221
g37
sg222
g37
sg223
g37
sg224
I01
sg225
g37
sg169
g37
sg226
g37
sg227
g37
sg228
g37
sg229
g37
sg230
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg110
g5
(g111
g112
(dp780
g114
g115
stp781
Rp782
(dp783
g119
S'environ_items'
p784
sg53
g110
sbsg240
g37
sg241
g37
sg121
g115
sg242
g37
sg243
g37
sg244
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'GM_prior_mni_to_t1'
p785
sg55
(dp786
sg57
g734
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g785
sg66
Nsg67
(lp787
sg69
Nsg70
Nsb(dp788
sg5
(g18
g7
Ntp789
Rp790
(dp791
g22
(dp792
sg24
g5
(g158
g7
Ntp793
Rp794
(dp795
g29
g30
(g162
tp796
Rp797
(dp798
g98
I00
sg166
g37
sg167
g168
sg169
g37
sg100
g37
sg170
g37
sg38
g39
sg103
g104
sg110
g5
(g111
g112
(dp799
g114
g115
stp800
Rp801
(dp802
g119
S'environ_items'
p803
sg53
g110
sbsg176
g37
sg121
g115
sg177
g37
sg178
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'overlap_GM_map_with_prior'
p804
sg55
(dp805
sg57
g734
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g804
sg66
Nsg67
(lp806
sg69
Nsg70
Nsb(dp807
sg5
(g18
g7
Ntp808
Rp809
(dp810
g22
(dp811
sg24
g5
(g158
g7
Ntp812
Rp813
(dp814
g29
g30
(g162
tp815
Rp816
(dp817
g98
I00
sg166
g37
sg167
g168
sg169
g37
sg100
g37
sg170
g37
sg38
g39
sg103
g104
sg110
g5
(g111
g112
(dp818
g114
g115
stp819
Rp820
(dp821
g119
S'environ_items'
p822
sg53
g110
sbsg176
g37
sg121
g115
sg177
g37
sg178
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'GM_mask'
p823
sg55
(dp824
sg57
g734
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g823
sg66
Nsg67
(lp825
sg69
Nsg70
Nsb(dp826
ssg328
(dp827
sg330
(dp828
g723
(dp829
sg738
(dp830
g771
(dp831
g334
(lp832
(g302
g176
tp833
a(g41
g198
tp834
a(g44
g197
tp835
assg752
(dp836
g334
(lp837
((g304
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p838
(ttp839
g167
tp840
assg790
(dp841
g334
(lp842
(g303
g176
tp843
asssg752
(dp844
g723
(dp845
g334
(lp846
(g169
g322
tp847
assg809
(dp848
g334
(lp849
(g169
g176
tp850
asssg771
(dp851
g790
(dp852
g334
(lp853
(g169
g178
tp854
assg809
(dp855
g334
(lp856
(g169
g178
tp857
assg723
(dp858
g334
(lp859
(g169
g321
tp860
asssg790
(dp861
g752
(dp862
g334
(lp863
(g169
g176
tp864
assg723
(dp865
g334
(lp866
(g169
g319
tp867
asssg809
(dp868
g723
(dp869
g334
(lp870
(g169
g320
tp871
assssg376
g828
sg377
(dp872
g723
(dp873
g809
g869
sg771
g858
sg752
g845
sg790
g865
ssg738
(dp874
sg752
(dp875
g790
g862
sg738
g836
ssg771
(dp876
g738
g831
ssg790
(dp877
g738
g841
sg771
g852
ssg809
(dp878
g752
g848
sg771
g855
sssg385
g828
sbsg53
g734
sg57
g58
sg65
g734
sg66
g386
((lp879
(lp880
g389
ag386
((lp881
(lp882
g392
ag389
aa(lp883
g394
ag395
aa(lp884
g397
ag398
aa(lp885
g400
ag401
aa(lp886
g403
ag404
aa(lp887
g406
ag407
aa(lp888
g409
ag410
aa(lp889
g412
ag413
aatp890
Rp891
aa(lp892
g417
ag386
((lp893
(lp894
g392
ag417
aa(lp895
g421
ag422
aa(lp896
g424
ag425
aa(lp897
g427
ag428
aa(lp898
g430
ag431
aa(lp899
g433
ag434
aa(lp900
g436
ag437
aa(lp901
g439
ag440
aa(lp902
g442
ag443
aa(lp903
g445
ag446
aa(lp904
g448
ag449
aa(lp905
g451
ag452
aa(lp906
g454
ag455
aa(lp907
g457
ag458
aa(lp908
g460
ag461
aa(lp909
g463
ag464
aa(lp910
g466
ag467
aa(lp911
g469
ag470
aa(lp912
g472
ag473
aatp913
Rp914
aa(lp915
g477
ag386
((lp916
(lp917
g392
ag477
aa(lp918
g481
ag482
aatp919
Rp920
aatp921
Rp922
sg70
Nsb(dp923
sg5
(g18
g7
Ntp924
Rp925
(dp926
g22
(dp927
sg24
g5
(g25
g7
Ntp928
Rp929
(dp930
g29
g30
(g31
tp931
Rp932
(dp933
S'partial_volume_files'
p934
g37
sg38
g39
sS'gm_combo'
p935
g37
sS'mixeltype'
p936
g37
sS'csf_mni2t1'
p937
g37
sS'wm_bin'
p938
g37
sS'csf_bin'
p939
g37
sg101
g37
sS'wm_mni2t1'
p940
g37
sS'csf_combo'
p941
g37
sS'wm_combo'
p942
g37
sS'wm_mask'
p943
g37
sS'gm_mask'
p944
g37
sS'csf_mask'
p945
g37
sS'gm_bin'
p946
g37
sS'partial_volume_map'
p947
g37
sS'gm_mni2t1'
p948
g37
sbsg49
(lp949
g937
ag941
ag939
ag945
ag948
ag935
ag946
ag944
ag940
ag942
ag938
ag101
ag936
ag947
ag934
ag943
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp950
sg57
g58
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp951
sg69
Nsg70
Nsb(dp952
sg5
(g18
g7
Ntp953
Rp954
(dp955
g22
(dp956
sg24
g5
(g25
g7
Ntp957
Rp958
(dp959
g29
g30
(g31
tp960
Rp961
(dp962
g38
g39
sS'csf_threshold'
p963
(lp964
F0.96
asbsg49
(lp965
g963
asg51
I01
sbsg52
Nsg53
g963
sg55
(dp966
sg57
g58
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
(g963
(lp967
F0.96
atp968
sg64
I00
sg65
g963
sg66
Nsg67
(lp969
sg69
Nsg70
Nsb(dp970
ssg328
(dp971
sg330
(dp972
g20
(dp973
g489
(dp974
g334
(lp975
(g41
S'inputspec.brain'
p976
tp977
a(g47
S'inputspec.tissue_prior'
p978
tp979
a(g44
S'inputspec.standard2highres_mat'
p980
tp981
assg73
(dp982
g334
(lp983
(g41
g108
tp984
assg716
(dp985
g334
(lp986
(g41
g976
tp987
a(g42
g978
tp988
a(g44
g980
tp989
assg148
(dp990
g334
(lp991
(g41
g976
tp992
a(g45
g978
tp993
a(g44
g980
tp994
asssg73
(dp995
g925
(dp996
g334
(lp997
(g101
g101
tp998
a(g936
g936
tp999
a(g934
g934
tp1000
a(g947
g947
tp1001
assg148
(dp1002
g334
(lp1003
((g101
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1004
(ttp1005
S'inputspec.probability_map'
p1006
tp1007
assg716
(dp1008
g334
(lp1009
((g101
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1010
(ttp1011
g1006
tp1012
assg489
(dp1013
g334
(lp1014
((g101
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1015
(ttp1016
g1006
tp1017
asssg130
(dp1018
g489
(dp1019
g334
(lp1020
(g139
S'inputspec.threshold'
p1021
tp1022
asssg148
(dp1023
g925
(dp1024
g334
(lp1025
(S'outputspec.tissueprior_mni2t1'
p1026
g937
tp1027
a(S'outputspec.segment_combo'
p1028
g941
tp1029
a(S'outputspec.segment_bin'
p1030
g939
tp1031
a(S'outputspec.segment_mask'
p1032
g945
tp1033
asssg489
(dp1034
g925
(dp1035
g334
(lp1036
(g1026
g940
tp1037
a(g1028
g942
tp1038
a(g1030
g938
tp1039
a(g1032
g943
tp1040
asssg698
(dp1041
g716
(dp1042
g334
(lp1043
(g707
g1021
tp1044
asssg716
(dp1045
g925
(dp1046
g334
(lp1047
(g1026
g948
tp1048
a(g1028
g935
tp1049
a(g1030
g946
tp1050
a(g1032
g944
tp1051
asssg925
(dp1052
sg954
(dp1053
g148
(dp1054
g334
(lp1055
(g963
g1021
tp1056
assssg376
g972
sg377
(dp1057
g20
(dp1058
sg73
(dp1059
g20
g982
ssg130
(dp1060
sg148
(dp1061
g20
g990
sg73
g1002
sg954
g1054
ssg489
(dp1062
g20
g974
sg73
g1013
sg130
g1019
ssg698
(dp1063
sg716
(dp1064
g20
g985
sg73
g1008
sg698
g1042
ssg925
(dp1065
g489
g1035
sg73
g996
sg716
g1046
sg148
g1024
ssg954
(dp1066
ssg385
g972
sbsg53
g58
sg57
S'resting_preproc_12_2005504391'
p1067
sg65
g58
sg66
g386
((lp1068
(lp1069
g389
ag386
((lp1070
(lp1071
g392
ag389
aa(lp1072
g394
ag395
aa(lp1073
g397
ag398
aa(lp1074
g400
ag401
aa(lp1075
g403
ag404
aa(lp1076
g406
ag407
aa(lp1077
g409
ag410
aa(lp1078
g412
ag413
aatp1079
Rp1080
aa(lp1081
g417
ag386
((lp1082
(lp1083
g392
ag417
aa(lp1084
g421
ag422
aa(lp1085
g424
ag425
aa(lp1086
g427
ag428
aa(lp1087
g430
ag431
aa(lp1088
g433
ag434
aa(lp1089
g436
ag437
aa(lp1090
g439
ag440
aa(lp1091
g442
ag443
aa(lp1092
g445
ag446
aa(lp1093
g448
ag449
aa(lp1094
g451
ag452
aa(lp1095
g454
ag455
aa(lp1096
g457
ag458
aa(lp1097
g460
ag461
aa(lp1098
g463
ag464
aa(lp1099
g466
ag467
aa(lp1100
g469
ag470
aa(lp1101
g472
ag473
aatp1102
Rp1103
aa(lp1104
g477
ag386
((lp1105
(lp1106
g392
ag477
aa(lp1107
g481
ag482
aatp1108
Rp1109
aatp1110
Rp1111
sg70
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g18
g7
Ntp1122
Rp1123
(dp1124
g22
(dp1125
sg24
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1126
g7
Ntp1127
Rp1128
(dp1129
g29
g30
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1130
tp1131
Rp1132
(dp1133
g98
I00
sS'supersample'
p1134
g37
sg176
g37
sS'superlevel'
p1135
g37
sg169
g37
sg227
g37
sg100
g37
sg201
g37
sS'field_file'
p1136
g37
sS'ref_file'
p1137
g37
sg103
g104
sg110
g5
(g111
g112
(dp1138
g114
g115
stp1139
Rp1140
(dp1141
g119
S'environ_items'
p1142
sg53
g110
sbsS'premat'
p1143
g37
sS'mask_file'
p1144
g37
sg121
g115
sS'relwarp'
p1145
g37
sS'abswarp'
p1146
g37
sg38
g39
sS'postmat'
p1147
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'brain_warp'
p1148
sg55
(dp1149
sg57
S'anat_mni_fnirt_register_0'
p1150
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1148
sg66
Nsg67
(lp1151
sg69
Nsg70
Nsb(dp1152
sg5
(g18
g7
Ntp1153
Rp1154
(dp1155
g22
(dp1156
sg24
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1157
g7
Ntp1158
Rp1159
(dp1160
g29
g30
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1161
tp1162
Rp1163
(dp1164
g98
I00
sg38
g39
sg169
g37
sg100
g37
sg281
g37
sS'fix_scale_skew'
p1165
g37
sS'invert_xfm'
p1166
I01
sg103
g104
sS'concat_xfm'
p1167
g37
sg176
g37
sg121
g115
sg110
g5
(g111
g112
(dp1168
g114
g115
stp1169
Rp1170
(dp1171
g119
S'environ_items'
p1172
sg53
g110
sbsbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'inv_linear_reg0_xfm'
p1173
sg55
(dp1174
sg57
g1150
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1173
sg66
Nsg67
(lp1175
sg69
Nsg70
Nsb(dp1176
sg5
(g18
g7
Ntp1177
Rp1178
(dp1179
g22
(dp1180
sg24
g5
(g25
g7
Ntp1181
Rp1182
(dp1183
g29
g30
(g31
tp1184
Rp1185
(dp1186
g38
g39
sS'output_brain'
p1187
g37
sS'nonlinear_xfm'
p1188
g37
sS'invlinear_xfm'
p1189
g37
sS'linear_xfm'
p1190
g37
sbsg49
(lp1191
g1187
ag1190
ag1189
ag1188
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp1192
sg57
g1150
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp1193
sg69
Nsg70
Nsb(dp1194
sg5
(g18
g7
Ntp1195
Rp1196
(dp1197
g22
(dp1198
sg24
g5
(g188
g7
Ntp1199
Rp1200
(dp1201
g29
g30
(g192
tp1202
Rp1203
(dp1204
g196
g37
sg38
g39
sg197
g37
sg88
g37
sg198
g37
sg199
g37
sg200
g37
sg201
g37
sg203
g37
sg204
g37
sg205
g37
sg206
g37
sg207
g37
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg176
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg98
I00
sg217
g37
sg218
g37
sg100
g37
sg219
g37
sg220
g37
sg103
g104
sg221
g37
sg222
g37
sg223
g37
sg224
g37
sg225
g37
sg169
g37
sg226
g37
sg227
g37
sg228
g37
sg229
g37
sg230
g37
sg231
g37
sg232
g37
sg233
g37
sg234
S'corratio'
p1205
sg110
g5
(g111
g112
(dp1206
g114
g115
stp1207
Rp1208
(dp1209
g119
S'environ_items'
p1210
sg53
g110
sbsg240
g37
sg241
g37
sg121
g115
sg242
g37
sg243
g37
sg244
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'linear_reg_0'
p1211
sg55
(dp1212
sg57
g1150
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1211
sg66
Nsg67
(lp1213
sg69
Nsg70
Nsb(dp1214
sg5
(g18
g7
Ntp1215
Rp1216
(dp1217
g22
(dp1218
sg24
g5
(g25
g7
Ntp1219
Rp1220
(dp1221
g29
g30
(g31
tp1222
Rp1223
(dp1224
S'fnirt_config'
p1225
S'T1_2_MNI152_2mm'
p1226
sg38
g39
sS'input_brain'
p1227
g37
sS'reference_skull'
p1228
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1229
sS'reference_brain'
p1230
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1231
sS'input_skull'
p1232
g37
sbsg49
(lp1233
g1227
ag1232
ag1230
ag1228
ag1225
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp1234
sg57
g1150
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp1235
sg69
Nsg70
Nsb(dp1236
sg5
(g18
g7
Ntp1237
Rp1238
(dp1239
g22
(dp1240
sg24
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1241
g7
Ntp1242
Rp1243
(dp1244
g29
g30
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1245
tp1246
Rp1247
(dp1248
g38
g39
sS'derive_from_ref'
p1249
g37
sS'in_intensitymap_file'
p1250
g37
sS'modulatedref_file'
p1251
g37
sS'refmask_val'
p1252
g37
sS'hessian_precision'
p1253
g37
sS'in_fwhm'
p1254
g37
sS'skip_implicit_in_masking'
p1255
g37
sS'inmask_file'
p1256
g37
sS'refmask_file'
p1257
g37
sS'inwarp_file'
p1258
g37
sS'skip_lambda_ssq'
p1259
g37
sS'intensity_mapping_model'
p1260
g37
sS'affine_file'
p1261
g37
sS'apply_inmask'
p1262
g37
sS'spline_order'
p1263
g37
sS'apply_refmask'
p1264
g37
sS'subsampling_scheme'
p1265
g37
sg176
g37
sS'warped_file'
p1266
g37
sS'skip_refmask'
p1267
g37
sg98
I00
sS'ref_fwhm'
p1268
g37
sS'inmask_val'
p1269
g37
sS'config_file'
p1270
g37
sg1136
g37
sg100
g37
sS'apply_intensity_mapping'
p1271
g37
sS'regularization_lambda'
p1272
g37
sg103
g104
sS'regularization_model'
p1273
g37
sS'jacobian_range'
p1274
g37
sS'out_intensitymap_file'
p1275
g37
sS'skip_implicit_ref_masking'
p1276
g37
sg1137
g37
sS'skip_inmask'
p1277
g37
sS'fieldcoeff_file'
p1278
I01
sS'warp_resolution'
p1279
g37
sS'jacobian_file'
p1280
I01
sg110
g5
(g111
g112
(dp1281
g114
g115
stp1282
Rp1283
(dp1284
g119
S'environ_items'
p1285
sg53
g110
sbsS'bias_regularization_lambda'
p1286
g37
sg121
g115
sS'skip_intensity_mapping'
p1287
g37
sS'log_file'
p1288
g37
sS'biasfield_resolution'
p1289
g37
sS'intensity_mapping_order'
p1290
g37
sS'max_nonlin_iter'
p1291
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'nonlinear_reg_1'
p1292
sg55
(dp1293
sg57
g1150
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1292
sg66
Nsg67
(lp1294
sg69
Nsg70
Nsb(dp1295
ssg328
(dp1296
sg330
(dp1297
g1123
(dp1298
g1178
(dp1299
g334
(lp1300
(g169
g1187
tp1301
asssg1154
(dp1302
g1178
(dp1303
g334
(lp1304
(g169
g1189
tp1305
asssg1178
(dp1306
sg1196
(dp1307
g1178
(dp1308
g334
(lp1309
(g230
g1190
tp1310
assg1238
(dp1311
g334
(lp1312
(g230
g1261
tp1313
assg1154
(dp1314
g334
(lp1315
(g230
g176
tp1316
asssg1216
(dp1317
g1123
(dp1318
g334
(lp1319
(g1227
g176
tp1320
a(g1230
g1137
tp1321
assg1196
(dp1322
g334
(lp1323
(g1227
g176
tp1324
a(g1230
g198
tp1325
assg1238
(dp1326
g334
(lp1327
(g1232
g176
tp1328
a(g1228
g1137
tp1329
a(g1225
g1270
tp1330
asssg1238
(dp1331
g1178
(dp1332
g334
(lp1333
(g1278
g1188
tp1334
assg1123
(dp1335
g334
(lp1336
(g1278
g1136
tp1337
assssg376
g1297
sg377
(dp1338
g1123
(dp1339
g1216
g1318
sg1238
g1335
ssg1154
(dp1340
g1196
g1314
ssg1178
(dp1341
g1123
g1299
sg1196
g1308
sg1238
g1332
sg1154
g1303
ssg1196
(dp1342
g1216
g1322
ssg1216
(dp1343
sg1238
(dp1344
g1216
g1326
sg1196
g1311
sssg385
g1297
sbsg53
g1150
sg57
g1067
sg65
g1150
sg66
g386
((lp1345
(lp1346
g389
ag386
((lp1347
(lp1348
g392
ag389
aa(lp1349
g394
ag395
aa(lp1350
g397
ag398
aa(lp1351
g400
ag401
aa(lp1352
g403
ag404
aa(lp1353
g406
ag407
aa(lp1354
g409
ag410
aa(lp1355
g412
ag413
aatp1356
Rp1357
aa(lp1358
g417
ag386
((lp1359
(lp1360
g392
ag417
aa(lp1361
g421
ag422
aa(lp1362
g424
ag425
aa(lp1363
g427
ag428
aa(lp1364
g430
ag431
aa(lp1365
g433
ag434
aa(lp1366
g436
ag437
aa(lp1367
g439
ag440
aa(lp1368
g442
ag443
aa(lp1369
g445
ag446
aa(lp1370
g448
ag449
aa(lp1371
g451
ag452
aa(lp1372
g454
ag455
aa(lp1373
g457
ag458
aa(lp1374
g460
ag461
aa(lp1375
g463
ag464
aa(lp1376
g466
ag467
aa(lp1377
g469
ag470
aa(lp1378
g472
ag473
aatp1379
Rp1380
aa(lp1381
g477
ag386
((lp1382
(lp1383
g392
ag477
aa(lp1384
g481
ag482
aatp1385
Rp1386
aatp1387
Rp1388
sg70
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g18
g7
Ntp1399
Rp1400
(dp1401
g22
(dp1402
sg24
g5
(cnipype.interfaces.utility
Function
p1403
g7
Ntp1404
Rp1405
(dp1406
S'_input_names'
p1407
(lp1408
S'overlay'
p1409
aS'underlay'
p1410
aS'png_name'
p1411
aS'cbar_name'
p1412
asg29
g30
(cnipype.interfaces.utility
FunctionInputSpec
p1413
tp1414
Rp1415
(dp1416
g98
I00
sg1411
S'MNI_edge_on_mean_func_mni_a.png'
p1417
sg1409
g37
sg1412
S'red'
p1418
sS'function_str'
p1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1420
sg1410
g37
sg38
g39
sbsS'_out'
p1421
(dp1422
g1411
NssS'_output_names'
p1423
(lp1424
g1411
asS'imports'
p1425
Nsbsg52
Nsg53
S'montage_a'
p1426
sg55
(dp1427
sg57
S'montage_mfi_0'
p1428
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1426
sg66
Nsg67
(lp1429
sg69
Nsg70
Nsb(dp1430
sg5
(g18
g7
Ntp1431
Rp1432
(dp1433
g22
(dp1434
sg24
g5
(g1403
g7
Ntp1435
Rp1436
(dp1437
g1407
(lp1438
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp1439
Rp1440
(dp1441
g98
I00
sg1411
S'MNI_edge_on_mean_func_mni_s.png'
p1442
sg1409
g37
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1443
sg1410
g37
sg38
g39
sbsg1421
(dp1444
g1411
Nssg1423
(lp1445
g1411
asg1425
Nsbsg52
Nsg53
S'montage_s'
p1446
sg55
(dp1447
sg57
g1428
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1446
sg66
Nsg67
(lp1448
sg69
Nsg70
Nsb(dp1449
sg5
(g18
g7
Ntp1450
Rp1451
(dp1452
g22
(dp1453
sg24
g5
(g1403
g7
Ntp1454
Rp1455
(dp1456
g1407
(lp1457
S'file_'
p1458
asg29
g30
(g1413
tp1459
Rp1460
(dp1461
g98
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1462
sg1458
g37
sg38
g39
sbsg1421
(dp1463
S'new_fname'
p1464
Nssg1423
(lp1465
g1464
asg1425
Nsbsg52
Nsg53
S'resample_u'
p1466
sg55
(dp1467
sg57
g1428
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1466
sg66
Nsg67
(lp1468
sg69
Nsg70
Nsb(dp1469
sg5
(g18
g7
Ntp1470
Rp1471
(dp1472
g22
(dp1473
sg24
g5
(g1403
g7
Ntp1474
Rp1475
(dp1476
g1407
(lp1477
g1458
asg29
g30
(g1413
tp1478
Rp1479
(dp1480
g98
I00
sg1419
g1462
sg1458
g37
sg38
g39
sbsg1421
(dp1481
g1464
Nssg1423
(lp1482
g1464
asg1425
Nsbsg52
Nsg60
I00
sg55
(dp1483
sg62
Nsg59
Nsg69
Nsg53
S'resample_o'
p1484
sg57
g1428
sg61
I00
sg63
Nsg64
I00
sg65
g1484
sg66
Nsg67
(lp1485
sg70
Nsb(dp1486
sg5
(g18
g7
Ntp1487
Rp1488
(dp1489
g22
(dp1490
sg24
g5
(g25
g7
Ntp1491
Rp1492
(dp1493
g29
g30
(g31
tp1494
Rp1495
(dp1496
g38
g39
sg1410
g37
sg1409
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1497
sbsg49
(lp1498
g1410
ag1409
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp1499
sg57
g1428
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp1500
sg69
Nsg70
Nsb(dp1501
sg5
(g18
g7
Ntp1502
Rp1503
(dp1504
g22
(dp1505
sg24
g5
(g25
g7
Ntp1506
Rp1507
(dp1508
g29
g30
(g31
tp1509
Rp1510
(dp1511
g38
g39
sS'resampled_underlay'
p1512
g37
sS'axial_png'
p1513
g37
sS'sagittal_png'
p1514
g37
sS'resampled_overlay'
p1515
g37
sbsg49
(lp1516
g1513
ag1514
ag1512
ag1515
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp1517
sg57
g1428
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp1518
sg69
Nsg70
Nsb(dp1519
ssg328
(dp1520
sg330
(dp1521
g1400
(dp1522
g1503
(dp1523
g334
(lp1524
(g1411
g1513
tp1525
asssg1432
(dp1526
g1503
(dp1527
g334
(lp1528
(g1411
g1514
tp1529
asssg1451
(dp1530
g1400
(dp1531
g334
(lp1532
(g1464
g1410
tp1533
assg1503
(dp1534
g334
(lp1535
(g1464
g1512
tp1536
assg1432
(dp1537
g334
(lp1538
(g1464
g1410
tp1539
asssg1471
(dp1540
g1400
(dp1541
g334
(lp1542
(g1464
g1409
tp1543
assg1503
(dp1544
g334
(lp1545
(g1464
g1515
tp1546
assg1432
(dp1547
g334
(lp1548
(g1464
g1409
tp1549
asssg1488
(dp1550
g1451
(dp1551
g334
(lp1552
(g1410
g1458
tp1553
assg1471
(dp1554
g334
(lp1555
(g1409
g1458
tp1556
asssg1503
(dp1557
ssg376
g1521
sg377
(dp1558
g1400
(dp1559
g1451
g1531
sg1471
g1541
ssg1432
(dp1560
g1451
g1537
sg1471
g1547
ssg1451
(dp1561
g1488
g1551
ssg1471
(dp1562
g1488
g1554
ssg1488
(dp1563
sg1503
(dp1564
g1400
g1523
sg1451
g1534
sg1432
g1527
sg1471
g1544
sssg385
g1521
sbsg53
g1428
sg57
g1067
sg65
g1428
sg66
g386
((lp1565
(lp1566
g389
ag386
((lp1567
(lp1568
g392
ag389
aa(lp1569
g394
ag395
aa(lp1570
g397
ag398
aa(lp1571
g400
ag401
aa(lp1572
g403
ag404
aa(lp1573
g406
ag407
aa(lp1574
g409
ag410
aa(lp1575
g412
ag413
aatp1576
Rp1577
aa(lp1578
g417
ag386
((lp1579
(lp1580
g392
ag417
aa(lp1581
g421
ag422
aa(lp1582
g424
ag425
aa(lp1583
g427
ag428
aa(lp1584
g430
ag431
aa(lp1585
g433
ag434
aa(lp1586
g436
ag437
aa(lp1587
g439
ag440
aa(lp1588
g442
ag443
aa(lp1589
g445
ag446
aa(lp1590
g448
ag449
aa(lp1591
g451
ag452
aa(lp1592
g454
ag455
aa(lp1593
g457
ag458
aa(lp1594
g460
ag461
aa(lp1595
g463
ag464
aa(lp1596
g466
ag467
aa(lp1597
g469
ag470
aa(lp1598
g472
ag473
aatp1599
Rp1600
aa(lp1601
g477
ag386
((lp1602
(lp1603
g392
ag477
aa(lp1604
g481
ag482
aatp1605
Rp1606
aatp1607
Rp1608
sg70
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g18
g7
Ntp1619
Rp1620
(dp1621
g22
(dp1622
sg24
g5
(g25
g7
Ntp1623
Rp1624
(dp1625
g29
g30
(g31
tp1626
Rp1627
(dp1628
g38
g39
sg1410
g37
sg1409
g37
sbsg49
(lp1629
g1410
ag1409
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp1630
sg57
S'montage_snr_0'
p1631
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp1632
sg69
Nsg70
Nsb(dp1633
sg5
(g18
g7
Ntp1634
Rp1635
(dp1636
g22
(dp1637
sg24
g5
(g1403
g7
Ntp1638
Rp1639
(dp1640
g1407
(lp1641
g1458
asg29
g30
(g1413
tp1642
Rp1643
(dp1644
g98
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1645
sg1458
g37
sg38
g39
sbsg1421
(dp1646
g1464
Nssg1423
(lp1647
g1464
asg1425
Nsbsg52
Nsg53
g1466
sg55
(dp1648
sg57
g1631
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1466
sg66
Nsg67
(lp1649
sg69
Nsg70
Nsb(dp1650
sg5
(g18
g7
Ntp1651
Rp1652
(dp1653
g22
(dp1654
sg24
g5
(g1403
g7
Ntp1655
Rp1656
(dp1657
g1407
(lp1658
g1458
asg29
g30
(g1413
tp1659
Rp1660
(dp1661
g98
I00
sg1419
g1645
sg1458
g37
sg38
g39
sbsg1421
(dp1662
g1464
Nssg1423
(lp1663
g1464
asg1425
Nsbsg52
Nsg60
I00
sg55
(dp1664
sg62
Nsg59
Nsg69
Nsg53
g1484
sg57
g1631
sg61
I00
sg63
Nsg64
I00
sg65
g1484
sg66
Nsg67
(lp1665
sg70
Nsb(dp1666
sg5
(g18
g7
Ntp1667
Rp1668
(dp1669
g22
(dp1670
sg24
g5
(g25
g7
Ntp1671
Rp1672
(dp1673
g29
g30
(g31
tp1674
Rp1675
(dp1676
g38
g39
sg1512
g37
sg1513
g37
sg1514
g37
sg1515
g37
sbsg49
(lp1677
g1513
ag1514
ag1512
ag1515
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp1678
sg57
g1631
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp1679
sg69
Nsg70
Nsb(dp1680
sg5
(g18
g7
Ntp1681
Rp1682
(dp1683
g22
(dp1684
sg24
g5
(g1403
g7
Ntp1685
Rp1686
(dp1687
g1407
(lp1688
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp1689
Rp1690
(dp1691
g98
I00
sg1411
S'snr_s.png'
p1692
sg1409
g37
sg1412
S'red_to_blue'
p1693
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1694
sg1410
g37
sg38
g39
sbsg1421
(dp1695
g1411
Nssg1423
(lp1696
g1411
asg1425
Nsbsg52
Nsg53
g1446
sg55
(dp1697
sg57
g1631
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1446
sg66
Nsg67
(lp1698
sg69
Nsg70
Nsb(dp1699
sg5
(g18
g7
Ntp1700
Rp1701
(dp1702
g22
(dp1703
sg24
g5
(g1403
g7
Ntp1704
Rp1705
(dp1706
g1407
(lp1707
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp1708
Rp1709
(dp1710
g98
I00
sg1411
S'snr_a.png'
p1711
sg1409
g37
sg1412
g1693
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1712
sg1410
g37
sg38
g39
sbsg1421
(dp1713
g1411
Nssg1423
(lp1714
g1411
asg1425
Nsbsg52
Nsg53
g1426
sg55
(dp1715
sg57
g1631
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1426
sg66
Nsg67
(lp1716
sg69
Nsg70
Nsb(dp1717
ssg328
(dp1718
sg330
(dp1719
g1620
(dp1720
g1635
(dp1721
g334
(lp1722
(g1410
g1458
tp1723
assg1652
(dp1724
g334
(lp1725
(g1409
g1458
tp1726
asssg1635
(dp1727
g1701
(dp1728
g334
(lp1729
(g1464
g1410
tp1730
assg1668
(dp1731
g334
(lp1732
(g1464
g1512
tp1733
assg1682
(dp1734
g334
(lp1735
(g1464
g1410
tp1736
asssg1652
(dp1737
g1701
(dp1738
g334
(lp1739
(g1464
g1409
tp1740
assg1668
(dp1741
g334
(lp1742
(g1464
g1515
tp1743
assg1682
(dp1744
g334
(lp1745
(g1464
g1409
tp1746
asssg1668
(dp1747
sg1682
(dp1748
g1668
(dp1749
g334
(lp1750
(g1411
g1514
tp1751
asssg1701
(dp1752
g1668
(dp1753
g334
(lp1754
(g1411
g1513
tp1755
assssg376
g1719
sg377
(dp1756
g1620
(dp1757
sg1635
(dp1758
g1620
g1721
ssg1652
(dp1759
g1620
g1724
ssg1668
(dp1760
g1635
g1731
sg1652
g1741
sg1682
g1749
sg1701
g1753
ssg1682
(dp1761
g1635
g1734
sg1652
g1744
ssg1701
(dp1762
g1635
g1728
sg1652
g1738
sssg385
g1719
sbsg53
g1631
sg57
g1067
sg65
g1631
sg66
g386
((lp1763
(lp1764
g389
ag386
((lp1765
(lp1766
g392
ag389
aa(lp1767
g394
ag395
aa(lp1768
g397
ag398
aa(lp1769
g400
ag401
aa(lp1770
g403
ag404
aa(lp1771
g406
ag407
aa(lp1772
g409
ag410
aa(lp1773
g412
ag413
aatp1774
Rp1775
aa(lp1776
g417
ag386
((lp1777
(lp1778
g392
ag417
aa(lp1779
g421
ag422
aa(lp1780
g424
ag425
aa(lp1781
g427
ag428
aa(lp1782
g430
ag431
aa(lp1783
g433
ag434
aa(lp1784
g436
ag437
aa(lp1785
g439
ag440
aa(lp1786
g442
ag443
aa(lp1787
g445
ag446
aa(lp1788
g448
ag449
aa(lp1789
g451
ag452
aa(lp1790
g454
ag455
aa(lp1791
g457
ag458
aa(lp1792
g460
ag461
aa(lp1793
g463
ag464
aa(lp1794
g466
ag467
aa(lp1795
g469
ag470
aa(lp1796
g472
ag473
aatp1797
Rp1798
aa(lp1799
g477
ag386
((lp1800
(lp1801
g392
ag477
aa(lp1802
g481
ag482
aatp1803
Rp1804
aatp1805
Rp1806
sg70
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g18
g7
Ntp1810
Rp1811
(dp1812
g22
(dp1813
sg24
g5
(g1126
g7
Ntp1814
Rp1815
(dp1816
g29
g30
(g1130
tp1817
Rp1818
(dp1819
g98
I00
sg1134
g37
sg176
g37
sg1135
g37
sg169
g37
sg227
g37
sg100
g37
sg201
g37
sg1136
g37
sg1137
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg103
g104
sg110
g5
(g111
g112
(dp1821
g114
g115
stp1822
Rp1823
(dp1824
g119
S'environ_items'
p1825
sg53
g110
sbsg1143
g37
sg1144
g37
sg121
g115
sg1145
g37
sg1146
g37
sg38
g39
sg1147
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'mean_func_fsl_warp_0'
p1826
sg55
(dp1827
sg57
g1067
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1826
sg66
Nsg67
(lp1828
sg69
Nsg70
Nsbg169
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g18
g7
Ntp1831
Rp1832
(dp1833
g22
(dp1834
sg24
g5
(g1403
g7
Ntp1835
Rp1836
(dp1837
g1407
(lp1838
S'motion_parameters'
p1839
asg29
g30
(g1413
tp1840
Rp1841
(dp1842
g98
I00
sg1419
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g37
sg38
g39
sbsg1421
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1423
(lp1847
g1845
ag1846
asg1425
Nsbsg52
Nsg53
S'motion_plt_0'
p1848
sg55
(dp1849
sg57
g1067
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1848
sg66
Nsg67
(lp1850
sg69
Nsg70
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g18
g7
Ntp1853
Rp1854
(dp1855
g22
(dp1856
sg24
g5
(g1403
g7
Ntp1857
Rp1858
(dp1859
g1407
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg29
g30
(g1413
tp1864
Rp1865
(dp1866
g98
I00
sg38
g39
sg1861
g37
sg1419
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g37
sbsg1421
(dp1869
S'hist_path'
p1870
Nssg1423
(lp1871
g1870
asg1425
Nsbsg52
Nsg53
S'fd_plot_0'
p1872
sg55
(dp1873
sg57
g1067
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1872
sg66
Nsg67
(lp1874
sg69
Nsg70
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g18
g7
Ntp1884
Rp1885
(dp1886
g22
(dp1887
sg24
g5
(g1403
g7
Ntp1888
Rp1889
(dp1890
g1407
(lp1891
g176
ag304
aS'frames_before'
p1892
aS'frames_after'
p1893
asg29
g30
(g1413
tp1894
Rp1895
(dp1896
g98
I00
sg1893
g37
sg1419
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1897
sg176
g37
sg304
g37
sg38
g39
sg1892
g37
sbsg1421
(dp1898
g169
Nssg1423
(lp1899
g169
asg1425
Nsbsg52
Nsg53
S'exclude_frames'
p1900
sg55
(dp1901
sg57
S'gen_motion_stats_0'
p1902
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1900
sg66
Nsg67
(lp1903
sg69
Nsg70
Nsb(dp1904
sg5
(g18
g7
Ntp1905
Rp1906
(dp1907
g22
(dp1908
sg24
g5
(g1403
g7
Ntp1909
Rp1910
(dp1911
g1407
(lp1912
S'rest'
p1913
aS'mask'
p1914
asg29
g30
(g1413
tp1915
Rp1916
(dp1917
g98
I00
sg1914
g37
sg38
g39
sg1419
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p1918
sg1913
g37
sbsg1421
(dp1919
g169
Nssg1423
(lp1920
g169
asg1425
Nsbsg52
Nsg53
S'cal_DVARS'
p1921
sg55
(dp1922
sg57
g1902
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1921
sg66
Nsg67
(lp1923
sg69
Nsg70
Nsb(dp1924
sg5
(g18
g7
Ntp1925
Rp1926
(dp1927
g22
(dp1928
sg24
g5
(g1403
g7
Ntp1929
Rp1930
(dp1931
g1407
(lp1932
g176
asg29
g30
(g1413
tp1933
Rp1934
(dp1935
g98
I00
sg38
g39
sg1419
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p1936
sg176
g37
sbsg1421
(dp1937
g169
Nssg1423
(lp1938
g169
asg1425
Nsbsg52
Nsg53
S'calculate_FD'
p1939
sg55
(dp1940
sg57
g1902
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1939
sg66
Nsg67
(lp1941
sg69
Nsg70
Nsb(dp1942
sg5
(g18
g7
Ntp1943
Rp1944
(dp1945
g22
(dp1946
sg24
g5
(g1403
g7
Ntp1947
Rp1948
(dp1949
g1407
(lp1950
S'subject_id'
p1951
aS'scan_id'
p1952
aS'FD_1D'
p1953
aS'FDJ_1D'
p1954
ag304
aS'DVARS'
p1955
asg29
g30
(g1413
tp1956
Rp1957
(dp1958
g98
I00
sg38
g39
sg1952
g37
sg1951
g37
sg1955
g37
sg1419
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1959
sg1954
g37
sg1953
g37
sg304
g37
sbsg1421
(dp1960
g169
Nssg1423
(lp1961
g169
asg1425
Nsbsg52
Nsg53
S'calc_power_parameters'
p1962
sg55
(dp1963
sg57
g1902
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1962
sg66
Nsg67
(lp1964
sg69
Nsg70
Nsb(dp1965
sg5
(g18
g7
Ntp1966
Rp1967
(dp1968
g22
(dp1969
sg24
g5
(g1403
g7
Ntp1970
Rp1971
(dp1972
g1407
(lp1973
g1951
ag1952
aS'movement_parameters'
p1974
aS'max_displacement'
p1975
asg29
g30
(g1413
tp1976
Rp1977
(dp1978
g98
I00
sg1975
g37
sg1952
g37
sg1951
g37
sg1419
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1979
sg1974
g37
sg38
g39
sbsg1421
(dp1980
g169
Nssg1423
(lp1981
g169
asg1425
Nsbsg52
Nsg53
S'calc_motion_parameters'
p1982
sg55
(dp1983
sg57
g1902
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1982
sg66
Nsg67
(lp1984
sg69
Nsg70
Nsb(dp1985
sg5
(g18
g7
Ntp1986
Rp1987
(dp1988
g22
(dp1989
sg24
g5
(g1403
g7
Ntp1990
Rp1991
(dp1992
g1407
(lp1993
g176
ag304
aS'exclude_list'
p1994
asg29
g30
(g1413
tp1995
Rp1996
(dp1997
g98
I00
sg1994
g37
sg1419
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1998
sg176
g37
sg304
g37
sg38
g39
sbsg1421
(dp1999
g169
Nssg1423
(lp2000
g169
asg1425
Nsbsg52
Nsg53
S'include_frames'
p2001
sg55
(dp2002
sg57
g1902
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2001
sg66
Nsg67
(lp2003
sg69
Nsg70
Nsb(dp2004
sg5
(g18
g7
Ntp2005
Rp2006
(dp2007
g22
(dp2008
sg24
g5
(g25
g7
Ntp2009
Rp2010
(dp2011
g29
g30
(g31
tp2012
Rp2013
(dp2014
g1975
g37
sg38
g39
sg1952
g37
sg1951
g37
sg1914
g37
sg1974
g37
sS'oned_matrix_save'
p2015
g37
sS'motion_correct'
p2016
g37
sbsg49
(lp2017
g1951
ag1952
ag1974
ag1975
ag2016
ag1914
ag2015
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp2018
sg57
g1902
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp2019
sg69
Nsg70
Nsb(dp2020
sg5
(g18
g7
Ntp2021
Rp2022
(dp2023
g22
(dp2024
sg24
g5
(g1403
g7
Ntp2025
Rp2026
(dp2027
g1407
(lp2028
g176
asg29
g30
(g1413
tp2029
Rp2030
(dp2031
g98
I00
sg38
g39
sg1419
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p2032
sg176
g37
sbsg1421
(dp2033
g169
Nssg1423
(lp2034
g169
asg1425
Nsbsg52
Nsg53
S'calculate_FDJ'
p2035
sg55
(dp2036
sg57
g1902
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2035
sg66
Nsg67
(lp2037
sg69
Nsg70
Nsb(dp2038
sg5
(g18
g7
Ntp2039
Rp2040
(dp2041
g22
(dp2042
sg24
g5
(g25
g7
Ntp2043
Rp2044
(dp2045
g29
g30
(g31
tp2046
Rp2047
(dp2048
g304
(lp2049
F0.2
asg38
g39
sS'remove_frames_before'
p2050
I1
sS'remove_frames_after'
p2051
I2
sbsg49
(lp2052
g304
ag2050
ag2051
asg51
I01
sbsg52
Nsg53
S'scrubbing_input'
p2053
sg55
(dp2054
sg57
g1902
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
(g304
(lp2055
F0.2
atp2056
sg64
I00
sg65
g2053
sg66
Nsg67
(lp2057
sg69
Nsg70
Nsb(dp2058
sg5
(g18
g7
Ntp2059
Rp2060
(dp2061
g22
(dp2062
sg24
g5
(g25
g7
Ntp2063
Rp2064
(dp2065
g29
g30
(g31
tp2066
Rp2067
(dp2068
g38
g39
sS'frames_ex_1D'
p2069
g37
sg1954
g37
sg1953
g37
sS'frames_in_1D'
p2070
g37
sS'motion_params'
p2071
g37
sS'power_params'
p2072
g37
sbsg49
(lp2073
g1953
ag1954
ag2069
ag2070
ag2072
ag2071
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp2074
sg57
g1902
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp2075
sg69
Nsg70
Nsb(dp2076
ssg328
(dp2077
sg330
(dp2078
g1885
(dp2079
g2060
(dp2080
g334
(lp2081
(g169
g2069
tp2082
assg1987
(dp2083
g334
(lp2084
(g169
g1994
tp2085
asssg1906
(dp2086
g1944
(dp2087
g334
(lp2088
(g169
g1955
tp2089
asssg1926
(dp2090
g1944
(dp2091
g334
(lp2092
(g169
g1953
tp2093
assg1885
(dp2094
g334
(lp2095
(g169
g176
tp2096
assg2060
(dp2097
g334
(lp2098
(g169
g1953
tp2099
assg1987
(dp2100
g334
(lp2101
(g169
g176
tp2102
asssg1944
(dp2103
g2060
(dp2104
g334
(lp2105
(g169
g2072
tp2106
asssg1967
(dp2107
g2060
(dp2108
g334
(lp2109
(g169
g2071
tp2110
asssg1987
(dp2111
g2060
(dp2112
g334
(lp2113
(g169
g2070
tp2114
asssg2006
(dp2115
g1944
(dp2116
g334
(lp2117
(g1951
g1951
tp2118
a(g1952
g1952
tp2119
assg1926
(dp2120
g334
(lp2121
(g1974
g176
tp2122
assg1967
(dp2123
g334
(lp2124
(g1951
g1951
tp2125
a(g1952
g1952
tp2126
a(g1974
g1974
tp2127
a(g1975
g1975
tp2128
assg1906
(dp2129
g334
(lp2130
(g2016
g1913
tp2131
a(g1914
g1914
tp2132
assg2022
(dp2133
g334
(lp2134
(g2015
g176
tp2135
asssg2022
(dp2136
g1944
(dp2137
g334
(lp2138
(g169
g1954
tp2139
assg2060
(dp2140
g334
(lp2141
(g169
g1954
tp2142
asssg2040
(dp2143
g1885
(dp2144
g334
(lp2145
(g304
g304
tp2146
a(g2050
g1892
tp2147
a(g2051
g1893
tp2148
assg1987
(dp2149
g334
(lp2150
(g304
g304
tp2151
assg1944
(dp2152
g334
(lp2153
(g304
g304
tp2154
asssg2060
(dp2155
ssg376
g2078
sg377
(dp2156
g1885
(dp2157
g1926
g2094
sg2040
g2144
ssg1906
(dp2158
g2006
g2129
ssg1926
(dp2159
g2006
g2120
ssg1944
(dp2160
g2022
g2137
sg2006
g2116
sg2040
g2152
sg1906
g2087
sg1926
g2091
ssg1967
(dp2161
g2006
g2123
ssg1987
(dp2162
g1926
g2100
sg1885
g2083
sg2040
g2149
ssg2006
(dp2163
sg2022
(dp2164
g2006
g2133
ssg2040
(dp2165
sg2060
(dp2166
g1885
g2080
sg1926
g2097
sg1967
g2108
sg1987
g2112
sg1944
g2104
sg2022
g2140
sssg385
g2078
sbsg53
g1902
sg57
g1067
sg65
g1902
sg66
g386
((lp2167
(lp2168
g389
ag386
((lp2169
(lp2170
g392
ag389
aa(lp2171
g394
ag395
aa(lp2172
g397
ag398
aa(lp2173
g400
ag401
aa(lp2174
g403
ag404
aa(lp2175
g406
ag407
aa(lp2176
g409
ag410
aa(lp2177
g412
ag413
aatp2178
Rp2179
aa(lp2180
g417
ag386
((lp2181
(lp2182
g392
ag417
aa(lp2183
g421
ag422
aa(lp2184
g424
ag425
aa(lp2185
g427
ag428
aa(lp2186
g430
ag431
aa(lp2187
g433
ag434
aa(lp2188
g436
ag437
aa(lp2189
g439
ag440
aa(lp2190
g442
ag443
aa(lp2191
g445
ag446
aa(lp2192
g448
ag449
aa(lp2193
g451
ag452
aa(lp2194
g454
ag455
aa(lp2195
g457
ag458
aa(lp2196
g460
ag461
aa(lp2197
g463
ag464
aa(lp2198
g466
ag467
aa(lp2199
g469
ag470
aa(lp2200
g472
ag473
aatp2201
Rp2202
aa(lp2203
g477
ag386
((lp2204
(lp2205
g392
ag477
aa(lp2206
g481
ag482
aatp2207
Rp2208
aatp2209
Rp2210
sg70
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g18
g7
Ntp2224
Rp2225
(dp2226
g22
(dp2227
sg24
g5
(g25
g7
Ntp2228
Rp2229
(dp2230
g29
g30
(g31
tp2231
Rp2232
(dp2233
S'reorient'
p2234
g37
sg41
g37
sS'refit'
p2235
g37
sg38
g39
sS'skullstrip'
p2236
g37
sbsg49
(lp2237
g2235
ag2234
ag2236
ag41
asg51
I01
sbsg52
Nsg60
I00
sg55
(dp2238
sg62
Nsg59
Nsg69
Nsg53
g324
sg57
S'anat_preproc_0'
p2239
sg61
I00
sg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp2240
sg70
Nsb(dp2241
sg5
(g18
g7
Ntp2242
Rp2243
(dp2244
g22
(dp2245
sg24
g5
(cnipype.interfaces.afni.preprocess
Resample
p2246
g7
Ntp2247
Rp2248
(dp2249
g29
g30
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2250
tp2251
Rp2252
(dp2253
g98
I00
sg38
g39
sg169
g37
sg100
g37
sS'outputtype'
p2254
S'NIFTI_GZ'
p2255
sS'resample_mode'
p2256
g37
sS'voxel_size'
p2257
g37
sg103
g104
sS'master'
p2258
g37
sg176
g37
sg110
g5
(g111
g112
(dp2259
tp2260
Rp2261
(dp2262
g119
S'environ_items'
p2263
sg53
g110
sbsS'orientation'
p2264
S'RPI'
p2265
sbsS'_outputtype'
p2266
g2255
sg124
Nsg125
g104
sbsg52
Nsg60
I00
sg55
(dp2267
sg62
Nsg59
Nsg69
Nsg53
S'anat_reorient'
p2268
sg57
g2239
sg61
I00
sg63
Nsg64
I00
sg65
g2268
sg66
Nsg67
(lp2269
sg70
Nsb(dp2270
sg5
(g18
g7
Ntp2271
Rp2272
(dp2273
g22
(dp2274
sg24
g5
(g25
g7
Ntp2275
Rp2276
(dp2277
g29
g30
(g31
tp2278
Rp2279
(dp2280
g38
g39
sS'anat'
p2281
g37
sbsg49
(lp2282
g2281
asg51
I01
sbsg52
Nsg60
I00
sg55
(dp2283
sg62
Nsg59
Nsg69
Nsg53
g54
sg57
g2239
sg61
I00
sg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp2284
sg70
Nsb(dp2285
sg5
(g18
g7
Ntp2286
Rp2287
(dp2288
g22
(dp2289
sg24
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2290
g7
Ntp2291
Rp2292
(dp2293
g29
g30
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2294
tp2295
Rp2296
(dp2297
g98
I00
sg38
g39
sg169
g37
sg100
g37
sg2254
S'AFNI'
p2298
sg103
g104
sg110
g5
(g111
g112
(dp2299
tp2300
Rp2301
(dp2302
g119
S'environ_items'
p2303
sg53
g110
sbsg176
g37
sbsg2266
g2298
sg124
Nsg125
g104
sbsg52
Nsg60
I00
sg55
(dp2304
sg62
Nsg59
Nsg69
Nsg53
S'anat_skullstrip'
p2305
sg57
g2239
sg61
I00
sg63
Nsg64
I00
sg65
g2305
sg66
Nsg67
(lp2306
sg70
Nsb(dp2307
sg5
(g18
g7
Ntp2308
Rp2309
(dp2310
g22
(dp2311
sg24
g5
(cnipype.interfaces.afni.preprocess
Calc
p2312
g7
Ntp2313
Rp2314
(dp2315
g29
g30
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2316
tp2317
Rp2318
(dp2319
S'stop_idx'
p2320
g37
sg98
I00
sg38
g39
sg169
g37
sS'expr'
p2321
S'a*step(b)'
p2322
sg100
g37
sg2254
g2255
sS'in_file_b'
p2323
g37
sS'in_file_c'
p2324
g37
sS'in_file_a'
p2325
g37
sg110
g5
(g111
g112
(dp2326
tp2327
Rp2328
(dp2329
g119
S'environ_items'
p2330
sg53
g110
sbsS'single_idx'
p2331
g37
sS'other'
p2332
g37
sS'start_idx'
p2333
g37
sg103
g104
sbsg2266
g2255
sg124
Nsg125
g104
sbsg52
Nsg60
I00
sg55
(dp2334
sg62
Nsg59
Nsg69
Nsg53
S'anat_brain_only'
p2335
sg57
g2239
sg61
I00
sg63
Nsg64
I00
sg65
g2335
sg66
Nsg67
(lp2336
sg70
Nsb(dp2337
sg5
(g18
g7
Ntp2338
Rp2339
(dp2340
g22
(dp2341
sg24
g5
(cnipype.interfaces.afni.preprocess
Refit
p2342
g7
Ntp2343
Rp2344
(dp2345
g29
g30
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2346
tp2347
Rp2348
(dp2349
g98
I00
sg38
g39
sS'deoblique'
p2350
I01
sg100
g37
sS'yorigin'
p2351
g37
sg103
g104
sg110
g5
(g111
g112
(dp2352
tp2353
Rp2354
(dp2355
g119
S'environ_items'
p2356
sg53
g110
sbsg176
g37
sS'xorigin'
p2357
g37
sS'zorigin'
p2358
g37
sbsg124
Nsg125
g104
sbsg52
Nsg60
I00
sg55
(dp2359
sg62
Nsg59
Nsg69
Nsg53
S'anat_deoblique'
p2360
sg57
g2239
sg61
I00
sg63
Nsg64
I00
sg65
g2360
sg66
Nsg67
(lp2361
sg70
Nsb(dp2362
ssg330
(dp2363
g2225
(dp2364
sg2243
(dp2365
g2309
(dp2366
g334
(lp2367
(g169
g2325
tp2368
assg2287
(dp2369
g334
(lp2370
(g169
g176
tp2371
assg2225
(dp2372
g334
(lp2373
(g169
g2234
tp2374
asssg2272
(dp2375
g2339
(dp2376
g334
(lp2377
(g2281
g176
tp2378
asssg2287
(dp2379
g2309
(dp2380
g334
(lp2381
(g169
g2323
tp2382
assg2225
(dp2383
g334
(lp2384
(g169
g2236
tp2385
asssg2309
(dp2386
g2225
(dp2387
g334
(lp2388
(g169
g41
tp2389
asssg2339
(dp2390
g2225
(dp2391
g334
(lp2392
(g169
g2235
tp2393
assg2243
(dp2394
g334
(lp2395
(g169
g176
tp2396
assssg376
g2363
sg377
(dp2397
g2225
(dp2398
g2287
g2383
sg2339
g2391
sg2243
g2372
sg2309
g2387
ssg2243
(dp2399
g2339
g2394
ssg2272
(dp2400
sg2287
(dp2401
g2243
g2369
ssg2309
(dp2402
g2287
g2380
sg2243
g2366
ssg2339
(dp2403
g2272
g2376
sssg328
(dp2404
sg385
g2363
sbsg53
g2239
sg57
g1067
sg65
g2239
sg66
g386
((lp2405
(lp2406
g389
ag386
((lp2407
(lp2408
g392
ag389
aa(lp2409
g394
ag395
aa(lp2410
g397
ag398
aa(lp2411
g400
ag401
aa(lp2412
g403
ag404
aa(lp2413
g406
ag407
aa(lp2414
g409
ag410
aa(lp2415
g412
ag413
aatp2416
Rp2417
aa(lp2418
g417
ag386
((lp2419
(lp2420
g392
ag417
aa(lp2421
g421
ag422
aa(lp2422
g424
ag425
aa(lp2423
g427
ag428
aa(lp2424
g430
ag431
aa(lp2425
g433
ag434
aa(lp2426
g436
ag437
aa(lp2427
g439
ag440
aa(lp2428
g442
ag443
aa(lp2429
g445
ag446
aa(lp2430
g448
ag449
aa(lp2431
g451
ag452
aa(lp2432
g454
ag455
aa(lp2433
g457
ag458
aa(lp2434
g460
ag461
aa(lp2435
g463
ag464
aa(lp2436
g466
ag467
aa(lp2437
g469
ag470
aa(lp2438
g472
ag473
aatp2439
Rp2440
aa(lp2441
g477
ag386
((lp2442
(lp2443
g392
ag477
aa(lp2444
g481
ag482
aatp2445
Rp2446
aatp2447
Rp2448
sg70
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g18
g7
Ntp2459
Rp2460
(dp2461
g22
(dp2462
sg24
g5
(cnipype.interfaces.afni.preprocess
Automask
p2463
g7
Ntp2464
Rp2465
(dp2466
g29
g30
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2467
tp2468
Rp2469
(dp2470
g98
I00
sg38
g39
sg100
g37
sS'erode'
p2471
g37
sg169
g37
sS'dilate'
p2472
g37
sS'clfrac'
p2473
g37
sg2254
g2255
sS'brain_file'
p2474
g37
sg103
g104
sg110
g5
(g111
g112
(dp2475
tp2476
Rp2477
(dp2478
g119
S'environ_items'
p2479
sg53
g110
sbsg176
g37
sbsg2266
g2255
sg124
Nsg125
g104
sbsg52
Nsg53
S'func_get_brain_mask'
p2480
sg55
(dp2481
sg57
S'func_preproc_automask_0'
p2482
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2480
sg66
Nsg67
(lp2483
sg69
Nsg70
Nsb(dp2484
sg5
(g18
g7
Ntp2485
Rp2486
(dp2487
g22
(dp2488
sg24
g5
(cnipype.interfaces.afni.preprocess
TStat
p2489
g7
Ntp2490
Rp2491
(dp2492
g29
g30
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2493
tp2494
Rp2495
(dp2496
g98
I00
sg38
g39
sg169
g37
sg100
g37
sg1914
g37
sg2254
g2255
sg103
g104
sg110
g5
(g111
g112
(dp2497
tp2498
Rp2499
(dp2500
g119
S'environ_items'
p2501
sg53
g110
sbsg176
g37
sS'options'
p2502
S'-mean'
p2503
sbsg2266
g2255
sg124
Nsg125
g104
sbsg52
Nsg60
I00
sg55
(dp2504
sg62
Nsg59
Nsg69
Nsg53
S'func_get_mean_motion'
p2505
sg57
g2482
sg61
I00
sg63
Nsg64
I00
sg65
g2505
sg66
Nsg67
(lp2506
sg70
Nsb(dp2507
sg5
(g18
g7
Ntp2508
Rp2509
(dp2510
g22
(dp2511
sg24
g5
(g272
g7
Ntp2512
Rp2513
(dp2514
g29
g30
(g276
tp2515
Rp2516
(dp2517
g98
I00
sg38
g39
sg167
S'-ing 10000'
p2518
sg280
S'float'
p2519
sg169
g37
sg100
g37
sg281
g37
sg103
g104
sg110
g5
(g111
g112
(dp2520
g114
g115
stp2521
Rp2522
(dp2523
g119
S'environ_items'
p2524
sg53
g110
sbsg176
g37
sg121
g115
sg287
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'func_normalize'
p2525
sg55
(dp2526
sg57
g2482
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2525
sg66
Nsg67
(lp2527
sg69
Nsg70
Nsb(dp2528
sg5
(g18
g7
Ntp2529
Rp2530
(dp2531
g22
(dp2532
sg24
g5
(g2342
g7
Ntp2533
Rp2534
(dp2535
g29
g30
(g2346
tp2536
Rp2537
(dp2538
g98
I00
sg38
g39
sg2350
I01
sg100
g37
sg2351
g37
sg103
g104
sg110
g5
(g111
g112
(dp2539
tp2540
Rp2541
(dp2542
g119
S'environ_items'
p2543
sg53
g110
sbsg176
g37
sg2357
g37
sg2358
g37
sbsg124
Nsg125
g104
sbsg52
Nsg53
S'func_deoblique'
p2544
sg55
(dp2545
sg57
g2482
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2544
sg66
Nsg67
(lp2546
sg69
Nsg70
Nsb(dp2547
sg5
(g18
g7
Ntp2548
Rp2549
(dp2550
g22
(dp2551
sg24
g5
(g25
g7
Ntp2552
Rp2553
(dp2554
g29
g30
(g31
tp2555
Rp2556
(dp2557
g1975
g37
sS'motion_correct_ref'
p2558
g37
sg38
g39
sS'preprocessed_mask'
p2559
g37
sg1914
g37
sg2235
g37
sg2236
g37
sg2234
g37
sS'preprocessed'
p2560
g37
sS'slice_time_corrected'
p2561
g37
sg1974
g37
sS'example_func'
p2562
g37
sg2015
g37
sS'reorient_mean'
p2563
g37
sg2016
g37
sbsg49
(lp2564
g2235
ag2234
ag2563
ag2016
ag2558
ag1974
ag1975
ag1914
ag2236
ag2562
ag2560
ag2559
ag2561
ag2015
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp2565
sg57
g2482
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp2566
sg69
Nsg70
Nsb(dp2567
sg5
(g18
g7
Ntp2568
Rp2569
(dp2570
g22
(dp2571
sg24
g5
(g25
g7
Ntp2572
Rp2573
(dp2574
g29
g30
(g31
tp2575
Rp2576
(dp2577
g38
g39
sS'func'
p2578
g37
sbsg49
(lp2579
g2578
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp2580
sg57
g2482
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp2581
sg69
Nsg70
Nsb(dp2582
sg5
(g18
g7
Ntp2583
Rp2584
(dp2585
g22
(dp2586
sg24
g5
(g2312
g7
Ntp2587
Rp2588
(dp2589
g29
g30
(g2316
tp2590
Rp2591
(dp2592
g2320
g37
sg98
I00
sg38
g39
sg169
g37
sg2321
S'a*b'
p2593
sg100
g37
sg2254
g2255
sg2323
g37
sg2324
g37
sg2325
g37
sg110
g5
(g111
g112
(dp2594
tp2595
Rp2596
(dp2597
g119
S'environ_items'
p2598
sg53
g110
sbsg2331
g37
sg2332
g37
sg2333
g37
sg103
g104
sbsg2266
g2255
sg124
Nsg125
g104
sbsg52
Nsg53
S'func_edge_detect'
p2599
sg55
(dp2600
sg57
g2482
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2599
sg66
Nsg67
(lp2601
sg69
Nsg70
Nsb(dp2602
sg5
(g18
g7
Ntp2603
Rp2604
(dp2605
g22
(dp2606
sg24
g5
(g272
g7
Ntp2607
Rp2608
(dp2609
g29
g30
(g276
tp2610
Rp2611
(dp2612
g98
I00
sg38
g39
sg167
S'-Tmin -bin'
p2613
sg280
S'char'
p2614
sg169
g37
sg100
g37
sg281
g37
sg103
g104
sg110
g5
(g111
g112
(dp2615
g114
g115
stp2616
Rp2617
(dp2618
g119
S'environ_items'
p2619
sg53
g110
sbsg176
g37
sg121
g115
sg287
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'func_mask_normalize'
p2620
sg55
(dp2621
sg57
g2482
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2620
sg66
Nsg67
(lp2622
sg69
Nsg70
Nsb(dp2623
sg5
(g18
g7
Ntp2624
Rp2625
(dp2626
g22
(dp2627
sg24
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2628
g7
Ntp2629
Rp2630
(dp2631
g29
g30
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2632
tp2633
Rp2634
(dp2635
S'oned_file'
p2636
g37
sg98
I00
sg88
g37
sS'timeshift'
p2637
g37
sS'basefile'
p2638
g37
sg100
S'-Fourier -twopass'
p2639
sg2254
g2255
sS'zpad'
p2640
I4
sg103
g104
sS'md1d_file'
p2641
g37
sg176
g37
sS'copyorigin'
p2642
g37
sg110
g5
(g111
g112
(dp2643
tp2644
Rp2645
(dp2646
g119
S'environ_items'
p2647
sg53
g110
sbsg2015
g37
sg38
g39
sg169
g37
sbsg2266
g2255
sg124
Nsg125
g104
sbsg52
Nsg53
S'func_motion_correct'
p2648
sg55
(dp2649
sg57
g2482
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2648
sg66
Nsg67
(lp2650
sg69
Nsg70
Nsb(dp2651
sg5
(g18
g7
Ntp2652
Rp2653
(dp2654
g22
(dp2655
sg24
g5
(g2489
g7
Ntp2656
Rp2657
(dp2658
g29
g30
(g2493
tp2659
Rp2660
(dp2661
g98
I00
sg38
g39
sg169
g37
sg100
g37
sg1914
g37
sg2254
g2255
sg103
g104
sg110
g5
(g111
g112
(dp2662
tp2663
Rp2664
(dp2665
g119
S'environ_items'
p2666
sg53
g110
sbsg176
g37
sg2502
g2503
sbsg2266
g2255
sg124
Nsg125
g104
sbsg52
Nsg53
S'func_mean_skullstrip'
p2667
sg55
(dp2668
sg57
g2482
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2667
sg66
Nsg67
(lp2669
sg69
Nsg70
Nsb(dp2670
sg5
(g18
g7
Ntp2671
Rp2672
(dp2673
g22
(dp2674
sg24
g5
(g2628
g7
Ntp2675
Rp2676
(dp2677
g29
g30
(g2632
tp2678
Rp2679
(dp2680
g2636
g37
sg98
I00
sg88
g37
sg2637
g37
sg2638
g37
sg100
g2639
sg2254
g2255
sg2640
I4
sg103
g104
sg2641
S'max_displacement.1D'
p2681
sg176
g37
sg2642
g37
sg110
g5
(g111
g112
(dp2682
tp2683
Rp2684
(dp2685
g119
S'environ_items'
p2686
sg53
g110
sbsg2015
g37
sg38
g39
sg169
g37
sbsg2266
g2255
sg124
Nsg125
g104
sbsg52
Nsg60
I00
sg55
(dp2687
sg62
Nsg59
Nsg69
Nsg53
S'func_motion_correct_A'
p2688
sg57
g2482
sg61
I00
sg63
Nsg64
I00
sg65
g2688
sg66
Nsg67
(lp2689
sg70
Nsb(dp2690
sg5
(g18
g7
Ntp2691
Rp2692
(dp2693
g22
(dp2694
sg24
g5
(g2489
g7
Ntp2695
Rp2696
(dp2697
g29
g30
(g2493
tp2698
Rp2699
(dp2700
g98
I00
sg38
g39
sg169
g37
sg100
g37
sg1914
g37
sg2254
g2255
sg103
g104
sg110
g5
(g111
g112
(dp2701
tp2702
Rp2703
(dp2704
g119
S'environ_items'
p2705
sg53
g110
sbsg176
g37
sg2502
g2503
sbsg2266
g2255
sg124
Nsg125
g104
sbsg52
Nsg53
S'func_get_mean_RPI'
p2706
sg55
(dp2707
sg57
g2482
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2706
sg66
Nsg67
(lp2708
sg69
Nsg70
Nsb(dp2709
sg5
(g18
g7
Ntp2710
Rp2711
(dp2712
g22
(dp2713
sg24
g5
(g2246
g7
Ntp2714
Rp2715
(dp2716
g29
g30
(g2250
tp2717
Rp2718
(dp2719
g98
I00
sg38
g39
sg169
g37
sg100
g37
sg2254
g2255
sg2256
g37
sg2257
g37
sg103
g104
sg2258
g37
sg176
g37
sg110
g5
(g111
g112
(dp2720
tp2721
Rp2722
(dp2723
g119
S'environ_items'
p2724
sg53
g110
sbsg2264
g2265
sbsg2266
g2255
sg124
Nsg125
g104
sbsg52
Nsg53
S'func_reorient'
p2725
sg55
(dp2726
sg57
g2482
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2725
sg66
Nsg67
(lp2727
sg69
Nsg70
Nsb(dp2728
ssg328
(dp2729
sg330
(dp2730
g2460
(dp2731
g2584
(dp2732
g334
(lp2733
(g169
g2323
tp2734
assg2549
(dp2735
g334
(lp2736
(g169
g1914
tp2737
asssg2486
(dp2738
g2672
(dp2739
g334
(lp2740
(g169
g2638
tp2741
assg2549
(dp2742
g334
(lp2743
(g169
g2558
tp2744
asssg2509
(dp2745
g2549
(dp2746
g334
(lp2747
(g169
g2560
tp2748
assg2604
(dp2749
g334
(lp2750
(g169
g176
tp2751
asssg2530
(dp2752
g2711
(dp2753
g334
(lp2754
(g169
g176
tp2755
asssg2549
(dp2756
sg2569
(dp2757
g2530
(dp2758
g334
(lp2759
(g2578
g176
tp2760
asssg2584
(dp2761
g2509
(dp2762
g334
(lp2763
(g169
g176
tp2764
assg2549
(dp2765
g334
(lp2766
(g169
g2236
tp2767
assg2653
(dp2768
g334
(lp2769
(g169
g176
tp2770
asssg2604
(dp2771
g2549
(dp2772
g334
(lp2773
(g169
g2559
tp2774
asssg2625
(dp2775
g2486
(dp2776
g334
(lp2777
(g169
g176
tp2778
asssg2653
(dp2779
g2549
(dp2780
g334
(lp2781
(g169
g2562
tp2782
asssg2672
(dp2783
g2584
(dp2784
g334
(lp2785
(g169
g2325
tp2786
assg2549
(dp2787
g334
(lp2788
(g169
g2016
tp2789
a(g2641
g1975
tp2790
a(g2636
g1974
tp2791
a(g2015
g2015
tp2792
assg2460
(dp2793
g334
(lp2794
(g169
g176
tp2795
asssg2692
(dp2796
g2625
(dp2797
g334
(lp2798
(g169
g2638
tp2799
asssg2711
(dp2800
g2672
(dp2801
g334
(lp2802
(g169
g176
tp2803
assg2625
(dp2804
g334
(lp2805
(g169
g176
tp2806
assg2549
(dp2807
g334
(lp2808
(g169
g2234
tp2809
assg2692
(dp2810
g334
(lp2811
(g169
g176
tp2812
assssg376
g2730
sg377
(dp2813
g2460
(dp2814
g2672
g2793
ssg2486
(dp2815
g2625
g2776
ssg2509
(dp2816
g2584
g2762
ssg2530
(dp2817
g2569
g2758
ssg2549
(dp2818
g2486
g2742
sg2460
g2735
sg2653
g2780
sg2584
g2765
sg2711
g2807
sg2509
g2746
sg2672
g2787
sg2604
g2772
ssg2569
(dp2819
sg2584
(dp2820
g2672
g2784
sg2460
g2732
ssg2604
(dp2821
g2509
g2749
ssg2625
(dp2822
g2711
g2804
sg2692
g2797
ssg2653
(dp2823
g2584
g2768
ssg2672
(dp2824
g2711
g2801
sg2486
g2739
ssg2692
(dp2825
g2711
g2810
ssg2711
(dp2826
g2530
g2753
sssg385
g2730
sbsg53
g2482
sg57
g1067
sg65
g2482
sg66
g386
((lp2827
(lp2828
g389
ag386
((lp2829
(lp2830
g392
ag389
aa(lp2831
g394
ag395
aa(lp2832
g397
ag398
aa(lp2833
g400
ag401
aa(lp2834
g403
ag404
aa(lp2835
g406
ag407
aa(lp2836
g409
ag410
aa(lp2837
g412
ag413
aatp2838
Rp2839
aa(lp2840
g417
ag386
((lp2841
(lp2842
g392
ag417
aa(lp2843
g421
ag422
aa(lp2844
g424
ag425
aa(lp2845
g427
ag428
aa(lp2846
g430
ag431
aa(lp2847
g433
ag434
aa(lp2848
g436
ag437
aa(lp2849
g439
ag440
aa(lp2850
g442
ag443
aa(lp2851
g445
ag446
aa(lp2852
g448
ag449
aa(lp2853
g451
ag452
aa(lp2854
g454
ag455
aa(lp2855
g457
ag458
aa(lp2856
g460
ag461
aa(lp2857
g463
ag464
aa(lp2858
g466
ag467
aa(lp2859
g469
ag470
aa(lp2860
g472
ag473
aatp2861
Rp2862
aa(lp2863
g477
ag386
((lp2864
(lp2865
g392
ag477
aa(lp2866
g481
ag482
aatp2867
Rp2868
aatp2869
Rp2870
sg70
NsbS'outputspec.example_func'
p2871
tp2872
sg1974
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g18
g7
Ntp2880
Rp2881
(dp2882
g22
(dp2883
sg24
g5
(g1403
g7
Ntp2884
Rp2885
(dp2886
g1407
(lp2887
g176
asg29
g30
(g1413
tp2888
Rp2889
(dp2890
g98
I00
sg38
g39
sg1419
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2891
sg176
g37
sbsg1421
(dp2892
g169
Nssg1423
(lp2893
g169
asg1425
Nsbsg52
Nsg53
S'calc_friston'
p2894
sg55
(dp2895
sg57
S'fristons_parameter_model_0'
p2896
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2894
sg66
Nsg67
(lp2897
sg69
Nsg70
Nsb(dp2898
sg5
(g18
g7
Ntp2899
Rp2900
(dp2901
g22
(dp2902
sg24
g5
(g25
g7
Ntp2903
Rp2904
(dp2905
g29
g30
(g31
tp2906
Rp2907
(dp2908
g38
g39
sS'movement_file'
p2909
g37
sbsg49
(lp2910
g2909
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp2911
sg57
g2896
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp2912
sg69
Nsg70
Nsb(dp2913
sg5
(g18
g7
Ntp2914
Rp2915
(dp2916
g22
(dp2917
sg24
g5
(g25
g7
Ntp2918
Rp2919
(dp2920
g29
g30
(g31
tp2921
Rp2922
(dp2923
g38
g39
sg2909
g37
sbsg49
(lp2924
g2909
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp2925
sg57
g2896
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp2926
sg69
Nsg70
Nsb(dp2927
ssg328
(dp2928
sg330
(dp2929
g2881
(dp2930
g2915
(dp2931
g334
(lp2932
(g169
g2909
tp2933
asssg2900
(dp2934
g2881
(dp2935
g334
(lp2936
(g2909
g176
tp2937
asssg2915
(dp2938
ssg376
g2929
sg377
(dp2939
g2881
(dp2940
g2900
g2935
ssg2900
(dp2941
sg2915
(dp2942
g2881
g2931
sssg385
g2929
sbsg53
g2896
sg57
g1067
sg65
g2896
sg66
g386
((lp2943
(lp2944
g389
ag386
((lp2945
(lp2946
g392
ag389
aa(lp2947
g394
ag395
aa(lp2948
g397
ag398
aa(lp2949
g400
ag401
aa(lp2950
g403
ag404
aa(lp2951
g406
ag407
aa(lp2952
g409
ag410
aa(lp2953
g412
ag413
aatp2954
Rp2955
aa(lp2956
g417
ag386
((lp2957
(lp2958
g392
ag417
aa(lp2959
g421
ag422
aa(lp2960
g424
ag425
aa(lp2961
g427
ag428
aa(lp2962
g430
ag431
aa(lp2963
g433
ag434
aa(lp2964
g436
ag437
aa(lp2965
g439
ag440
aa(lp2966
g442
ag443
aa(lp2967
g445
ag446
aa(lp2968
g448
ag449
aa(lp2969
g451
ag452
aa(lp2970
g454
ag455
aa(lp2971
g457
ag458
aa(lp2972
g460
ag461
aa(lp2973
g463
ag464
aa(lp2974
g466
ag467
aa(lp2975
g469
ag470
aa(lp2976
g472
ag473
aatp2977
Rp2978
aa(lp2979
g477
ag386
((lp2980
(lp2981
g392
ag477
aa(lp2982
g481
ag482
aatp2983
Rp2984
aatp2985
Rp2986
sg70
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g18
g7
Ntp2997
Rp2998
(dp2999
g22
(dp3000
sg24
g5
(g1403
g7
Ntp3001
Rp3002
(dp3003
g1407
(lp3004
g1458
asg29
g30
(g1413
tp3005
Rp3006
(dp3007
g98
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3008
sg1458
g37
sg38
g39
sbsg1421
(dp3009
g1464
Nssg1423
(lp3010
g1464
asg1425
Nsbsg52
Nsg53
g1466
sg55
(dp3011
sg57
S'montage_anat_0'
p3012
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1466
sg66
Nsg67
(lp3013
sg69
Nsg70
Nsb(dp3014
sg5
(g18
g7
Ntp3015
Rp3016
(dp3017
g22
(dp3018
sg24
g5
(g1403
g7
Ntp3019
Rp3020
(dp3021
g1407
(lp3022
g1458
asg29
g30
(g1413
tp3023
Rp3024
(dp3025
g98
I00
sg1419
g3008
sg1458
g37
sg38
g39
sbsg1421
(dp3026
g1464
Nssg1423
(lp3027
g1464
asg1425
Nsbsg52
Nsg60
I00
sg55
(dp3028
sg62
Nsg59
Nsg69
Nsg53
g1484
sg57
g3012
sg61
I00
sg63
Nsg64
I00
sg65
g1484
sg66
Nsg67
(lp3029
sg70
Nsb(dp3030
sg5
(g18
g7
Ntp3031
Rp3032
(dp3033
g22
(dp3034
sg24
g5
(g1403
g7
Ntp3035
Rp3036
(dp3037
g1407
(lp3038
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp3039
Rp3040
(dp3041
g98
I00
sg1411
S't1_edge_on_mean_func_in_t1_a.png'
p3042
sg1409
g37
sg1412
g1418
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3043
sg1410
g37
sg38
g39
sbsg1421
(dp3044
g1411
Nssg1423
(lp3045
g1411
asg1425
Nsbsg52
Nsg53
g1426
sg55
(dp3046
sg57
g3012
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1426
sg66
Nsg67
(lp3047
sg69
Nsg70
Nsb(dp3048
sg5
(g18
g7
Ntp3049
Rp3050
(dp3051
g22
(dp3052
sg24
g5
(g25
g7
Ntp3053
Rp3054
(dp3055
g29
g30
(g31
tp3056
Rp3057
(dp3058
g38
g39
sg1512
g37
sg1513
g37
sg1514
g37
sg1515
g37
sbsg49
(lp3059
g1513
ag1514
ag1512
ag1515
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp3060
sg57
g3012
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp3061
sg69
Nsg70
Nsb(dp3062
sg5
(g18
g7
Ntp3063
Rp3064
(dp3065
g22
(dp3066
sg24
g5
(g1403
g7
Ntp3067
Rp3068
(dp3069
g1407
(lp3070
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp3071
Rp3072
(dp3073
g98
I00
sg1411
S't1_edge_on_mean_func_in_t1_s.png'
p3074
sg1409
g37
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3075
sg1410
g37
sg38
g39
sbsg1421
(dp3076
g1411
Nssg1423
(lp3077
g1411
asg1425
Nsbsg52
Nsg53
g1446
sg55
(dp3078
sg57
g3012
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1446
sg66
Nsg67
(lp3079
sg69
Nsg70
Nsb(dp3080
sg5
(g18
g7
Ntp3081
Rp3082
(dp3083
g22
(dp3084
sg24
g5
(g25
g7
Ntp3085
Rp3086
(dp3087
g29
g30
(g31
tp3088
Rp3089
(dp3090
g38
g39
sg1410
g37
sg1409
g37
sbsg49
(lp3091
g1410
ag1409
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp3092
sg57
g3012
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp3093
sg69
Nsg70
Nsb(dp3094
ssg328
(dp3095
sg330
(dp3096
g2998
(dp3097
g3050
(dp3098
g334
(lp3099
(g1464
g1512
tp3100
assg3032
(dp3101
g334
(lp3102
(g1464
g1410
tp3103
assg3064
(dp3104
g334
(lp3105
(g1464
g1410
tp3106
asssg3016
(dp3107
g3050
(dp3108
g334
(lp3109
(g1464
g1515
tp3110
assg3032
(dp3111
g334
(lp3112
(g1464
g1409
tp3113
assg3064
(dp3114
g334
(lp3115
(g1464
g1409
tp3116
asssg3032
(dp3117
g3050
(dp3118
g334
(lp3119
(g1411
g1513
tp3120
asssg3050
(dp3121
sg3064
(dp3122
g3050
(dp3123
g334
(lp3124
(g1411
g1514
tp3125
asssg3082
(dp3126
g2998
(dp3127
g334
(lp3128
(g1410
g1458
tp3129
assg3016
(dp3130
g334
(lp3131
(g1409
g1458
tp3132
assssg376
g3096
sg377
(dp3133
g2998
(dp3134
g3082
g3127
ssg3016
(dp3135
g3082
g3130
ssg3032
(dp3136
g2998
g3101
sg3016
g3111
ssg3050
(dp3137
g2998
g3098
sg3064
g3123
sg3016
g3108
sg3032
g3118
ssg3064
(dp3138
g2998
g3104
sg3016
g3114
ssg3082
(dp3139
ssg385
g3096
sbsg53
g3012
sg57
g1067
sg65
g3012
sg66
g386
((lp3140
(lp3141
g389
ag386
((lp3142
(lp3143
g392
ag389
aa(lp3144
g394
ag395
aa(lp3145
g397
ag398
aa(lp3146
g400
ag401
aa(lp3147
g403
ag404
aa(lp3148
g406
ag407
aa(lp3149
g409
ag410
aa(lp3150
g412
ag413
aatp3151
Rp3152
aa(lp3153
g417
ag386
((lp3154
(lp3155
g392
ag417
aa(lp3156
g421
ag422
aa(lp3157
g424
ag425
aa(lp3158
g427
ag428
aa(lp3159
g430
ag431
aa(lp3160
g433
ag434
aa(lp3161
g436
ag437
aa(lp3162
g439
ag440
aa(lp3163
g442
ag443
aa(lp3164
g445
ag446
aa(lp3165
g448
ag449
aa(lp3166
g451
ag452
aa(lp3167
g454
ag455
aa(lp3168
g457
ag458
aa(lp3169
g460
ag461
aa(lp3170
g463
ag464
aa(lp3171
g466
ag467
aa(lp3172
g469
ag470
aa(lp3173
g472
ag473
aatp3174
Rp3175
aa(lp3176
g477
ag386
((lp3177
(lp3178
g392
ag477
aa(lp3179
g481
ag482
aatp3180
Rp3181
aatp3182
Rp3183
sg70
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg1975
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g18
g7
Ntp3201
Rp3202
(dp3203
g22
(dp3204
sg24
g5
(g1403
g7
Ntp3205
Rp3206
(dp3207
g1407
(lp3208
S'overlay_csf'
p3209
aS'overlay_wm'
p3210
aS'overlay_gm'
p3211
ag1410
ag1411
asg29
g30
(g1413
tp3212
Rp3213
(dp3214
g98
I00
sg1411
S'montage_csf_gm_wm_a.png'
p3215
sg3211
g37
sg1419
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3216
sg3209
g37
sg3210
g37
sg1410
g37
sg38
g39
sbsg1421
(dp3217
g1411
Nssg1423
(lp3218
g1411
asg1425
Nsbsg52
Nsg53
g1426
sg55
(dp3219
sg57
S'montage_csf_gm_wm_0'
p3220
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1426
sg66
Nsg67
(lp3221
sg69
Nsg70
Nsb(dp3222
sg5
(g18
g7
Ntp3223
Rp3224
(dp3225
g22
(dp3226
sg24
g5
(g25
g7
Ntp3227
Rp3228
(dp3229
g29
g30
(g31
tp3230
Rp3231
(dp3232
g38
g39
sg3211
g37
sg1410
g37
sg3209
g37
sg3210
g37
sbsg49
(lp3233
g1410
ag3209
ag3210
ag3211
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp3234
sg57
g3220
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp3235
sg69
Nsg70
Nsb(dp3236
sg5
(g18
g7
Ntp3237
Rp3238
(dp3239
g22
(dp3240
sg24
g5
(g1403
g7
Ntp3241
Rp3242
(dp3243
g1407
(lp3244
g1458
asg29
g30
(g1413
tp3245
Rp3246
(dp3247
g98
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3248
sg1458
g37
sg38
g39
sbsg1421
(dp3249
g1464
Nssg1423
(lp3250
g1464
asg1425
Nsbsg52
Nsg60
I00
sg55
(dp3251
sg62
Nsg59
Nsg69
Nsg53
S'resample_o_wm'
p3252
sg57
g3220
sg61
I00
sg63
Nsg64
I00
sg65
g3252
sg66
Nsg67
(lp3253
sg70
Nsb(dp3254
sg5
(g18
g7
Ntp3255
Rp3256
(dp3257
g22
(dp3258
sg24
g5
(g1403
g7
Ntp3259
Rp3260
(dp3261
g1407
(lp3262
g1458
asg29
g30
(g1413
tp3263
Rp3264
(dp3265
g98
I00
sg1419
g3248
sg1458
g37
sg38
g39
sbsg1421
(dp3266
g1464
Nssg1423
(lp3267
g1464
asg1425
Nsbsg52
Nsg60
I00
sg55
(dp3268
sg62
Nsg59
Nsg69
Nsg53
S'resample_o_csf'
p3269
sg57
g3220
sg61
I00
sg63
Nsg64
I00
sg65
g3269
sg66
Nsg67
(lp3270
sg70
Nsb(dp3271
sg5
(g18
g7
Ntp3272
Rp3273
(dp3274
g22
(dp3275
sg24
g5
(g1403
g7
Ntp3276
Rp3277
(dp3278
g1407
(lp3279
g1458
asg29
g30
(g1413
tp3280
Rp3281
(dp3282
g98
I00
sg1419
g3248
sg1458
g37
sg38
g39
sbsg1421
(dp3283
g1464
Nssg1423
(lp3284
g1464
asg1425
Nsbsg52
Nsg60
I00
sg55
(dp3285
sg62
Nsg59
Nsg69
Nsg53
S'resample_o_gm'
p3286
sg57
g3220
sg61
I00
sg63
Nsg64
I00
sg65
g3286
sg66
Nsg67
(lp3287
sg70
Nsb(dp3288
sg5
(g18
g7
Ntp3289
Rp3290
(dp3291
g22
(dp3292
sg24
g5
(g1403
g7
Ntp3293
Rp3294
(dp3295
g1407
(lp3296
g3209
ag3210
ag3211
ag1410
ag1411
asg29
g30
(g1413
tp3297
Rp3298
(dp3299
g98
I00
sg1411
S'montage_csf_gm_wm_s.png'
p3300
sg3211
g37
sg1419
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3301
sg3209
g37
sg3210
g37
sg1410
g37
sg38
g39
sbsg1421
(dp3302
g1411
Nssg1423
(lp3303
g1411
asg1425
Nsbsg52
Nsg53
g1446
sg55
(dp3304
sg57
g3220
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1446
sg66
Nsg67
(lp3305
sg69
Nsg70
Nsb(dp3306
sg5
(g18
g7
Ntp3307
Rp3308
(dp3309
g22
(dp3310
sg24
g5
(g1403
g7
Ntp3311
Rp3312
(dp3313
g1407
(lp3314
g1458
asg29
g30
(g1413
tp3315
Rp3316
(dp3317
g98
I00
sg1419
g3248
sg1458
g37
sg38
g39
sbsg1421
(dp3318
g1464
Nssg1423
(lp3319
g1464
asg1425
Nsbsg52
Nsg53
g1466
sg55
(dp3320
sg57
g3220
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1466
sg66
Nsg67
(lp3321
sg69
Nsg70
Nsb(dp3322
sg5
(g18
g7
Ntp3323
Rp3324
(dp3325
g22
(dp3326
sg24
g5
(g25
g7
Ntp3327
Rp3328
(dp3329
g29
g30
(g31
tp3330
Rp3331
(dp3332
g38
g39
sS'resampled_overlay_csf'
p3333
g37
sS'resampled_overlay_gm'
p3334
g37
sg1513
g37
sg1514
g37
sg1512
g37
sS'resampled_overlay_wm'
p3335
g37
sbsg49
(lp3336
g1513
ag1514
ag1512
ag3333
ag3335
ag3334
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp3337
sg57
g3220
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp3338
sg69
Nsg70
Nsb(dp3339
ssg328
(dp3340
sg330
(dp3341
g3202
(dp3342
g3324
(dp3343
g334
(lp3344
(g1411
g1513
tp3345
asssg3224
(dp3346
g3308
(dp3347
g334
(lp3348
(g1410
g1458
tp3349
assg3238
(dp3350
g334
(lp3351
(g3210
g1458
tp3352
assg3256
(dp3353
g334
(lp3354
(g3209
g1458
tp3355
assg3273
(dp3356
g334
(lp3357
(g3211
g1458
tp3358
asssg3238
(dp3359
g3202
(dp3360
g334
(lp3361
(g1464
g3210
tp3362
assg3324
(dp3363
g334
(lp3364
(g1464
g3335
tp3365
assg3290
(dp3366
g334
(lp3367
(g1464
g3210
tp3368
asssg3256
(dp3369
g3202
(dp3370
g334
(lp3371
(g1464
g3209
tp3372
assg3324
(dp3373
g334
(lp3374
(g1464
g3333
tp3375
assg3290
(dp3376
g334
(lp3377
(g1464
g3209
tp3378
asssg3273
(dp3379
g3202
(dp3380
g334
(lp3381
(g1464
g3211
tp3382
assg3324
(dp3383
g334
(lp3384
(g1464
g3334
tp3385
assg3290
(dp3386
g334
(lp3387
(g1464
g3211
tp3388
asssg3290
(dp3389
g3324
(dp3390
g334
(lp3391
(g1411
g1514
tp3392
asssg3308
(dp3393
g3202
(dp3394
g334
(lp3395
(g1464
g1410
tp3396
assg3324
(dp3397
g334
(lp3398
(g1464
g1512
tp3399
assg3290
(dp3400
g334
(lp3401
(g1464
g1410
tp3402
asssg3324
(dp3403
ssg376
g3341
sg377
(dp3404
g3202
(dp3405
g3308
g3394
sg3238
g3360
sg3256
g3370
sg3273
g3380
ssg3224
(dp3406
sg3238
(dp3407
g3224
g3350
ssg3256
(dp3408
g3224
g3353
ssg3273
(dp3409
g3224
g3356
ssg3290
(dp3410
g3308
g3400
sg3238
g3366
sg3256
g3376
sg3273
g3386
ssg3308
(dp3411
g3224
g3347
ssg3324
(dp3412
g3202
g3343
sg3290
g3390
sg3256
g3373
sg3273
g3383
sg3238
g3363
sg3308
g3397
sssg385
g3341
sbsg53
g3220
sg57
g1067
sg65
g3220
sg66
g386
((lp3413
(lp3414
g389
ag386
((lp3415
(lp3416
g392
ag389
aa(lp3417
g394
ag395
aa(lp3418
g397
ag398
aa(lp3419
g400
ag401
aa(lp3420
g403
ag404
aa(lp3421
g406
ag407
aa(lp3422
g409
ag410
aa(lp3423
g412
ag413
aatp3424
Rp3425
aa(lp3426
g417
ag386
((lp3427
(lp3428
g392
ag417
aa(lp3429
g421
ag422
aa(lp3430
g424
ag425
aa(lp3431
g427
ag428
aa(lp3432
g430
ag431
aa(lp3433
g433
ag434
aa(lp3434
g436
ag437
aa(lp3435
g439
ag440
aa(lp3436
g442
ag443
aa(lp3437
g445
ag446
aa(lp3438
g448
ag449
aa(lp3439
g451
ag452
aa(lp3440
g454
ag455
aa(lp3441
g457
ag458
aa(lp3442
g460
ag461
aa(lp3443
g463
ag464
aa(lp3444
g466
ag467
aa(lp3445
g469
ag470
aa(lp3446
g472
ag473
aatp3447
Rp3448
aa(lp3449
g477
ag386
((lp3450
(lp3451
g392
ag477
aa(lp3452
g481
ag482
aatp3453
Rp3454
aatp3455
Rp3456
sg70
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g18
g7
Ntp3466
Rp3467
(dp3468
g22
(dp3469
sg24
g5
(g188
g7
Ntp3470
Rp3471
(dp3472
g29
g30
(g192
tp3473
Rp3474
(dp3475
g196
g37
sg38
g39
sg197
g37
sg88
g37
sg198
g37
sg199
g37
sg200
g37
sg201
g37
sg203
g37
sg204
g37
sg205
g37
sg206
g37
sg207
g37
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg176
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg98
I00
sg217
g37
sg218
g37
sg100
g37
sg219
g37
sg220
g37
sg103
g104
sg221
g37
sg222
g37
sg223
g37
sg224
g37
sg225
g37
sg169
g37
sg226
g37
sg227
g37
sg228
g37
sg229
I6
sg230
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg110
g5
(g111
g112
(dp3476
g114
g115
stp3477
Rp3478
(dp3479
g119
S'environ_items'
p3480
sg53
g110
sbsg240
g37
sg241
g37
sg121
g115
sg242
g37
sg243
g37
sg244
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'bbreg_func_to_anat'
p3481
sg55
(dp3482
sg57
S'func_to_anat_bbreg_0'
p3483
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g3481
sg66
Nsg67
(lp3484
sg69
Nsg70
Nsb(dp3485
sg5
(g18
g7
Ntp3486
Rp3487
(dp3488
g22
(dp3489
sg24
g5
(g25
g7
Ntp3490
Rp3491
(dp3492
g29
g30
(g31
tp3493
Rp3494
(dp3495
g38
g39
sS'linear_reg_matrix'
p3496
g37
sS'bbr_schedule'
p3497
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3498
sS'anat_wm_segmentation'
p3499
g37
sS'anat_skull'
p3500
g37
sg2578
g37
sbsg49
(lp3501
g2578
ag3500
ag3496
ag3499
ag3497
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp3502
sg57
g3483
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp3503
sg69
Nsg70
Nsb(dp3504
sg5
(g18
g7
Ntp3505
Rp3506
(dp3507
g22
(dp3508
sg24
g5
(g25
g7
Ntp3509
Rp3510
(dp3511
g29
g30
(g31
tp3512
Rp3513
(dp3514
S'func_to_anat_linear_xfm'
p3515
g37
sg38
g39
sS'anat_func'
p3516
g37
sbsg49
(lp3517
g3515
ag3516
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp3518
sg57
g3483
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp3519
sg69
Nsg70
Nsb(dp3520
sg5
(g18
g7
Ntp3521
Rp3522
(dp3523
g22
(dp3524
sg24
g5
(g272
g7
Ntp3525
Rp3526
(dp3527
g29
g30
(g276
tp3528
Rp3529
(dp3530
g98
I00
sg38
g39
sg167
S'-thr 0.5 -bin'
p3531
sg280
g37
sg169
g37
sg100
g37
sg281
g37
sg103
g104
sg110
g5
(g111
g112
(dp3532
g114
g115
stp3533
Rp3534
(dp3535
g119
S'environ_items'
p3536
sg53
g110
sbsg176
g37
sg121
g115
sg287
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'wm_bb_mask'
p3537
sg55
(dp3538
sg57
g3483
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g3537
sg66
Nsg67
(lp3539
sg69
Nsg70
Nsb(dp3540
ssg328
(dp3541
sg330
(dp3542
g3467
(dp3543
g3506
(dp3544
g334
(lp3545
(g230
g3515
tp3546
a(g169
g3516
tp3547
asssg3487
(dp3548
g3522
(dp3549
g334
(lp3550
(g3499
g176
tp3551
assg3467
(dp3552
g334
(lp3553
(g3497
g218
tp3554
a(g2578
g176
tp3555
a(g3500
g198
tp3556
a(g3496
g197
tp3557
asssg3506
(dp3558
sg3522
(dp3559
g3467
(dp3560
g334
(lp3561
((g169
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3562
(ttp3563
g100
tp3564
assssg376
g3542
sg377
(dp3565
g3467
(dp3566
g3487
g3552
sg3522
g3560
ssg3487
(dp3567
sg3506
(dp3568
g3467
g3544
ssg3522
(dp3569
g3487
g3549
sssg385
g3542
sbsg53
g3483
sg57
g1067
sg65
g3483
sg66
g386
((lp3570
(lp3571
g389
ag386
((lp3572
(lp3573
g392
ag389
aa(lp3574
g394
ag395
aa(lp3575
g397
ag398
aa(lp3576
g400
ag401
aa(lp3577
g403
ag404
aa(lp3578
g406
ag407
aa(lp3579
g409
ag410
aa(lp3580
g412
ag413
aatp3581
Rp3582
aa(lp3583
g417
ag386
((lp3584
(lp3585
g392
ag417
aa(lp3586
g421
ag422
aa(lp3587
g424
ag425
aa(lp3588
g427
ag428
aa(lp3589
g430
ag431
aa(lp3590
g433
ag434
aa(lp3591
g436
ag437
aa(lp3592
g439
ag440
aa(lp3593
g442
ag443
aa(lp3594
g445
ag446
aa(lp3595
g448
ag449
aa(lp3596
g451
ag452
aa(lp3597
g454
ag455
aa(lp3598
g457
ag458
aa(lp3599
g460
ag461
aa(lp3600
g463
ag464
aa(lp3601
g466
ag467
aa(lp3602
g469
ag470
aa(lp3603
g472
ag473
aatp3604
Rp3605
aa(lp3606
g477
ag386
((lp3607
(lp3608
g392
ag477
aa(lp3609
g481
ag482
aatp3610
Rp3611
aatp3612
Rp3613
sg70
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g18
g7
Ntp3620
Rp3621
(dp3622
g22
(dp3623
sg24
g5
(g1403
g7
Ntp3624
Rp3625
(dp3626
g1407
(lp3627
S'measure_file'
p3628
asg29
g30
(g1413
tp3629
Rp3630
(dp3631
g98
I00
sg38
g39
sg1419
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g37
sbsg1421
(dp3633
S'snr_storefl'
p3634
Nssg1423
(lp3635
g3634
asg1425
Nsbsg52
Nsg53
S'snr_val0'
p3636
sg55
(dp3637
sg57
g1067
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g3636
sg66
Nsg67
(lp3638
sg69
Nsg70
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g18
g7
Ntp3648
Rp3649
(dp3650
g22
(dp3651
sg24
g5
(g1403
g7
Ntp3652
Rp3653
(dp3654
g1407
(lp3655
g3628
ag1863
asg29
g30
(g1413
tp3656
Rp3657
(dp3658
g98
I00
sg38
g39
sg1419
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g37
sg1863
S'snr'
p3660
sbsg1421
(dp3661
g1870
Nssg1423
(lp3662
g1870
asg1425
Nsbsg52
Nsg60
I00
sg55
(dp3663
sg62
Nsg59
Nsg69
Nsg53
S'hist_snr_0'
p3664
sg57
g1067
sg61
I00
sg63
Nsg64
I00
sg65
g3664
sg66
Nsg67
(lp3665
sg70
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g18
g7
Ntp3678
Rp3679
(dp3680
g22
(dp3681
sg24
g5
(g1403
g7
Ntp3682
Rp3683
(dp3684
g1407
(lp3685
S'scan'
p3686
aS'rest_dict'
p3687
asg29
g30
(g1413
tp3688
Rp3689
(dp3690
g98
I00
sg3687
(dp3691
S'rest_1_rest'
p3692
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-17/KKI2009-17-fMRI.nii'
p3693
ssg1419
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3694
sg38
g39
sg3686
g37
sbsg1421
(dp3695
g1913
Nssg1423
(lp3696
g1913
asg1425
Nsbsg52
Nsg53
S'selectrest'
p3697
sg55
(dp3698
sg57
S'func_gather_0'
p3699
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g3697
sg66
Nsg67
(lp3700
sg69
Nsg70
Nsb(dp3701
sg5
(g18
g7
Ntp3702
Rp3703
(dp3704
g22
(dp3705
sg24
g5
(g25
g7
Ntp3706
Rp3707
(dp3708
g29
g30
(g31
tp3709
Rp3710
(dp3711
g38
g39
sg3686
g37
sS'subject'
p3712
S'12_2005504391'
p3713
sbsg49
(lp3714
g3712
ag3686
asg51
I01
sbsg52
Nsg53
S'inputnode'
p3715
sg55
(dp3716
sg57
g3699
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
(lp3717
(g3686
(lp3718
g3692
atp3719
asg64
I00
sg65
g3715
sg66
Nsg67
(lp3720
sg69
Nsg70
Nsb(dp3721
sg5
(g18
g7
Ntp3722
Rp3723
(dp3724
g22
(dp3725
sg24
g5
(g25
g7
Ntp3726
Rp3727
(dp3728
g29
g30
(g31
tp3729
Rp3730
(dp3731
g38
g39
sg3686
g37
sg1913
g37
sg3712
g37
sbsg49
(lp3732
g3712
ag1913
ag3686
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp3733
sg57
g3699
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp3734
sg69
Nsg70
Nsb(dp3735
ssg328
(dp3736
sg330
(dp3737
g3679
(dp3738
g3723
(dp3739
g334
(lp3740
(g1913
g1913
tp3741
asssg3703
(dp3742
g3679
(dp3743
g334
(lp3744
(g3686
g3686
tp3745
assg3723
(dp3746
g334
(lp3747
(g3712
g3712
tp3748
a(g3686
g3686
tp3749
asssg3723
(dp3750
ssg376
g3737
sg377
(dp3751
g3679
(dp3752
g3703
g3743
ssg3703
(dp3753
sg3723
(dp3754
g3679
g3739
sg3703
g3746
sssg385
g3737
sbsg53
g3699
sg57
g1067
sg65
g3699
sg66
g386
((lp3755
(lp3756
g389
ag386
((lp3757
(lp3758
g392
ag389
aa(lp3759
g394
ag395
aa(lp3760
g397
ag398
aa(lp3761
g400
ag401
aa(lp3762
g403
ag404
aa(lp3763
g406
ag407
aa(lp3764
g409
ag410
aa(lp3765
g412
ag413
aatp3766
Rp3767
aa(lp3768
g417
ag386
((lp3769
(lp3770
g392
ag417
aa(lp3771
g421
ag422
aa(lp3772
g424
ag425
aa(lp3773
g427
ag428
aa(lp3774
g430
ag431
aa(lp3775
g433
ag434
aa(lp3776
g436
ag437
aa(lp3777
g439
ag440
aa(lp3778
g442
ag443
aa(lp3779
g445
ag446
aa(lp3780
g448
ag449
aa(lp3781
g451
ag452
aa(lp3782
g454
ag455
aa(lp3783
g457
ag458
aa(lp3784
g460
ag461
aa(lp3785
g463
ag464
aa(lp3786
g466
ag467
aa(lp3787
g469
ag470
aa(lp3788
g472
ag473
aatp3789
Rp3790
aa(lp3791
g477
ag386
((lp3792
(lp3793
g392
ag477
aa(lp3794
g481
ag482
aatp3795
Rp3796
aatp3797
Rp3798
sg70
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g18
g7
Ntp3808
Rp3809
(dp3810
g22
(dp3811
sg24
g5
(g1126
g7
Ntp3812
Rp3813
(dp3814
g29
g30
(g1130
tp3815
Rp3816
(dp3817
g98
I00
sg1134
g37
sg176
g37
sg1135
g37
sg169
g37
sg227
g37
sg100
g37
sg201
g37
sg1136
g37
sg1137
g1820
sg103
g104
sg110
g5
(g111
g112
(dp3818
g114
g115
stp3819
Rp3820
(dp3821
g119
S'environ_items'
p3822
sg53
g110
sbsg1143
g37
sg1144
g37
sg121
g115
sg1145
g37
sg1146
g37
sg38
g39
sg1147
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'func_mni_fsl_warp_0'
p3823
sg55
(dp3824
sg57
g1067
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g3823
sg66
Nsg67
(lp3825
sg69
Nsg70
Nsbg169
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g18
g7
Ntp3835
Rp3836
(dp3837
g22
(dp3838
sg24
g5
(g25
g7
Ntp3839
Rp3840
(dp3841
g29
g30
(g31
tp3842
Rp3843
(dp3844
g38
g39
sg121
(lp3845
I01
aI01
asg1913
g37
sbsg49
(lp3846
g1913
ag121
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp3847
sg57
S'voxel_timeseries_0'
p3848
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp3849
sg69
Nsg70
Nsb(dp3850
sg5
(g18
g7
Ntp3851
Rp3852
(dp3853
g22
(dp3854
sg24
g5
(g1403
g7
Ntp3855
Rp3856
(dp3857
g1407
(lp3858
S'data_file'
p3859
aS'template'
p3860
ag121
asg29
g30
(g1413
tp3861
Rp3862
(dp3863
g98
I00
sg38
g39
sg3859
g37
sg1419
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3864
sg3860
g37
sg121
g37
sbsg1421
(dp3865
g169
Nssg1423
(lp3866
g169
asg1425
Nsbsg52
Nsg53
S'timeseries_voxel'
p3867
sg55
(dp3868
sg57
g3848
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g3867
sg66
Nsg67
(lp3869
sg69
Nsg70
Nsb(dp3870
sg5
(g18
g7
Ntp3871
Rp3872
(dp3873
g22
(dp3874
sg24
g5
(g25
g7
Ntp3875
Rp3876
(dp3877
g29
g30
(g31
tp3878
Rp3879
(dp3880
g38
g39
sS'mask_outputs'
p3881
g37
sbsg49
(lp3882
g3881
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp3883
sg57
g3848
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp3884
sg69
Nsg70
Nsb(dp3885
sg5
(g18
g7
Ntp3886
Rp3887
(dp3888
g22
(dp3889
sg24
g5
(g25
g7
Ntp3890
Rp3891
(dp3892
g29
g30
(g31
tp3893
Rp3894
(dp3895
g38
g39
sg1914
g37
sbsg49
(lp3896
g1914
asg51
I01
sbsg52
Nsg53
S'input_mask'
p3897
sg55
(dp3898
sg57
g3848
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g3897
sg66
Nsg67
(lp3899
sg69
Nsg70
Nsb(dp3900
ssg328
(dp3901
sg330
(dp3902
g3836
(dp3903
g3852
(dp3904
g334
(lp3905
(g1913
g3859
tp3906
a(g121
g121
tp3907
asssg3852
(dp3908
g3872
(dp3909
g334
(lp3910
(g169
g3881
tp3911
asssg3872
(dp3912
sg3887
(dp3913
g3852
(dp3914
g334
(lp3915
(g1914
g3860
tp3916
assssg376
g3902
sg377
(dp3917
g3836
(dp3918
sg3852
(dp3919
g3836
g3904
sg3887
g3914
ssg3872
(dp3920
g3852
g3909
ssg3887
(dp3921
ssg385
g3902
sbsg53
g3848
sg57
g1067
sg65
g3848
sg66
g386
((lp3922
(lp3923
g389
ag386
((lp3924
(lp3925
g392
ag389
aa(lp3926
g394
ag395
aa(lp3927
g397
ag398
aa(lp3928
g400
ag401
aa(lp3929
g403
ag404
aa(lp3930
g406
ag407
aa(lp3931
g409
ag410
aa(lp3932
g412
ag413
aatp3933
Rp3934
aa(lp3935
g417
ag386
((lp3936
(lp3937
g392
ag417
aa(lp3938
g421
ag422
aa(lp3939
g424
ag425
aa(lp3940
g427
ag428
aa(lp3941
g430
ag431
aa(lp3942
g433
ag434
aa(lp3943
g436
ag437
aa(lp3944
g439
ag440
aa(lp3945
g442
ag443
aa(lp3946
g445
ag446
aa(lp3947
g448
ag449
aa(lp3948
g451
ag452
aa(lp3949
g454
ag455
aa(lp3950
g457
ag458
aa(lp3951
g460
ag461
aa(lp3952
g463
ag464
aa(lp3953
g466
ag467
aa(lp3954
g469
ag470
aa(lp3955
g472
ag473
aatp3956
Rp3957
aa(lp3958
g477
ag386
((lp3959
(lp3960
g392
ag477
aa(lp3961
g481
ag482
aatp3962
Rp3963
aatp3964
Rp3965
sg70
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g18
g7
Ntp3986
Rp3987
(dp3988
g22
(dp3989
sg24
g5
(g1403
g7
Ntp3990
Rp3991
(dp3992
g1407
(lp3993
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp3994
Rp3995
(dp3996
g98
I00
sg1411
S'mni_anat_a.png'
p3997
sg1409
g37
sg1412
g1418
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3998
sg1410
g37
sg38
g39
sbsg1421
(dp3999
g1411
Nssg1423
(lp4000
g1411
asg1425
Nsbsg52
Nsg53
g1426
sg55
(dp4001
sg57
S'montage_mni_anat_0'
p4002
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1426
sg66
Nsg67
(lp4003
sg69
Nsg70
Nsb(dp4004
sg5
(g18
g7
Ntp4005
Rp4006
(dp4007
g22
(dp4008
sg24
g5
(g1403
g7
Ntp4009
Rp4010
(dp4011
g1407
(lp4012
g1458
asg29
g30
(g1413
tp4013
Rp4014
(dp4015
g98
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4016
sg1458
g37
sg38
g39
sbsg1421
(dp4017
g1464
Nssg1423
(lp4018
g1464
asg1425
Nsbsg52
Nsg53
g1466
sg55
(dp4019
sg57
g4002
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1466
sg66
Nsg67
(lp4020
sg69
Nsg70
Nsb(dp4021
sg5
(g18
g7
Ntp4022
Rp4023
(dp4024
g22
(dp4025
sg24
g5
(g1403
g7
Ntp4026
Rp4027
(dp4028
g1407
(lp4029
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp4030
Rp4031
(dp4032
g98
I00
sg1411
S'mni_anat_s.png'
p4033
sg1409
g37
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4034
sg1410
g37
sg38
g39
sbsg1421
(dp4035
g1411
Nssg1423
(lp4036
g1411
asg1425
Nsbsg52
Nsg53
g1446
sg55
(dp4037
sg57
g4002
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1446
sg66
Nsg67
(lp4038
sg69
Nsg70
Nsb(dp4039
sg5
(g18
g7
Ntp4040
Rp4041
(dp4042
g22
(dp4043
sg24
g5
(g1403
g7
Ntp4044
Rp4045
(dp4046
g1407
(lp4047
g1458
asg29
g30
(g1413
tp4048
Rp4049
(dp4050
g98
I00
sg1419
g4016
sg1458
g37
sg38
g39
sbsg1421
(dp4051
g1464
Nssg1423
(lp4052
g1464
asg1425
Nsbsg52
Nsg60
I00
sg55
(dp4053
sg62
Nsg59
Nsg69
Nsg53
g1484
sg57
g4002
sg61
I00
sg63
Nsg64
I00
sg65
g1484
sg66
Nsg67
(lp4054
sg70
Nsb(dp4055
sg5
(g18
g7
Ntp4056
Rp4057
(dp4058
g22
(dp4059
sg24
g5
(g25
g7
Ntp4060
Rp4061
(dp4062
g29
g30
(g31
tp4063
Rp4064
(dp4065
g38
g39
sg1512
g37
sg1513
g37
sg1514
g37
sg1515
g37
sbsg49
(lp4066
g1513
ag1514
ag1512
ag1515
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp4067
sg57
g4002
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp4068
sg69
Nsg70
Nsb(dp4069
sg5
(g18
g7
Ntp4070
Rp4071
(dp4072
g22
(dp4073
sg24
g5
(g25
g7
Ntp4074
Rp4075
(dp4076
g29
g30
(g31
tp4077
Rp4078
(dp4079
g38
g39
sg1410
g37
sg1409
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p4080
sbsg49
(lp4081
g1410
ag1409
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp4082
sg57
g4002
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp4083
sg69
Nsg70
Nsb(dp4084
ssg328
(dp4085
sg330
(dp4086
g3987
(dp4087
g4057
(dp4088
g334
(lp4089
(g1411
g1513
tp4090
asssg4006
(dp4091
g3987
(dp4092
g334
(lp4093
(g1464
g1410
tp4094
assg4057
(dp4095
g334
(lp4096
(g1464
g1512
tp4097
assg4023
(dp4098
g334
(lp4099
(g1464
g1410
tp4100
asssg4023
(dp4101
g4057
(dp4102
g334
(lp4103
(g1411
g1514
tp4104
asssg4041
(dp4105
g3987
(dp4106
g334
(lp4107
(g1464
g1409
tp4108
assg4057
(dp4109
g334
(lp4110
(g1464
g1515
tp4111
assg4023
(dp4112
g334
(lp4113
(g1464
g1409
tp4114
asssg4057
(dp4115
sg4071
(dp4116
g4041
(dp4117
g334
(lp4118
(g1409
g1458
tp4119
assg4006
(dp4120
g334
(lp4121
(g1410
g1458
tp4122
assssg376
g4086
sg377
(dp4123
g3987
(dp4124
g4041
g4106
sg4006
g4092
ssg4006
(dp4125
g4071
g4120
ssg4023
(dp4126
g4041
g4112
sg4006
g4098
ssg4041
(dp4127
g4071
g4117
ssg4057
(dp4128
g4041
g4109
sg4006
g4095
sg4023
g4102
sg3987
g4088
ssg4071
(dp4129
ssg385
g4086
sbsg53
g4002
sg57
g1067
sg65
g4002
sg66
g386
((lp4130
(lp4131
g389
ag386
((lp4132
(lp4133
g392
ag389
aa(lp4134
g394
ag395
aa(lp4135
g397
ag398
aa(lp4136
g400
ag401
aa(lp4137
g403
ag404
aa(lp4138
g406
ag407
aa(lp4139
g409
ag410
aa(lp4140
g412
ag413
aatp4141
Rp4142
aa(lp4143
g417
ag386
((lp4144
(lp4145
g392
ag417
aa(lp4146
g421
ag422
aa(lp4147
g424
ag425
aa(lp4148
g427
ag428
aa(lp4149
g430
ag431
aa(lp4150
g433
ag434
aa(lp4151
g436
ag437
aa(lp4152
g439
ag440
aa(lp4153
g442
ag443
aa(lp4154
g445
ag446
aa(lp4155
g448
ag449
aa(lp4156
g451
ag452
aa(lp4157
g454
ag455
aa(lp4158
g457
ag458
aa(lp4159
g460
ag461
aa(lp4160
g463
ag464
aa(lp4161
g466
ag467
aa(lp4162
g469
ag470
aa(lp4163
g472
ag473
aatp4164
Rp4165
aa(lp4166
g477
ag386
((lp4167
(lp4168
g392
ag477
aa(lp4169
g481
ag482
aatp4170
Rp4171
aatp4172
Rp4173
sg70
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg2016
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g18
g7
Ntp4188
Rp4189
(dp4190
g22
(dp4191
sg24
g5
(g1126
g7
Ntp4192
Rp4193
(dp4194
g29
g30
(g1130
tp4195
Rp4196
(dp4197
g98
I00
sg1134
g37
sg176
g37
sg1135
g37
sg169
g37
sg227
g37
sg100
g37
sg201
S'nn'
p4198
sg1136
g37
sg1137
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg103
g104
sg110
g5
(g111
g112
(dp4200
g114
g115
stp4201
Rp4202
(dp4203
g119
S'environ_items'
p4204
sg53
g110
sbsg1143
g37
sg1144
g37
sg121
g115
sg1145
g37
sg1146
g37
sg38
g39
sg1147
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'func_mni_fsl_warp_mask_0'
p4205
sg55
(dp4206
sg57
g1067
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4205
sg66
Nsg67
(lp4207
sg69
Nsg70
Nsbg169
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g18
g7
Ntp4217
Rp4218
(dp4219
g22
(dp4220
sg24
g5
(g1403
g7
Ntp4221
Rp4222
(dp4223
g1407
(lp4224
g1458
asg29
g30
(g1413
tp4225
Rp4226
(dp4227
g98
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4228
sg1458
g37
sg38
g39
sbsg1421
(dp4229
g1464
Nssg1423
(lp4230
g1464
asg1425
Nsbsg52
Nsg53
g1466
sg55
(dp4231
sg57
S'montage_skull_0'
p4232
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1466
sg66
Nsg67
(lp4233
sg69
Nsg70
Nsb(dp4234
sg5
(g18
g7
Ntp4235
Rp4236
(dp4237
g22
(dp4238
sg24
g5
(g1403
g7
Ntp4239
Rp4240
(dp4241
g1407
(lp4242
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp4243
Rp4244
(dp4245
g98
I00
sg1411
S'skull_vis_s.png'
p4246
sg1409
g37
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4247
sg1410
g37
sg38
g39
sbsg1421
(dp4248
g1411
Nssg1423
(lp4249
g1411
asg1425
Nsbsg52
Nsg53
g1446
sg55
(dp4250
sg57
g4232
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1446
sg66
Nsg67
(lp4251
sg69
Nsg70
Nsb(dp4252
sg5
(g18
g7
Ntp4253
Rp4254
(dp4255
g22
(dp4256
sg24
g5
(g1403
g7
Ntp4257
Rp4258
(dp4259
g1407
(lp4260
g1458
asg29
g30
(g1413
tp4261
Rp4262
(dp4263
g98
I00
sg1419
g4228
sg1458
g37
sg38
g39
sbsg1421
(dp4264
g1464
Nssg1423
(lp4265
g1464
asg1425
Nsbsg52
Nsg60
I00
sg55
(dp4266
sg62
Nsg59
Nsg69
Nsg53
g1484
sg57
g4232
sg61
I00
sg63
Nsg64
I00
sg65
g1484
sg66
Nsg67
(lp4267
sg70
Nsb(dp4268
sg5
(g18
g7
Ntp4269
Rp4270
(dp4271
g22
(dp4272
sg24
g5
(g25
g7
Ntp4273
Rp4274
(dp4275
g29
g30
(g31
tp4276
Rp4277
(dp4278
g38
g39
sg1512
g37
sg1513
g37
sg1514
g37
sg1515
g37
sbsg49
(lp4279
g1513
ag1514
ag1512
ag1515
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp4280
sg57
g4232
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp4281
sg69
Nsg70
Nsb(dp4282
sg5
(g18
g7
Ntp4283
Rp4284
(dp4285
g22
(dp4286
sg24
g5
(g25
g7
Ntp4287
Rp4288
(dp4289
g29
g30
(g31
tp4290
Rp4291
(dp4292
g38
g39
sg1410
g37
sg1409
g37
sbsg49
(lp4293
g1410
ag1409
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp4294
sg57
g4232
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp4295
sg69
Nsg70
Nsb(dp4296
sg5
(g18
g7
Ntp4297
Rp4298
(dp4299
g22
(dp4300
sg24
g5
(g1403
g7
Ntp4301
Rp4302
(dp4303
g1407
(lp4304
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp4305
Rp4306
(dp4307
g98
I00
sg1411
S'skull_vis_a.png'
p4308
sg1409
g37
sg1412
g1418
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4309
sg1410
g37
sg38
g39
sbsg1421
(dp4310
g1411
Nssg1423
(lp4311
g1411
asg1425
Nsbsg52
Nsg53
g1426
sg55
(dp4312
sg57
g4232
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1426
sg66
Nsg67
(lp4313
sg69
Nsg70
Nsb(dp4314
ssg328
(dp4315
sg330
(dp4316
g4218
(dp4317
g4236
(dp4318
g334
(lp4319
(g1464
g1410
tp4320
assg4298
(dp4321
g334
(lp4322
(g1464
g1410
tp4323
assg4270
(dp4324
g334
(lp4325
(g1464
g1512
tp4326
asssg4236
(dp4327
g4270
(dp4328
g334
(lp4329
(g1411
g1514
tp4330
asssg4254
(dp4331
g4236
(dp4332
g334
(lp4333
(g1464
g1409
tp4334
assg4298
(dp4335
g334
(lp4336
(g1464
g1409
tp4337
assg4270
(dp4338
g334
(lp4339
(g1464
g1515
tp4340
asssg4270
(dp4341
sg4284
(dp4342
g4218
(dp4343
g334
(lp4344
(g1410
g1458
tp4345
assg4254
(dp4346
g334
(lp4347
(g1409
g1458
tp4348
asssg4298
(dp4349
g4270
(dp4350
g334
(lp4351
(g1411
g1513
tp4352
assssg376
g4316
sg377
(dp4353
g4218
(dp4354
g4284
g4343
ssg4236
(dp4355
g4218
g4318
sg4254
g4332
ssg4254
(dp4356
g4284
g4346
ssg4270
(dp4357
g4218
g4324
sg4236
g4328
sg4298
g4350
sg4254
g4338
ssg4284
(dp4358
sg4298
(dp4359
g4218
g4321
sg4254
g4335
sssg385
g4316
sbsg53
g4232
sg57
g1067
sg65
g4232
sg66
g386
((lp4360
(lp4361
g389
ag386
((lp4362
(lp4363
g392
ag389
aa(lp4364
g394
ag395
aa(lp4365
g397
ag398
aa(lp4366
g400
ag401
aa(lp4367
g403
ag404
aa(lp4368
g406
ag407
aa(lp4369
g409
ag410
aa(lp4370
g412
ag413
aatp4371
Rp4372
aa(lp4373
g417
ag386
((lp4374
(lp4375
g392
ag417
aa(lp4376
g421
ag422
aa(lp4377
g424
ag425
aa(lp4378
g427
ag428
aa(lp4379
g430
ag431
aa(lp4380
g433
ag434
aa(lp4381
g436
ag437
aa(lp4382
g439
ag440
aa(lp4383
g442
ag443
aa(lp4384
g445
ag446
aa(lp4385
g448
ag449
aa(lp4386
g451
ag452
aa(lp4387
g454
ag455
aa(lp4388
g457
ag458
aa(lp4389
g460
ag461
aa(lp4390
g463
ag464
aa(lp4391
g466
ag467
aa(lp4392
g469
ag470
aa(lp4393
g472
ag473
aatp4394
Rp4395
aa(lp4396
g477
ag386
((lp4397
(lp4398
g392
ag477
aa(lp4399
g481
ag482
aatp4400
Rp4401
aatp4402
Rp4403
sg70
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2560
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2561
(g5
(g18
g7
Ntp4413
Rp4414
(dp4415
g22
(dp4416
sg24
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g29
g30
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g98
I00
sg38
g39
sS'tpattern'
p4425
g37
sg169
g37
sS'tr'
p4426
g37
sg100
g37
sg201
g37
sg2254
g2255
sS'tzero'
p4427
g37
sS'ignore'
p4428
g37
sS'rltplus'
p4429
g37
sg103
g104
sS'tslice'
p4430
g37
sg176
g37
sS'rlt'
p4431
g37
sg110
g5
(g111
g112
(dp4432
tp4433
Rp4434
(dp4435
g119
S'environ_items'
p4436
sg53
g110
sbsbsg2266
g2255
sg124
Nsg125
g104
sbsg52
Nsg53
S'func_slice_timing_correction_0'
p4437
sg55
(dp4438
sg57
g1067
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4437
sg66
Nsg67
(lp4439
sg69
Nsg70
Nsbg169
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g18
g7
Ntp4449
Rp4450
(dp4451
g22
(dp4452
sg24
g5
(g25
g7
Ntp4453
Rp4454
(dp4455
g29
g30
(g31
tp4456
Rp4457
(dp4458
g38
g39
sg121
(lp4459
I01
aI01
asg1913
g37
sbsg49
(lp4460
g1913
ag121
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp4461
sg57
S'roi_timeseries_0'
p4462
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp4463
sg69
Nsg70
Nsb(dp4464
sg5
(g18
g7
Ntp4465
Rp4466
(dp4467
g22
(dp4468
sg24
g5
(g25
g7
Ntp4469
Rp4470
(dp4471
g29
g30
(g31
tp4472
Rp4473
(dp4474
g38
g39
sS'roi_outputs'
p4475
g37
sbsg49
(lp4476
g4475
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp4477
sg57
g4462
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp4478
sg69
Nsg70
Nsb(dp4479
sg5
(g18
g7
Ntp4480
Rp4481
(dp4482
g22
(dp4483
sg24
g5
(g25
g7
Ntp4484
Rp4485
(dp4486
g29
g30
(g31
tp4487
Rp4488
(dp4489
g38
g39
sS'roi'
p4490
g37
sbsg49
(lp4491
g4490
asg51
I01
sbsg52
Nsg53
S'input_roi'
p4492
sg55
(dp4493
sg57
g4462
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4492
sg66
Nsg67
(lp4494
sg69
Nsg70
Nsb(dp4495
sg5
(g18
g7
Ntp4496
Rp4497
(dp4498
g22
(dp4499
sg24
g5
(g1403
g7
Ntp4500
Rp4501
(dp4502
g1407
(lp4503
g3859
ag3860
ag121
asg29
g30
(g1413
tp4504
Rp4505
(dp4506
g98
I00
sg38
g39
sg3859
g37
sg1419
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4507
sg3860
g37
sg121
g37
sbsg1421
(dp4508
g169
Nssg1423
(lp4509
g169
asg1425
Nsbsg52
Nsg53
S'timeseries_roi'
p4510
sg55
(dp4511
sg57
g4462
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4510
sg66
Nsg67
(lp4512
sg69
Nsg70
Nsb(dp4513
ssg328
(dp4514
sg330
(dp4515
g4450
(dp4516
g4497
(dp4517
g334
(lp4518
(g1913
g3859
tp4519
a(g121
g121
tp4520
asssg4466
(dp4521
sg4481
(dp4522
g4497
(dp4523
g334
(lp4524
(g4490
g3860
tp4525
asssg4497
(dp4526
g4466
(dp4527
g334
(lp4528
(g169
g4475
tp4529
assssg376
g4515
sg377
(dp4530
g4450
(dp4531
sg4466
(dp4532
g4497
g4527
ssg4481
(dp4533
sg4497
(dp4534
g4450
g4517
sg4481
g4523
sssg385
g4515
sbsg53
g4462
sg57
g1067
sg65
g4462
sg66
g386
((lp4535
(lp4536
g389
ag386
((lp4537
(lp4538
g392
ag389
aa(lp4539
g394
ag395
aa(lp4540
g397
ag398
aa(lp4541
g400
ag401
aa(lp4542
g403
ag404
aa(lp4543
g406
ag407
aa(lp4544
g409
ag410
aa(lp4545
g412
ag413
aatp4546
Rp4547
aa(lp4548
g417
ag386
((lp4549
(lp4550
g392
ag417
aa(lp4551
g421
ag422
aa(lp4552
g424
ag425
aa(lp4553
g427
ag428
aa(lp4554
g430
ag431
aa(lp4555
g433
ag434
aa(lp4556
g436
ag437
aa(lp4557
g439
ag440
aa(lp4558
g442
ag443
aa(lp4559
g445
ag446
aa(lp4560
g448
ag449
aa(lp4561
g451
ag452
aa(lp4562
g454
ag455
aa(lp4563
g457
ag458
aa(lp4564
g460
ag461
aa(lp4565
g463
ag464
aa(lp4566
g466
ag467
aa(lp4567
g469
ag470
aa(lp4568
g472
ag473
aatp4569
Rp4570
aa(lp4571
g477
ag386
((lp4572
(lp4573
g392
ag477
aa(lp4574
g481
ag482
aatp4575
Rp4576
aatp4577
Rp4578
sg70
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g18
g7
Ntp4589
Rp4590
(dp4591
g22
(dp4592
sg24
g5
(g188
g7
Ntp4593
Rp4594
(dp4595
g29
g30
(g192
tp4596
Rp4597
(dp4598
g196
g37
sg38
g39
sg197
g37
sg88
g37
sg198
g37
sg199
g37
sg200
g37
sg201
g202
sg203
g37
sg204
g37
sg205
g37
sg206
g37
sg207
g37
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg176
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg98
I00
sg217
g37
sg218
g37
sg100
S'-applyisoxfm 2'
p4599
sg219
g37
sg220
g37
sg103
g104
sg221
g37
sg222
g37
sg223
g37
sg224
g37
sg225
g37
sg169
g37
sg226
g37
sg227
g37
sg228
g37
sg229
g37
sg230
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg110
g5
(g111
g112
(dp4600
g114
g115
stp4601
Rp4602
(dp4603
g119
S'environ_items'
p4604
sg53
g110
sbsg240
g37
sg241
g37
sg121
g115
sg242
g37
sg243
g37
sg244
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'gm_anat_to_2mm_flirt_applyxfm'
p4605
sg55
(dp4606
sg57
S'nuisance_0'
p4607
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4605
sg66
Nsg67
(lp4608
sg69
Nsg70
Nsb(dp4609
sg5
(g18
g7
Ntp4610
Rp4611
(dp4612
g22
(dp4613
sg24
g5
(g1403
g7
Ntp4614
Rp4615
(dp4616
g1407
(lp4617
g3712
aS'selector'
p4618
aS'wm_sig_file'
p4619
aS'csf_sig_file'
p4620
aS'gm_sig_file'
p4621
aS'motion_file'
p4622
aS'compcor_ncomponents'
p4623
asg29
g30
(g1413
tp4624
Rp4625
(dp4626
g98
I00
sg38
g39
sg4622
g37
sg4623
g37
sg1419
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4627
sg4620
g37
sg4619
g37
sg4621
g37
sg4618
g37
sg3712
g37
sbsg1421
(dp4628
S'regressors_file'
p4629
NsS'residual_file'
p4630
Nssg1423
(lp4631
g4630
ag4629
asg1425
Nsbsg52
Nsg53
S'residuals'
p4632
sg55
(dp4633
sg57
g4607
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
(lp4634
(g4618
(lp4635
(dp4636
S'global'
p4637
I0
sS'linear'
p4638
I1
sS'wm'
p4639
I0
sS'pc1'
p4640
I0
sS'motion'
p4641
I0
sS'quadratic'
p4642
I1
sS'gm'
p4643
I0
sS'compcor'
p4644
I1
sS'csf'
p4645
I1
satp4646
a(g4623
(lp4647
I5
atp4648
asg64
I00
sg65
g4632
sg66
Nsg67
(lp4649
sg69
Nsg70
Nsb(dp4650
sg5
(g18
g7
Ntp4651
Rp4652
(dp4653
g22
(dp4654
sg24
g5
(g1403
g7
Ntp4655
Rp4656
(dp4657
g1407
(lp4658
g3859
aS'ventricles_mask_file'
p4659
aS'wm_seg_file'
p4660
aS'csf_seg_file'
p4661
aS'gm_seg_file'
p4662
ag139
ag963
ag707
asg29
g30
(g1413
tp4663
Rp4664
(dp4665
g98
I00
sg38
g39
sg139
g37
sg963
g37
sg3859
g37
sg1419
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4666
sg4662
g37
sg4659
g37
sg707
g37
sg4661
g37
sg4660
g37
sbsg1421
(dp4667
S'file_gm'
p4668
NsS'file_wm'
p4669
NsS'file_csf'
p4670
Nssg1423
(lp4671
g4669
ag4670
ag4668
asg1425
Nsbsg52
Nsg53
S'tissue_masks'
p4672
sg55
(dp4673
sg57
g4607
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4672
sg66
Nsg67
(lp4674
sg69
Nsg70
Nsb(dp4675
sg5
(g18
g7
Ntp4676
Rp4677
(dp4678
g22
(dp4679
sg24
g5
(g188
g7
Ntp4680
Rp4681
(dp4682
g29
g30
(g192
tp4683
Rp4684
(dp4685
g196
g37
sg38
g39
sg197
g37
sg88
g37
sg198
g37
sg199
g37
sg200
g37
sg201
g37
sg203
g37
sg204
g37
sg205
g37
sg206
g37
sg207
g37
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg176
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg98
I00
sg217
g37
sg218
g37
sg100
g4599
sg219
g37
sg220
g37
sg103
g104
sg221
g37
sg222
g37
sg223
g37
sg224
g37
sg225
g37
sg169
g37
sg226
g37
sg227
g37
sg228
g37
sg229
g37
sg230
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg110
g5
(g111
g112
(dp4686
g114
g115
stp4687
Rp4688
(dp4689
g119
S'environ_items'
p4690
sg53
g110
sbsg240
g37
sg241
g37
sg121
g115
sg242
g37
sg243
g37
sg244
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'func_to_2mm_flirt_applyxfm'
p4691
sg55
(dp4692
sg57
g4607
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4691
sg66
Nsg67
(lp4693
sg69
Nsg70
Nsb(dp4694
sg5
(g18
g7
Ntp4695
Rp4696
(dp4697
g22
(dp4698
sg24
g5
(g25
g7
Ntp4699
Rp4700
(dp4701
g29
g30
(g31
tp4702
Rp4703
(dp4704
S'motion_components'
p4705
g37
sS'anat_to_mni_initial_xfm'
p4706
g37
sS'lat_ventricles_mask'
p4707
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4708
sg944
g37
sS'anat_to_mni_rigid_xfm'
p4709
g37
sg4623
g37
sS'anat_to_mni_affine_xfm'
p4710
g37
sg4618
g37
sg943
g37
sS'template_brain'
p4711
g37
sg3515
g37
sS'mni_to_anat_linear_xfm'
p4712
g37
sg945
g37
sg38
g39
sg3712
g37
sbsg49
(lp4713
g3712
ag943
ag945
ag944
ag4712
ag4706
ag4709
ag4710
ag3515
ag4707
ag4705
ag4618
ag4623
ag4711
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp4714
sg57
g4607
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp4715
sg69
Nsg70
Nsb(dp4716
sg5
(g18
g7
Ntp4717
Rp4718
(dp4719
g22
(dp4720
sg24
g5
(g25
g7
Ntp4721
Rp4722
(dp4723
g29
g30
(g31
tp4724
Rp4725
(dp4726
g38
g39
sS'regressors'
p4727
g37
sg3712
g37
sbsg49
(lp4728
g3712
ag4727
asg51
I01
sbsg52
Nsg53
g324
sg55
(dp4729
sg57
g4607
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g324
sg66
Nsg67
(lp4730
sg69
Nsg70
Nsb(dp4731
sg5
(g18
g7
Ntp4732
Rp4733
(dp4734
g22
(dp4735
sg24
g5
(g188
g7
Ntp4736
Rp4737
(dp4738
g29
g30
(g192
tp4739
Rp4740
(dp4741
g196
g37
sg38
g39
sg197
g37
sg88
g37
sg198
g37
sg199
g37
sg200
g37
sg201
g202
sg203
g37
sg204
g37
sg205
g37
sg206
g37
sg207
g37
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg176
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg98
I00
sg217
g37
sg218
g37
sg100
g4599
sg219
g37
sg220
g37
sg103
g104
sg221
g37
sg222
g37
sg223
g37
sg224
g37
sg225
g37
sg169
g37
sg226
g37
sg227
g37
sg228
g37
sg229
g37
sg230
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg110
g5
(g111
g112
(dp4742
g114
g115
stp4743
Rp4744
(dp4745
g119
S'environ_items'
p4746
sg53
g110
sbsg240
g37
sg241
g37
sg121
g115
sg242
g37
sg243
g37
sg244
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'ho_mni_to_2mm_flirt_applyxfm'
p4747
sg55
(dp4748
sg57
g4607
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4747
sg66
Nsg67
(lp4749
sg69
Nsg70
Nsb(dp4750
sg5
(g18
g7
Ntp4751
Rp4752
(dp4753
g22
(dp4754
sg24
g5
(g188
g7
Ntp4755
Rp4756
(dp4757
g29
g30
(g192
tp4758
Rp4759
(dp4760
g196
g37
sg38
g39
sg197
g37
sg88
g37
sg198
g37
sg199
g37
sg200
g37
sg201
g202
sg203
g37
sg204
g37
sg205
g37
sg206
g37
sg207
g37
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg176
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg98
I00
sg217
g37
sg218
g37
sg100
g4599
sg219
g37
sg220
g37
sg103
g104
sg221
g37
sg222
g37
sg223
g37
sg224
g37
sg225
g37
sg169
g37
sg226
g37
sg227
g37
sg228
g37
sg229
g37
sg230
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg110
g5
(g111
g112
(dp4761
g114
g115
stp4762
Rp4763
(dp4764
g119
S'environ_items'
p4765
sg53
g110
sbsg240
g37
sg241
g37
sg121
g115
sg242
g37
sg243
g37
sg244
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'csf_anat_to_2mm_flirt_applyxfm'
p4766
sg55
(dp4767
sg57
g4607
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4766
sg66
Nsg67
(lp4768
sg69
Nsg70
Nsb(dp4769
sg5
(g18
g7
Ntp4770
Rp4771
(dp4772
g22
(dp4773
sg24
g5
(g188
g7
Ntp4774
Rp4775
(dp4776
g29
g30
(g192
tp4777
Rp4778
(dp4779
g196
g37
sg38
g39
sg197
g37
sg88
g37
sg198
g37
sg199
g37
sg200
g37
sg201
g202
sg203
g37
sg204
g37
sg205
g37
sg206
g37
sg207
g37
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg176
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg98
I00
sg217
g37
sg218
g37
sg100
g4599
sg219
g37
sg220
g37
sg103
g104
sg221
g37
sg222
g37
sg223
g37
sg224
g37
sg225
g37
sg169
g37
sg226
g37
sg227
g37
sg228
g37
sg229
g37
sg230
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg110
g5
(g111
g112
(dp4780
g114
g115
stp4781
Rp4782
(dp4783
g119
S'environ_items'
p4784
sg53
g110
sbsg240
g37
sg241
g37
sg121
g115
sg242
g37
sg243
g37
sg244
g37
sbsg123
g115
sg124
Nsg125
g104
sbsg52
Nsg53
S'wm_anat_to_2mm_flirt_applyxfm'
p4785
sg55
(dp4786
sg57
g4607
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4785
sg66
Nsg67
(lp4787
sg69
Nsg70
Nsb(dp4788
ssg328
(dp4789
sg330
(dp4790
g4590
(dp4791
g4652
(dp4792
g334
(lp4793
(g169
g4662
tp4794
asssg4611
(dp4795
g4718
(dp4796
g334
(lp4797
(g4630
g3712
tp4798
a(g4629
g4727
tp4799
asssg4652
(dp4800
g4611
(dp4801
g334
(lp4802
(g4669
g4619
tp4803
a(g4670
g4620
tp4804
a(g4668
g4621
tp4805
asssg4677
(dp4806
g4652
(dp4807
g334
(lp4808
(g169
g3859
tp4809
asssg4696
(dp4810
g4771
(dp4811
g334
(lp4812
(g943
g176
tp4813
a(g943
g198
tp4814
assg4590
(dp4815
g334
(lp4816
(g944
g176
tp4817
a(g944
g198
tp4818
assg4677
(dp4819
g334
(lp4820
(g3712
g176
tp4821
a(g945
g198
tp4822
a(g3515
g197
tp4823
assg4733
(dp4824
g334
(lp4825
(g4712
g197
tp4826
a(g4707
g176
tp4827
a(g945
g198
tp4828
assg4752
(dp4829
g334
(lp4830
(g945
g176
tp4831
a(g945
g198
tp4832
assg4611
(dp4833
g334
(lp4834
(g3712
g3712
tp4835
a(g4705
g4622
tp4836
a(g4618
g4618
tp4837
a(g4623
g4623
tp4838
asssg4718
(dp4839
sg4733
(dp4840
g4652
(dp4841
g334
(lp4842
(g169
g4659
tp4843
asssg4752
(dp4844
g4652
(dp4845
g334
(lp4846
(g169
g4661
tp4847
asssg4771
(dp4848
g4652
(dp4849
g334
(lp4850
(g169
g4660
tp4851
assssg376
g4790
sg377
(dp4852
g4590
(dp4853
g4696
g4815
ssg4611
(dp4854
g4652
g4801
sg4696
g4833
ssg4652
(dp4855
g4752
g4845
sg4733
g4841
sg4590
g4792
sg4677
g4807
sg4771
g4849
ssg4677
(dp4856
g4696
g4819
ssg4696
(dp4857
sg4718
(dp4858
g4611
g4796
ssg4733
(dp4859
g4696
g4824
ssg4752
(dp4860
g4696
g4829
ssg4771
(dp4861
g4696
g4811
sssg385
g4790
sbsg53
g4607
sg57
g1067
sg65
g4607
sg66
g386
((lp4862
(lp4863
g389
ag386
((lp4864
(lp4865
g392
ag389
aa(lp4866
g394
ag395
aa(lp4867
g397
ag398
aa(lp4868
g400
ag401
aa(lp4869
g403
ag404
aa(lp4870
g406
ag407
aa(lp4871
g409
ag410
aa(lp4872
g412
ag413
aatp4873
Rp4874
aa(lp4875
g417
ag386
((lp4876
(lp4877
g392
ag417
aa(lp4878
g421
ag422
aa(lp4879
g424
ag425
aa(lp4880
g427
ag428
aa(lp4881
g430
ag431
aa(lp4882
g433
ag434
aa(lp4883
g436
ag437
aa(lp4884
g439
ag440
aa(lp4885
g442
ag443
aa(lp4886
g445
ag446
aa(lp4887
g448
ag449
aa(lp4888
g451
ag452
aa(lp4889
g454
ag455
aa(lp4890
g457
ag458
aa(lp4891
g460
ag461
aa(lp4892
g463
ag464
aa(lp4893
g466
ag467
aa(lp4894
g469
ag470
aa(lp4895
g472
ag473
aatp4896
Rp4897
aa(lp4898
g477
ag386
((lp4899
(lp4900
g392
ag477
aa(lp4901
g481
ag482
aatp4902
Rp4903
aatp4904
Rp4905
sg70
NsbS'outputspec.subject'
p4906
tp4907
sg2071
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg2072
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Completed'
p4921
sS'strat_0'
p4922
(lp4923
g2239
ag1150
ag58
ag4437
ag2482
ag2896
aS'func_to_anat_FLIRT_0'
p4924
ag3483
ag1902
ag4607
ag3823
ag4462
ag3848
asg1951
g3713
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1430308949.205219
s.