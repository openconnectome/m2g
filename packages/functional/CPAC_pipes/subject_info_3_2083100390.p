(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(g6
g7
Ntp18
Rp19
(dp20
g11
g5
(g12
g7
Ntp21
Rp22
(dp23
g16
(dp24
g5
(cnipype.pipeline.engine
Node
p25
g7
Ntp26
Rp27
(dp28
S'input_source'
p29
(dp30
sS'_interface'
p31
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p32
g7
Ntp33
Rp34
(dp35
S'inputs'
p36
ctraits.traits
__newobj__
p37
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p38
tp39
Rp40
(dp41
S'ignore_exception'
p42
I00
sS'nan2zeros'
p43
ctraits.trait_base
_Undefined
p44
(tRp45
sS'op_string'
p46
S'-mas %s '
p47
sS'out_file'
p48
g45
sS'args'
p49
g45
sS'internal_datatype'
p50
g45
sS'__traits_version__'
p51
S'4.5.0'
p52
sS'terminal_output'
p53
S'stream'
p54
sS'environ'
p55
g5
(ctraits.trait_handlers
TraitDictObject
p56
c__builtin__
dict
p57
(dp58
S'FSLOUTPUTTYPE'
p59
S'NIFTI_GZ'
p60
stp61
Rp62
(dp63
S'name_items'
p64
S'environ_items'
p65
sS'name'
p66
g55
sbsS'in_file'
p67
g45
sS'output_type'
p68
g60
sS'output_datatype'
p69
g45
sS'operand_files'
p70
g45
sbsS'_output_type'
p71
g60
sS'_environ'
p72
NsS'_terminal_output'
p73
g54
sbsS'_result'
p74
Nsg66
S'CSF_mask'
p75
sS'plugin_args'
p76
(dp77
sS'_hierarchy'
p78
S'CSF'
p79
sS'itersource'
p80
NsS'run_without_submitting'
p81
I00
sS'synchronize'
p82
I00
sS'parameterization'
p83
NsS'iterables'
p84
NsS'_got_inputs'
p85
I00
sS'_id'
p86
g75
sS'config'
p87
NsS'needed_outputs'
p88
(lp89
sS'overwrite'
p90
NsS'base_dir'
p91
Nsb(dp92
sg5
(g25
g7
Ntp93
Rp94
(dp95
g29
(dp96
sg31
g5
(cnipype.interfaces.utility
IdentityInterface
p97
g7
Ntp98
Rp99
(dp100
g36
g37
(cnipype.interfaces.base
DynamicTraitedSpec
p101
tp102
Rp103
(dp104
g51
g52
sS'segment_combo'
p105
g45
sS'segment_mask'
p106
g45
sS'tissueprior_mni2t1'
p107
g45
sS'segment_bin'
p108
g45
sbsS'_fields'
p109
(lp110
g107
ag105
ag108
ag106
asS'_mandatory_inputs'
p111
I01
sbsg74
Nsg66
S'outputspec'
p112
sg76
(dp113
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp114
sg90
Nsg91
Nsb(dp115
sg5
(g25
g7
Ntp116
Rp117
(dp118
g29
(dp119
sg31
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p120
g7
Ntp121
Rp122
(dp123
g36
g37
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p124
tp125
Rp126
(dp127
g42
I00
sg51
g52
sg46
g45
sS'out_data_type'
p128
g45
sg48
g45
sg49
g45
sS'in_file2'
p129
g45
sg53
g54
sg55
g5
(g56
g57
(dp130
g59
g60
stp131
Rp132
(dp133
g64
S'environ_items'
p134
sg66
g55
sbsg67
g45
sg68
g60
sS'suffix'
p135
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'binarize_threshold_CSF'
p136
sg76
(dp137
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g136
sg87
Nsg88
(lp138
sg90
Nsg91
Nsb(dp139
sg5
(g25
g7
Ntp140
Rp141
(dp142
g29
(dp143
sg31
g5
(g97
g7
Ntp144
Rp145
(dp146
g36
g37
(g101
tp147
Rp148
(dp149
S'standard2highres_rig'
p150
g45
sg51
g52
sS'standard2highres_init'
p151
g45
sS'tissue_prior'
p152
g45
sS'standard2highres_mat'
p153
g45
sS'brain'
p154
g45
sS'probability_map'
p155
g45
sS'threshold'
p156
g45
sbsg109
(lp157
g152
ag156
ag154
ag155
ag151
ag153
ag150
asg111
I01
sbsg74
Nsg66
S'inputspec'
p158
sg76
(dp159
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp160
sg90
Nsg91
Nsb(dp161
sg5
(g25
g7
Ntp162
Rp163
(dp164
g29
(dp165
sg31
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p166
g7
Ntp167
Rp168
(dp169
g36
g37
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p170
tp171
Rp172
(dp173
S'rigid2D'
p174
g45
sg51
g52
sS'in_matrix_file'
p175
g45
sS'verbose'
p176
g45
sS'reference'
p177
g45
sS'padding_size'
p178
g45
sS'sinc_window'
p179
g45
sS'interp'
p180
S'nearestneighbour'
p181
sS'wmnorms'
p182
g45
sS'coarse_search'
p183
g45
sS'no_resample'
p184
g45
sS'sinc_width'
p185
g45
sS'in_weight'
p186
g45
sS'fieldmap'
p187
g45
sS'echospacing'
p188
g45
sS'ref_weight'
p189
g45
sS'apply_isoxfm'
p190
g45
sS'fieldmapmask'
p191
g45
sg67
g45
sS'bbrtype'
p192
g45
sS'no_clamp'
p193
g45
sS'force_scaling'
p194
g45
sS'pedir'
p195
g45
sg42
I00
sS'display_init'
p196
g45
sS'schedule'
p197
g45
sg49
g45
sS'uses_qform'
p198
g45
sS'wmcoords'
p199
g45
sg53
g54
sS'fine_search'
p200
g45
sS'angle_rep'
p201
g45
sS'no_search'
p202
g45
sS'apply_xfm'
p203
I01
sS'wm_seg'
p204
g45
sg48
g45
sS'bbrslope'
p205
g45
sS'datatype'
p206
g45
sS'save_log'
p207
g45
sS'dof'
p208
g45
sS'out_matrix_file'
p209
g45
sS'no_resample_blur'
p210
g45
sS'min_sampling'
p211
g45
sS'cost_func'
p212
g45
sS'cost'
p213
g45
sg55
g5
(g56
g57
(dp214
g59
g60
stp215
Rp216
(dp217
g64
S'environ_items'
p218
sg66
g55
sbsS'searchr_x'
p219
g45
sS'out_log'
p220
g45
sg68
g60
sS'searchr_z'
p221
g45
sS'bins'
p222
g45
sS'searchr_y'
p223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'CSF_prior_mni_to_t1'
p224
sg76
(dp225
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g224
sg87
Nsg88
(lp226
sg90
Nsg91
Nsb(dp227
sg5
(g25
g7
Ntp228
Rp229
(dp230
g29
(dp231
sg31
g5
(g32
g7
Ntp232
Rp233
(dp234
g36
g37
(g38
tp235
Rp236
(dp237
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp238
g59
g60
stp239
Rp240
(dp241
g64
S'environ_items'
p242
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'overlap_CSF_map_with_prior'
p243
sg76
(dp244
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp245
sg90
Nsg91
Nsb(dp246
ssS'graph'
p247
(dp248
sS'succ'
p249
(dp250
g27
(dp251
g94
(dp252
S'connect'
p253
(lp254
(g48
g106
tp255
asssg94
(dp256
sg117
(dp257
g94
(dp258
g253
(lp259
(g48
g108
tp260
assg27
(dp261
g253
(lp262
(g48
g67
tp263
asssg141
(dp264
g163
(dp265
g253
(lp266
(g152
g67
tp267
a(g154
g177
tp268
a(g153
g175
tp269
assg229
(dp270
g253
(lp271
(g155
g67
tp272
assg117
(dp273
g253
(lp274
((g156
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p275
(ttp276
g46
tp277
asssg163
(dp278
g94
(dp279
g253
(lp280
(g48
g107
tp281
assg229
(dp282
g253
(lp283
(g48
g70
tp284
assg27
(dp285
g253
(lp286
(g48
g70
tp287
asssg229
(dp288
g117
(dp289
g253
(lp290
(g48
g67
tp291
assg94
(dp292
g253
(lp293
(g48
g105
tp294
assssS'edge'
p295
g250
sS'pred'
p296
(dp297
g27
(dp298
g117
g261
sg163
g285
ssg94
(dp299
g163
g279
sg27
g252
sg229
g292
sg117
g258
ssg117
(dp300
g229
g289
sg141
g273
ssg141
(dp301
sg163
(dp302
g141
g265
ssg229
(dp303
g163
g282
sg141
g270
sssS'adj'
p304
g250
sbsg66
g79
sg78
S'seg_preproc_0'
p305
sg86
g79
sg87
ccollections
OrderedDict
p306
((lp307
(lp308
S'logging'
p309
ag306
((lp310
(lp311
S'__name__'
p312
ag309
aa(lp313
S'workflow_level'
p314
aS'INFO'
p315
aa(lp316
S'filemanip_level'
p317
aS'INFO'
p318
aa(lp319
S'interface_level'
p320
aS'INFO'
p321
aa(lp322
S'log_to_file'
p323
aS'True'
p324
aa(lp325
S'log_directory'
p326
aS'/mnt/ssd1/data/outputs/CPAC/CPAC_test1/outputs/logs/3_2083100390'
p327
aa(lp328
S'log_size'
p329
aS'16384000'
p330
aa(lp331
S'log_rotate'
p332
aS'4'
p333
aatp334
Rp335
aa(lp336
S'execution'
p337
ag306
((lp338
(lp339
g312
ag337
aa(lp340
S'create_report'
p341
aS'true'
p342
aa(lp343
S'crashdump_dir'
p344
aS'/home/eric/Documents/m2g/packages/functional/CPAC_pipes'
p345
aa(lp346
S'display_variable'
p347
aS':1'
p348
aa(lp349
S'hash_method'
p350
aS'timestamp'
p351
aa(lp352
S'job_finished_timeout'
p353
aS'5'
p354
aa(lp355
S'keep_inputs'
p356
aS'false'
p357
aa(lp358
S'local_hash_check'
p359
aS'true'
p360
aa(lp361
S'matplotlib_backend'
p362
aS'Agg'
p363
aa(lp364
S'plugin'
p365
aS'Linear'
p366
aa(lp367
S'remove_node_directories'
p368
aS'false'
p369
aa(lp370
S'remove_unnecessary_outputs'
p371
aS'true'
p372
aa(lp373
S'single_thread_matlab'
p374
aS'true'
p375
aa(lp376
S'stop_on_first_crash'
p377
aS'false'
p378
aa(lp379
S'stop_on_first_rerun'
p380
aS'false'
p381
aa(lp382
S'use_relative_paths'
p383
aS'false'
p384
aa(lp385
S'stop_on_unknown_version'
p386
aS'false'
p387
aa(lp388
S'write_provenance'
p389
aS'false'
p390
aa(lp391
S'parameterize_dirs'
p392
aS'true'
p393
aatp394
Rp395
aa(lp396
S'check'
p397
ag306
((lp398
(lp399
g312
ag397
aa(lp400
S'interval'
p401
aS'1209600'
p402
aatp403
Rp404
aatp405
Rp406
sg91
Nsb(dp407
sg5
(g25
g7
Ntp408
Rp409
(dp410
g29
(dp411
sg31
g5
(g97
g7
Ntp412
Rp413
(dp414
g36
g37
(g101
tp415
Rp416
(dp417
g51
g52
sS'wm_threshold'
p418
(lp419
F0.96
asbsg109
(lp420
g418
asg111
I01
sbsg74
Nsg66
g418
sg76
(dp421
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g418
(lp422
F0.96
atp423
sg85
I00
sg86
g418
sg87
Nsg88
(lp424
sg90
Nsg91
Nsb(dp425
sg5
(g6
g7
Ntp426
Rp427
(dp428
g11
g5
(g12
g7
Ntp429
Rp430
(dp431
g16
(dp432
g5
(g25
g7
Ntp433
Rp434
(dp435
g29
(dp436
sg31
g5
(g32
g7
Ntp437
Rp438
(dp439
g36
g37
(g38
tp440
Rp441
(dp442
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp443
g59
g60
stp444
Rp445
(dp446
g64
S'environ_items'
p447
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'overlap_GM_map_with_prior'
p448
sg76
(dp449
sg78
S'GM'
p450
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g448
sg87
Nsg88
(lp451
sg90
Nsg91
Nsb(dp452
sg5
(g25
g7
Ntp453
Rp454
(dp455
g29
(dp456
sg31
g5
(g120
g7
Ntp457
Rp458
(dp459
g36
g37
(g124
tp460
Rp461
(dp462
g42
I00
sg51
g52
sg46
g45
sg128
g45
sg48
g45
sg49
g45
sg129
g45
sg53
g54
sg55
g5
(g56
g57
(dp463
g59
g60
stp464
Rp465
(dp466
g64
S'environ_items'
p467
sg66
g55
sbsg67
g45
sg68
g60
sg135
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'binarize_threshold_GM'
p468
sg76
(dp469
sg78
g450
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g468
sg87
Nsg88
(lp470
sg90
Nsg91
Nsb(dp471
sg5
(g25
g7
Ntp472
Rp473
(dp474
g29
(dp475
sg31
g5
(g97
g7
Ntp476
Rp477
(dp478
g36
g37
(g101
tp479
Rp480
(dp481
g51
g52
sg105
g45
sg106
g45
sg107
g45
sg108
g45
sbsg109
(lp482
g107
ag105
ag108
ag106
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp483
sg78
g450
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp484
sg90
Nsg91
Nsb(dp485
sg5
(g25
g7
Ntp486
Rp487
(dp488
g29
(dp489
sg31
g5
(g166
g7
Ntp490
Rp491
(dp492
g36
g37
(g170
tp493
Rp494
(dp495
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g181
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g45
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
I01
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp496
g59
g60
stp497
Rp498
(dp499
g64
S'environ_items'
p500
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'GM_prior_mni_to_t1'
p501
sg76
(dp502
sg78
g450
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g501
sg87
Nsg88
(lp503
sg90
Nsg91
Nsb(dp504
sg5
(g25
g7
Ntp505
Rp506
(dp507
g29
(dp508
sg31
g5
(g97
g7
Ntp509
Rp510
(dp511
g36
g37
(g101
tp512
Rp513
(dp514
g150
g45
sg51
g52
sg151
g45
sg152
g45
sg153
g45
sg154
g45
sg155
g45
sg156
g45
sbsg109
(lp515
g152
ag156
ag154
ag155
ag151
ag153
ag150
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp516
sg78
g450
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp517
sg90
Nsg91
Nsb(dp518
sg5
(g25
g7
Ntp519
Rp520
(dp521
g29
(dp522
sg31
g5
(g32
g7
Ntp523
Rp524
(dp525
g36
g37
(g38
tp526
Rp527
(dp528
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp529
g59
g60
stp530
Rp531
(dp532
g64
S'environ_items'
p533
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'GM_mask'
p534
sg76
(dp535
sg78
g450
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g534
sg87
Nsg88
(lp536
sg90
Nsg91
Nsb(dp537
ssg247
(dp538
sg249
(dp539
g434
(dp540
g473
(dp541
g253
(lp542
(g48
g105
tp543
assg454
(dp544
g253
(lp545
(g48
g67
tp546
asssg454
(dp547
g520
(dp548
g253
(lp549
(g48
g67
tp550
assg473
(dp551
g253
(lp552
(g48
g108
tp553
asssg473
(dp554
sg487
(dp555
g434
(dp556
g253
(lp557
(g48
g70
tp558
assg473
(dp559
g253
(lp560
(g48
g107
tp561
assg520
(dp562
g253
(lp563
(g48
g70
tp564
asssg506
(dp565
g434
(dp566
g253
(lp567
(g155
g67
tp568
assg487
(dp569
g253
(lp570
(g152
g67
tp571
a(g154
g177
tp572
a(g153
g175
tp573
assg454
(dp574
g253
(lp575
((g156
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p576
(ttp577
g46
tp578
asssg520
(dp579
g473
(dp580
g253
(lp581
(g48
g106
tp582
assssg295
g539
sg296
(dp583
g434
(dp584
g506
g566
sg487
g556
ssg454
(dp585
g434
g544
sg506
g574
ssg473
(dp586
g434
g541
sg520
g580
sg487
g559
sg454
g551
ssg487
(dp587
g506
g569
ssg506
(dp588
sg520
(dp589
g454
g548
sg487
g562
sssg304
g539
sbsg66
g450
sg78
g305
sg86
g450
sg87
g306
((lp590
(lp591
g309
ag306
((lp592
(lp593
g312
ag309
aa(lp594
g314
ag315
aa(lp595
g317
ag318
aa(lp596
g320
ag321
aa(lp597
g323
ag324
aa(lp598
g326
ag327
aa(lp599
g329
ag330
aa(lp600
g332
ag333
aatp601
Rp602
aa(lp603
g337
ag306
((lp604
(lp605
g312
ag337
aa(lp606
g341
ag342
aa(lp607
g344
ag345
aa(lp608
g347
ag348
aa(lp609
g350
ag351
aa(lp610
g353
ag354
aa(lp611
g356
ag357
aa(lp612
g359
ag360
aa(lp613
g362
ag363
aa(lp614
g365
ag366
aa(lp615
g368
ag369
aa(lp616
g371
ag372
aa(lp617
g374
ag375
aa(lp618
g377
ag378
aa(lp619
g380
ag381
aa(lp620
g383
ag384
aa(lp621
g386
ag387
aa(lp622
g389
ag390
aa(lp623
g392
ag393
aatp624
Rp625
aa(lp626
g397
ag306
((lp627
(lp628
g312
ag397
aa(lp629
g401
ag402
aatp630
Rp631
aatp632
Rp633
sg91
Nsb(dp634
sg5
(g25
g7
Ntp635
Rp636
(dp637
g29
(dp638
sg31
g5
(g97
g7
Ntp639
Rp640
(dp641
g36
g37
(g101
tp642
Rp643
(dp644
g150
g45
sg51
g52
sg151
g45
sg154
g45
sS'PRIOR_GRAY'
p645
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p646
sg153
g45
sS'PRIOR_CSF'
p647
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p648
sS'PRIOR_WHITE'
p649
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p650
sbsg109
(lp651
g154
ag151
ag153
ag150
ag647
ag645
ag649
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp652
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp653
sg90
Nsg91
Nsb(dp654
sg5
(g6
g7
Ntp655
Rp656
(dp657
g11
g5
(g12
g7
Ntp658
Rp659
(dp660
g16
(dp661
g5
(g25
g7
Ntp662
Rp663
(dp664
g29
(dp665
sg31
g5
(g32
g7
Ntp666
Rp667
(dp668
g36
g37
(g38
tp669
Rp670
(dp671
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp672
g59
g60
stp673
Rp674
(dp675
g64
S'environ_items'
p676
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'WM_mask'
p677
sg76
(dp678
sg78
S'WM'
p679
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g677
sg87
Nsg88
(lp680
sg90
Nsg91
Nsb(dp681
sg5
(g25
g7
Ntp682
Rp683
(dp684
g29
(dp685
sg31
g5
(g97
g7
Ntp686
Rp687
(dp688
g36
g37
(g101
tp689
Rp690
(dp691
g51
g52
sg105
g45
sg106
g45
sg107
g45
sg108
g45
sbsg109
(lp692
g107
ag105
ag108
ag106
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp693
sg78
g679
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp694
sg90
Nsg91
Nsb(dp695
sg5
(g25
g7
Ntp696
Rp697
(dp698
g29
(dp699
sg31
g5
(g120
g7
Ntp700
Rp701
(dp702
g36
g37
(g124
tp703
Rp704
(dp705
g42
I00
sg51
g52
sg46
g45
sg128
g45
sg48
g45
sg49
g45
sg129
g45
sg53
g54
sg55
g5
(g56
g57
(dp706
g59
g60
stp707
Rp708
(dp709
g64
S'environ_items'
p710
sg66
g55
sbsg67
g45
sg68
g60
sg135
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'binarize_threshold_WM'
p711
sg76
(dp712
sg78
g679
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g711
sg87
Nsg88
(lp713
sg90
Nsg91
Nsb(dp714
sg5
(g25
g7
Ntp715
Rp716
(dp717
g29
(dp718
sg31
g5
(g32
g7
Ntp719
Rp720
(dp721
g36
g37
(g38
tp722
Rp723
(dp724
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp725
g59
g60
stp726
Rp727
(dp728
g64
S'environ_items'
p729
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'overlap_WM_map_with_prior'
p730
sg76
(dp731
sg78
g679
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g730
sg87
Nsg88
(lp732
sg90
Nsg91
Nsb(dp733
sg5
(g25
g7
Ntp734
Rp735
(dp736
g29
(dp737
sg31
g5
(g97
g7
Ntp738
Rp739
(dp740
g36
g37
(g101
tp741
Rp742
(dp743
g150
g45
sg51
g52
sg151
g45
sg152
g45
sg153
g45
sg154
g45
sg155
g45
sg156
g45
sbsg109
(lp744
g152
ag156
ag154
ag155
ag151
ag153
ag150
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp745
sg78
g679
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp746
sg90
Nsg91
Nsb(dp747
sg5
(g25
g7
Ntp748
Rp749
(dp750
g29
(dp751
sg31
g5
(g166
g7
Ntp752
Rp753
(dp754
g36
g37
(g170
tp755
Rp756
(dp757
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g181
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g45
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
I01
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp758
g59
g60
stp759
Rp760
(dp761
g64
S'environ_items'
p762
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'WM_prior_mni_to_t1'
p763
sg76
(dp764
sg78
g679
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g763
sg87
Nsg88
(lp765
sg90
Nsg91
Nsb(dp766
ssg247
(dp767
sg249
(dp768
g663
(dp769
g683
(dp770
g253
(lp771
(g48
g106
tp772
asssg683
(dp773
sg697
(dp774
g663
(dp775
g253
(lp776
(g48
g67
tp777
assg683
(dp778
g253
(lp779
(g48
g108
tp780
asssg716
(dp781
g697
(dp782
g253
(lp783
(g48
g67
tp784
assg683
(dp785
g253
(lp786
(g48
g105
tp787
asssg735
(dp788
g697
(dp789
g253
(lp790
((g156
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p791
(ttp792
g46
tp793
assg749
(dp794
g253
(lp795
(g152
g67
tp796
a(g154
g177
tp797
a(g153
g175
tp798
assg716
(dp799
g253
(lp800
(g155
g67
tp801
asssg749
(dp802
g663
(dp803
g253
(lp804
(g48
g70
tp805
assg716
(dp806
g253
(lp807
(g48
g70
tp808
assg683
(dp809
g253
(lp810
(g48
g107
tp811
assssg295
g768
sg296
(dp812
g663
(dp813
g697
g775
sg749
g803
ssg683
(dp814
g663
g770
sg697
g778
sg749
g809
sg716
g785
ssg697
(dp815
g716
g782
sg735
g789
ssg716
(dp816
g735
g799
sg749
g806
ssg735
(dp817
sg749
(dp818
g735
g794
sssg304
g768
sbsg66
g679
sg78
g305
sg86
g679
sg87
g306
((lp819
(lp820
g309
ag306
((lp821
(lp822
g312
ag309
aa(lp823
g314
ag315
aa(lp824
g317
ag318
aa(lp825
g320
ag321
aa(lp826
g323
ag324
aa(lp827
g326
ag327
aa(lp828
g329
ag330
aa(lp829
g332
ag333
aatp830
Rp831
aa(lp832
g337
ag306
((lp833
(lp834
g312
ag337
aa(lp835
g341
ag342
aa(lp836
g344
ag345
aa(lp837
g347
ag348
aa(lp838
g350
ag351
aa(lp839
g353
ag354
aa(lp840
g356
ag357
aa(lp841
g359
ag360
aa(lp842
g362
ag363
aa(lp843
g365
ag366
aa(lp844
g368
ag369
aa(lp845
g371
ag372
aa(lp846
g374
ag375
aa(lp847
g377
ag378
aa(lp848
g380
ag381
aa(lp849
g383
ag384
aa(lp850
g386
ag387
aa(lp851
g389
ag390
aa(lp852
g392
ag393
aatp853
Rp854
aa(lp855
g397
ag306
((lp856
(lp857
g312
ag397
aa(lp858
g401
ag402
aatp859
Rp860
aatp861
Rp862
sg91
Nsb(dp863
sg5
(g25
g7
Ntp864
Rp865
(dp866
g29
(dp867
sg31
g5
(g97
g7
Ntp868
Rp869
(dp870
g36
g37
(g101
tp871
Rp872
(dp873
g51
g52
sS'csf_threshold'
p874
(lp875
F0.96
asbsg109
(lp876
g874
asg111
I01
sbsg74
Nsg66
g874
sg76
(dp877
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g874
(lp878
F0.96
atp879
sg85
I00
sg86
g874
sg87
Nsg88
(lp880
sg90
Nsg91
Nsb(dp881
sg5
(g25
g7
Ntp882
Rp883
(dp884
g29
(dp885
sg31
g5
(cnipype.interfaces.fsl.preprocess
FAST
p886
g7
Ntp887
Rp888
(dp889
g36
g37
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p890
tp891
Rp892
(dp893
S'number_classes'
p894
g45
sS'out_basename'
p895
S'segment'
p896
sS'hyper'
p897
g45
sg176
g45
sS'init_seg_smooth'
p898
g45
sS'init_transform'
p899
g45
sS'no_pve'
p900
g45
sS'output_biascorrected'
p901
g45
sS'mixel_smooth'
p902
g45
sS'segments'
p903
I01
sS'iters_afterbias'
p904
g45
sS'bias_lowpass'
p905
g45
sS'other_priors'
p906
g45
sg51
g52
sg42
I00
sS'img_type'
p907
I1
sg49
g45
sS'probability_maps'
p908
I01
sS'manual_seg'
p909
g45
sg53
g54
sS'output_biasfield'
p910
g45
sS'no_bias'
p911
g45
sS'use_priors'
p912
g45
sS'in_files'
p913
g45
sS'segment_iters'
p914
g45
sg55
g5
(g56
g57
(dp915
g59
g60
stp916
Rp917
(dp918
g64
S'environ_items'
p919
sg66
g55
sbsg68
g60
sS'bias_iters'
p920
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
g896
sg76
(dp921
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g896
sg87
Nsg88
(lp922
sg90
Nsg91
Nsb(dp923
sg5
(g25
g7
Ntp924
Rp925
(dp926
g29
(dp927
sg31
g5
(g97
g7
Ntp928
Rp929
(dp930
g36
g37
(g101
tp931
Rp932
(dp933
S'partial_volume_files'
p934
g45
sg51
g52
sS'gm_combo'
p935
g45
sS'mixeltype'
p936
g45
sS'csf_mni2t1'
p937
g45
sS'wm_bin'
p938
g45
sS'csf_bin'
p939
g45
sg908
g45
sS'wm_mni2t1'
p940
g45
sS'csf_combo'
p941
g45
sS'wm_combo'
p942
g45
sS'wm_mask'
p943
g45
sS'gm_mask'
p944
g45
sS'csf_mask'
p945
g45
sS'gm_bin'
p946
g45
sS'partial_volume_map'
p947
g45
sS'gm_mni2t1'
p948
g45
sbsg109
(lp949
g937
ag941
ag939
ag945
ag948
ag935
ag946
ag944
ag940
ag942
ag938
ag908
ag936
ag947
ag934
ag943
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp950
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp951
sg90
Nsg91
Nsb(dp952
sg5
(g25
g7
Ntp953
Rp954
(dp955
g29
(dp956
sg31
g5
(g97
g7
Ntp957
Rp958
(dp959
g36
g37
(g101
tp960
Rp961
(dp962
g51
g52
sS'gm_threshold'
p963
(lp964
F0.7
asbsg109
(lp965
g963
asg111
I01
sbsg74
Nsg66
g963
sg76
(dp966
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g963
(lp967
F0.7
atp968
sg85
I00
sg86
g963
sg87
Nsg88
(lp969
sg90
Nsg91
Nsb(dp970
ssg247
(dp971
sg249
(dp972
g19
(dp973
g925
(dp974
g253
(lp975
(S'outputspec.tissueprior_mni2t1'
p976
g937
tp977
a(S'outputspec.segment_combo'
p978
g941
tp979
a(S'outputspec.segment_bin'
p980
g939
tp981
a(S'outputspec.segment_mask'
p982
g945
tp983
asssg409
(dp984
g656
(dp985
g253
(lp986
(g418
S'inputspec.threshold'
p987
tp988
asssg427
(dp989
g925
(dp990
g253
(lp991
(g976
g948
tp992
a(g978
g935
tp993
a(g980
g946
tp994
a(g982
g944
tp995
asssg636
(dp996
g19
(dp997
g253
(lp998
(g154
S'inputspec.brain'
p999
tp1000
a(g647
S'inputspec.tissue_prior'
p1001
tp1002
a(g153
S'inputspec.standard2highres_mat'
p1003
tp1004
assg427
(dp1005
g253
(lp1006
(g154
g999
tp1007
a(g645
g1001
tp1008
a(g153
g1003
tp1009
assg883
(dp1010
g253
(lp1011
(g154
g913
tp1012
assg656
(dp1013
g253
(lp1014
(g154
g999
tp1015
a(g649
g1001
tp1016
a(g153
g1003
tp1017
asssg656
(dp1018
g925
(dp1019
g253
(lp1020
(g976
g940
tp1021
a(g978
g942
tp1022
a(g980
g938
tp1023
a(g982
g943
tp1024
asssg865
(dp1025
g19
(dp1026
g253
(lp1027
(g874
g987
tp1028
asssg883
(dp1029
g19
(dp1030
g253
(lp1031
((g908
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1032
(ttp1033
S'inputspec.probability_map'
p1034
tp1035
assg427
(dp1036
g253
(lp1037
((g908
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1038
(ttp1039
g1034
tp1040
assg925
(dp1041
g253
(lp1042
(g908
g908
tp1043
a(g936
g936
tp1044
a(g934
g934
tp1045
a(g947
g947
tp1046
assg656
(dp1047
g253
(lp1048
((g908
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1049
(ttp1050
g1034
tp1051
asssg925
(dp1052
sg954
(dp1053
g427
(dp1054
g253
(lp1055
(g963
g987
tp1056
assssg295
g972
sg296
(dp1057
g19
(dp1058
g865
g1026
sg636
g997
sg883
g1030
ssg409
(dp1059
sg427
(dp1060
g954
g1054
sg636
g1005
sg883
g1036
ssg636
(dp1061
sg656
(dp1062
g409
g985
sg636
g1013
sg883
g1047
ssg865
(dp1063
sg883
(dp1064
g636
g1010
ssg925
(dp1065
g19
g974
sg427
g990
sg883
g1041
sg656
g1019
ssg954
(dp1066
ssg304
g972
sbsg66
g305
sg78
S'resting_preproc_3_2083100390'
p1067
sg86
g305
sg87
g306
((lp1068
(lp1069
g309
ag306
((lp1070
(lp1071
g312
ag309
aa(lp1072
g314
ag315
aa(lp1073
g317
ag318
aa(lp1074
g320
ag321
aa(lp1075
g323
ag324
aa(lp1076
g326
ag327
aa(lp1077
g329
ag330
aa(lp1078
g332
ag333
aatp1079
Rp1080
aa(lp1081
g337
ag306
((lp1082
(lp1083
g312
ag337
aa(lp1084
g341
ag342
aa(lp1085
g344
ag345
aa(lp1086
g347
ag348
aa(lp1087
g350
ag351
aa(lp1088
g353
ag354
aa(lp1089
g356
ag357
aa(lp1090
g359
ag360
aa(lp1091
g362
ag363
aa(lp1092
g365
ag366
aa(lp1093
g368
ag369
aa(lp1094
g371
ag372
aa(lp1095
g374
ag375
aa(lp1096
g377
ag378
aa(lp1097
g380
ag381
aa(lp1098
g383
ag384
aa(lp1099
g386
ag387
aa(lp1100
g389
ag390
aa(lp1101
g392
ag393
aatp1102
Rp1103
aa(lp1104
g397
ag306
((lp1105
(lp1106
g312
ag397
aa(lp1107
g401
ag402
aatp1108
Rp1109
aatp1110
Rp1111
sg91
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g25
g7
Ntp1122
Rp1123
(dp1124
g29
(dp1125
sg31
g5
(g97
g7
Ntp1126
Rp1127
(dp1128
g36
g37
(g101
tp1129
Rp1130
(dp1131
S'fnirt_config'
p1132
S'T1_2_MNI152_2mm'
p1133
sg51
g52
sS'input_brain'
p1134
g45
sS'reference_skull'
p1135
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1136
sS'reference_brain'
p1137
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1138
sS'input_skull'
p1139
g45
sbsg109
(lp1140
g1134
ag1139
ag1137
ag1135
ag1132
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp1141
sg78
S'anat_mni_fnirt_register_0'
p1142
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp1143
sg90
Nsg91
Nsb(dp1144
sg5
(g25
g7
Ntp1145
Rp1146
(dp1147
g29
(dp1148
sg31
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1149
g7
Ntp1150
Rp1151
(dp1152
g36
g37
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1153
tp1154
Rp1155
(dp1156
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg129
g45
sS'fix_scale_skew'
p1157
g45
sS'invert_xfm'
p1158
I01
sg53
g54
sS'concat_xfm'
p1159
g45
sg67
g45
sg68
g60
sg55
g5
(g56
g57
(dp1160
g59
g60
stp1161
Rp1162
(dp1163
g64
S'environ_items'
p1164
sg66
g55
sbsbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'inv_linear_reg0_xfm'
p1165
sg76
(dp1166
sg78
g1142
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1165
sg87
Nsg88
(lp1167
sg90
Nsg91
Nsb(dp1168
sg5
(g25
g7
Ntp1169
Rp1170
(dp1171
g29
(dp1172
sg31
g5
(g97
g7
Ntp1173
Rp1174
(dp1175
g36
g37
(g101
tp1176
Rp1177
(dp1178
g51
g52
sS'output_brain'
p1179
g45
sS'nonlinear_xfm'
p1180
g45
sS'invlinear_xfm'
p1181
g45
sS'linear_xfm'
p1182
g45
sbsg109
(lp1183
g1179
ag1182
ag1181
ag1180
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp1184
sg78
g1142
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp1185
sg90
Nsg91
Nsb(dp1186
sg5
(g25
g7
Ntp1187
Rp1188
(dp1189
g29
(dp1190
sg31
g5
(g166
g7
Ntp1191
Rp1192
(dp1193
g36
g37
(g170
tp1194
Rp1195
(dp1196
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g45
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g45
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
g45
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
S'corratio'
p1197
sg55
g5
(g56
g57
(dp1198
g59
g60
stp1199
Rp1200
(dp1201
g64
S'environ_items'
p1202
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'linear_reg_0'
p1203
sg76
(dp1204
sg78
g1142
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1203
sg87
Nsg88
(lp1205
sg90
Nsg91
Nsb(dp1206
sg5
(g25
g7
Ntp1207
Rp1208
(dp1209
g29
(dp1210
sg31
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1211
g7
Ntp1212
Rp1213
(dp1214
g36
g37
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1215
tp1216
Rp1217
(dp1218
g51
g52
sS'derive_from_ref'
p1219
g45
sS'in_intensitymap_file'
p1220
g45
sS'modulatedref_file'
p1221
g45
sS'refmask_val'
p1222
g45
sS'hessian_precision'
p1223
g45
sS'in_fwhm'
p1224
g45
sS'skip_implicit_in_masking'
p1225
g45
sS'inmask_file'
p1226
g45
sS'refmask_file'
p1227
g45
sS'inwarp_file'
p1228
g45
sS'skip_lambda_ssq'
p1229
g45
sS'intensity_mapping_model'
p1230
g45
sS'affine_file'
p1231
g45
sS'apply_inmask'
p1232
g45
sS'spline_order'
p1233
g45
sS'apply_refmask'
p1234
g45
sS'subsampling_scheme'
p1235
g45
sg67
g45
sS'warped_file'
p1236
g45
sS'skip_refmask'
p1237
g45
sg42
I00
sS'ref_fwhm'
p1238
g45
sS'inmask_val'
p1239
g45
sS'config_file'
p1240
g45
sS'field_file'
p1241
g45
sg49
g45
sS'apply_intensity_mapping'
p1242
g45
sS'regularization_lambda'
p1243
g45
sg53
g54
sS'regularization_model'
p1244
g45
sS'jacobian_range'
p1245
g45
sS'out_intensitymap_file'
p1246
g45
sS'skip_implicit_ref_masking'
p1247
g45
sS'ref_file'
p1248
g45
sS'skip_inmask'
p1249
g45
sS'fieldcoeff_file'
p1250
I01
sS'warp_resolution'
p1251
g45
sS'jacobian_file'
p1252
I01
sg55
g5
(g56
g57
(dp1253
g59
g60
stp1254
Rp1255
(dp1256
g64
S'environ_items'
p1257
sg66
g55
sbsS'bias_regularization_lambda'
p1258
g45
sg68
g60
sS'skip_intensity_mapping'
p1259
g45
sS'log_file'
p1260
g45
sS'biasfield_resolution'
p1261
g45
sS'intensity_mapping_order'
p1262
g45
sS'max_nonlin_iter'
p1263
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'nonlinear_reg_1'
p1264
sg76
(dp1265
sg78
g1142
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1264
sg87
Nsg88
(lp1266
sg90
Nsg91
Nsb(dp1267
sg5
(g25
g7
Ntp1268
Rp1269
(dp1270
g29
(dp1271
sg31
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1272
g7
Ntp1273
Rp1274
(dp1275
g36
g37
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1276
tp1277
Rp1278
(dp1279
g42
I00
sS'supersample'
p1280
g45
sg67
g45
sS'superlevel'
p1281
g45
sg48
g45
sg206
g45
sg49
g45
sg180
g45
sg1241
g45
sg1248
g45
sg53
g54
sg55
g5
(g56
g57
(dp1282
g59
g60
stp1283
Rp1284
(dp1285
g64
S'environ_items'
p1286
sg66
g55
sbsS'premat'
p1287
g45
sS'mask_file'
p1288
g45
sg68
g60
sS'relwarp'
p1289
g45
sS'abswarp'
p1290
g45
sg51
g52
sS'postmat'
p1291
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'brain_warp'
p1292
sg76
(dp1293
sg78
g1142
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1292
sg87
Nsg88
(lp1294
sg90
Nsg91
Nsb(dp1295
ssg247
(dp1296
sg249
(dp1297
g1123
(dp1298
g1208
(dp1299
g253
(lp1300
(g1139
g67
tp1301
a(g1135
g1248
tp1302
a(g1132
g1240
tp1303
assg1188
(dp1304
g253
(lp1305
(g1134
g67
tp1306
a(g1137
g177
tp1307
assg1269
(dp1308
g253
(lp1309
(g1134
g67
tp1310
a(g1137
g1248
tp1311
asssg1146
(dp1312
g1170
(dp1313
g253
(lp1314
(g48
g1181
tp1315
asssg1170
(dp1316
sg1188
(dp1317
g1208
(dp1318
g253
(lp1319
(g209
g1231
tp1320
assg1170
(dp1321
g253
(lp1322
(g209
g1182
tp1323
assg1146
(dp1324
g253
(lp1325
(g209
g67
tp1326
asssg1208
(dp1327
g1170
(dp1328
g253
(lp1329
(g1250
g1180
tp1330
assg1269
(dp1331
g253
(lp1332
(g1250
g1241
tp1333
asssg1269
(dp1334
g1170
(dp1335
g253
(lp1336
(g48
g1179
tp1337
assssg295
g1297
sg296
(dp1338
g1123
(dp1339
sg1146
(dp1340
g1188
g1324
ssg1170
(dp1341
g1208
g1328
sg1188
g1321
sg1269
g1335
sg1146
g1313
ssg1188
(dp1342
g1123
g1304
ssg1208
(dp1343
g1123
g1299
sg1188
g1318
ssg1269
(dp1344
g1123
g1308
sg1208
g1331
sssg304
g1297
sbsg66
g1142
sg78
g1067
sg86
g1142
sg87
g306
((lp1345
(lp1346
g309
ag306
((lp1347
(lp1348
g312
ag309
aa(lp1349
g314
ag315
aa(lp1350
g317
ag318
aa(lp1351
g320
ag321
aa(lp1352
g323
ag324
aa(lp1353
g326
ag327
aa(lp1354
g329
ag330
aa(lp1355
g332
ag333
aatp1356
Rp1357
aa(lp1358
g337
ag306
((lp1359
(lp1360
g312
ag337
aa(lp1361
g341
ag342
aa(lp1362
g344
ag345
aa(lp1363
g347
ag348
aa(lp1364
g350
ag351
aa(lp1365
g353
ag354
aa(lp1366
g356
ag357
aa(lp1367
g359
ag360
aa(lp1368
g362
ag363
aa(lp1369
g365
ag366
aa(lp1370
g368
ag369
aa(lp1371
g371
ag372
aa(lp1372
g374
ag375
aa(lp1373
g377
ag378
aa(lp1374
g380
ag381
aa(lp1375
g383
ag384
aa(lp1376
g386
ag387
aa(lp1377
g389
ag390
aa(lp1378
g392
ag393
aatp1379
Rp1380
aa(lp1381
g397
ag306
((lp1382
(lp1383
g312
ag397
aa(lp1384
g401
ag402
aatp1385
Rp1386
aatp1387
Rp1388
sg91
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g25
g7
Ntp1399
Rp1400
(dp1401
g29
(dp1402
sg31
g5
(cnipype.interfaces.utility
Function
p1403
g7
Ntp1404
Rp1405
(dp1406
S'_input_names'
p1407
(lp1408
S'file_'
p1409
asg36
g37
(cnipype.interfaces.utility
FunctionInputSpec
p1410
tp1411
Rp1412
(dp1413
g42
I00
sS'function_str'
p1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1415
sg1409
g45
sg51
g52
sbsS'_out'
p1416
(dp1417
S'new_fname'
p1418
NssS'_output_names'
p1419
(lp1420
g1418
asS'imports'
p1421
Nsbsg74
Nsg66
S'resample_u'
p1422
sg76
(dp1423
sg78
S'montage_mfi_0'
p1424
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1422
sg87
Nsg88
(lp1425
sg90
Nsg91
Nsb(dp1426
sg5
(g25
g7
Ntp1427
Rp1428
(dp1429
g29
(dp1430
sg31
g5
(g1403
g7
Ntp1431
Rp1432
(dp1433
g1407
(lp1434
g1409
asg36
g37
(g1410
tp1435
Rp1436
(dp1437
g42
I00
sg1414
g1415
sg1409
g45
sg51
g52
sbsg1416
(dp1438
g1418
Nssg1419
(lp1439
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp1440
sg83
Nsg80
Nsg90
Nsg66
S'resample_o'
p1441
sg78
g1424
sg82
I00
sg84
Nsg85
I00
sg86
g1441
sg87
Nsg88
(lp1442
sg91
Nsb(dp1443
sg5
(g25
g7
Ntp1444
Rp1445
(dp1446
g29
(dp1447
sg31
g5
(g1403
g7
Ntp1448
Rp1449
(dp1450
g1407
(lp1451
S'overlay'
p1452
aS'underlay'
p1453
aS'png_name'
p1454
aS'cbar_name'
p1455
asg36
g37
(g1410
tp1456
Rp1457
(dp1458
g42
I00
sg1454
S'MNI_edge_on_mean_func_mni_a.png'
p1459
sg1452
g45
sg1455
S'red'
p1460
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1461
sg1453
g45
sg51
g52
sbsg1416
(dp1462
g1454
Nssg1419
(lp1463
g1454
asg1421
Nsbsg74
Nsg66
S'montage_a'
p1464
sg76
(dp1465
sg78
g1424
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1464
sg87
Nsg88
(lp1466
sg90
Nsg91
Nsb(dp1467
sg5
(g25
g7
Ntp1468
Rp1469
(dp1470
g29
(dp1471
sg31
g5
(g97
g7
Ntp1472
Rp1473
(dp1474
g36
g37
(g101
tp1475
Rp1476
(dp1477
g51
g52
sg1453
g45
sg1452
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1478
sbsg109
(lp1479
g1453
ag1452
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp1480
sg78
g1424
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp1481
sg90
Nsg91
Nsb(dp1482
sg5
(g25
g7
Ntp1483
Rp1484
(dp1485
g29
(dp1486
sg31
g5
(g97
g7
Ntp1487
Rp1488
(dp1489
g36
g37
(g101
tp1490
Rp1491
(dp1492
g51
g52
sS'resampled_underlay'
p1493
g45
sS'axial_png'
p1494
g45
sS'sagittal_png'
p1495
g45
sS'resampled_overlay'
p1496
g45
sbsg109
(lp1497
g1494
ag1495
ag1493
ag1496
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp1498
sg78
g1424
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp1499
sg90
Nsg91
Nsb(dp1500
sg5
(g25
g7
Ntp1501
Rp1502
(dp1503
g29
(dp1504
sg31
g5
(g1403
g7
Ntp1505
Rp1506
(dp1507
g1407
(lp1508
g1452
ag1453
ag1454
ag1455
asg36
g37
(g1410
tp1509
Rp1510
(dp1511
g42
I00
sg1454
S'MNI_edge_on_mean_func_mni_s.png'
p1512
sg1452
g45
sg1455
g1460
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1513
sg1453
g45
sg51
g52
sbsg1416
(dp1514
g1454
Nssg1419
(lp1515
g1454
asg1421
Nsbsg74
Nsg66
S'montage_s'
p1516
sg76
(dp1517
sg78
g1424
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp1518
sg90
Nsg91
Nsb(dp1519
ssg247
(dp1520
sg249
(dp1521
g1400
(dp1522
g1484
(dp1523
g253
(lp1524
(g1418
g1493
tp1525
assg1445
(dp1526
g253
(lp1527
(g1418
g1453
tp1528
assg1502
(dp1529
g253
(lp1530
(g1418
g1453
tp1531
asssg1428
(dp1532
g1484
(dp1533
g253
(lp1534
(g1418
g1496
tp1535
assg1445
(dp1536
g253
(lp1537
(g1418
g1452
tp1538
assg1502
(dp1539
g253
(lp1540
(g1418
g1452
tp1541
asssg1445
(dp1542
g1484
(dp1543
g253
(lp1544
(g1454
g1494
tp1545
asssg1469
(dp1546
g1400
(dp1547
g253
(lp1548
(g1453
g1409
tp1549
assg1428
(dp1550
g253
(lp1551
(g1452
g1409
tp1552
asssg1484
(dp1553
sg1502
(dp1554
g1484
(dp1555
g253
(lp1556
(g1454
g1495
tp1557
assssg295
g1521
sg296
(dp1558
g1400
(dp1559
g1469
g1547
ssg1428
(dp1560
g1469
g1550
ssg1445
(dp1561
g1400
g1526
sg1428
g1536
ssg1469
(dp1562
sg1484
(dp1563
g1502
g1555
sg1400
g1523
sg1445
g1543
sg1428
g1533
ssg1502
(dp1564
g1400
g1529
sg1428
g1539
sssg304
g1521
sbsg66
g1424
sg78
g1067
sg86
g1424
sg87
g306
((lp1565
(lp1566
g309
ag306
((lp1567
(lp1568
g312
ag309
aa(lp1569
g314
ag315
aa(lp1570
g317
ag318
aa(lp1571
g320
ag321
aa(lp1572
g323
ag324
aa(lp1573
g326
ag327
aa(lp1574
g329
ag330
aa(lp1575
g332
ag333
aatp1576
Rp1577
aa(lp1578
g337
ag306
((lp1579
(lp1580
g312
ag337
aa(lp1581
g341
ag342
aa(lp1582
g344
ag345
aa(lp1583
g347
ag348
aa(lp1584
g350
ag351
aa(lp1585
g353
ag354
aa(lp1586
g356
ag357
aa(lp1587
g359
ag360
aa(lp1588
g362
ag363
aa(lp1589
g365
ag366
aa(lp1590
g368
ag369
aa(lp1591
g371
ag372
aa(lp1592
g374
ag375
aa(lp1593
g377
ag378
aa(lp1594
g380
ag381
aa(lp1595
g383
ag384
aa(lp1596
g386
ag387
aa(lp1597
g389
ag390
aa(lp1598
g392
ag393
aatp1599
Rp1600
aa(lp1601
g397
ag306
((lp1602
(lp1603
g312
ag397
aa(lp1604
g401
ag402
aatp1605
Rp1606
aatp1607
Rp1608
sg91
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g25
g7
Ntp1619
Rp1620
(dp1621
g29
(dp1622
sg31
g5
(g97
g7
Ntp1623
Rp1624
(dp1625
g36
g37
(g101
tp1626
Rp1627
(dp1628
g51
g52
sg1453
g45
sg1452
g45
sbsg109
(lp1629
g1453
ag1452
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp1630
sg78
S'montage_snr_0'
p1631
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp1632
sg90
Nsg91
Nsb(dp1633
sg5
(g25
g7
Ntp1634
Rp1635
(dp1636
g29
(dp1637
sg31
g5
(g1403
g7
Ntp1638
Rp1639
(dp1640
g1407
(lp1641
g1409
asg36
g37
(g1410
tp1642
Rp1643
(dp1644
g42
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1645
sg1409
g45
sg51
g52
sbsg1416
(dp1646
g1418
Nssg1419
(lp1647
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp1648
sg83
Nsg80
Nsg90
Nsg66
g1441
sg78
g1631
sg82
I00
sg84
Nsg85
I00
sg86
g1441
sg87
Nsg88
(lp1649
sg91
Nsb(dp1650
sg5
(g25
g7
Ntp1651
Rp1652
(dp1653
g29
(dp1654
sg31
g5
(g1403
g7
Ntp1655
Rp1656
(dp1657
g1407
(lp1658
g1452
ag1453
ag1454
ag1455
asg36
g37
(g1410
tp1659
Rp1660
(dp1661
g42
I00
sg1454
S'snr_s.png'
p1662
sg1452
g45
sg1455
S'red_to_blue'
p1663
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1664
sg1453
g45
sg51
g52
sbsg1416
(dp1665
g1454
Nssg1419
(lp1666
g1454
asg1421
Nsbsg74
Nsg66
g1516
sg76
(dp1667
sg78
g1631
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp1668
sg90
Nsg91
Nsb(dp1669
sg5
(g25
g7
Ntp1670
Rp1671
(dp1672
g29
(dp1673
sg31
g5
(g97
g7
Ntp1674
Rp1675
(dp1676
g36
g37
(g101
tp1677
Rp1678
(dp1679
g51
g52
sg1493
g45
sg1494
g45
sg1495
g45
sg1496
g45
sbsg109
(lp1680
g1494
ag1495
ag1493
ag1496
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp1681
sg78
g1631
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp1682
sg90
Nsg91
Nsb(dp1683
sg5
(g25
g7
Ntp1684
Rp1685
(dp1686
g29
(dp1687
sg31
g5
(g1403
g7
Ntp1688
Rp1689
(dp1690
g1407
(lp1691
g1409
asg36
g37
(g1410
tp1692
Rp1693
(dp1694
g42
I00
sg1414
g1645
sg1409
g45
sg51
g52
sbsg1416
(dp1695
g1418
Nssg1419
(lp1696
g1418
asg1421
Nsbsg74
Nsg66
g1422
sg76
(dp1697
sg78
g1631
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1422
sg87
Nsg88
(lp1698
sg90
Nsg91
Nsb(dp1699
sg5
(g25
g7
Ntp1700
Rp1701
(dp1702
g29
(dp1703
sg31
g5
(g1403
g7
Ntp1704
Rp1705
(dp1706
g1407
(lp1707
g1452
ag1453
ag1454
ag1455
asg36
g37
(g1410
tp1708
Rp1709
(dp1710
g42
I00
sg1454
S'snr_a.png'
p1711
sg1452
g45
sg1455
g1663
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1712
sg1453
g45
sg51
g52
sbsg1416
(dp1713
g1454
Nssg1419
(lp1714
g1454
asg1421
Nsbsg74
Nsg66
g1464
sg76
(dp1715
sg78
g1631
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1464
sg87
Nsg88
(lp1716
sg90
Nsg91
Nsb(dp1717
ssg247
(dp1718
sg249
(dp1719
g1620
(dp1720
g1685
(dp1721
g253
(lp1722
(g1453
g1409
tp1723
assg1635
(dp1724
g253
(lp1725
(g1452
g1409
tp1726
asssg1635
(dp1727
g1701
(dp1728
g253
(lp1729
(g1418
g1452
tp1730
assg1671
(dp1731
g253
(lp1732
(g1418
g1496
tp1733
assg1652
(dp1734
g253
(lp1735
(g1418
g1452
tp1736
asssg1652
(dp1737
g1671
(dp1738
g253
(lp1739
(g1454
g1495
tp1740
asssg1671
(dp1741
sg1685
(dp1742
g1701
(dp1743
g253
(lp1744
(g1418
g1453
tp1745
assg1671
(dp1746
g253
(lp1747
(g1418
g1493
tp1748
assg1652
(dp1749
g253
(lp1750
(g1418
g1453
tp1751
asssg1701
(dp1752
g1671
(dp1753
g253
(lp1754
(g1454
g1494
tp1755
assssg295
g1719
sg296
(dp1756
g1620
(dp1757
sg1635
(dp1758
g1620
g1724
ssg1652
(dp1759
g1685
g1749
sg1635
g1734
ssg1671
(dp1760
g1652
g1738
sg1685
g1746
sg1701
g1753
sg1635
g1731
ssg1685
(dp1761
g1620
g1721
ssg1701
(dp1762
g1685
g1743
sg1635
g1728
sssg304
g1719
sbsg66
g1631
sg78
g1067
sg86
g1631
sg87
g306
((lp1763
(lp1764
g309
ag306
((lp1765
(lp1766
g312
ag309
aa(lp1767
g314
ag315
aa(lp1768
g317
ag318
aa(lp1769
g320
ag321
aa(lp1770
g323
ag324
aa(lp1771
g326
ag327
aa(lp1772
g329
ag330
aa(lp1773
g332
ag333
aatp1774
Rp1775
aa(lp1776
g337
ag306
((lp1777
(lp1778
g312
ag337
aa(lp1779
g341
ag342
aa(lp1780
g344
ag345
aa(lp1781
g347
ag348
aa(lp1782
g350
ag351
aa(lp1783
g353
ag354
aa(lp1784
g356
ag357
aa(lp1785
g359
ag360
aa(lp1786
g362
ag363
aa(lp1787
g365
ag366
aa(lp1788
g368
ag369
aa(lp1789
g371
ag372
aa(lp1790
g374
ag375
aa(lp1791
g377
ag378
aa(lp1792
g380
ag381
aa(lp1793
g383
ag384
aa(lp1794
g386
ag387
aa(lp1795
g389
ag390
aa(lp1796
g392
ag393
aatp1797
Rp1798
aa(lp1799
g397
ag306
((lp1800
(lp1801
g312
ag397
aa(lp1802
g401
ag402
aatp1803
Rp1804
aatp1805
Rp1806
sg91
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g25
g7
Ntp1810
Rp1811
(dp1812
g29
(dp1813
sg31
g5
(g1272
g7
Ntp1814
Rp1815
(dp1816
g36
g37
(g1276
tp1817
Rp1818
(dp1819
g42
I00
sg1280
g45
sg67
g45
sg1281
g45
sg48
g45
sg206
g45
sg49
g45
sg180
g45
sg1241
g45
sg1248
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg53
g54
sg55
g5
(g56
g57
(dp1821
g59
g60
stp1822
Rp1823
(dp1824
g64
S'environ_items'
p1825
sg66
g55
sbsg1287
g45
sg1288
g45
sg68
g60
sg1289
g45
sg1290
g45
sg51
g52
sg1291
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'mean_func_fsl_warp_0'
p1826
sg76
(dp1827
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1826
sg87
Nsg88
(lp1828
sg90
Nsg91
Nsbg48
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g25
g7
Ntp1831
Rp1832
(dp1833
g29
(dp1834
sg31
g5
(g1403
g7
Ntp1835
Rp1836
(dp1837
g1407
(lp1838
S'motion_parameters'
p1839
asg36
g37
(g1410
tp1840
Rp1841
(dp1842
g42
I00
sg1414
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g45
sg51
g52
sbsg1416
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1419
(lp1847
g1845
ag1846
asg1421
Nsbsg74
Nsg66
S'motion_plt_0'
p1848
sg76
(dp1849
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1848
sg87
Nsg88
(lp1850
sg90
Nsg91
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g25
g7
Ntp1853
Rp1854
(dp1855
g29
(dp1856
sg31
g5
(g1403
g7
Ntp1857
Rp1858
(dp1859
g1407
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg36
g37
(g1410
tp1864
Rp1865
(dp1866
g42
I00
sg51
g52
sg1861
g45
sg1414
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g45
sbsg1416
(dp1869
S'hist_path'
p1870
Nssg1419
(lp1871
g1870
asg1421
Nsbsg74
Nsg66
S'fd_plot_0'
p1872
sg76
(dp1873
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1872
sg87
Nsg88
(lp1874
sg90
Nsg91
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g25
g7
Ntp1884
Rp1885
(dp1886
g29
(dp1887
sg31
g5
(g97
g7
Ntp1888
Rp1889
(dp1890
g36
g37
(g101
tp1891
Rp1892
(dp1893
S'max_displacement'
p1894
g45
sg51
g52
sS'scan_id'
p1895
g45
sS'subject_id'
p1896
g45
sS'mask'
p1897
g45
sS'movement_parameters'
p1898
g45
sS'oned_matrix_save'
p1899
g45
sS'motion_correct'
p1900
g45
sbsg109
(lp1901
g1896
ag1895
ag1898
ag1894
ag1900
ag1897
ag1899
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp1902
sg78
S'gen_motion_stats_0'
p1903
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp1904
sg90
Nsg91
Nsb(dp1905
sg5
(g25
g7
Ntp1906
Rp1907
(dp1908
g29
(dp1909
sg31
g5
(g1403
g7
Ntp1910
Rp1911
(dp1912
g1407
(lp1913
g67
ag156
aS'frames_before'
p1914
aS'frames_after'
p1915
asg36
g37
(g1410
tp1916
Rp1917
(dp1918
g42
I00
sg1915
g45
sg1414
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1919
sg67
g45
sg156
g45
sg51
g52
sg1914
g45
sbsg1416
(dp1920
g48
Nssg1419
(lp1921
g48
asg1421
Nsbsg74
Nsg66
S'exclude_frames'
p1922
sg76
(dp1923
sg78
g1903
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1922
sg87
Nsg88
(lp1924
sg90
Nsg91
Nsb(dp1925
sg5
(g25
g7
Ntp1926
Rp1927
(dp1928
g29
(dp1929
sg31
g5
(g1403
g7
Ntp1930
Rp1931
(dp1932
g1407
(lp1933
g67
ag156
aS'exclude_list'
p1934
asg36
g37
(g1410
tp1935
Rp1936
(dp1937
g42
I00
sg1934
g45
sg1414
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1938
sg67
g45
sg156
g45
sg51
g52
sbsg1416
(dp1939
g48
Nssg1419
(lp1940
g48
asg1421
Nsbsg74
Nsg66
S'include_frames'
p1941
sg76
(dp1942
sg78
g1903
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1941
sg87
Nsg88
(lp1943
sg90
Nsg91
Nsb(dp1944
sg5
(g25
g7
Ntp1945
Rp1946
(dp1947
g29
(dp1948
sg31
g5
(g1403
g7
Ntp1949
Rp1950
(dp1951
g1407
(lp1952
S'rest'
p1953
ag1897
asg36
g37
(g1410
tp1954
Rp1955
(dp1956
g42
I00
sg1897
g45
sg51
g52
sg1414
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p1957
sg1953
g45
sbsg1416
(dp1958
g48
Nssg1419
(lp1959
g48
asg1421
Nsbsg74
Nsg66
S'cal_DVARS'
p1960
sg76
(dp1961
sg78
g1903
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1960
sg87
Nsg88
(lp1962
sg90
Nsg91
Nsb(dp1963
sg5
(g25
g7
Ntp1964
Rp1965
(dp1966
g29
(dp1967
sg31
g5
(g1403
g7
Ntp1968
Rp1969
(dp1970
g1407
(lp1971
g1896
ag1895
ag1898
ag1894
asg36
g37
(g1410
tp1972
Rp1973
(dp1974
g42
I00
sg1894
g45
sg1895
g45
sg1896
g45
sg1414
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1975
sg1898
g45
sg51
g52
sbsg1416
(dp1976
g48
Nssg1419
(lp1977
g48
asg1421
Nsbsg74
Nsg66
S'calc_motion_parameters'
p1978
sg76
(dp1979
sg78
g1903
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1978
sg87
Nsg88
(lp1980
sg90
Nsg91
Nsb(dp1981
sg5
(g25
g7
Ntp1982
Rp1983
(dp1984
g29
(dp1985
sg31
g5
(g97
g7
Ntp1986
Rp1987
(dp1988
g36
g37
(g101
tp1989
Rp1990
(dp1991
g156
(lp1992
F0.2
asg51
g52
sS'remove_frames_before'
p1993
I1
sS'remove_frames_after'
p1994
I2
sbsg109
(lp1995
g156
ag1993
ag1994
asg111
I01
sbsg74
Nsg66
S'scrubbing_input'
p1996
sg76
(dp1997
sg78
g1903
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g156
(lp1998
F0.2
atp1999
sg85
I00
sg86
g1996
sg87
Nsg88
(lp2000
sg90
Nsg91
Nsb(dp2001
sg5
(g25
g7
Ntp2002
Rp2003
(dp2004
g29
(dp2005
sg31
g5
(g1403
g7
Ntp2006
Rp2007
(dp2008
g1407
(lp2009
g1896
ag1895
aS'FD_1D'
p2010
aS'FDJ_1D'
p2011
ag156
aS'DVARS'
p2012
asg36
g37
(g1410
tp2013
Rp2014
(dp2015
g42
I00
sg51
g52
sg1895
g45
sg1896
g45
sg2012
g45
sg1414
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p2016
sg2011
g45
sg2010
g45
sg156
g45
sbsg1416
(dp2017
g48
Nssg1419
(lp2018
g48
asg1421
Nsbsg74
Nsg66
S'calc_power_parameters'
p2019
sg76
(dp2020
sg78
g1903
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2019
sg87
Nsg88
(lp2021
sg90
Nsg91
Nsb(dp2022
sg5
(g25
g7
Ntp2023
Rp2024
(dp2025
g29
(dp2026
sg31
g5
(g97
g7
Ntp2027
Rp2028
(dp2029
g36
g37
(g101
tp2030
Rp2031
(dp2032
g51
g52
sS'frames_ex_1D'
p2033
g45
sg2011
g45
sg2010
g45
sS'frames_in_1D'
p2034
g45
sS'motion_params'
p2035
g45
sS'power_params'
p2036
g45
sbsg109
(lp2037
g2010
ag2011
ag2033
ag2034
ag2036
ag2035
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp2038
sg78
g1903
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp2039
sg90
Nsg91
Nsb(dp2040
sg5
(g25
g7
Ntp2041
Rp2042
(dp2043
g29
(dp2044
sg31
g5
(g1403
g7
Ntp2045
Rp2046
(dp2047
g1407
(lp2048
g67
asg36
g37
(g1410
tp2049
Rp2050
(dp2051
g42
I00
sg51
g52
sg1414
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p2052
sg67
g45
sbsg1416
(dp2053
g48
Nssg1419
(lp2054
g48
asg1421
Nsbsg74
Nsg66
S'calculate_FDJ'
p2055
sg76
(dp2056
sg78
g1903
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2055
sg87
Nsg88
(lp2057
sg90
Nsg91
Nsb(dp2058
sg5
(g25
g7
Ntp2059
Rp2060
(dp2061
g29
(dp2062
sg31
g5
(g1403
g7
Ntp2063
Rp2064
(dp2065
g1407
(lp2066
g67
asg36
g37
(g1410
tp2067
Rp2068
(dp2069
g42
I00
sg51
g52
sg1414
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p2070
sg67
g45
sbsg1416
(dp2071
g48
Nssg1419
(lp2072
g48
asg1421
Nsbsg74
Nsg66
S'calculate_FD'
p2073
sg76
(dp2074
sg78
g1903
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2073
sg87
Nsg88
(lp2075
sg90
Nsg91
Nsb(dp2076
ssg247
(dp2077
sg249
(dp2078
g1885
(dp2079
g1965
(dp2080
g253
(lp2081
(g1896
g1896
tp2082
a(g1895
g1895
tp2083
a(g1898
g1898
tp2084
a(g1894
g1894
tp2085
assg1946
(dp2086
g253
(lp2087
(g1900
g1953
tp2088
a(g1897
g1897
tp2089
assg2003
(dp2090
g253
(lp2091
(g1896
g1896
tp2092
a(g1895
g1895
tp2093
assg2060
(dp2094
g253
(lp2095
(g1898
g67
tp2096
assg2042
(dp2097
g253
(lp2098
(g1899
g67
tp2099
asssg1907
(dp2100
g2024
(dp2101
g253
(lp2102
(g48
g2033
tp2103
assg1927
(dp2104
g253
(lp2105
(g48
g1934
tp2106
asssg1927
(dp2107
g2024
(dp2108
g253
(lp2109
(g48
g2034
tp2110
asssg1946
(dp2111
g2003
(dp2112
g253
(lp2113
(g48
g2012
tp2114
asssg1965
(dp2115
g2024
(dp2116
g253
(lp2117
(g48
g2035
tp2118
asssg1983
(dp2119
g1927
(dp2120
g253
(lp2121
(g156
g156
tp2122
assg1907
(dp2123
g253
(lp2124
(g156
g156
tp2125
a(g1993
g1914
tp2126
a(g1994
g1915
tp2127
assg2003
(dp2128
g253
(lp2129
(g156
g156
tp2130
asssg2003
(dp2131
g2024
(dp2132
g253
(lp2133
(g48
g2036
tp2134
asssg2024
(dp2135
sg2042
(dp2136
g2024
(dp2137
g253
(lp2138
(g48
g2011
tp2139
assg2003
(dp2140
g253
(lp2141
(g48
g2011
tp2142
asssg2060
(dp2143
g2024
(dp2144
g253
(lp2145
(g48
g2010
tp2146
assg2003
(dp2147
g253
(lp2148
(g48
g2010
tp2149
assg1907
(dp2150
g253
(lp2151
(g48
g67
tp2152
assg1927
(dp2153
g253
(lp2154
(g48
g67
tp2155
assssg295
g2078
sg296
(dp2156
g1885
(dp2157
sg1907
(dp2158
g1983
g2123
sg2060
g2150
ssg1927
(dp2159
g1983
g2120
sg2060
g2153
sg1907
g2104
ssg1946
(dp2160
g1885
g2086
ssg1965
(dp2161
g1885
g2080
ssg1983
(dp2162
sg2003
(dp2163
g1885
g2090
sg1983
g2128
sg2060
g2147
sg2042
g2140
sg1946
g2112
ssg2024
(dp2164
g2060
g2144
sg1965
g2116
sg1927
g2108
sg2003
g2132
sg2042
g2137
sg1907
g2101
ssg2042
(dp2165
g1885
g2097
ssg2060
(dp2166
g1885
g2094
sssg304
g2078
sbsg66
g1903
sg78
g1067
sg86
g1903
sg87
g306
((lp2167
(lp2168
g309
ag306
((lp2169
(lp2170
g312
ag309
aa(lp2171
g314
ag315
aa(lp2172
g317
ag318
aa(lp2173
g320
ag321
aa(lp2174
g323
ag324
aa(lp2175
g326
ag327
aa(lp2176
g329
ag330
aa(lp2177
g332
ag333
aatp2178
Rp2179
aa(lp2180
g337
ag306
((lp2181
(lp2182
g312
ag337
aa(lp2183
g341
ag342
aa(lp2184
g344
ag345
aa(lp2185
g347
ag348
aa(lp2186
g350
ag351
aa(lp2187
g353
ag354
aa(lp2188
g356
ag357
aa(lp2189
g359
ag360
aa(lp2190
g362
ag363
aa(lp2191
g365
ag366
aa(lp2192
g368
ag369
aa(lp2193
g371
ag372
aa(lp2194
g374
ag375
aa(lp2195
g377
ag378
aa(lp2196
g380
ag381
aa(lp2197
g383
ag384
aa(lp2198
g386
ag387
aa(lp2199
g389
ag390
aa(lp2200
g392
ag393
aatp2201
Rp2202
aa(lp2203
g397
ag306
((lp2204
(lp2205
g312
ag397
aa(lp2206
g401
ag402
aatp2207
Rp2208
aatp2209
Rp2210
sg91
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g25
g7
Ntp2224
Rp2225
(dp2226
g29
(dp2227
sg31
g5
(g97
g7
Ntp2228
Rp2229
(dp2230
g36
g37
(g101
tp2231
Rp2232
(dp2233
g51
g52
sS'anat'
p2234
g45
sbsg109
(lp2235
g2234
asg111
I01
sbsg74
Nsg81
I00
sg76
(dp2236
sg83
Nsg80
Nsg90
Nsg66
g158
sg78
S'anat_preproc_0'
p2237
sg82
I00
sg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp2238
sg91
Nsb(dp2239
sg5
(g25
g7
Ntp2240
Rp2241
(dp2242
g29
(dp2243
sg31
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2244
g7
Ntp2245
Rp2246
(dp2247
g36
g37
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2248
tp2249
Rp2250
(dp2251
g42
I00
sg51
g52
sg48
g45
sg49
g45
sS'outputtype'
p2252
S'AFNI'
p2253
sg53
g54
sg55
g5
(g56
g57
(dp2254
tp2255
Rp2256
(dp2257
g64
S'environ_items'
p2258
sg66
g55
sbsg67
g45
sbsS'_outputtype'
p2259
g2253
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2260
sg83
Nsg80
Nsg90
Nsg66
S'anat_skullstrip'
p2261
sg78
g2237
sg82
I00
sg84
Nsg85
I00
sg86
g2261
sg87
Nsg88
(lp2262
sg91
Nsb(dp2263
sg5
(g25
g7
Ntp2264
Rp2265
(dp2266
g29
(dp2267
sg31
g5
(cnipype.interfaces.afni.preprocess
Resample
p2268
g7
Ntp2269
Rp2270
(dp2271
g36
g37
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2272
tp2273
Rp2274
(dp2275
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2252
S'NIFTI_GZ'
p2276
sS'resample_mode'
p2277
g45
sS'voxel_size'
p2278
g45
sg53
g54
sS'master'
p2279
g45
sg67
g45
sg55
g5
(g56
g57
(dp2280
tp2281
Rp2282
(dp2283
g64
S'environ_items'
p2284
sg66
g55
sbsS'orientation'
p2285
S'RPI'
p2286
sbsg2259
g2276
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2287
sg83
Nsg80
Nsg90
Nsg66
S'anat_reorient'
p2288
sg78
g2237
sg82
I00
sg84
Nsg85
I00
sg86
g2288
sg87
Nsg88
(lp2289
sg91
Nsb(dp2290
sg5
(g25
g7
Ntp2291
Rp2292
(dp2293
g29
(dp2294
sg31
g5
(cnipype.interfaces.afni.preprocess
Refit
p2295
g7
Ntp2296
Rp2297
(dp2298
g36
g37
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2299
tp2300
Rp2301
(dp2302
g42
I00
sg51
g52
sS'deoblique'
p2303
I01
sg49
g45
sS'yorigin'
p2304
g45
sg53
g54
sg55
g5
(g56
g57
(dp2305
tp2306
Rp2307
(dp2308
g64
S'environ_items'
p2309
sg66
g55
sbsg67
g45
sS'xorigin'
p2310
g45
sS'zorigin'
p2311
g45
sbsg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2312
sg83
Nsg80
Nsg90
Nsg66
S'anat_deoblique'
p2313
sg78
g2237
sg82
I00
sg84
Nsg85
I00
sg86
g2313
sg87
Nsg88
(lp2314
sg91
Nsb(dp2315
sg5
(g25
g7
Ntp2316
Rp2317
(dp2318
g29
(dp2319
sg31
g5
(cnipype.interfaces.afni.preprocess
Calc
p2320
g7
Ntp2321
Rp2322
(dp2323
g36
g37
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2324
tp2325
Rp2326
(dp2327
S'stop_idx'
p2328
g45
sg42
I00
sg51
g52
sg48
g45
sS'expr'
p2329
S'a*step(b)'
p2330
sg49
g45
sg2252
g2276
sS'in_file_b'
p2331
g45
sS'in_file_c'
p2332
g45
sS'in_file_a'
p2333
g45
sg55
g5
(g56
g57
(dp2334
tp2335
Rp2336
(dp2337
g64
S'environ_items'
p2338
sg66
g55
sbsS'single_idx'
p2339
g45
sS'other'
p2340
g45
sS'start_idx'
p2341
g45
sg53
g54
sbsg2259
g2276
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2342
sg83
Nsg80
Nsg90
Nsg66
S'anat_brain_only'
p2343
sg78
g2237
sg82
I00
sg84
Nsg85
I00
sg86
g2343
sg87
Nsg88
(lp2344
sg91
Nsb(dp2345
sg5
(g25
g7
Ntp2346
Rp2347
(dp2348
g29
(dp2349
sg31
g5
(g97
g7
Ntp2350
Rp2351
(dp2352
g36
g37
(g101
tp2353
Rp2354
(dp2355
S'reorient'
p2356
g45
sg154
g45
sS'refit'
p2357
g45
sg51
g52
sS'skullstrip'
p2358
g45
sbsg109
(lp2359
g2357
ag2356
ag2358
ag154
asg111
I01
sbsg74
Nsg81
I00
sg76
(dp2360
sg83
Nsg80
Nsg90
Nsg66
g112
sg78
g2237
sg82
I00
sg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp2361
sg91
Nsb(dp2362
ssg249
(dp2363
g2225
(dp2364
g2292
(dp2365
g253
(lp2366
(g2234
g67
tp2367
asssg2241
(dp2368
g2317
(dp2369
g253
(lp2370
(g48
g2331
tp2371
assg2347
(dp2372
g253
(lp2373
(g48
g2358
tp2374
asssg2265
(dp2375
g2241
(dp2376
g253
(lp2377
(g48
g67
tp2378
assg2317
(dp2379
g253
(lp2380
(g48
g2333
tp2381
assg2347
(dp2382
g253
(lp2383
(g48
g2356
tp2384
asssg2292
(dp2385
g2265
(dp2386
g253
(lp2387
(g48
g67
tp2388
assg2347
(dp2389
g253
(lp2390
(g48
g2357
tp2391
asssg2317
(dp2392
g2347
(dp2393
g253
(lp2394
(g48
g154
tp2395
asssg2347
(dp2396
ssg295
g2363
sg296
(dp2397
g2225
(dp2398
sg2241
(dp2399
g2265
g2376
ssg2265
(dp2400
g2292
g2386
ssg2292
(dp2401
g2225
g2365
ssg2317
(dp2402
g2241
g2369
sg2265
g2379
ssg2347
(dp2403
g2241
g2372
sg2265
g2382
sg2292
g2389
sg2317
g2393
sssg247
(dp2404
sg304
g2363
sbsg66
g2237
sg78
g1067
sg86
g2237
sg87
g306
((lp2405
(lp2406
g309
ag306
((lp2407
(lp2408
g312
ag309
aa(lp2409
g314
ag315
aa(lp2410
g317
ag318
aa(lp2411
g320
ag321
aa(lp2412
g323
ag324
aa(lp2413
g326
ag327
aa(lp2414
g329
ag330
aa(lp2415
g332
ag333
aatp2416
Rp2417
aa(lp2418
g337
ag306
((lp2419
(lp2420
g312
ag337
aa(lp2421
g341
ag342
aa(lp2422
g344
ag345
aa(lp2423
g347
ag348
aa(lp2424
g350
ag351
aa(lp2425
g353
ag354
aa(lp2426
g356
ag357
aa(lp2427
g359
ag360
aa(lp2428
g362
ag363
aa(lp2429
g365
ag366
aa(lp2430
g368
ag369
aa(lp2431
g371
ag372
aa(lp2432
g374
ag375
aa(lp2433
g377
ag378
aa(lp2434
g380
ag381
aa(lp2435
g383
ag384
aa(lp2436
g386
ag387
aa(lp2437
g389
ag390
aa(lp2438
g392
ag393
aatp2439
Rp2440
aa(lp2441
g397
ag306
((lp2442
(lp2443
g312
ag397
aa(lp2444
g401
ag402
aatp2445
Rp2446
aatp2447
Rp2448
sg91
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g25
g7
Ntp2459
Rp2460
(dp2461
g29
(dp2462
sg31
g5
(cnipype.interfaces.afni.preprocess
TStat
p2463
g7
Ntp2464
Rp2465
(dp2466
g36
g37
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2467
tp2468
Rp2469
(dp2470
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg1897
g45
sg2252
g2276
sg53
g54
sg55
g5
(g56
g57
(dp2471
tp2472
Rp2473
(dp2474
g64
S'environ_items'
p2475
sg66
g55
sbsg67
g45
sS'options'
p2476
S'-mean'
p2477
sbsg2259
g2276
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2478
sg83
Nsg80
Nsg90
Nsg66
S'func_get_mean_motion'
p2479
sg78
S'func_preproc_automask_0'
p2480
sg82
I00
sg84
Nsg85
I00
sg86
g2479
sg87
Nsg88
(lp2481
sg91
Nsb(dp2482
sg5
(g25
g7
Ntp2483
Rp2484
(dp2485
g29
(dp2486
sg31
g5
(g120
g7
Ntp2487
Rp2488
(dp2489
g36
g37
(g124
tp2490
Rp2491
(dp2492
g42
I00
sg51
g52
sg46
S'-ing 10000'
p2493
sg128
S'float'
p2494
sg48
g45
sg49
g45
sg129
g45
sg53
g54
sg55
g5
(g56
g57
(dp2495
g59
g60
stp2496
Rp2497
(dp2498
g64
S'environ_items'
p2499
sg66
g55
sbsg67
g45
sg68
g60
sg135
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_normalize'
p2500
sg76
(dp2501
sg78
g2480
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2500
sg87
Nsg88
(lp2502
sg90
Nsg91
Nsb(dp2503
sg5
(g25
g7
Ntp2504
Rp2505
(dp2506
g29
(dp2507
sg31
g5
(g2295
g7
Ntp2508
Rp2509
(dp2510
g36
g37
(g2299
tp2511
Rp2512
(dp2513
g42
I00
sg51
g52
sg2303
I01
sg49
g45
sg2304
g45
sg53
g54
sg55
g5
(g56
g57
(dp2514
tp2515
Rp2516
(dp2517
g64
S'environ_items'
p2518
sg66
g55
sbsg67
g45
sg2310
g45
sg2311
g45
sbsg72
Nsg73
g54
sbsg74
Nsg66
S'func_deoblique'
p2519
sg76
(dp2520
sg78
g2480
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2519
sg87
Nsg88
(lp2521
sg90
Nsg91
Nsb(dp2522
sg5
(g25
g7
Ntp2523
Rp2524
(dp2525
g29
(dp2526
sg31
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2527
g7
Ntp2528
Rp2529
(dp2530
g36
g37
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2531
tp2532
Rp2533
(dp2534
S'oned_file'
p2535
g45
sg42
I00
sg176
g45
sS'timeshift'
p2536
g45
sS'basefile'
p2537
g45
sg49
S'-Fourier -twopass'
p2538
sg2252
g2276
sS'zpad'
p2539
I4
sg53
g54
sS'md1d_file'
p2540
S'max_displacement.1D'
p2541
sg67
g45
sS'copyorigin'
p2542
g45
sg55
g5
(g56
g57
(dp2543
tp2544
Rp2545
(dp2546
g64
S'environ_items'
p2547
sg66
g55
sbsg1899
g45
sg51
g52
sg48
g45
sbsg2259
g2276
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2548
sg83
Nsg80
Nsg90
Nsg66
S'func_motion_correct_A'
p2549
sg78
g2480
sg82
I00
sg84
Nsg85
I00
sg86
g2549
sg87
Nsg88
(lp2550
sg91
Nsb(dp2551
sg5
(g25
g7
Ntp2552
Rp2553
(dp2554
g29
(dp2555
sg31
g5
(g97
g7
Ntp2556
Rp2557
(dp2558
g36
g37
(g101
tp2559
Rp2560
(dp2561
g51
g52
sS'func'
p2562
g45
sbsg109
(lp2563
g2562
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp2564
sg78
g2480
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp2565
sg90
Nsg91
Nsb(dp2566
sg5
(g25
g7
Ntp2567
Rp2568
(dp2569
g29
(dp2570
sg31
g5
(g2527
g7
Ntp2571
Rp2572
(dp2573
g36
g37
(g2531
tp2574
Rp2575
(dp2576
g2535
g45
sg42
I00
sg176
g45
sg2536
g45
sg2537
g45
sg49
g2538
sg2252
g2276
sg2539
I4
sg53
g54
sg2540
g45
sg67
g45
sg2542
g45
sg55
g5
(g56
g57
(dp2577
tp2578
Rp2579
(dp2580
g64
S'environ_items'
p2581
sg66
g55
sbsg1899
g45
sg51
g52
sg48
g45
sbsg2259
g2276
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_motion_correct'
p2582
sg76
(dp2583
sg78
g2480
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2582
sg87
Nsg88
(lp2584
sg90
Nsg91
Nsb(dp2585
sg5
(g25
g7
Ntp2586
Rp2587
(dp2588
g29
(dp2589
sg31
g5
(g2268
g7
Ntp2590
Rp2591
(dp2592
g36
g37
(g2272
tp2593
Rp2594
(dp2595
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2252
g2276
sg2277
g45
sg2278
g45
sg53
g54
sg2279
g45
sg67
g45
sg55
g5
(g56
g57
(dp2596
tp2597
Rp2598
(dp2599
g64
S'environ_items'
p2600
sg66
g55
sbsg2285
g2286
sbsg2259
g2276
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_reorient'
p2601
sg76
(dp2602
sg78
g2480
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2601
sg87
Nsg88
(lp2603
sg90
Nsg91
Nsb(dp2604
sg5
(g25
g7
Ntp2605
Rp2606
(dp2607
g29
(dp2608
sg31
g5
(g2463
g7
Ntp2609
Rp2610
(dp2611
g36
g37
(g2467
tp2612
Rp2613
(dp2614
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg1897
g45
sg2252
g2276
sg53
g54
sg55
g5
(g56
g57
(dp2615
tp2616
Rp2617
(dp2618
g64
S'environ_items'
p2619
sg66
g55
sbsg67
g45
sg2476
g2477
sbsg2259
g2276
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mean_skullstrip'
p2620
sg76
(dp2621
sg78
g2480
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2620
sg87
Nsg88
(lp2622
sg90
Nsg91
Nsb(dp2623
sg5
(g25
g7
Ntp2624
Rp2625
(dp2626
g29
(dp2627
sg31
g5
(g2463
g7
Ntp2628
Rp2629
(dp2630
g36
g37
(g2467
tp2631
Rp2632
(dp2633
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg1897
g45
sg2252
g2276
sg53
g54
sg55
g5
(g56
g57
(dp2634
tp2635
Rp2636
(dp2637
g64
S'environ_items'
p2638
sg66
g55
sbsg67
g45
sg2476
g2477
sbsg2259
g2276
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_get_mean_RPI'
p2639
sg76
(dp2640
sg78
g2480
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2639
sg87
Nsg88
(lp2641
sg90
Nsg91
Nsb(dp2642
sg5
(g25
g7
Ntp2643
Rp2644
(dp2645
g29
(dp2646
sg31
g5
(g120
g7
Ntp2647
Rp2648
(dp2649
g36
g37
(g124
tp2650
Rp2651
(dp2652
g42
I00
sg51
g52
sg46
S'-Tmin -bin'
p2653
sg128
S'char'
p2654
sg48
g45
sg49
g45
sg129
g45
sg53
g54
sg55
g5
(g56
g57
(dp2655
g59
g60
stp2656
Rp2657
(dp2658
g64
S'environ_items'
p2659
sg66
g55
sbsg67
g45
sg68
g60
sg135
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mask_normalize'
p2660
sg76
(dp2661
sg78
g2480
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2660
sg87
Nsg88
(lp2662
sg90
Nsg91
Nsb(dp2663
sg5
(g25
g7
Ntp2664
Rp2665
(dp2666
g29
(dp2667
sg31
g5
(g97
g7
Ntp2668
Rp2669
(dp2670
g36
g37
(g101
tp2671
Rp2672
(dp2673
g1894
g45
sS'motion_correct_ref'
p2674
g45
sg51
g52
sS'preprocessed_mask'
p2675
g45
sg1897
g45
sg2357
g45
sg2358
g45
sg2356
g45
sS'preprocessed'
p2676
g45
sS'slice_time_corrected'
p2677
g45
sg1898
g45
sS'example_func'
p2678
g45
sg1899
g45
sS'reorient_mean'
p2679
g45
sg1900
g45
sbsg109
(lp2680
g2357
ag2356
ag2679
ag1900
ag2674
ag1898
ag1894
ag1897
ag2358
ag2678
ag2676
ag2675
ag2677
ag1899
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp2681
sg78
g2480
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp2682
sg90
Nsg91
Nsb(dp2683
sg5
(g25
g7
Ntp2684
Rp2685
(dp2686
g29
(dp2687
sg31
g5
(g2320
g7
Ntp2688
Rp2689
(dp2690
g36
g37
(g2324
tp2691
Rp2692
(dp2693
g2328
g45
sg42
I00
sg51
g52
sg48
g45
sg2329
S'a*b'
p2694
sg49
g45
sg2252
g2276
sg2331
g45
sg2332
g45
sg2333
g45
sg55
g5
(g56
g57
(dp2695
tp2696
Rp2697
(dp2698
g64
S'environ_items'
p2699
sg66
g55
sbsg2339
g45
sg2340
g45
sg2341
g45
sg53
g54
sbsg2259
g2276
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_edge_detect'
p2700
sg76
(dp2701
sg78
g2480
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2700
sg87
Nsg88
(lp2702
sg90
Nsg91
Nsb(dp2703
sg5
(g25
g7
Ntp2704
Rp2705
(dp2706
g29
(dp2707
sg31
g5
(cnipype.interfaces.afni.preprocess
Automask
p2708
g7
Ntp2709
Rp2710
(dp2711
g36
g37
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2712
tp2713
Rp2714
(dp2715
g42
I00
sg51
g52
sg49
g45
sS'erode'
p2716
g45
sg48
g45
sS'dilate'
p2717
g45
sS'clfrac'
p2718
g45
sg2252
g2276
sS'brain_file'
p2719
g45
sg53
g54
sg55
g5
(g56
g57
(dp2720
tp2721
Rp2722
(dp2723
g64
S'environ_items'
p2724
sg66
g55
sbsg67
g45
sbsg2259
g2276
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_get_brain_mask'
p2725
sg76
(dp2726
sg78
g2480
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2725
sg87
Nsg88
(lp2727
sg90
Nsg91
Nsb(dp2728
ssg247
(dp2729
sg249
(dp2730
g2460
(dp2731
g2524
(dp2732
g253
(lp2733
(g48
g2537
tp2734
assg2665
(dp2735
g253
(lp2736
(g48
g2674
tp2737
asssg2484
(dp2738
g2665
(dp2739
g253
(lp2740
(g48
g2676
tp2741
assg2644
(dp2742
g253
(lp2743
(g48
g67
tp2744
asssg2505
(dp2745
g2587
(dp2746
g253
(lp2747
(g48
g67
tp2748
asssg2524
(dp2749
g2685
(dp2750
g253
(lp2751
(g48
g2333
tp2752
assg2665
(dp2753
g253
(lp2754
(g48
g1900
tp2755
a(g2540
g1894
tp2756
a(g2535
g1898
tp2757
a(g1899
g1899
tp2758
assg2705
(dp2759
g253
(lp2760
(g48
g67
tp2761
asssg2553
(dp2762
g2505
(dp2763
g253
(lp2764
(g2562
g67
tp2765
asssg2568
(dp2766
g2460
(dp2767
g253
(lp2768
(g48
g67
tp2769
asssg2587
(dp2770
g2625
(dp2771
g253
(lp2772
(g48
g67
tp2773
assg2524
(dp2774
g253
(lp2775
(g48
g67
tp2776
assg2665
(dp2777
g253
(lp2778
(g48
g2356
tp2779
assg2568
(dp2780
g253
(lp2781
(g48
g67
tp2782
asssg2606
(dp2783
g2665
(dp2784
g253
(lp2785
(g48
g2678
tp2786
asssg2625
(dp2787
g2568
(dp2788
g253
(lp2789
(g48
g2537
tp2790
asssg2644
(dp2791
g2665
(dp2792
g253
(lp2793
(g48
g2675
tp2794
asssg2665
(dp2795
sg2685
(dp2796
g2484
(dp2797
g253
(lp2798
(g48
g67
tp2799
assg2665
(dp2800
g253
(lp2801
(g48
g2358
tp2802
assg2606
(dp2803
g253
(lp2804
(g48
g67
tp2805
asssg2705
(dp2806
g2685
(dp2807
g253
(lp2808
(g48
g2331
tp2809
assg2665
(dp2810
g253
(lp2811
(g48
g1897
tp2812
assssg295
g2730
sg296
(dp2813
g2460
(dp2814
g2568
g2767
ssg2484
(dp2815
g2685
g2797
ssg2505
(dp2816
g2553
g2763
ssg2524
(dp2817
g2460
g2732
sg2587
g2774
ssg2553
(dp2818
sg2568
(dp2819
g2625
g2788
sg2587
g2780
ssg2587
(dp2820
g2505
g2746
ssg2606
(dp2821
g2685
g2803
ssg2625
(dp2822
g2587
g2771
ssg2644
(dp2823
g2484
g2742
ssg2665
(dp2824
g2460
g2735
sg2606
g2784
sg2484
g2739
sg2685
g2800
sg2587
g2777
sg2524
g2753
sg2644
g2792
sg2705
g2810
ssg2685
(dp2825
g2524
g2750
sg2705
g2807
ssg2705
(dp2826
g2524
g2759
sssg304
g2730
sbsg66
g2480
sg78
g1067
sg86
g2480
sg87
g306
((lp2827
(lp2828
g309
ag306
((lp2829
(lp2830
g312
ag309
aa(lp2831
g314
ag315
aa(lp2832
g317
ag318
aa(lp2833
g320
ag321
aa(lp2834
g323
ag324
aa(lp2835
g326
ag327
aa(lp2836
g329
ag330
aa(lp2837
g332
ag333
aatp2838
Rp2839
aa(lp2840
g337
ag306
((lp2841
(lp2842
g312
ag337
aa(lp2843
g341
ag342
aa(lp2844
g344
ag345
aa(lp2845
g347
ag348
aa(lp2846
g350
ag351
aa(lp2847
g353
ag354
aa(lp2848
g356
ag357
aa(lp2849
g359
ag360
aa(lp2850
g362
ag363
aa(lp2851
g365
ag366
aa(lp2852
g368
ag369
aa(lp2853
g371
ag372
aa(lp2854
g374
ag375
aa(lp2855
g377
ag378
aa(lp2856
g380
ag381
aa(lp2857
g383
ag384
aa(lp2858
g386
ag387
aa(lp2859
g389
ag390
aa(lp2860
g392
ag393
aatp2861
Rp2862
aa(lp2863
g397
ag306
((lp2864
(lp2865
g312
ag397
aa(lp2866
g401
ag402
aatp2867
Rp2868
aatp2869
Rp2870
sg91
NsbS'outputspec.example_func'
p2871
tp2872
sg1898
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g25
g7
Ntp2880
Rp2881
(dp2882
g29
(dp2883
sg31
g5
(g1403
g7
Ntp2884
Rp2885
(dp2886
g1407
(lp2887
g67
asg36
g37
(g1410
tp2888
Rp2889
(dp2890
g42
I00
sg51
g52
sg1414
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2891
sg67
g45
sbsg1416
(dp2892
g48
Nssg1419
(lp2893
g48
asg1421
Nsbsg74
Nsg66
S'calc_friston'
p2894
sg76
(dp2895
sg78
S'fristons_parameter_model_0'
p2896
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2894
sg87
Nsg88
(lp2897
sg90
Nsg91
Nsb(dp2898
sg5
(g25
g7
Ntp2899
Rp2900
(dp2901
g29
(dp2902
sg31
g5
(g97
g7
Ntp2903
Rp2904
(dp2905
g36
g37
(g101
tp2906
Rp2907
(dp2908
g51
g52
sS'movement_file'
p2909
g45
sbsg109
(lp2910
g2909
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp2911
sg78
g2896
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp2912
sg90
Nsg91
Nsb(dp2913
sg5
(g25
g7
Ntp2914
Rp2915
(dp2916
g29
(dp2917
sg31
g5
(g97
g7
Ntp2918
Rp2919
(dp2920
g36
g37
(g101
tp2921
Rp2922
(dp2923
g51
g52
sg2909
g45
sbsg109
(lp2924
g2909
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp2925
sg78
g2896
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp2926
sg90
Nsg91
Nsb(dp2927
ssg247
(dp2928
sg249
(dp2929
g2881
(dp2930
g2915
(dp2931
g253
(lp2932
(g48
g2909
tp2933
asssg2900
(dp2934
g2881
(dp2935
g253
(lp2936
(g2909
g67
tp2937
asssg2915
(dp2938
ssg295
g2929
sg296
(dp2939
g2881
(dp2940
g2900
g2935
ssg2900
(dp2941
sg2915
(dp2942
g2881
g2931
sssg304
g2929
sbsg66
g2896
sg78
g1067
sg86
g2896
sg87
g306
((lp2943
(lp2944
g309
ag306
((lp2945
(lp2946
g312
ag309
aa(lp2947
g314
ag315
aa(lp2948
g317
ag318
aa(lp2949
g320
ag321
aa(lp2950
g323
ag324
aa(lp2951
g326
ag327
aa(lp2952
g329
ag330
aa(lp2953
g332
ag333
aatp2954
Rp2955
aa(lp2956
g337
ag306
((lp2957
(lp2958
g312
ag337
aa(lp2959
g341
ag342
aa(lp2960
g344
ag345
aa(lp2961
g347
ag348
aa(lp2962
g350
ag351
aa(lp2963
g353
ag354
aa(lp2964
g356
ag357
aa(lp2965
g359
ag360
aa(lp2966
g362
ag363
aa(lp2967
g365
ag366
aa(lp2968
g368
ag369
aa(lp2969
g371
ag372
aa(lp2970
g374
ag375
aa(lp2971
g377
ag378
aa(lp2972
g380
ag381
aa(lp2973
g383
ag384
aa(lp2974
g386
ag387
aa(lp2975
g389
ag390
aa(lp2976
g392
ag393
aatp2977
Rp2978
aa(lp2979
g397
ag306
((lp2980
(lp2981
g312
ag397
aa(lp2982
g401
ag402
aatp2983
Rp2984
aatp2985
Rp2986
sg91
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g25
g7
Ntp2997
Rp2998
(dp2999
g29
(dp3000
sg31
g5
(g97
g7
Ntp3001
Rp3002
(dp3003
g36
g37
(g101
tp3004
Rp3005
(dp3006
g51
g52
sg1453
g45
sg1452
g45
sbsg109
(lp3007
g1453
ag1452
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp3008
sg78
S'montage_anat_0'
p3009
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp3010
sg90
Nsg91
Nsb(dp3011
sg5
(g25
g7
Ntp3012
Rp3013
(dp3014
g29
(dp3015
sg31
g5
(g1403
g7
Ntp3016
Rp3017
(dp3018
g1407
(lp3019
g1409
asg36
g37
(g1410
tp3020
Rp3021
(dp3022
g42
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3023
sg1409
g45
sg51
g52
sbsg1416
(dp3024
g1418
Nssg1419
(lp3025
g1418
asg1421
Nsbsg74
Nsg66
g1422
sg76
(dp3026
sg78
g3009
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1422
sg87
Nsg88
(lp3027
sg90
Nsg91
Nsb(dp3028
sg5
(g25
g7
Ntp3029
Rp3030
(dp3031
g29
(dp3032
sg31
g5
(g1403
g7
Ntp3033
Rp3034
(dp3035
g1407
(lp3036
g1452
ag1453
ag1454
ag1455
asg36
g37
(g1410
tp3037
Rp3038
(dp3039
g42
I00
sg1454
S't1_edge_on_mean_func_in_t1_s.png'
p3040
sg1452
g45
sg1455
g1460
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3041
sg1453
g45
sg51
g52
sbsg1416
(dp3042
g1454
Nssg1419
(lp3043
g1454
asg1421
Nsbsg74
Nsg66
g1516
sg76
(dp3044
sg78
g3009
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp3045
sg90
Nsg91
Nsb(dp3046
sg5
(g25
g7
Ntp3047
Rp3048
(dp3049
g29
(dp3050
sg31
g5
(g1403
g7
Ntp3051
Rp3052
(dp3053
g1407
(lp3054
g1452
ag1453
ag1454
ag1455
asg36
g37
(g1410
tp3055
Rp3056
(dp3057
g42
I00
sg1454
S't1_edge_on_mean_func_in_t1_a.png'
p3058
sg1452
g45
sg1455
g1460
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3059
sg1453
g45
sg51
g52
sbsg1416
(dp3060
g1454
Nssg1419
(lp3061
g1454
asg1421
Nsbsg74
Nsg66
g1464
sg76
(dp3062
sg78
g3009
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1464
sg87
Nsg88
(lp3063
sg90
Nsg91
Nsb(dp3064
sg5
(g25
g7
Ntp3065
Rp3066
(dp3067
g29
(dp3068
sg31
g5
(g97
g7
Ntp3069
Rp3070
(dp3071
g36
g37
(g101
tp3072
Rp3073
(dp3074
g51
g52
sg1493
g45
sg1494
g45
sg1495
g45
sg1496
g45
sbsg109
(lp3075
g1494
ag1495
ag1493
ag1496
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp3076
sg78
g3009
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp3077
sg90
Nsg91
Nsb(dp3078
sg5
(g25
g7
Ntp3079
Rp3080
(dp3081
g29
(dp3082
sg31
g5
(g1403
g7
Ntp3083
Rp3084
(dp3085
g1407
(lp3086
g1409
asg36
g37
(g1410
tp3087
Rp3088
(dp3089
g42
I00
sg1414
g3023
sg1409
g45
sg51
g52
sbsg1416
(dp3090
g1418
Nssg1419
(lp3091
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp3092
sg83
Nsg80
Nsg90
Nsg66
g1441
sg78
g3009
sg82
I00
sg84
Nsg85
I00
sg86
g1441
sg87
Nsg88
(lp3093
sg91
Nsb(dp3094
ssg247
(dp3095
sg249
(dp3096
g2998
(dp3097
g3013
(dp3098
g253
(lp3099
(g1453
g1409
tp3100
assg3080
(dp3101
g253
(lp3102
(g1452
g1409
tp3103
asssg3013
(dp3104
g3048
(dp3105
g253
(lp3106
(g1418
g1453
tp3107
assg3030
(dp3108
g253
(lp3109
(g1418
g1453
tp3110
assg3066
(dp3111
g253
(lp3112
(g1418
g1493
tp3113
asssg3030
(dp3114
g3066
(dp3115
g253
(lp3116
(g1454
g1495
tp3117
asssg3048
(dp3118
g3066
(dp3119
g253
(lp3120
(g1454
g1494
tp3121
asssg3066
(dp3122
sg3080
(dp3123
g3048
(dp3124
g253
(lp3125
(g1418
g1452
tp3126
assg3030
(dp3127
g253
(lp3128
(g1418
g1452
tp3129
assg3066
(dp3130
g253
(lp3131
(g1418
g1496
tp3132
assssg295
g3096
sg296
(dp3133
g2998
(dp3134
sg3013
(dp3135
g2998
g3098
ssg3030
(dp3136
g3013
g3108
sg3080
g3127
ssg3048
(dp3137
g3013
g3105
sg3080
g3124
ssg3066
(dp3138
g3013
g3111
sg3030
g3115
sg3080
g3130
sg3048
g3119
ssg3080
(dp3139
g2998
g3101
sssg304
g3096
sbsg66
g3009
sg78
g1067
sg86
g3009
sg87
g306
((lp3140
(lp3141
g309
ag306
((lp3142
(lp3143
g312
ag309
aa(lp3144
g314
ag315
aa(lp3145
g317
ag318
aa(lp3146
g320
ag321
aa(lp3147
g323
ag324
aa(lp3148
g326
ag327
aa(lp3149
g329
ag330
aa(lp3150
g332
ag333
aatp3151
Rp3152
aa(lp3153
g337
ag306
((lp3154
(lp3155
g312
ag337
aa(lp3156
g341
ag342
aa(lp3157
g344
ag345
aa(lp3158
g347
ag348
aa(lp3159
g350
ag351
aa(lp3160
g353
ag354
aa(lp3161
g356
ag357
aa(lp3162
g359
ag360
aa(lp3163
g362
ag363
aa(lp3164
g365
ag366
aa(lp3165
g368
ag369
aa(lp3166
g371
ag372
aa(lp3167
g374
ag375
aa(lp3168
g377
ag378
aa(lp3169
g380
ag381
aa(lp3170
g383
ag384
aa(lp3171
g386
ag387
aa(lp3172
g389
ag390
aa(lp3173
g392
ag393
aatp3174
Rp3175
aa(lp3176
g397
ag306
((lp3177
(lp3178
g312
ag397
aa(lp3179
g401
ag402
aatp3180
Rp3181
aatp3182
Rp3183
sg91
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg1894
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g25
g7
Ntp3201
Rp3202
(dp3203
g29
(dp3204
sg31
g5
(g1403
g7
Ntp3205
Rp3206
(dp3207
g1407
(lp3208
S'overlay_csf'
p3209
aS'overlay_wm'
p3210
aS'overlay_gm'
p3211
ag1453
ag1454
asg36
g37
(g1410
tp3212
Rp3213
(dp3214
g42
I00
sg1454
S'montage_csf_gm_wm_a.png'
p3215
sg3211
g45
sg1414
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3216
sg3209
g45
sg3210
g45
sg1453
g45
sg51
g52
sbsg1416
(dp3217
g1454
Nssg1419
(lp3218
g1454
asg1421
Nsbsg74
Nsg66
g1464
sg76
(dp3219
sg78
S'montage_csf_gm_wm_0'
p3220
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1464
sg87
Nsg88
(lp3221
sg90
Nsg91
Nsb(dp3222
sg5
(g25
g7
Ntp3223
Rp3224
(dp3225
g29
(dp3226
sg31
g5
(g97
g7
Ntp3227
Rp3228
(dp3229
g36
g37
(g101
tp3230
Rp3231
(dp3232
g51
g52
sS'resampled_overlay_csf'
p3233
g45
sS'resampled_overlay_gm'
p3234
g45
sg1494
g45
sg1495
g45
sg1493
g45
sS'resampled_overlay_wm'
p3235
g45
sbsg109
(lp3236
g1494
ag1495
ag1493
ag3233
ag3235
ag3234
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp3237
sg78
g3220
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp3238
sg90
Nsg91
Nsb(dp3239
sg5
(g25
g7
Ntp3240
Rp3241
(dp3242
g29
(dp3243
sg31
g5
(g1403
g7
Ntp3244
Rp3245
(dp3246
g1407
(lp3247
g1409
asg36
g37
(g1410
tp3248
Rp3249
(dp3250
g42
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3251
sg1409
g45
sg51
g52
sbsg1416
(dp3252
g1418
Nssg1419
(lp3253
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp3254
sg83
Nsg80
Nsg90
Nsg66
S'resample_o_wm'
p3255
sg78
g3220
sg82
I00
sg84
Nsg85
I00
sg86
g3255
sg87
Nsg88
(lp3256
sg91
Nsb(dp3257
sg5
(g25
g7
Ntp3258
Rp3259
(dp3260
g29
(dp3261
sg31
g5
(g1403
g7
Ntp3262
Rp3263
(dp3264
g1407
(lp3265
g1409
asg36
g37
(g1410
tp3266
Rp3267
(dp3268
g42
I00
sg1414
g3251
sg1409
g45
sg51
g52
sbsg1416
(dp3269
g1418
Nssg1419
(lp3270
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp3271
sg83
Nsg80
Nsg90
Nsg66
S'resample_o_gm'
p3272
sg78
g3220
sg82
I00
sg84
Nsg85
I00
sg86
g3272
sg87
Nsg88
(lp3273
sg91
Nsb(dp3274
sg5
(g25
g7
Ntp3275
Rp3276
(dp3277
g29
(dp3278
sg31
g5
(g97
g7
Ntp3279
Rp3280
(dp3281
g36
g37
(g101
tp3282
Rp3283
(dp3284
g51
g52
sg3211
g45
sg1453
g45
sg3209
g45
sg3210
g45
sbsg109
(lp3285
g1453
ag3209
ag3210
ag3211
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp3286
sg78
g3220
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp3287
sg90
Nsg91
Nsb(dp3288
sg5
(g25
g7
Ntp3289
Rp3290
(dp3291
g29
(dp3292
sg31
g5
(g1403
g7
Ntp3293
Rp3294
(dp3295
g1407
(lp3296
g3209
ag3210
ag3211
ag1453
ag1454
asg36
g37
(g1410
tp3297
Rp3298
(dp3299
g42
I00
sg1454
S'montage_csf_gm_wm_s.png'
p3300
sg3211
g45
sg1414
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3301
sg3209
g45
sg3210
g45
sg1453
g45
sg51
g52
sbsg1416
(dp3302
g1454
Nssg1419
(lp3303
g1454
asg1421
Nsbsg74
Nsg66
g1516
sg76
(dp3304
sg78
g3220
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp3305
sg90
Nsg91
Nsb(dp3306
sg5
(g25
g7
Ntp3307
Rp3308
(dp3309
g29
(dp3310
sg31
g5
(g1403
g7
Ntp3311
Rp3312
(dp3313
g1407
(lp3314
g1409
asg36
g37
(g1410
tp3315
Rp3316
(dp3317
g42
I00
sg1414
g3251
sg1409
g45
sg51
g52
sbsg1416
(dp3318
g1418
Nssg1419
(lp3319
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp3320
sg83
Nsg80
Nsg90
Nsg66
S'resample_o_csf'
p3321
sg78
g3220
sg82
I00
sg84
Nsg85
I00
sg86
g3321
sg87
Nsg88
(lp3322
sg91
Nsb(dp3323
sg5
(g25
g7
Ntp3324
Rp3325
(dp3326
g29
(dp3327
sg31
g5
(g1403
g7
Ntp3328
Rp3329
(dp3330
g1407
(lp3331
g1409
asg36
g37
(g1410
tp3332
Rp3333
(dp3334
g42
I00
sg1414
g3251
sg1409
g45
sg51
g52
sbsg1416
(dp3335
g1418
Nssg1419
(lp3336
g1418
asg1421
Nsbsg74
Nsg66
g1422
sg76
(dp3337
sg78
g3220
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1422
sg87
Nsg88
(lp3338
sg90
Nsg91
Nsb(dp3339
ssg247
(dp3340
sg249
(dp3341
g3202
(dp3342
g3224
(dp3343
g253
(lp3344
(g1454
g1494
tp3345
asssg3224
(dp3346
sg3241
(dp3347
g3224
(dp3348
g253
(lp3349
(g1418
g3235
tp3350
assg3202
(dp3351
g253
(lp3352
(g1418
g3210
tp3353
assg3290
(dp3354
g253
(lp3355
(g1418
g3210
tp3356
asssg3259
(dp3357
g3224
(dp3358
g253
(lp3359
(g1418
g3234
tp3360
assg3202
(dp3361
g253
(lp3362
(g1418
g3211
tp3363
assg3290
(dp3364
g253
(lp3365
(g1418
g3211
tp3366
asssg3276
(dp3367
g3241
(dp3368
g253
(lp3369
(g3210
g1409
tp3370
assg3259
(dp3371
g253
(lp3372
(g3211
g1409
tp3373
assg3325
(dp3374
g253
(lp3375
(g1453
g1409
tp3376
assg3308
(dp3377
g253
(lp3378
(g3209
g1409
tp3379
asssg3290
(dp3380
g3224
(dp3381
g253
(lp3382
(g1454
g1495
tp3383
asssg3308
(dp3384
g3224
(dp3385
g253
(lp3386
(g1418
g3233
tp3387
assg3202
(dp3388
g253
(lp3389
(g1418
g3209
tp3390
assg3290
(dp3391
g253
(lp3392
(g1418
g3209
tp3393
asssg3325
(dp3394
g3224
(dp3395
g253
(lp3396
(g1418
g1493
tp3397
assg3202
(dp3398
g253
(lp3399
(g1418
g1453
tp3400
assg3290
(dp3401
g253
(lp3402
(g1418
g1453
tp3403
assssg295
g3341
sg296
(dp3404
g3202
(dp3405
g3241
g3351
sg3259
g3361
sg3325
g3398
sg3308
g3388
ssg3224
(dp3406
g3202
g3343
sg3241
g3348
sg3259
g3358
sg3325
g3395
sg3290
g3381
sg3308
g3385
ssg3241
(dp3407
g3276
g3368
ssg3259
(dp3408
g3276
g3371
ssg3276
(dp3409
sg3290
(dp3410
g3241
g3354
sg3259
g3364
sg3325
g3401
sg3308
g3391
ssg3308
(dp3411
g3276
g3377
ssg3325
(dp3412
g3276
g3374
sssg304
g3341
sbsg66
g3220
sg78
g1067
sg86
g3220
sg87
g306
((lp3413
(lp3414
g309
ag306
((lp3415
(lp3416
g312
ag309
aa(lp3417
g314
ag315
aa(lp3418
g317
ag318
aa(lp3419
g320
ag321
aa(lp3420
g323
ag324
aa(lp3421
g326
ag327
aa(lp3422
g329
ag330
aa(lp3423
g332
ag333
aatp3424
Rp3425
aa(lp3426
g337
ag306
((lp3427
(lp3428
g312
ag337
aa(lp3429
g341
ag342
aa(lp3430
g344
ag345
aa(lp3431
g347
ag348
aa(lp3432
g350
ag351
aa(lp3433
g353
ag354
aa(lp3434
g356
ag357
aa(lp3435
g359
ag360
aa(lp3436
g362
ag363
aa(lp3437
g365
ag366
aa(lp3438
g368
ag369
aa(lp3439
g371
ag372
aa(lp3440
g374
ag375
aa(lp3441
g377
ag378
aa(lp3442
g380
ag381
aa(lp3443
g383
ag384
aa(lp3444
g386
ag387
aa(lp3445
g389
ag390
aa(lp3446
g392
ag393
aatp3447
Rp3448
aa(lp3449
g397
ag306
((lp3450
(lp3451
g312
ag397
aa(lp3452
g401
ag402
aatp3453
Rp3454
aatp3455
Rp3456
sg91
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g25
g7
Ntp3466
Rp3467
(dp3468
g29
(dp3469
sg31
g5
(g97
g7
Ntp3470
Rp3471
(dp3472
g36
g37
(g101
tp3473
Rp3474
(dp3475
S'func_to_anat_linear_xfm'
p3476
g45
sg51
g52
sS'anat_func'
p3477
g45
sbsg109
(lp3478
g3476
ag3477
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp3479
sg78
S'func_to_anat_bbreg_0'
p3480
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp3481
sg90
Nsg91
Nsb(dp3482
sg5
(g25
g7
Ntp3483
Rp3484
(dp3485
g29
(dp3486
sg31
g5
(g120
g7
Ntp3487
Rp3488
(dp3489
g36
g37
(g124
tp3490
Rp3491
(dp3492
g42
I00
sg51
g52
sg46
S'-thr 0.5 -bin'
p3493
sg128
g45
sg48
g45
sg49
g45
sg129
g45
sg53
g54
sg55
g5
(g56
g57
(dp3494
g59
g60
stp3495
Rp3496
(dp3497
g64
S'environ_items'
p3498
sg66
g55
sbsg67
g45
sg68
g60
sg135
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'wm_bb_mask'
p3499
sg76
(dp3500
sg78
g3480
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3499
sg87
Nsg88
(lp3501
sg90
Nsg91
Nsb(dp3502
sg5
(g25
g7
Ntp3503
Rp3504
(dp3505
g29
(dp3506
sg31
g5
(g97
g7
Ntp3507
Rp3508
(dp3509
g36
g37
(g101
tp3510
Rp3511
(dp3512
g51
g52
sS'linear_reg_matrix'
p3513
g45
sS'bbr_schedule'
p3514
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3515
sS'anat_wm_segmentation'
p3516
g45
sS'anat_skull'
p3517
g45
sg2562
g45
sbsg109
(lp3518
g2562
ag3517
ag3513
ag3516
ag3514
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp3519
sg78
g3480
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp3520
sg90
Nsg91
Nsb(dp3521
sg5
(g25
g7
Ntp3522
Rp3523
(dp3524
g29
(dp3525
sg31
g5
(g166
g7
Ntp3526
Rp3527
(dp3528
g36
g37
(g170
tp3529
Rp3530
(dp3531
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g45
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g45
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
g45
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
I6
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp3532
g59
g60
stp3533
Rp3534
(dp3535
g64
S'environ_items'
p3536
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'bbreg_func_to_anat'
p3537
sg76
(dp3538
sg78
g3480
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3537
sg87
Nsg88
(lp3539
sg90
Nsg91
Nsb(dp3540
ssg247
(dp3541
sg249
(dp3542
g3467
(dp3543
sg3484
(dp3544
g3523
(dp3545
g253
(lp3546
((g48
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3547
(ttp3548
g49
tp3549
asssg3504
(dp3550
g3484
(dp3551
g253
(lp3552
(g3516
g67
tp3553
assg3523
(dp3554
g253
(lp3555
(g3514
g197
tp3556
a(g2562
g67
tp3557
a(g3517
g177
tp3558
a(g3513
g175
tp3559
asssg3523
(dp3560
g3467
(dp3561
g253
(lp3562
(g209
g3476
tp3563
a(g48
g3477
tp3564
assssg295
g3542
sg296
(dp3565
g3467
(dp3566
g3523
g3561
ssg3484
(dp3567
g3504
g3551
ssg3504
(dp3568
sg3523
(dp3569
g3484
g3545
sg3504
g3554
sssg304
g3542
sbsg66
g3480
sg78
g1067
sg86
g3480
sg87
g306
((lp3570
(lp3571
g309
ag306
((lp3572
(lp3573
g312
ag309
aa(lp3574
g314
ag315
aa(lp3575
g317
ag318
aa(lp3576
g320
ag321
aa(lp3577
g323
ag324
aa(lp3578
g326
ag327
aa(lp3579
g329
ag330
aa(lp3580
g332
ag333
aatp3581
Rp3582
aa(lp3583
g337
ag306
((lp3584
(lp3585
g312
ag337
aa(lp3586
g341
ag342
aa(lp3587
g344
ag345
aa(lp3588
g347
ag348
aa(lp3589
g350
ag351
aa(lp3590
g353
ag354
aa(lp3591
g356
ag357
aa(lp3592
g359
ag360
aa(lp3593
g362
ag363
aa(lp3594
g365
ag366
aa(lp3595
g368
ag369
aa(lp3596
g371
ag372
aa(lp3597
g374
ag375
aa(lp3598
g377
ag378
aa(lp3599
g380
ag381
aa(lp3600
g383
ag384
aa(lp3601
g386
ag387
aa(lp3602
g389
ag390
aa(lp3603
g392
ag393
aatp3604
Rp3605
aa(lp3606
g397
ag306
((lp3607
(lp3608
g312
ag397
aa(lp3609
g401
ag402
aatp3610
Rp3611
aatp3612
Rp3613
sg91
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g25
g7
Ntp3620
Rp3621
(dp3622
g29
(dp3623
sg31
g5
(g1403
g7
Ntp3624
Rp3625
(dp3626
g1407
(lp3627
S'measure_file'
p3628
asg36
g37
(g1410
tp3629
Rp3630
(dp3631
g42
I00
sg51
g52
sg1414
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g45
sbsg1416
(dp3633
S'snr_storefl'
p3634
Nssg1419
(lp3635
g3634
asg1421
Nsbsg74
Nsg66
S'snr_val0'
p3636
sg76
(dp3637
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3636
sg87
Nsg88
(lp3638
sg90
Nsg91
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g25
g7
Ntp3648
Rp3649
(dp3650
g29
(dp3651
sg31
g5
(g1403
g7
Ntp3652
Rp3653
(dp3654
g1407
(lp3655
g3628
ag1863
asg36
g37
(g1410
tp3656
Rp3657
(dp3658
g42
I00
sg51
g52
sg1414
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g45
sg1863
S'snr'
p3660
sbsg1416
(dp3661
g1870
Nssg1419
(lp3662
g1870
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp3663
sg83
Nsg80
Nsg90
Nsg66
S'hist_snr_0'
p3664
sg78
g1067
sg82
I00
sg84
Nsg85
I00
sg86
g3664
sg87
Nsg88
(lp3665
sg91
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g25
g7
Ntp3678
Rp3679
(dp3680
g29
(dp3681
sg31
g5
(g1403
g7
Ntp3682
Rp3683
(dp3684
g1407
(lp3685
S'scan'
p3686
aS'rest_dict'
p3687
asg36
g37
(g1410
tp3688
Rp3689
(dp3690
g42
I00
sg3687
(dp3691
S'rest_1_rest'
p3692
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-12/KKI2009-12-fMRI.nii'
p3693
ssg1414
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3694
sg51
g52
sg3686
g45
sbsg1416
(dp3695
g1953
Nssg1419
(lp3696
g1953
asg1421
Nsbsg74
Nsg66
S'selectrest'
p3697
sg76
(dp3698
sg78
S'func_gather_0'
p3699
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3697
sg87
Nsg88
(lp3700
sg90
Nsg91
Nsb(dp3701
sg5
(g25
g7
Ntp3702
Rp3703
(dp3704
g29
(dp3705
sg31
g5
(g97
g7
Ntp3706
Rp3707
(dp3708
g36
g37
(g101
tp3709
Rp3710
(dp3711
g51
g52
sg3686
g45
sS'subject'
p3712
S'3_2083100390'
p3713
sbsg109
(lp3714
g3712
ag3686
asg111
I01
sbsg74
Nsg66
S'inputnode'
p3715
sg76
(dp3716
sg78
g3699
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(lp3717
(g3686
(lp3718
g3692
atp3719
asg85
I00
sg86
g3715
sg87
Nsg88
(lp3720
sg90
Nsg91
Nsb(dp3721
sg5
(g25
g7
Ntp3722
Rp3723
(dp3724
g29
(dp3725
sg31
g5
(g97
g7
Ntp3726
Rp3727
(dp3728
g36
g37
(g101
tp3729
Rp3730
(dp3731
g51
g52
sg3686
g45
sg1953
g45
sg3712
g45
sbsg109
(lp3732
g3712
ag1953
ag3686
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp3733
sg78
g3699
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp3734
sg90
Nsg91
Nsb(dp3735
ssg247
(dp3736
sg249
(dp3737
g3679
(dp3738
g3723
(dp3739
g253
(lp3740
(g1953
g1953
tp3741
asssg3703
(dp3742
g3679
(dp3743
g253
(lp3744
(g3686
g3686
tp3745
assg3723
(dp3746
g253
(lp3747
(g3712
g3712
tp3748
a(g3686
g3686
tp3749
asssg3723
(dp3750
ssg295
g3737
sg296
(dp3751
g3679
(dp3752
g3703
g3743
ssg3703
(dp3753
sg3723
(dp3754
g3679
g3739
sg3703
g3746
sssg304
g3737
sbsg66
g3699
sg78
g1067
sg86
g3699
sg87
g306
((lp3755
(lp3756
g309
ag306
((lp3757
(lp3758
g312
ag309
aa(lp3759
g314
ag315
aa(lp3760
g317
ag318
aa(lp3761
g320
ag321
aa(lp3762
g323
ag324
aa(lp3763
g326
ag327
aa(lp3764
g329
ag330
aa(lp3765
g332
ag333
aatp3766
Rp3767
aa(lp3768
g337
ag306
((lp3769
(lp3770
g312
ag337
aa(lp3771
g341
ag342
aa(lp3772
g344
ag345
aa(lp3773
g347
ag348
aa(lp3774
g350
ag351
aa(lp3775
g353
ag354
aa(lp3776
g356
ag357
aa(lp3777
g359
ag360
aa(lp3778
g362
ag363
aa(lp3779
g365
ag366
aa(lp3780
g368
ag369
aa(lp3781
g371
ag372
aa(lp3782
g374
ag375
aa(lp3783
g377
ag378
aa(lp3784
g380
ag381
aa(lp3785
g383
ag384
aa(lp3786
g386
ag387
aa(lp3787
g389
ag390
aa(lp3788
g392
ag393
aatp3789
Rp3790
aa(lp3791
g397
ag306
((lp3792
(lp3793
g312
ag397
aa(lp3794
g401
ag402
aatp3795
Rp3796
aatp3797
Rp3798
sg91
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g25
g7
Ntp3808
Rp3809
(dp3810
g29
(dp3811
sg31
g5
(g1272
g7
Ntp3812
Rp3813
(dp3814
g36
g37
(g1276
tp3815
Rp3816
(dp3817
g42
I00
sg1280
g45
sg67
g45
sg1281
g45
sg48
g45
sg206
g45
sg49
g45
sg180
g45
sg1241
g45
sg1248
g1820
sg53
g54
sg55
g5
(g56
g57
(dp3818
g59
g60
stp3819
Rp3820
(dp3821
g64
S'environ_items'
p3822
sg66
g55
sbsg1287
g45
sg1288
g45
sg68
g60
sg1289
g45
sg1290
g45
sg51
g52
sg1291
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mni_fsl_warp_0'
p3823
sg76
(dp3824
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3823
sg87
Nsg88
(lp3825
sg90
Nsg91
Nsbg48
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g25
g7
Ntp3835
Rp3836
(dp3837
g29
(dp3838
sg31
g5
(g97
g7
Ntp3839
Rp3840
(dp3841
g36
g37
(g101
tp3842
Rp3843
(dp3844
g51
g52
sS'mask_outputs'
p3845
g45
sbsg109
(lp3846
g3845
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp3847
sg78
S'voxel_timeseries_0'
p3848
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp3849
sg90
Nsg91
Nsb(dp3850
sg5
(g25
g7
Ntp3851
Rp3852
(dp3853
g29
(dp3854
sg31
g5
(g1403
g7
Ntp3855
Rp3856
(dp3857
g1407
(lp3858
S'data_file'
p3859
aS'template'
p3860
ag68
asg36
g37
(g1410
tp3861
Rp3862
(dp3863
g42
I00
sg51
g52
sg3859
g45
sg1414
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3864
sg3860
g45
sg68
g45
sbsg1416
(dp3865
g48
Nssg1419
(lp3866
g48
asg1421
Nsbsg74
Nsg66
S'timeseries_voxel'
p3867
sg76
(dp3868
sg78
g3848
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3867
sg87
Nsg88
(lp3869
sg90
Nsg91
Nsb(dp3870
sg5
(g25
g7
Ntp3871
Rp3872
(dp3873
g29
(dp3874
sg31
g5
(g97
g7
Ntp3875
Rp3876
(dp3877
g36
g37
(g101
tp3878
Rp3879
(dp3880
g51
g52
sg68
(lp3881
I01
aI01
asg1953
g45
sbsg109
(lp3882
g1953
ag68
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp3883
sg78
g3848
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp3884
sg90
Nsg91
Nsb(dp3885
sg5
(g25
g7
Ntp3886
Rp3887
(dp3888
g29
(dp3889
sg31
g5
(g97
g7
Ntp3890
Rp3891
(dp3892
g36
g37
(g101
tp3893
Rp3894
(dp3895
g51
g52
sg1897
g45
sbsg109
(lp3896
g1897
asg111
I01
sbsg74
Nsg66
S'input_mask'
p3897
sg76
(dp3898
sg78
g3848
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3897
sg87
Nsg88
(lp3899
sg90
Nsg91
Nsb(dp3900
ssg247
(dp3901
sg249
(dp3902
g3836
(dp3903
sg3852
(dp3904
g3836
(dp3905
g253
(lp3906
(g48
g3845
tp3907
asssg3872
(dp3908
g3852
(dp3909
g253
(lp3910
(g1953
g3859
tp3911
a(g68
g68
tp3912
asssg3887
(dp3913
g3852
(dp3914
g253
(lp3915
(g1897
g3860
tp3916
assssg295
g3902
sg296
(dp3917
g3836
(dp3918
g3852
g3905
ssg3852
(dp3919
g3872
g3909
sg3887
g3914
ssg3872
(dp3920
sg3887
(dp3921
ssg304
g3902
sbsg66
g3848
sg78
g1067
sg86
g3848
sg87
g306
((lp3922
(lp3923
g309
ag306
((lp3924
(lp3925
g312
ag309
aa(lp3926
g314
ag315
aa(lp3927
g317
ag318
aa(lp3928
g320
ag321
aa(lp3929
g323
ag324
aa(lp3930
g326
ag327
aa(lp3931
g329
ag330
aa(lp3932
g332
ag333
aatp3933
Rp3934
aa(lp3935
g337
ag306
((lp3936
(lp3937
g312
ag337
aa(lp3938
g341
ag342
aa(lp3939
g344
ag345
aa(lp3940
g347
ag348
aa(lp3941
g350
ag351
aa(lp3942
g353
ag354
aa(lp3943
g356
ag357
aa(lp3944
g359
ag360
aa(lp3945
g362
ag363
aa(lp3946
g365
ag366
aa(lp3947
g368
ag369
aa(lp3948
g371
ag372
aa(lp3949
g374
ag375
aa(lp3950
g377
ag378
aa(lp3951
g380
ag381
aa(lp3952
g383
ag384
aa(lp3953
g386
ag387
aa(lp3954
g389
ag390
aa(lp3955
g392
ag393
aatp3956
Rp3957
aa(lp3958
g397
ag306
((lp3959
(lp3960
g312
ag397
aa(lp3961
g401
ag402
aatp3962
Rp3963
aatp3964
Rp3965
sg91
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g25
g7
Ntp3986
Rp3987
(dp3988
g29
(dp3989
sg31
g5
(g1403
g7
Ntp3990
Rp3991
(dp3992
g1407
(lp3993
g1452
ag1453
ag1454
ag1455
asg36
g37
(g1410
tp3994
Rp3995
(dp3996
g42
I00
sg1454
S'mni_anat_s.png'
p3997
sg1452
g45
sg1455
g1460
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3998
sg1453
g45
sg51
g52
sbsg1416
(dp3999
g1454
Nssg1419
(lp4000
g1454
asg1421
Nsbsg74
Nsg66
g1516
sg76
(dp4001
sg78
S'montage_mni_anat_0'
p4002
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp4003
sg90
Nsg91
Nsb(dp4004
sg5
(g25
g7
Ntp4005
Rp4006
(dp4007
g29
(dp4008
sg31
g5
(g1403
g7
Ntp4009
Rp4010
(dp4011
g1407
(lp4012
g1452
ag1453
ag1454
ag1455
asg36
g37
(g1410
tp4013
Rp4014
(dp4015
g42
I00
sg1454
S'mni_anat_a.png'
p4016
sg1452
g45
sg1455
g1460
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4017
sg1453
g45
sg51
g52
sbsg1416
(dp4018
g1454
Nssg1419
(lp4019
g1454
asg1421
Nsbsg74
Nsg66
g1464
sg76
(dp4020
sg78
g4002
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1464
sg87
Nsg88
(lp4021
sg90
Nsg91
Nsb(dp4022
sg5
(g25
g7
Ntp4023
Rp4024
(dp4025
g29
(dp4026
sg31
g5
(g1403
g7
Ntp4027
Rp4028
(dp4029
g1407
(lp4030
g1409
asg36
g37
(g1410
tp4031
Rp4032
(dp4033
g42
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4034
sg1409
g45
sg51
g52
sbsg1416
(dp4035
g1418
Nssg1419
(lp4036
g1418
asg1421
Nsbsg74
Nsg66
g1422
sg76
(dp4037
sg78
g4002
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1422
sg87
Nsg88
(lp4038
sg90
Nsg91
Nsb(dp4039
sg5
(g25
g7
Ntp4040
Rp4041
(dp4042
g29
(dp4043
sg31
g5
(g97
g7
Ntp4044
Rp4045
(dp4046
g36
g37
(g101
tp4047
Rp4048
(dp4049
g51
g52
sg1493
g45
sg1494
g45
sg1495
g45
sg1496
g45
sbsg109
(lp4050
g1494
ag1495
ag1493
ag1496
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp4051
sg78
g4002
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp4052
sg90
Nsg91
Nsb(dp4053
sg5
(g25
g7
Ntp4054
Rp4055
(dp4056
g29
(dp4057
sg31
g5
(g1403
g7
Ntp4058
Rp4059
(dp4060
g1407
(lp4061
g1409
asg36
g37
(g1410
tp4062
Rp4063
(dp4064
g42
I00
sg1414
g4034
sg1409
g45
sg51
g52
sbsg1416
(dp4065
g1418
Nssg1419
(lp4066
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp4067
sg83
Nsg80
Nsg90
Nsg66
g1441
sg78
g4002
sg82
I00
sg84
Nsg85
I00
sg86
g1441
sg87
Nsg88
(lp4068
sg91
Nsb(dp4069
sg5
(g25
g7
Ntp4070
Rp4071
(dp4072
g29
(dp4073
sg31
g5
(g97
g7
Ntp4074
Rp4075
(dp4076
g36
g37
(g101
tp4077
Rp4078
(dp4079
g51
g52
sg1453
g45
sg1452
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p4080
sbsg109
(lp4081
g1453
ag1452
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp4082
sg78
g4002
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp4083
sg90
Nsg91
Nsb(dp4084
ssg247
(dp4085
sg249
(dp4086
g3987
(dp4087
g4041
(dp4088
g253
(lp4089
(g1454
g1495
tp4090
asssg4006
(dp4091
g4041
(dp4092
g253
(lp4093
(g1454
g1494
tp4094
asssg4024
(dp4095
g3987
(dp4096
g253
(lp4097
(g1418
g1453
tp4098
assg4006
(dp4099
g253
(lp4100
(g1418
g1453
tp4101
assg4041
(dp4102
g253
(lp4103
(g1418
g1493
tp4104
asssg4041
(dp4105
sg4055
(dp4106
g3987
(dp4107
g253
(lp4108
(g1418
g1452
tp4109
assg4006
(dp4110
g253
(lp4111
(g1418
g1452
tp4112
assg4041
(dp4113
g253
(lp4114
(g1418
g1496
tp4115
asssg4071
(dp4116
g4024
(dp4117
g253
(lp4118
(g1453
g1409
tp4119
assg4055
(dp4120
g253
(lp4121
(g1452
g1409
tp4122
assssg295
g4086
sg296
(dp4123
g3987
(dp4124
g4024
g4096
sg4055
g4107
ssg4006
(dp4125
g4024
g4099
sg4055
g4110
ssg4024
(dp4126
g4071
g4117
ssg4041
(dp4127
g4024
g4102
sg3987
g4088
sg4055
g4113
sg4006
g4092
ssg4055
(dp4128
g4071
g4120
ssg4071
(dp4129
ssg304
g4086
sbsg66
g4002
sg78
g1067
sg86
g4002
sg87
g306
((lp4130
(lp4131
g309
ag306
((lp4132
(lp4133
g312
ag309
aa(lp4134
g314
ag315
aa(lp4135
g317
ag318
aa(lp4136
g320
ag321
aa(lp4137
g323
ag324
aa(lp4138
g326
ag327
aa(lp4139
g329
ag330
aa(lp4140
g332
ag333
aatp4141
Rp4142
aa(lp4143
g337
ag306
((lp4144
(lp4145
g312
ag337
aa(lp4146
g341
ag342
aa(lp4147
g344
ag345
aa(lp4148
g347
ag348
aa(lp4149
g350
ag351
aa(lp4150
g353
ag354
aa(lp4151
g356
ag357
aa(lp4152
g359
ag360
aa(lp4153
g362
ag363
aa(lp4154
g365
ag366
aa(lp4155
g368
ag369
aa(lp4156
g371
ag372
aa(lp4157
g374
ag375
aa(lp4158
g377
ag378
aa(lp4159
g380
ag381
aa(lp4160
g383
ag384
aa(lp4161
g386
ag387
aa(lp4162
g389
ag390
aa(lp4163
g392
ag393
aatp4164
Rp4165
aa(lp4166
g397
ag306
((lp4167
(lp4168
g312
ag397
aa(lp4169
g401
ag402
aatp4170
Rp4171
aatp4172
Rp4173
sg91
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg1900
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g25
g7
Ntp4188
Rp4189
(dp4190
g29
(dp4191
sg31
g5
(g1272
g7
Ntp4192
Rp4193
(dp4194
g36
g37
(g1276
tp4195
Rp4196
(dp4197
g42
I00
sg1280
g45
sg67
g45
sg1281
g45
sg48
g45
sg206
g45
sg49
g45
sg180
S'nn'
p4198
sg1241
g45
sg1248
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg53
g54
sg55
g5
(g56
g57
(dp4200
g59
g60
stp4201
Rp4202
(dp4203
g64
S'environ_items'
p4204
sg66
g55
sbsg1287
g45
sg1288
g45
sg68
g60
sg1289
g45
sg1290
g45
sg51
g52
sg1291
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mni_fsl_warp_mask_0'
p4205
sg76
(dp4206
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4205
sg87
Nsg88
(lp4207
sg90
Nsg91
Nsbg48
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g25
g7
Ntp4217
Rp4218
(dp4219
g29
(dp4220
sg31
g5
(g97
g7
Ntp4221
Rp4222
(dp4223
g36
g37
(g101
tp4224
Rp4225
(dp4226
g51
g52
sg1453
g45
sg1452
g45
sbsg109
(lp4227
g1453
ag1452
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp4228
sg78
S'montage_skull_0'
p4229
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp4230
sg90
Nsg91
Nsb(dp4231
sg5
(g25
g7
Ntp4232
Rp4233
(dp4234
g29
(dp4235
sg31
g5
(g1403
g7
Ntp4236
Rp4237
(dp4238
g1407
(lp4239
g1452
ag1453
ag1454
ag1455
asg36
g37
(g1410
tp4240
Rp4241
(dp4242
g42
I00
sg1454
S'skull_vis_s.png'
p4243
sg1452
g45
sg1455
g1460
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4244
sg1453
g45
sg51
g52
sbsg1416
(dp4245
g1454
Nssg1419
(lp4246
g1454
asg1421
Nsbsg74
Nsg66
g1516
sg76
(dp4247
sg78
g4229
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp4248
sg90
Nsg91
Nsb(dp4249
sg5
(g25
g7
Ntp4250
Rp4251
(dp4252
g29
(dp4253
sg31
g5
(g97
g7
Ntp4254
Rp4255
(dp4256
g36
g37
(g101
tp4257
Rp4258
(dp4259
g51
g52
sg1493
g45
sg1494
g45
sg1495
g45
sg1496
g45
sbsg109
(lp4260
g1494
ag1495
ag1493
ag1496
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp4261
sg78
g4229
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp4262
sg90
Nsg91
Nsb(dp4263
sg5
(g25
g7
Ntp4264
Rp4265
(dp4266
g29
(dp4267
sg31
g5
(g1403
g7
Ntp4268
Rp4269
(dp4270
g1407
(lp4271
g1409
asg36
g37
(g1410
tp4272
Rp4273
(dp4274
g42
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4275
sg1409
g45
sg51
g52
sbsg1416
(dp4276
g1418
Nssg1419
(lp4277
g1418
asg1421
Nsbsg74
Nsg81
I00
sg76
(dp4278
sg83
Nsg80
Nsg90
Nsg66
g1441
sg78
g4229
sg82
I00
sg84
Nsg85
I00
sg86
g1441
sg87
Nsg88
(lp4279
sg91
Nsb(dp4280
sg5
(g25
g7
Ntp4281
Rp4282
(dp4283
g29
(dp4284
sg31
g5
(g1403
g7
Ntp4285
Rp4286
(dp4287
g1407
(lp4288
g1452
ag1453
ag1454
ag1455
asg36
g37
(g1410
tp4289
Rp4290
(dp4291
g42
I00
sg1454
S'skull_vis_a.png'
p4292
sg1452
g45
sg1455
g1460
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4293
sg1453
g45
sg51
g52
sbsg1416
(dp4294
g1454
Nssg1419
(lp4295
g1454
asg1421
Nsbsg74
Nsg66
g1464
sg76
(dp4296
sg78
g4229
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1464
sg87
Nsg88
(lp4297
sg90
Nsg91
Nsb(dp4298
sg5
(g25
g7
Ntp4299
Rp4300
(dp4301
g29
(dp4302
sg31
g5
(g1403
g7
Ntp4303
Rp4304
(dp4305
g1407
(lp4306
g1409
asg36
g37
(g1410
tp4307
Rp4308
(dp4309
g42
I00
sg1414
g4275
sg1409
g45
sg51
g52
sbsg1416
(dp4310
g1418
Nssg1419
(lp4311
g1418
asg1421
Nsbsg74
Nsg66
g1422
sg76
(dp4312
sg78
g4229
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1422
sg87
Nsg88
(lp4313
sg90
Nsg91
Nsb(dp4314
ssg247
(dp4315
sg249
(dp4316
g4218
(dp4317
g4300
(dp4318
g253
(lp4319
(g1453
g1409
tp4320
assg4265
(dp4321
g253
(lp4322
(g1452
g1409
tp4323
asssg4233
(dp4324
g4251
(dp4325
g253
(lp4326
(g1454
g1495
tp4327
asssg4251
(dp4328
sg4265
(dp4329
g4282
(dp4330
g253
(lp4331
(g1418
g1452
tp4332
assg4233
(dp4333
g253
(lp4334
(g1418
g1452
tp4335
assg4251
(dp4336
g253
(lp4337
(g1418
g1496
tp4338
asssg4282
(dp4339
g4251
(dp4340
g253
(lp4341
(g1454
g1494
tp4342
asssg4300
(dp4343
g4282
(dp4344
g253
(lp4345
(g1418
g1453
tp4346
assg4233
(dp4347
g253
(lp4348
(g1418
g1453
tp4349
assg4251
(dp4350
g253
(lp4351
(g1418
g1493
tp4352
assssg295
g4316
sg296
(dp4353
g4218
(dp4354
sg4233
(dp4355
g4300
g4347
sg4265
g4333
ssg4251
(dp4356
g4300
g4350
sg4233
g4325
sg4265
g4336
sg4282
g4340
ssg4265
(dp4357
g4218
g4321
ssg4282
(dp4358
g4300
g4344
sg4265
g4330
ssg4300
(dp4359
g4218
g4318
sssg304
g4316
sbsg66
g4229
sg78
g1067
sg86
g4229
sg87
g306
((lp4360
(lp4361
g309
ag306
((lp4362
(lp4363
g312
ag309
aa(lp4364
g314
ag315
aa(lp4365
g317
ag318
aa(lp4366
g320
ag321
aa(lp4367
g323
ag324
aa(lp4368
g326
ag327
aa(lp4369
g329
ag330
aa(lp4370
g332
ag333
aatp4371
Rp4372
aa(lp4373
g337
ag306
((lp4374
(lp4375
g312
ag337
aa(lp4376
g341
ag342
aa(lp4377
g344
ag345
aa(lp4378
g347
ag348
aa(lp4379
g350
ag351
aa(lp4380
g353
ag354
aa(lp4381
g356
ag357
aa(lp4382
g359
ag360
aa(lp4383
g362
ag363
aa(lp4384
g365
ag366
aa(lp4385
g368
ag369
aa(lp4386
g371
ag372
aa(lp4387
g374
ag375
aa(lp4388
g377
ag378
aa(lp4389
g380
ag381
aa(lp4390
g383
ag384
aa(lp4391
g386
ag387
aa(lp4392
g389
ag390
aa(lp4393
g392
ag393
aatp4394
Rp4395
aa(lp4396
g397
ag306
((lp4397
(lp4398
g312
ag397
aa(lp4399
g401
ag402
aatp4400
Rp4401
aatp4402
Rp4403
sg91
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2676
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2677
(g5
(g25
g7
Ntp4413
Rp4414
(dp4415
g29
(dp4416
sg31
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g36
g37
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g42
I00
sg51
g52
sS'tpattern'
p4425
g45
sg48
g45
sS'tr'
p4426
g45
sg49
g45
sg180
g45
sg2252
g2276
sS'tzero'
p4427
g45
sS'ignore'
p4428
g45
sS'rltplus'
p4429
g45
sg53
g54
sS'tslice'
p4430
g45
sg67
g45
sS'rlt'
p4431
g45
sg55
g5
(g56
g57
(dp4432
tp4433
Rp4434
(dp4435
g64
S'environ_items'
p4436
sg66
g55
sbsbsg2259
g2276
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_slice_timing_correction_0'
p4437
sg76
(dp4438
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4437
sg87
Nsg88
(lp4439
sg90
Nsg91
Nsbg48
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g25
g7
Ntp4449
Rp4450
(dp4451
g29
(dp4452
sg31
g5
(g97
g7
Ntp4453
Rp4454
(dp4455
g36
g37
(g101
tp4456
Rp4457
(dp4458
g51
g52
sS'roi_outputs'
p4459
g45
sbsg109
(lp4460
g4459
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp4461
sg78
S'roi_timeseries_0'
p4462
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp4463
sg90
Nsg91
Nsb(dp4464
sg5
(g25
g7
Ntp4465
Rp4466
(dp4467
g29
(dp4468
sg31
g5
(g97
g7
Ntp4469
Rp4470
(dp4471
g36
g37
(g101
tp4472
Rp4473
(dp4474
g51
g52
sS'roi'
p4475
g45
sbsg109
(lp4476
g4475
asg111
I01
sbsg74
Nsg66
S'input_roi'
p4477
sg76
(dp4478
sg78
g4462
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4477
sg87
Nsg88
(lp4479
sg90
Nsg91
Nsb(dp4480
sg5
(g25
g7
Ntp4481
Rp4482
(dp4483
g29
(dp4484
sg31
g5
(g97
g7
Ntp4485
Rp4486
(dp4487
g36
g37
(g101
tp4488
Rp4489
(dp4490
g51
g52
sg68
(lp4491
I01
aI01
asg1953
g45
sbsg109
(lp4492
g1953
ag68
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp4493
sg78
g4462
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp4494
sg90
Nsg91
Nsb(dp4495
sg5
(g25
g7
Ntp4496
Rp4497
(dp4498
g29
(dp4499
sg31
g5
(g1403
g7
Ntp4500
Rp4501
(dp4502
g1407
(lp4503
g3859
ag3860
ag68
asg36
g37
(g1410
tp4504
Rp4505
(dp4506
g42
I00
sg51
g52
sg3859
g45
sg1414
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4507
sg3860
g45
sg68
g45
sbsg1416
(dp4508
g48
Nssg1419
(lp4509
g48
asg1421
Nsbsg74
Nsg66
S'timeseries_roi'
p4510
sg76
(dp4511
sg78
g4462
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4510
sg87
Nsg88
(lp4512
sg90
Nsg91
Nsb(dp4513
ssg247
(dp4514
sg249
(dp4515
g4450
(dp4516
sg4466
(dp4517
g4497
(dp4518
g253
(lp4519
(g4475
g3860
tp4520
asssg4482
(dp4521
g4497
(dp4522
g253
(lp4523
(g1953
g3859
tp4524
a(g68
g68
tp4525
asssg4497
(dp4526
g4450
(dp4527
g253
(lp4528
(g48
g4459
tp4529
assssg295
g4515
sg296
(dp4530
g4450
(dp4531
g4497
g4527
ssg4466
(dp4532
sg4482
(dp4533
sg4497
(dp4534
g4466
g4518
sg4482
g4522
sssg304
g4515
sbsg66
g4462
sg78
g1067
sg86
g4462
sg87
g306
((lp4535
(lp4536
g309
ag306
((lp4537
(lp4538
g312
ag309
aa(lp4539
g314
ag315
aa(lp4540
g317
ag318
aa(lp4541
g320
ag321
aa(lp4542
g323
ag324
aa(lp4543
g326
ag327
aa(lp4544
g329
ag330
aa(lp4545
g332
ag333
aatp4546
Rp4547
aa(lp4548
g337
ag306
((lp4549
(lp4550
g312
ag337
aa(lp4551
g341
ag342
aa(lp4552
g344
ag345
aa(lp4553
g347
ag348
aa(lp4554
g350
ag351
aa(lp4555
g353
ag354
aa(lp4556
g356
ag357
aa(lp4557
g359
ag360
aa(lp4558
g362
ag363
aa(lp4559
g365
ag366
aa(lp4560
g368
ag369
aa(lp4561
g371
ag372
aa(lp4562
g374
ag375
aa(lp4563
g377
ag378
aa(lp4564
g380
ag381
aa(lp4565
g383
ag384
aa(lp4566
g386
ag387
aa(lp4567
g389
ag390
aa(lp4568
g392
ag393
aatp4569
Rp4570
aa(lp4571
g397
ag306
((lp4572
(lp4573
g312
ag397
aa(lp4574
g401
ag402
aatp4575
Rp4576
aatp4577
Rp4578
sg91
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g25
g7
Ntp4589
Rp4590
(dp4591
g29
(dp4592
sg31
g5
(g166
g7
Ntp4593
Rp4594
(dp4595
g36
g37
(g170
tp4596
Rp4597
(dp4598
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g181
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
S'-applyisoxfm 2'
p4599
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
g45
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp4600
g59
g60
stp4601
Rp4602
(dp4603
g64
S'environ_items'
p4604
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'gm_anat_to_2mm_flirt_applyxfm'
p4605
sg76
(dp4606
sg78
S'nuisance_0'
p4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4605
sg87
Nsg88
(lp4608
sg90
Nsg91
Nsb(dp4609
sg5
(g25
g7
Ntp4610
Rp4611
(dp4612
g29
(dp4613
sg31
g5
(g166
g7
Ntp4614
Rp4615
(dp4616
g36
g37
(g170
tp4617
Rp4618
(dp4619
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g181
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g4599
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
g45
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp4620
g59
g60
stp4621
Rp4622
(dp4623
g64
S'environ_items'
p4624
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'wm_anat_to_2mm_flirt_applyxfm'
p4625
sg76
(dp4626
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4625
sg87
Nsg88
(lp4627
sg90
Nsg91
Nsb(dp4628
sg5
(g25
g7
Ntp4629
Rp4630
(dp4631
g29
(dp4632
sg31
g5
(g97
g7
Ntp4633
Rp4634
(dp4635
g36
g37
(g101
tp4636
Rp4637
(dp4638
g51
g52
sS'regressors'
p4639
g45
sg3712
g45
sbsg109
(lp4640
g3712
ag4639
asg111
I01
sbsg74
Nsg66
g112
sg76
(dp4641
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g112
sg87
Nsg88
(lp4642
sg90
Nsg91
Nsb(dp4643
sg5
(g25
g7
Ntp4644
Rp4645
(dp4646
g29
(dp4647
sg31
g5
(g97
g7
Ntp4648
Rp4649
(dp4650
g36
g37
(g101
tp4651
Rp4652
(dp4653
S'motion_components'
p4654
g45
sS'anat_to_mni_initial_xfm'
p4655
g45
sS'lat_ventricles_mask'
p4656
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4657
sg944
g45
sS'anat_to_mni_rigid_xfm'
p4658
g45
sS'compcor_ncomponents'
p4659
g45
sS'anat_to_mni_affine_xfm'
p4660
g45
sS'selector'
p4661
g45
sg943
g45
sS'template_brain'
p4662
g45
sg3476
g45
sS'mni_to_anat_linear_xfm'
p4663
g45
sg945
g45
sg51
g52
sg3712
g45
sbsg109
(lp4664
g3712
ag943
ag945
ag944
ag4663
ag4655
ag4658
ag4660
ag3476
ag4656
ag4654
ag4661
ag4659
ag4662
asg111
I01
sbsg74
Nsg66
g158
sg76
(dp4665
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp4666
sg90
Nsg91
Nsb(dp4667
sg5
(g25
g7
Ntp4668
Rp4669
(dp4670
g29
(dp4671
sg31
g5
(g1403
g7
Ntp4672
Rp4673
(dp4674
g1407
(lp4675
g3859
aS'ventricles_mask_file'
p4676
aS'wm_seg_file'
p4677
aS'csf_seg_file'
p4678
aS'gm_seg_file'
p4679
ag418
ag874
ag963
asg36
g37
(g1410
tp4680
Rp4681
(dp4682
g42
I00
sg51
g52
sg418
g45
sg874
g45
sg3859
g45
sg1414
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4683
sg4679
g45
sg4676
g45
sg963
g45
sg4678
g45
sg4677
g45
sbsg1416
(dp4684
S'file_gm'
p4685
NsS'file_wm'
p4686
NsS'file_csf'
p4687
Nssg1419
(lp4688
g4686
ag4687
ag4685
asg1421
Nsbsg74
Nsg66
S'tissue_masks'
p4689
sg76
(dp4690
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4689
sg87
Nsg88
(lp4691
sg90
Nsg91
Nsb(dp4692
sg5
(g25
g7
Ntp4693
Rp4694
(dp4695
g29
(dp4696
sg31
g5
(g166
g7
Ntp4697
Rp4698
(dp4699
g36
g37
(g170
tp4700
Rp4701
(dp4702
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g45
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g4599
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
g45
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp4703
g59
g60
stp4704
Rp4705
(dp4706
g64
S'environ_items'
p4707
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_to_2mm_flirt_applyxfm'
p4708
sg76
(dp4709
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4708
sg87
Nsg88
(lp4710
sg90
Nsg91
Nsb(dp4711
sg5
(g25
g7
Ntp4712
Rp4713
(dp4714
g29
(dp4715
sg31
g5
(g166
g7
Ntp4716
Rp4717
(dp4718
g36
g37
(g170
tp4719
Rp4720
(dp4721
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g181
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g4599
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
g45
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp4722
g59
g60
stp4723
Rp4724
(dp4725
g64
S'environ_items'
p4726
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'csf_anat_to_2mm_flirt_applyxfm'
p4727
sg76
(dp4728
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4727
sg87
Nsg88
(lp4729
sg90
Nsg91
Nsb(dp4730
sg5
(g25
g7
Ntp4731
Rp4732
(dp4733
g29
(dp4734
sg31
g5
(g1403
g7
Ntp4735
Rp4736
(dp4737
g1407
(lp4738
g3712
ag4661
aS'wm_sig_file'
p4739
aS'csf_sig_file'
p4740
aS'gm_sig_file'
p4741
aS'motion_file'
p4742
ag4659
asg36
g37
(g1410
tp4743
Rp4744
(dp4745
g42
I00
sg51
g52
sg4742
g45
sg4659
g45
sg1414
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4746
sg4740
g45
sg4739
g45
sg4741
g45
sg4661
g45
sg3712
g45
sbsg1416
(dp4747
S'regressors_file'
p4748
NsS'residual_file'
p4749
Nssg1419
(lp4750
g4749
ag4748
asg1421
Nsbsg74
Nsg66
S'residuals'
p4751
sg76
(dp4752
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(lp4753
(g4661
(lp4754
(dp4755
S'global'
p4756
I0
sS'linear'
p4757
I1
sS'wm'
p4758
I0
sS'pc1'
p4759
I0
sS'motion'
p4760
I0
sS'quadratic'
p4761
I1
sS'gm'
p4762
I0
sS'compcor'
p4763
I1
sS'csf'
p4764
I1
satp4765
a(g4659
(lp4766
I5
atp4767
asg85
I00
sg86
g4751
sg87
Nsg88
(lp4768
sg90
Nsg91
Nsb(dp4769
sg5
(g25
g7
Ntp4770
Rp4771
(dp4772
g29
(dp4773
sg31
g5
(g166
g7
Ntp4774
Rp4775
(dp4776
g36
g37
(g170
tp4777
Rp4778
(dp4779
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g181
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g4599
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
g45
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp4780
g59
g60
stp4781
Rp4782
(dp4783
g64
S'environ_items'
p4784
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'ho_mni_to_2mm_flirt_applyxfm'
p4785
sg76
(dp4786
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4785
sg87
Nsg88
(lp4787
sg90
Nsg91
Nsb(dp4788
ssg247
(dp4789
sg249
(dp4790
g4590
(dp4791
g4669
(dp4792
g253
(lp4793
(g48
g4679
tp4794
asssg4611
(dp4795
g4669
(dp4796
g253
(lp4797
(g48
g4677
tp4798
asssg4630
(dp4799
sg4645
(dp4800
g4590
(dp4801
g253
(lp4802
(g944
g67
tp4803
a(g944
g177
tp4804
assg4611
(dp4805
g253
(lp4806
(g943
g67
tp4807
a(g943
g177
tp4808
assg4732
(dp4809
g253
(lp4810
(g3712
g3712
tp4811
a(g4654
g4742
tp4812
a(g4661
g4661
tp4813
a(g4659
g4659
tp4814
assg4694
(dp4815
g253
(lp4816
(g3712
g67
tp4817
a(g945
g177
tp4818
a(g3476
g175
tp4819
assg4713
(dp4820
g253
(lp4821
(g945
g67
tp4822
a(g945
g177
tp4823
assg4771
(dp4824
g253
(lp4825
(g4663
g175
tp4826
a(g4656
g67
tp4827
a(g945
g177
tp4828
asssg4669
(dp4829
g4732
(dp4830
g253
(lp4831
(g4686
g4739
tp4832
a(g4687
g4740
tp4833
a(g4685
g4741
tp4834
asssg4694
(dp4835
g4669
(dp4836
g253
(lp4837
(g48
g3859
tp4838
asssg4713
(dp4839
g4669
(dp4840
g253
(lp4841
(g48
g4678
tp4842
asssg4732
(dp4843
g4630
(dp4844
g253
(lp4845
(g4749
g3712
tp4846
a(g4748
g4639
tp4847
asssg4771
(dp4848
g4669
(dp4849
g253
(lp4850
(g48
g4676
tp4851
assssg295
g4790
sg296
(dp4852
g4590
(dp4853
g4645
g4801
ssg4611
(dp4854
g4645
g4805
ssg4630
(dp4855
g4732
g4844
ssg4645
(dp4856
sg4669
(dp4857
g4694
g4836
sg4590
g4792
sg4611
g4796
sg4771
g4849
sg4713
g4840
ssg4694
(dp4858
g4645
g4815
ssg4713
(dp4859
g4645
g4820
ssg4732
(dp4860
g4645
g4809
sg4669
g4830
ssg4771
(dp4861
g4645
g4824
sssg304
g4790
sbsg66
g4607
sg78
g1067
sg86
g4607
sg87
g306
((lp4862
(lp4863
g309
ag306
((lp4864
(lp4865
g312
ag309
aa(lp4866
g314
ag315
aa(lp4867
g317
ag318
aa(lp4868
g320
ag321
aa(lp4869
g323
ag324
aa(lp4870
g326
ag327
aa(lp4871
g329
ag330
aa(lp4872
g332
ag333
aatp4873
Rp4874
aa(lp4875
g337
ag306
((lp4876
(lp4877
g312
ag337
aa(lp4878
g341
ag342
aa(lp4879
g344
ag345
aa(lp4880
g347
ag348
aa(lp4881
g350
ag351
aa(lp4882
g353
ag354
aa(lp4883
g356
ag357
aa(lp4884
g359
ag360
aa(lp4885
g362
ag363
aa(lp4886
g365
ag366
aa(lp4887
g368
ag369
aa(lp4888
g371
ag372
aa(lp4889
g374
ag375
aa(lp4890
g377
ag378
aa(lp4891
g380
ag381
aa(lp4892
g383
ag384
aa(lp4893
g386
ag387
aa(lp4894
g389
ag390
aa(lp4895
g392
ag393
aatp4896
Rp4897
aa(lp4898
g397
ag306
((lp4899
(lp4900
g312
ag397
aa(lp4901
g401
ag402
aatp4902
Rp4903
aatp4904
Rp4905
sg91
NsbS'outputspec.subject'
p4906
tp4907
sg2035
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg2036
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Completed'
p4921
sS'strat_0'
p4922
(lp4923
g2237
ag1142
ag305
ag4437
ag2480
ag2896
aS'func_to_anat_FLIRT_0'
p4924
ag3480
ag1903
ag4607
ag3823
ag4462
ag3848
asg1896
g3713
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1430298742.940868
s.