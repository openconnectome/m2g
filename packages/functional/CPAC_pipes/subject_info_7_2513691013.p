(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(cnipype.pipeline.engine
Node
p18
g7
Ntp19
Rp20
(dp21
S'input_source'
p22
(dp23
sS'_interface'
p24
g5
(cnipype.interfaces.utility
IdentityInterface
p25
g7
Ntp26
Rp27
(dp28
S'inputs'
p29
ctraits.traits
__newobj__
p30
(cnipype.interfaces.base
DynamicTraitedSpec
p31
tp32
Rp33
(dp34
S'partial_volume_files'
p35
ctraits.trait_base
_Undefined
p36
(tRp37
sS'__traits_version__'
p38
S'4.5.0'
p39
sS'gm_combo'
p40
g37
sS'mixeltype'
p41
g37
sS'csf_mni2t1'
p42
g37
sS'wm_bin'
p43
g37
sS'csf_bin'
p44
g37
sS'probability_maps'
p45
g37
sS'wm_mni2t1'
p46
g37
sS'csf_combo'
p47
g37
sS'wm_combo'
p48
g37
sS'wm_mask'
p49
g37
sS'gm_mask'
p50
g37
sS'csf_mask'
p51
g37
sS'gm_bin'
p52
g37
sS'partial_volume_map'
p53
g37
sS'gm_mni2t1'
p54
g37
sbsS'_fields'
p55
(lp56
g42
ag47
ag44
ag51
ag54
ag40
ag52
ag50
ag46
ag48
ag43
ag45
ag41
ag53
ag35
ag49
asS'_mandatory_inputs'
p57
I01
sbsS'_result'
p58
NsS'name'
p59
S'outputspec'
p60
sS'plugin_args'
p61
(dp62
sS'_hierarchy'
p63
S'seg_preproc_0'
p64
sS'itersource'
p65
NsS'run_without_submitting'
p66
I00
sS'synchronize'
p67
I00
sS'parameterization'
p68
NsS'iterables'
p69
NsS'_got_inputs'
p70
I00
sS'_id'
p71
g60
sS'config'
p72
NsS'needed_outputs'
p73
(lp74
sS'overwrite'
p75
NsS'base_dir'
p76
Nsb(dp77
sg5
(g18
g7
Ntp78
Rp79
(dp80
g22
(dp81
sg24
g5
(g25
g7
Ntp82
Rp83
(dp84
g29
g30
(g31
tp85
Rp86
(dp87
g38
g39
sS'gm_threshold'
p88
(lp89
F0.7
asbsg55
(lp90
g88
asg57
I01
sbsg58
Nsg59
g88
sg61
(dp91
sg63
g64
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
(g88
(lp92
F0.7
atp93
sg70
I00
sg71
g88
sg72
Nsg73
(lp94
sg75
Nsg76
Nsb(dp95
sg5
(g18
g7
Ntp96
Rp97
(dp98
g22
(dp99
sg24
g5
(g25
g7
Ntp100
Rp101
(dp102
g29
g30
(g31
tp103
Rp104
(dp105
g38
g39
sS'csf_threshold'
p106
(lp107
F0.96
asbsg55
(lp108
g106
asg57
I01
sbsg58
Nsg59
g106
sg61
(dp109
sg63
g64
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
(g106
(lp110
F0.96
atp111
sg70
I00
sg71
g106
sg72
Nsg73
(lp112
sg75
Nsg76
Nsb(dp113
sg5
(g18
g7
Ntp114
Rp115
(dp116
g22
(dp117
sg24
g5
(cnipype.interfaces.fsl.preprocess
FAST
p118
g7
Ntp119
Rp120
(dp121
g29
g30
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p122
tp123
Rp124
(dp125
S'number_classes'
p126
g37
sS'out_basename'
p127
S'segment'
p128
sS'hyper'
p129
g37
sS'verbose'
p130
g37
sS'init_seg_smooth'
p131
g37
sS'init_transform'
p132
g37
sS'no_pve'
p133
g37
sS'output_biascorrected'
p134
g37
sS'mixel_smooth'
p135
g37
sS'segments'
p136
I01
sS'iters_afterbias'
p137
g37
sS'bias_lowpass'
p138
g37
sS'other_priors'
p139
g37
sg38
g39
sS'ignore_exception'
p140
I00
sS'img_type'
p141
I1
sS'args'
p142
g37
sg45
I01
sS'manual_seg'
p143
g37
sS'terminal_output'
p144
S'stream'
p145
sS'output_biasfield'
p146
g37
sS'no_bias'
p147
g37
sS'use_priors'
p148
g37
sS'in_files'
p149
g37
sS'segment_iters'
p150
g37
sS'environ'
p151
g5
(ctraits.trait_handlers
TraitDictObject
p152
c__builtin__
dict
p153
(dp154
S'FSLOUTPUTTYPE'
p155
S'NIFTI_GZ'
p156
stp157
Rp158
(dp159
S'name_items'
p160
S'environ_items'
p161
sg59
g151
sbsS'output_type'
p162
g156
sS'bias_iters'
p163
g37
sbsS'_output_type'
p164
g156
sS'_environ'
p165
NsS'_terminal_output'
p166
g145
sbsg58
Nsg59
g128
sg61
(dp167
sg63
g64
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g128
sg72
Nsg73
(lp168
sg75
Nsg76
Nsb(dp169
sg5
(g6
g7
Ntp170
Rp171
(dp172
g11
g5
(g12
g7
Ntp173
Rp174
(dp175
g16
(dp176
g5
(g18
g7
Ntp177
Rp178
(dp179
g22
(dp180
sg24
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p181
g7
Ntp182
Rp183
(dp184
g29
g30
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p185
tp186
Rp187
(dp188
g140
I00
sS'nan2zeros'
p189
g37
sS'op_string'
p190
S'-mas %s '
p191
sS'out_file'
p192
g37
sg142
g37
sS'internal_datatype'
p193
g37
sg38
g39
sg144
g145
sg151
g5
(g152
g153
(dp194
g155
g156
stp195
Rp196
(dp197
g160
S'environ_items'
p198
sg59
g151
sbsS'in_file'
p199
g37
sg162
g156
sS'output_datatype'
p200
g37
sS'operand_files'
p201
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'GM_mask'
p202
sg61
(dp203
sg63
S'GM'
p204
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g202
sg72
Nsg73
(lp205
sg75
Nsg76
Nsb(dp206
sg5
(g18
g7
Ntp207
Rp208
(dp209
g22
(dp210
sg24
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p211
g7
Ntp212
Rp213
(dp214
g29
g30
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p215
tp216
Rp217
(dp218
g140
I00
sg38
g39
sg190
g37
sS'out_data_type'
p219
g37
sg192
g37
sg142
g37
sS'in_file2'
p220
g37
sg144
g145
sg151
g5
(g152
g153
(dp221
g155
g156
stp222
Rp223
(dp224
g160
S'environ_items'
p225
sg59
g151
sbsg199
g37
sg162
g156
sS'suffix'
p226
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'binarize_threshold_GM'
p227
sg61
(dp228
sg63
g204
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g227
sg72
Nsg73
(lp229
sg75
Nsg76
Nsb(dp230
sg5
(g18
g7
Ntp231
Rp232
(dp233
g22
(dp234
sg24
g5
(g25
g7
Ntp235
Rp236
(dp237
g29
g30
(g31
tp238
Rp239
(dp240
g38
g39
sS'segment_combo'
p241
g37
sS'segment_mask'
p242
g37
sS'tissueprior_mni2t1'
p243
g37
sS'segment_bin'
p244
g37
sbsg55
(lp245
g243
ag241
ag244
ag242
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp246
sg63
g204
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp247
sg75
Nsg76
Nsb(dp248
sg5
(g18
g7
Ntp249
Rp250
(dp251
g22
(dp252
sg24
g5
(g181
g7
Ntp253
Rp254
(dp255
g29
g30
(g185
tp256
Rp257
(dp258
g140
I00
sg189
g37
sg190
g191
sg192
g37
sg142
g37
sg193
g37
sg38
g39
sg144
g145
sg151
g5
(g152
g153
(dp259
g155
g156
stp260
Rp261
(dp262
g160
S'environ_items'
p263
sg59
g151
sbsg199
g37
sg162
g156
sg200
g37
sg201
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'overlap_GM_map_with_prior'
p264
sg61
(dp265
sg63
g204
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g264
sg72
Nsg73
(lp266
sg75
Nsg76
Nsb(dp267
sg5
(g18
g7
Ntp268
Rp269
(dp270
g22
(dp271
sg24
g5
(g25
g7
Ntp272
Rp273
(dp274
g29
g30
(g31
tp275
Rp276
(dp277
S'standard2highres_rig'
p278
g37
sg38
g39
sS'standard2highres_init'
p279
g37
sS'tissue_prior'
p280
g37
sS'standard2highres_mat'
p281
g37
sS'brain'
p282
g37
sS'probability_map'
p283
g37
sS'threshold'
p284
g37
sbsg55
(lp285
g280
ag284
ag282
ag283
ag279
ag281
ag278
asg57
I01
sbsg58
Nsg59
S'inputspec'
p286
sg61
(dp287
sg63
g204
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp288
sg75
Nsg76
Nsb(dp289
sg5
(g18
g7
Ntp290
Rp291
(dp292
g22
(dp293
sg24
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p294
g7
Ntp295
Rp296
(dp297
g29
g30
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p298
tp299
Rp300
(dp301
S'rigid2D'
p302
g37
sg38
g39
sS'in_matrix_file'
p303
g37
sg130
g37
sS'reference'
p304
g37
sS'padding_size'
p305
g37
sS'sinc_window'
p306
g37
sS'interp'
p307
S'nearestneighbour'
p308
sS'wmnorms'
p309
g37
sS'coarse_search'
p310
g37
sS'no_resample'
p311
g37
sS'sinc_width'
p312
g37
sS'in_weight'
p313
g37
sS'fieldmap'
p314
g37
sS'echospacing'
p315
g37
sS'ref_weight'
p316
g37
sS'apply_isoxfm'
p317
g37
sS'fieldmapmask'
p318
g37
sg199
g37
sS'bbrtype'
p319
g37
sS'no_clamp'
p320
g37
sS'force_scaling'
p321
g37
sS'pedir'
p322
g37
sg140
I00
sS'display_init'
p323
g37
sS'schedule'
p324
g37
sg142
g37
sS'uses_qform'
p325
g37
sS'wmcoords'
p326
g37
sg144
g145
sS'fine_search'
p327
g37
sS'angle_rep'
p328
g37
sS'no_search'
p329
g37
sS'apply_xfm'
p330
I01
sS'wm_seg'
p331
g37
sg192
g37
sS'bbrslope'
p332
g37
sS'datatype'
p333
g37
sS'save_log'
p334
g37
sS'dof'
p335
g37
sS'out_matrix_file'
p336
g37
sS'no_resample_blur'
p337
g37
sS'min_sampling'
p338
g37
sS'cost_func'
p339
g37
sS'cost'
p340
g37
sg151
g5
(g152
g153
(dp341
g155
g156
stp342
Rp343
(dp344
g160
S'environ_items'
p345
sg59
g151
sbsS'searchr_x'
p346
g37
sS'out_log'
p347
g37
sg162
g156
sS'searchr_z'
p348
g37
sS'bins'
p349
g37
sS'searchr_y'
p350
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'GM_prior_mni_to_t1'
p351
sg61
(dp352
sg63
g204
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g351
sg72
Nsg73
(lp353
sg75
Nsg76
Nsb(dp354
ssS'graph'
p355
(dp356
sS'succ'
p357
(dp358
g178
(dp359
g232
(dp360
S'connect'
p361
(lp362
(g192
g242
tp363
asssg208
(dp364
g178
(dp365
g361
(lp366
(g192
g199
tp367
assg232
(dp368
g361
(lp369
(g192
g244
tp370
asssg232
(dp371
sg250
(dp372
g208
(dp373
g361
(lp374
(g192
g199
tp375
assg232
(dp376
g361
(lp377
(g192
g241
tp378
asssg269
(dp379
g250
(dp380
g361
(lp381
(g283
g199
tp382
assg291
(dp383
g361
(lp384
(g280
g199
tp385
a(g282
g304
tp386
a(g281
g303
tp387
assg208
(dp388
g361
(lp389
((g284
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p390
(ttp391
g190
tp392
asssg291
(dp393
g250
(dp394
g361
(lp395
(g192
g201
tp396
assg178
(dp397
g361
(lp398
(g192
g201
tp399
assg232
(dp400
g361
(lp401
(g192
g243
tp402
assssS'edge'
p403
g358
sS'pred'
p404
(dp405
g178
(dp406
g208
g365
sg291
g397
ssg208
(dp407
g250
g373
sg269
g388
ssg232
(dp408
g250
g376
sg178
g360
sg291
g400
sg208
g368
ssg250
(dp409
g269
g380
sg291
g394
ssg269
(dp410
sg291
(dp411
g269
g383
sssS'adj'
p412
g358
sbsg59
g204
sg63
g64
sg71
g204
sg72
ccollections
OrderedDict
p413
((lp414
(lp415
S'logging'
p416
ag413
((lp417
(lp418
S'__name__'
p419
ag416
aa(lp420
S'workflow_level'
p421
aS'INFO'
p422
aa(lp423
S'filemanip_level'
p424
aS'INFO'
p425
aa(lp426
S'interface_level'
p427
aS'INFO'
p428
aa(lp429
S'log_to_file'
p430
aS'True'
p431
aa(lp432
S'log_directory'
p433
aS'/mnt/ssd1/data/outputs/CPAC/CPAC_test1/outputs/logs/7_2513691013'
p434
aa(lp435
S'log_size'
p436
aS'16384000'
p437
aa(lp438
S'log_rotate'
p439
aS'4'
p440
aatp441
Rp442
aa(lp443
S'execution'
p444
ag413
((lp445
(lp446
g419
ag444
aa(lp447
S'create_report'
p448
aS'true'
p449
aa(lp450
S'crashdump_dir'
p451
aS'/home/eric/Documents/m2g/packages/functional/CPAC_pipes'
p452
aa(lp453
S'display_variable'
p454
aS':1'
p455
aa(lp456
S'hash_method'
p457
aS'timestamp'
p458
aa(lp459
S'job_finished_timeout'
p460
aS'5'
p461
aa(lp462
S'keep_inputs'
p463
aS'false'
p464
aa(lp465
S'local_hash_check'
p466
aS'true'
p467
aa(lp468
S'matplotlib_backend'
p469
aS'Agg'
p470
aa(lp471
S'plugin'
p472
aS'Linear'
p473
aa(lp474
S'remove_node_directories'
p475
aS'false'
p476
aa(lp477
S'remove_unnecessary_outputs'
p478
aS'true'
p479
aa(lp480
S'single_thread_matlab'
p481
aS'true'
p482
aa(lp483
S'stop_on_first_crash'
p484
aS'false'
p485
aa(lp486
S'stop_on_first_rerun'
p487
aS'false'
p488
aa(lp489
S'use_relative_paths'
p490
aS'false'
p491
aa(lp492
S'stop_on_unknown_version'
p493
aS'false'
p494
aa(lp495
S'write_provenance'
p496
aS'false'
p497
aa(lp498
S'parameterize_dirs'
p499
aS'true'
p500
aatp501
Rp502
aa(lp503
S'check'
p504
ag413
((lp505
(lp506
g419
ag504
aa(lp507
S'interval'
p508
aS'1209600'
p509
aatp510
Rp511
aatp512
Rp513
sg76
Nsb(dp514
sg5
(g6
g7
Ntp515
Rp516
(dp517
g11
g5
(g12
g7
Ntp518
Rp519
(dp520
g16
(dp521
g5
(g18
g7
Ntp522
Rp523
(dp524
g22
(dp525
sg24
g5
(g211
g7
Ntp526
Rp527
(dp528
g29
g30
(g215
tp529
Rp530
(dp531
g140
I00
sg38
g39
sg190
g37
sg219
g37
sg192
g37
sg142
g37
sg220
g37
sg144
g145
sg151
g5
(g152
g153
(dp532
g155
g156
stp533
Rp534
(dp535
g160
S'environ_items'
p536
sg59
g151
sbsg199
g37
sg162
g156
sg226
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'binarize_threshold_CSF'
p537
sg61
(dp538
sg63
S'CSF'
p539
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g537
sg72
Nsg73
(lp540
sg75
Nsg76
Nsb(dp541
sg5
(g18
g7
Ntp542
Rp543
(dp544
g22
(dp545
sg24
g5
(g25
g7
Ntp546
Rp547
(dp548
g29
g30
(g31
tp549
Rp550
(dp551
g38
g39
sg241
g37
sg242
g37
sg243
g37
sg244
g37
sbsg55
(lp552
g243
ag241
ag244
ag242
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp553
sg63
g539
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp554
sg75
Nsg76
Nsb(dp555
sg5
(g18
g7
Ntp556
Rp557
(dp558
g22
(dp559
sg24
g5
(g25
g7
Ntp560
Rp561
(dp562
g29
g30
(g31
tp563
Rp564
(dp565
g278
g37
sg38
g39
sg279
g37
sg280
g37
sg281
g37
sg282
g37
sg283
g37
sg284
g37
sbsg55
(lp566
g280
ag284
ag282
ag283
ag279
ag281
ag278
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp567
sg63
g539
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp568
sg75
Nsg76
Nsb(dp569
sg5
(g18
g7
Ntp570
Rp571
(dp572
g22
(dp573
sg24
g5
(g181
g7
Ntp574
Rp575
(dp576
g29
g30
(g185
tp577
Rp578
(dp579
g140
I00
sg189
g37
sg190
g191
sg192
g37
sg142
g37
sg193
g37
sg38
g39
sg144
g145
sg151
g5
(g152
g153
(dp580
g155
g156
stp581
Rp582
(dp583
g160
S'environ_items'
p584
sg59
g151
sbsg199
g37
sg162
g156
sg200
g37
sg201
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'overlap_CSF_map_with_prior'
p585
sg61
(dp586
sg63
g539
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g585
sg72
Nsg73
(lp587
sg75
Nsg76
Nsb(dp588
sg5
(g18
g7
Ntp589
Rp590
(dp591
g22
(dp592
sg24
g5
(g294
g7
Ntp593
Rp594
(dp595
g29
g30
(g298
tp596
Rp597
(dp598
g302
g37
sg38
g39
sg303
g37
sg130
g37
sg304
g37
sg305
g37
sg306
g37
sg307
g308
sg309
g37
sg310
g37
sg311
g37
sg312
g37
sg313
g37
sg314
g37
sg315
g37
sg316
g37
sg317
g37
sg318
g37
sg199
g37
sg319
g37
sg320
g37
sg321
g37
sg322
g37
sg140
I00
sg323
g37
sg324
g37
sg142
g37
sg325
g37
sg326
g37
sg144
g145
sg327
g37
sg328
g37
sg329
g37
sg330
I01
sg331
g37
sg192
g37
sg332
g37
sg333
g37
sg334
g37
sg335
g37
sg336
g37
sg337
g37
sg338
g37
sg339
g37
sg340
g37
sg151
g5
(g152
g153
(dp599
g155
g156
stp600
Rp601
(dp602
g160
S'environ_items'
p603
sg59
g151
sbsg346
g37
sg347
g37
sg162
g156
sg348
g37
sg349
g37
sg350
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'CSF_prior_mni_to_t1'
p604
sg61
(dp605
sg63
g539
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g604
sg72
Nsg73
(lp606
sg75
Nsg76
Nsb(dp607
sg5
(g18
g7
Ntp608
Rp609
(dp610
g22
(dp611
sg24
g5
(g181
g7
Ntp612
Rp613
(dp614
g29
g30
(g185
tp615
Rp616
(dp617
g140
I00
sg189
g37
sg190
g191
sg192
g37
sg142
g37
sg193
g37
sg38
g39
sg144
g145
sg151
g5
(g152
g153
(dp618
g155
g156
stp619
Rp620
(dp621
g160
S'environ_items'
p622
sg59
g151
sbsg199
g37
sg162
g156
sg200
g37
sg201
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'CSF_mask'
p623
sg61
(dp624
sg63
g539
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g623
sg72
Nsg73
(lp625
sg75
Nsg76
Nsb(dp626
ssg355
(dp627
sg357
(dp628
g523
(dp629
g543
(dp630
g361
(lp631
(g192
g244
tp632
assg609
(dp633
g361
(lp634
(g192
g199
tp635
asssg543
(dp636
sg557
(dp637
g590
(dp638
g361
(lp639
(g280
g199
tp640
a(g282
g304
tp641
a(g281
g303
tp642
assg571
(dp643
g361
(lp644
(g283
g199
tp645
assg523
(dp646
g361
(lp647
((g284
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p648
(ttp649
g190
tp650
asssg571
(dp651
g523
(dp652
g361
(lp653
(g192
g199
tp654
assg543
(dp655
g361
(lp656
(g192
g241
tp657
asssg590
(dp658
g543
(dp659
g361
(lp660
(g192
g243
tp661
assg571
(dp662
g361
(lp663
(g192
g201
tp664
assg609
(dp665
g361
(lp666
(g192
g201
tp667
asssg609
(dp668
g543
(dp669
g361
(lp670
(g192
g242
tp671
assssg403
g628
sg404
(dp672
g523
(dp673
g557
g646
sg571
g652
ssg543
(dp674
g590
g659
sg609
g669
sg571
g655
sg523
g630
ssg557
(dp675
sg571
(dp676
g557
g643
sg590
g662
ssg590
(dp677
g557
g638
ssg609
(dp678
g523
g633
sg590
g665
sssg412
g628
sbsg59
g539
sg63
g64
sg71
g539
sg72
g413
((lp679
(lp680
g416
ag413
((lp681
(lp682
g419
ag416
aa(lp683
g421
ag422
aa(lp684
g424
ag425
aa(lp685
g427
ag428
aa(lp686
g430
ag431
aa(lp687
g433
ag434
aa(lp688
g436
ag437
aa(lp689
g439
ag440
aatp690
Rp691
aa(lp692
g444
ag413
((lp693
(lp694
g419
ag444
aa(lp695
g448
ag449
aa(lp696
g451
ag452
aa(lp697
g454
ag455
aa(lp698
g457
ag458
aa(lp699
g460
ag461
aa(lp700
g463
ag464
aa(lp701
g466
ag467
aa(lp702
g469
ag470
aa(lp703
g472
ag473
aa(lp704
g475
ag476
aa(lp705
g478
ag479
aa(lp706
g481
ag482
aa(lp707
g484
ag485
aa(lp708
g487
ag488
aa(lp709
g490
ag491
aa(lp710
g493
ag494
aa(lp711
g496
ag497
aa(lp712
g499
ag500
aatp713
Rp714
aa(lp715
g504
ag413
((lp716
(lp717
g419
ag504
aa(lp718
g508
ag509
aatp719
Rp720
aatp721
Rp722
sg76
Nsb(dp723
sg5
(g18
g7
Ntp724
Rp725
(dp726
g22
(dp727
sg24
g5
(g25
g7
Ntp728
Rp729
(dp730
g29
g30
(g31
tp731
Rp732
(dp733
g38
g39
sS'wm_threshold'
p734
(lp735
F0.96
asbsg55
(lp736
g734
asg57
I01
sbsg58
Nsg59
g734
sg61
(dp737
sg63
g64
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
(g734
(lp738
F0.96
atp739
sg70
I00
sg71
g734
sg72
Nsg73
(lp740
sg75
Nsg76
Nsb(dp741
sg5
(g6
g7
Ntp742
Rp743
(dp744
g11
g5
(g12
g7
Ntp745
Rp746
(dp747
g16
(dp748
g5
(g18
g7
Ntp749
Rp750
(dp751
g22
(dp752
sg24
g5
(g181
g7
Ntp753
Rp754
(dp755
g29
g30
(g185
tp756
Rp757
(dp758
g140
I00
sg189
g37
sg190
g191
sg192
g37
sg142
g37
sg193
g37
sg38
g39
sg144
g145
sg151
g5
(g152
g153
(dp759
g155
g156
stp760
Rp761
(dp762
g160
S'environ_items'
p763
sg59
g151
sbsg199
g37
sg162
g156
sg200
g37
sg201
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'overlap_WM_map_with_prior'
p764
sg61
(dp765
sg63
S'WM'
p766
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g764
sg72
Nsg73
(lp767
sg75
Nsg76
Nsb(dp768
sg5
(g18
g7
Ntp769
Rp770
(dp771
g22
(dp772
sg24
g5
(g294
g7
Ntp773
Rp774
(dp775
g29
g30
(g298
tp776
Rp777
(dp778
g302
g37
sg38
g39
sg303
g37
sg130
g37
sg304
g37
sg305
g37
sg306
g37
sg307
g308
sg309
g37
sg310
g37
sg311
g37
sg312
g37
sg313
g37
sg314
g37
sg315
g37
sg316
g37
sg317
g37
sg318
g37
sg199
g37
sg319
g37
sg320
g37
sg321
g37
sg322
g37
sg140
I00
sg323
g37
sg324
g37
sg142
g37
sg325
g37
sg326
g37
sg144
g145
sg327
g37
sg328
g37
sg329
g37
sg330
I01
sg331
g37
sg192
g37
sg332
g37
sg333
g37
sg334
g37
sg335
g37
sg336
g37
sg337
g37
sg338
g37
sg339
g37
sg340
g37
sg151
g5
(g152
g153
(dp779
g155
g156
stp780
Rp781
(dp782
g160
S'environ_items'
p783
sg59
g151
sbsg346
g37
sg347
g37
sg162
g156
sg348
g37
sg349
g37
sg350
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'WM_prior_mni_to_t1'
p784
sg61
(dp785
sg63
g766
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g784
sg72
Nsg73
(lp786
sg75
Nsg76
Nsb(dp787
sg5
(g18
g7
Ntp788
Rp789
(dp790
g22
(dp791
sg24
g5
(g25
g7
Ntp792
Rp793
(dp794
g29
g30
(g31
tp795
Rp796
(dp797
g278
g37
sg38
g39
sg279
g37
sg280
g37
sg281
g37
sg282
g37
sg283
g37
sg284
g37
sbsg55
(lp798
g280
ag284
ag282
ag283
ag279
ag281
ag278
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp799
sg63
g766
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp800
sg75
Nsg76
Nsb(dp801
sg5
(g18
g7
Ntp802
Rp803
(dp804
g22
(dp805
sg24
g5
(g181
g7
Ntp806
Rp807
(dp808
g29
g30
(g185
tp809
Rp810
(dp811
g140
I00
sg189
g37
sg190
g191
sg192
g37
sg142
g37
sg193
g37
sg38
g39
sg144
g145
sg151
g5
(g152
g153
(dp812
g155
g156
stp813
Rp814
(dp815
g160
S'environ_items'
p816
sg59
g151
sbsg199
g37
sg162
g156
sg200
g37
sg201
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'WM_mask'
p817
sg61
(dp818
sg63
g766
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g817
sg72
Nsg73
(lp819
sg75
Nsg76
Nsb(dp820
sg5
(g18
g7
Ntp821
Rp822
(dp823
g22
(dp824
sg24
g5
(g25
g7
Ntp825
Rp826
(dp827
g29
g30
(g31
tp828
Rp829
(dp830
g38
g39
sg241
g37
sg242
g37
sg243
g37
sg244
g37
sbsg55
(lp831
g243
ag241
ag244
ag242
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp832
sg63
g766
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp833
sg75
Nsg76
Nsb(dp834
sg5
(g18
g7
Ntp835
Rp836
(dp837
g22
(dp838
sg24
g5
(g211
g7
Ntp839
Rp840
(dp841
g29
g30
(g215
tp842
Rp843
(dp844
g140
I00
sg38
g39
sg190
g37
sg219
g37
sg192
g37
sg142
g37
sg220
g37
sg144
g145
sg151
g5
(g152
g153
(dp845
g155
g156
stp846
Rp847
(dp848
g160
S'environ_items'
p849
sg59
g151
sbsg199
g37
sg162
g156
sg226
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'binarize_threshold_WM'
p850
sg61
(dp851
sg63
g766
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g850
sg72
Nsg73
(lp852
sg75
Nsg76
Nsb(dp853
ssg355
(dp854
sg357
(dp855
g750
(dp856
g836
(dp857
g361
(lp858
(g192
g199
tp859
assg822
(dp860
g361
(lp861
(g192
g241
tp862
asssg770
(dp863
g803
(dp864
g361
(lp865
(g192
g201
tp866
assg750
(dp867
g361
(lp868
(g192
g201
tp869
assg822
(dp870
g361
(lp871
(g192
g243
tp872
asssg789
(dp873
g770
(dp874
g361
(lp875
(g280
g199
tp876
a(g282
g304
tp877
a(g281
g303
tp878
assg750
(dp879
g361
(lp880
(g283
g199
tp881
assg836
(dp882
g361
(lp883
((g284
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p884
(ttp885
g190
tp886
asssg803
(dp887
g822
(dp888
g361
(lp889
(g192
g242
tp890
asssg822
(dp891
sg836
(dp892
g803
(dp893
g361
(lp894
(g192
g199
tp895
assg822
(dp896
g361
(lp897
(g192
g244
tp898
assssg403
g855
sg404
(dp899
g750
(dp900
g770
g867
sg789
g879
ssg770
(dp901
g789
g874
ssg789
(dp902
sg803
(dp903
g770
g864
sg836
g893
ssg822
(dp904
g770
g870
sg803
g888
sg750
g860
sg836
g896
ssg836
(dp905
g750
g857
sg789
g882
sssg412
g855
sbsg59
g766
sg63
g64
sg71
g766
sg72
g413
((lp906
(lp907
g416
ag413
((lp908
(lp909
g419
ag416
aa(lp910
g421
ag422
aa(lp911
g424
ag425
aa(lp912
g427
ag428
aa(lp913
g430
ag431
aa(lp914
g433
ag434
aa(lp915
g436
ag437
aa(lp916
g439
ag440
aatp917
Rp918
aa(lp919
g444
ag413
((lp920
(lp921
g419
ag444
aa(lp922
g448
ag449
aa(lp923
g451
ag452
aa(lp924
g454
ag455
aa(lp925
g457
ag458
aa(lp926
g460
ag461
aa(lp927
g463
ag464
aa(lp928
g466
ag467
aa(lp929
g469
ag470
aa(lp930
g472
ag473
aa(lp931
g475
ag476
aa(lp932
g478
ag479
aa(lp933
g481
ag482
aa(lp934
g484
ag485
aa(lp935
g487
ag488
aa(lp936
g490
ag491
aa(lp937
g493
ag494
aa(lp938
g496
ag497
aa(lp939
g499
ag500
aatp940
Rp941
aa(lp942
g504
ag413
((lp943
(lp944
g419
ag504
aa(lp945
g508
ag509
aatp946
Rp947
aatp948
Rp949
sg76
Nsb(dp950
sg5
(g18
g7
Ntp951
Rp952
(dp953
g22
(dp954
sg24
g5
(g25
g7
Ntp955
Rp956
(dp957
g29
g30
(g31
tp958
Rp959
(dp960
g278
g37
sg38
g39
sg279
g37
sg282
g37
sS'PRIOR_GRAY'
p961
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p962
sg281
g37
sS'PRIOR_CSF'
p963
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p964
sS'PRIOR_WHITE'
p965
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p966
sbsg55
(lp967
g282
ag279
ag281
ag278
ag963
ag961
ag965
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp968
sg63
g64
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp969
sg75
Nsg76
Nsb(dp970
ssg355
(dp971
sg357
(dp972
g20
(dp973
sg79
(dp974
g171
(dp975
g361
(lp976
(g88
S'inputspec.threshold'
p977
tp978
asssg97
(dp979
g516
(dp980
g361
(lp981
(g106
g977
tp982
asssg115
(dp983
g171
(dp984
g361
(lp985
((g45
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p986
(ttp987
S'inputspec.probability_map'
p988
tp989
assg20
(dp990
g361
(lp991
(g45
g45
tp992
a(g41
g41
tp993
a(g35
g35
tp994
a(g53
g53
tp995
assg743
(dp996
g361
(lp997
((g45
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p998
(ttp999
g988
tp1000
assg516
(dp1001
g361
(lp1002
((g45
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1003
(ttp1004
g988
tp1005
asssg171
(dp1006
g20
(dp1007
g361
(lp1008
(S'outputspec.tissueprior_mni2t1'
p1009
g54
tp1010
a(S'outputspec.segment_combo'
p1011
g40
tp1012
a(S'outputspec.segment_bin'
p1013
g52
tp1014
a(S'outputspec.segment_mask'
p1015
g50
tp1016
asssg516
(dp1017
g20
(dp1018
g361
(lp1019
(g1009
g42
tp1020
a(g1011
g47
tp1021
a(g1013
g44
tp1022
a(g1015
g51
tp1023
asssg725
(dp1024
g743
(dp1025
g361
(lp1026
(g734
g977
tp1027
asssg743
(dp1028
g20
(dp1029
g361
(lp1030
(g1009
g46
tp1031
a(g1011
g48
tp1032
a(g1013
g43
tp1033
a(g1015
g49
tp1034
asssg952
(dp1035
g171
(dp1036
g361
(lp1037
(g282
S'inputspec.brain'
p1038
tp1039
a(g961
S'inputspec.tissue_prior'
p1040
tp1041
a(g281
S'inputspec.standard2highres_mat'
p1042
tp1043
assg115
(dp1044
g361
(lp1045
(g282
g149
tp1046
assg743
(dp1047
g361
(lp1048
(g282
g1038
tp1049
a(g965
g1040
tp1050
a(g281
g1042
tp1051
assg516
(dp1052
g361
(lp1053
(g282
g1038
tp1054
a(g963
g1040
tp1055
a(g281
g1042
tp1056
assssg403
g972
sg404
(dp1057
g20
(dp1058
g171
g1007
sg115
g990
sg743
g1029
sg516
g1018
ssg79
(dp1059
sg97
(dp1060
sg115
(dp1061
g952
g1044
ssg171
(dp1062
g79
g975
sg952
g1036
sg115
g984
ssg516
(dp1063
g97
g980
sg952
g1052
sg115
g1001
ssg725
(dp1064
sg743
(dp1065
g725
g1025
sg952
g1047
sg115
g996
ssg952
(dp1066
ssg412
g972
sbsg59
g64
sg63
S'resting_preproc_7_2513691013'
p1067
sg71
g64
sg72
g413
((lp1068
(lp1069
g416
ag413
((lp1070
(lp1071
g419
ag416
aa(lp1072
g421
ag422
aa(lp1073
g424
ag425
aa(lp1074
g427
ag428
aa(lp1075
g430
ag431
aa(lp1076
g433
ag434
aa(lp1077
g436
ag437
aa(lp1078
g439
ag440
aatp1079
Rp1080
aa(lp1081
g444
ag413
((lp1082
(lp1083
g419
ag444
aa(lp1084
g448
ag449
aa(lp1085
g451
ag452
aa(lp1086
g454
ag455
aa(lp1087
g457
ag458
aa(lp1088
g460
ag461
aa(lp1089
g463
ag464
aa(lp1090
g466
ag467
aa(lp1091
g469
ag470
aa(lp1092
g472
ag473
aa(lp1093
g475
ag476
aa(lp1094
g478
ag479
aa(lp1095
g481
ag482
aa(lp1096
g484
ag485
aa(lp1097
g487
ag488
aa(lp1098
g490
ag491
aa(lp1099
g493
ag494
aa(lp1100
g496
ag497
aa(lp1101
g499
ag500
aatp1102
Rp1103
aa(lp1104
g504
ag413
((lp1105
(lp1106
g419
ag504
aa(lp1107
g508
ag509
aatp1108
Rp1109
aatp1110
Rp1111
sg76
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g18
g7
Ntp1122
Rp1123
(dp1124
g22
(dp1125
sg24
g5
(g25
g7
Ntp1126
Rp1127
(dp1128
g29
g30
(g31
tp1129
Rp1130
(dp1131
g38
g39
sS'output_brain'
p1132
g37
sS'nonlinear_xfm'
p1133
g37
sS'invlinear_xfm'
p1134
g37
sS'linear_xfm'
p1135
g37
sbsg55
(lp1136
g1132
ag1135
ag1134
ag1133
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp1137
sg63
S'anat_mni_fnirt_register_0'
p1138
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp1139
sg75
Nsg76
Nsb(dp1140
sg5
(g18
g7
Ntp1141
Rp1142
(dp1143
g22
(dp1144
sg24
g5
(g25
g7
Ntp1145
Rp1146
(dp1147
g29
g30
(g31
tp1148
Rp1149
(dp1150
S'fnirt_config'
p1151
S'T1_2_MNI152_2mm'
p1152
sg38
g39
sS'input_brain'
p1153
g37
sS'reference_skull'
p1154
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1155
sS'reference_brain'
p1156
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1157
sS'input_skull'
p1158
g37
sbsg55
(lp1159
g1153
ag1158
ag1156
ag1154
ag1151
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp1160
sg63
g1138
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp1161
sg75
Nsg76
Nsb(dp1162
sg5
(g18
g7
Ntp1163
Rp1164
(dp1165
g22
(dp1166
sg24
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1167
g7
Ntp1168
Rp1169
(dp1170
g29
g30
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1171
tp1172
Rp1173
(dp1174
g140
I00
sS'supersample'
p1175
g37
sg199
g37
sS'superlevel'
p1176
g37
sg192
g37
sg333
g37
sg142
g37
sg307
g37
sS'field_file'
p1177
g37
sS'ref_file'
p1178
g37
sg144
g145
sg151
g5
(g152
g153
(dp1179
g155
g156
stp1180
Rp1181
(dp1182
g160
S'environ_items'
p1183
sg59
g151
sbsS'premat'
p1184
g37
sS'mask_file'
p1185
g37
sg162
g156
sS'relwarp'
p1186
g37
sS'abswarp'
p1187
g37
sg38
g39
sS'postmat'
p1188
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'brain_warp'
p1189
sg61
(dp1190
sg63
g1138
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1189
sg72
Nsg73
(lp1191
sg75
Nsg76
Nsb(dp1192
sg5
(g18
g7
Ntp1193
Rp1194
(dp1195
g22
(dp1196
sg24
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1197
g7
Ntp1198
Rp1199
(dp1200
g29
g30
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1201
tp1202
Rp1203
(dp1204
g140
I00
sg38
g39
sg192
g37
sg142
g37
sg220
g37
sS'fix_scale_skew'
p1205
g37
sS'invert_xfm'
p1206
I01
sg144
g145
sS'concat_xfm'
p1207
g37
sg199
g37
sg162
g156
sg151
g5
(g152
g153
(dp1208
g155
g156
stp1209
Rp1210
(dp1211
g160
S'environ_items'
p1212
sg59
g151
sbsbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'inv_linear_reg0_xfm'
p1213
sg61
(dp1214
sg63
g1138
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1213
sg72
Nsg73
(lp1215
sg75
Nsg76
Nsb(dp1216
sg5
(g18
g7
Ntp1217
Rp1218
(dp1219
g22
(dp1220
sg24
g5
(g294
g7
Ntp1221
Rp1222
(dp1223
g29
g30
(g298
tp1224
Rp1225
(dp1226
g302
g37
sg38
g39
sg303
g37
sg130
g37
sg304
g37
sg305
g37
sg306
g37
sg307
g37
sg309
g37
sg310
g37
sg311
g37
sg312
g37
sg313
g37
sg314
g37
sg315
g37
sg316
g37
sg317
g37
sg318
g37
sg199
g37
sg319
g37
sg320
g37
sg321
g37
sg322
g37
sg140
I00
sg323
g37
sg324
g37
sg142
g37
sg325
g37
sg326
g37
sg144
g145
sg327
g37
sg328
g37
sg329
g37
sg330
g37
sg331
g37
sg192
g37
sg332
g37
sg333
g37
sg334
g37
sg335
g37
sg336
g37
sg337
g37
sg338
g37
sg339
g37
sg340
S'corratio'
p1227
sg151
g5
(g152
g153
(dp1228
g155
g156
stp1229
Rp1230
(dp1231
g160
S'environ_items'
p1232
sg59
g151
sbsg346
g37
sg347
g37
sg162
g156
sg348
g37
sg349
g37
sg350
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'linear_reg_0'
p1233
sg61
(dp1234
sg63
g1138
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1233
sg72
Nsg73
(lp1235
sg75
Nsg76
Nsb(dp1236
sg5
(g18
g7
Ntp1237
Rp1238
(dp1239
g22
(dp1240
sg24
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1241
g7
Ntp1242
Rp1243
(dp1244
g29
g30
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1245
tp1246
Rp1247
(dp1248
g38
g39
sS'derive_from_ref'
p1249
g37
sS'in_intensitymap_file'
p1250
g37
sS'modulatedref_file'
p1251
g37
sS'refmask_val'
p1252
g37
sS'hessian_precision'
p1253
g37
sS'in_fwhm'
p1254
g37
sS'skip_implicit_in_masking'
p1255
g37
sS'inmask_file'
p1256
g37
sS'refmask_file'
p1257
g37
sS'inwarp_file'
p1258
g37
sS'skip_lambda_ssq'
p1259
g37
sS'intensity_mapping_model'
p1260
g37
sS'affine_file'
p1261
g37
sS'apply_inmask'
p1262
g37
sS'spline_order'
p1263
g37
sS'apply_refmask'
p1264
g37
sS'subsampling_scheme'
p1265
g37
sg199
g37
sS'warped_file'
p1266
g37
sS'skip_refmask'
p1267
g37
sg140
I00
sS'ref_fwhm'
p1268
g37
sS'inmask_val'
p1269
g37
sS'config_file'
p1270
g37
sg1177
g37
sg142
g37
sS'apply_intensity_mapping'
p1271
g37
sS'regularization_lambda'
p1272
g37
sg144
g145
sS'regularization_model'
p1273
g37
sS'jacobian_range'
p1274
g37
sS'out_intensitymap_file'
p1275
g37
sS'skip_implicit_ref_masking'
p1276
g37
sg1178
g37
sS'skip_inmask'
p1277
g37
sS'fieldcoeff_file'
p1278
I01
sS'warp_resolution'
p1279
g37
sS'jacobian_file'
p1280
I01
sg151
g5
(g152
g153
(dp1281
g155
g156
stp1282
Rp1283
(dp1284
g160
S'environ_items'
p1285
sg59
g151
sbsS'bias_regularization_lambda'
p1286
g37
sg162
g156
sS'skip_intensity_mapping'
p1287
g37
sS'log_file'
p1288
g37
sS'biasfield_resolution'
p1289
g37
sS'intensity_mapping_order'
p1290
g37
sS'max_nonlin_iter'
p1291
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'nonlinear_reg_1'
p1292
sg61
(dp1293
sg63
g1138
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1292
sg72
Nsg73
(lp1294
sg75
Nsg76
Nsb(dp1295
ssg355
(dp1296
sg357
(dp1297
g1123
(dp1298
sg1142
(dp1299
g1218
(dp1300
g361
(lp1301
(g1153
g199
tp1302
a(g1156
g304
tp1303
assg1164
(dp1304
g361
(lp1305
(g1153
g199
tp1306
a(g1156
g1178
tp1307
assg1238
(dp1308
g361
(lp1309
(g1158
g199
tp1310
a(g1154
g1178
tp1311
a(g1151
g1270
tp1312
asssg1164
(dp1313
g1123
(dp1314
g361
(lp1315
(g192
g1132
tp1316
asssg1194
(dp1317
g1123
(dp1318
g361
(lp1319
(g192
g1134
tp1320
asssg1218
(dp1321
g1238
(dp1322
g361
(lp1323
(g336
g1261
tp1324
assg1123
(dp1325
g361
(lp1326
(g336
g1135
tp1327
assg1194
(dp1328
g361
(lp1329
(g336
g199
tp1330
asssg1238
(dp1331
g1123
(dp1332
g361
(lp1333
(g1278
g1133
tp1334
assg1164
(dp1335
g361
(lp1336
(g1278
g1177
tp1337
assssg403
g1297
sg404
(dp1338
g1123
(dp1339
g1238
g1332
sg1218
g1325
sg1164
g1314
sg1194
g1318
ssg1142
(dp1340
sg1164
(dp1341
g1142
g1304
sg1238
g1335
ssg1194
(dp1342
g1218
g1328
ssg1218
(dp1343
g1142
g1300
ssg1238
(dp1344
g1142
g1308
sg1218
g1322
sssg412
g1297
sbsg59
g1138
sg63
g1067
sg71
g1138
sg72
g413
((lp1345
(lp1346
g416
ag413
((lp1347
(lp1348
g419
ag416
aa(lp1349
g421
ag422
aa(lp1350
g424
ag425
aa(lp1351
g427
ag428
aa(lp1352
g430
ag431
aa(lp1353
g433
ag434
aa(lp1354
g436
ag437
aa(lp1355
g439
ag440
aatp1356
Rp1357
aa(lp1358
g444
ag413
((lp1359
(lp1360
g419
ag444
aa(lp1361
g448
ag449
aa(lp1362
g451
ag452
aa(lp1363
g454
ag455
aa(lp1364
g457
ag458
aa(lp1365
g460
ag461
aa(lp1366
g463
ag464
aa(lp1367
g466
ag467
aa(lp1368
g469
ag470
aa(lp1369
g472
ag473
aa(lp1370
g475
ag476
aa(lp1371
g478
ag479
aa(lp1372
g481
ag482
aa(lp1373
g484
ag485
aa(lp1374
g487
ag488
aa(lp1375
g490
ag491
aa(lp1376
g493
ag494
aa(lp1377
g496
ag497
aa(lp1378
g499
ag500
aatp1379
Rp1380
aa(lp1381
g504
ag413
((lp1382
(lp1383
g419
ag504
aa(lp1384
g508
ag509
aatp1385
Rp1386
aatp1387
Rp1388
sg76
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g18
g7
Ntp1399
Rp1400
(dp1401
g22
(dp1402
sg24
g5
(g25
g7
Ntp1403
Rp1404
(dp1405
g29
g30
(g31
tp1406
Rp1407
(dp1408
g38
g39
sS'resampled_underlay'
p1409
g37
sS'axial_png'
p1410
g37
sS'sagittal_png'
p1411
g37
sS'resampled_overlay'
p1412
g37
sbsg55
(lp1413
g1410
ag1411
ag1409
ag1412
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp1414
sg63
S'montage_mfi_0'
p1415
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp1416
sg75
Nsg76
Nsb(dp1417
sg5
(g18
g7
Ntp1418
Rp1419
(dp1420
g22
(dp1421
sg24
g5
(cnipype.interfaces.utility
Function
p1422
g7
Ntp1423
Rp1424
(dp1425
S'_input_names'
p1426
(lp1427
S'overlay'
p1428
aS'underlay'
p1429
aS'png_name'
p1430
aS'cbar_name'
p1431
asg29
g30
(cnipype.interfaces.utility
FunctionInputSpec
p1432
tp1433
Rp1434
(dp1435
g140
I00
sg1430
S'MNI_edge_on_mean_func_mni_s.png'
p1436
sg1428
g37
sg1431
S'red'
p1437
sS'function_str'
p1438
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1439
sg1429
g37
sg38
g39
sbsS'_out'
p1440
(dp1441
g1430
NssS'_output_names'
p1442
(lp1443
g1430
asS'imports'
p1444
Nsbsg58
Nsg59
S'montage_s'
p1445
sg61
(dp1446
sg63
g1415
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1445
sg72
Nsg73
(lp1447
sg75
Nsg76
Nsb(dp1448
sg5
(g18
g7
Ntp1449
Rp1450
(dp1451
g22
(dp1452
sg24
g5
(g1422
g7
Ntp1453
Rp1454
(dp1455
g1426
(lp1456
S'file_'
p1457
asg29
g30
(g1432
tp1458
Rp1459
(dp1460
g140
I00
sg1438
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1461
sg1457
g37
sg38
g39
sbsg1440
(dp1462
S'new_fname'
p1463
Nssg1442
(lp1464
g1463
asg1444
Nsbsg58
Nsg59
S'resample_u'
p1465
sg61
(dp1466
sg63
g1415
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1465
sg72
Nsg73
(lp1467
sg75
Nsg76
Nsb(dp1468
sg5
(g18
g7
Ntp1469
Rp1470
(dp1471
g22
(dp1472
sg24
g5
(g25
g7
Ntp1473
Rp1474
(dp1475
g29
g30
(g31
tp1476
Rp1477
(dp1478
g38
g39
sg1429
g37
sg1428
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1479
sbsg55
(lp1480
g1429
ag1428
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp1481
sg63
g1415
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp1482
sg75
Nsg76
Nsb(dp1483
sg5
(g18
g7
Ntp1484
Rp1485
(dp1486
g22
(dp1487
sg24
g5
(g1422
g7
Ntp1488
Rp1489
(dp1490
g1426
(lp1491
g1457
asg29
g30
(g1432
tp1492
Rp1493
(dp1494
g140
I00
sg1438
g1461
sg1457
g37
sg38
g39
sbsg1440
(dp1495
g1463
Nssg1442
(lp1496
g1463
asg1444
Nsbsg58
Nsg66
I00
sg61
(dp1497
sg68
Nsg65
Nsg75
Nsg59
S'resample_o'
p1498
sg63
g1415
sg67
I00
sg69
Nsg70
I00
sg71
g1498
sg72
Nsg73
(lp1499
sg76
Nsb(dp1500
sg5
(g18
g7
Ntp1501
Rp1502
(dp1503
g22
(dp1504
sg24
g5
(g1422
g7
Ntp1505
Rp1506
(dp1507
g1426
(lp1508
g1428
ag1429
ag1430
ag1431
asg29
g30
(g1432
tp1509
Rp1510
(dp1511
g140
I00
sg1430
S'MNI_edge_on_mean_func_mni_a.png'
p1512
sg1428
g37
sg1431
g1437
sg1438
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1513
sg1429
g37
sg38
g39
sbsg1440
(dp1514
g1430
Nssg1442
(lp1515
g1430
asg1444
Nsbsg58
Nsg59
S'montage_a'
p1516
sg61
(dp1517
sg63
g1415
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1516
sg72
Nsg73
(lp1518
sg75
Nsg76
Nsb(dp1519
ssg355
(dp1520
sg357
(dp1521
g1400
(dp1522
sg1419
(dp1523
g1400
(dp1524
g361
(lp1525
(g1430
g1411
tp1526
asssg1450
(dp1527
g1400
(dp1528
g361
(lp1529
(g1463
g1409
tp1530
assg1502
(dp1531
g361
(lp1532
(g1463
g1429
tp1533
assg1419
(dp1534
g361
(lp1535
(g1463
g1429
tp1536
asssg1470
(dp1537
g1450
(dp1538
g361
(lp1539
(g1429
g1457
tp1540
assg1485
(dp1541
g361
(lp1542
(g1428
g1457
tp1543
asssg1485
(dp1544
g1400
(dp1545
g361
(lp1546
(g1463
g1412
tp1547
assg1502
(dp1548
g361
(lp1549
(g1463
g1428
tp1550
assg1419
(dp1551
g361
(lp1552
(g1463
g1428
tp1553
asssg1502
(dp1554
g1400
(dp1555
g361
(lp1556
(g1430
g1410
tp1557
assssg403
g1521
sg404
(dp1558
g1400
(dp1559
g1419
g1524
sg1450
g1528
sg1485
g1545
sg1502
g1555
ssg1419
(dp1560
g1450
g1534
sg1485
g1551
ssg1450
(dp1561
g1470
g1538
ssg1470
(dp1562
sg1485
(dp1563
g1470
g1541
ssg1502
(dp1564
g1450
g1531
sg1485
g1548
sssg412
g1521
sbsg59
g1415
sg63
g1067
sg71
g1415
sg72
g413
((lp1565
(lp1566
g416
ag413
((lp1567
(lp1568
g419
ag416
aa(lp1569
g421
ag422
aa(lp1570
g424
ag425
aa(lp1571
g427
ag428
aa(lp1572
g430
ag431
aa(lp1573
g433
ag434
aa(lp1574
g436
ag437
aa(lp1575
g439
ag440
aatp1576
Rp1577
aa(lp1578
g444
ag413
((lp1579
(lp1580
g419
ag444
aa(lp1581
g448
ag449
aa(lp1582
g451
ag452
aa(lp1583
g454
ag455
aa(lp1584
g457
ag458
aa(lp1585
g460
ag461
aa(lp1586
g463
ag464
aa(lp1587
g466
ag467
aa(lp1588
g469
ag470
aa(lp1589
g472
ag473
aa(lp1590
g475
ag476
aa(lp1591
g478
ag479
aa(lp1592
g481
ag482
aa(lp1593
g484
ag485
aa(lp1594
g487
ag488
aa(lp1595
g490
ag491
aa(lp1596
g493
ag494
aa(lp1597
g496
ag497
aa(lp1598
g499
ag500
aatp1599
Rp1600
aa(lp1601
g504
ag413
((lp1602
(lp1603
g419
ag504
aa(lp1604
g508
ag509
aatp1605
Rp1606
aatp1607
Rp1608
sg76
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g18
g7
Ntp1619
Rp1620
(dp1621
g22
(dp1622
sg24
g5
(g1422
g7
Ntp1623
Rp1624
(dp1625
g1426
(lp1626
g1428
ag1429
ag1430
ag1431
asg29
g30
(g1432
tp1627
Rp1628
(dp1629
g140
I00
sg1430
S'snr_a.png'
p1630
sg1428
g37
sg1431
S'red_to_blue'
p1631
sg1438
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1632
sg1429
g37
sg38
g39
sbsg1440
(dp1633
g1430
Nssg1442
(lp1634
g1430
asg1444
Nsbsg58
Nsg59
g1516
sg61
(dp1635
sg63
S'montage_snr_0'
p1636
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1516
sg72
Nsg73
(lp1637
sg75
Nsg76
Nsb(dp1638
sg5
(g18
g7
Ntp1639
Rp1640
(dp1641
g22
(dp1642
sg24
g5
(g1422
g7
Ntp1643
Rp1644
(dp1645
g1426
(lp1646
g1428
ag1429
ag1430
ag1431
asg29
g30
(g1432
tp1647
Rp1648
(dp1649
g140
I00
sg1430
S'snr_s.png'
p1650
sg1428
g37
sg1431
g1631
sg1438
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1651
sg1429
g37
sg38
g39
sbsg1440
(dp1652
g1430
Nssg1442
(lp1653
g1430
asg1444
Nsbsg58
Nsg59
g1445
sg61
(dp1654
sg63
g1636
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1445
sg72
Nsg73
(lp1655
sg75
Nsg76
Nsb(dp1656
sg5
(g18
g7
Ntp1657
Rp1658
(dp1659
g22
(dp1660
sg24
g5
(g1422
g7
Ntp1661
Rp1662
(dp1663
g1426
(lp1664
g1457
asg29
g30
(g1432
tp1665
Rp1666
(dp1667
g140
I00
sg1438
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1668
sg1457
g37
sg38
g39
sbsg1440
(dp1669
g1463
Nssg1442
(lp1670
g1463
asg1444
Nsbsg58
Nsg59
g1465
sg61
(dp1671
sg63
g1636
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1465
sg72
Nsg73
(lp1672
sg75
Nsg76
Nsb(dp1673
sg5
(g18
g7
Ntp1674
Rp1675
(dp1676
g22
(dp1677
sg24
g5
(g1422
g7
Ntp1678
Rp1679
(dp1680
g1426
(lp1681
g1457
asg29
g30
(g1432
tp1682
Rp1683
(dp1684
g140
I00
sg1438
g1668
sg1457
g37
sg38
g39
sbsg1440
(dp1685
g1463
Nssg1442
(lp1686
g1463
asg1444
Nsbsg58
Nsg66
I00
sg61
(dp1687
sg68
Nsg65
Nsg75
Nsg59
g1498
sg63
g1636
sg67
I00
sg69
Nsg70
I00
sg71
g1498
sg72
Nsg73
(lp1688
sg76
Nsb(dp1689
sg5
(g18
g7
Ntp1690
Rp1691
(dp1692
g22
(dp1693
sg24
g5
(g25
g7
Ntp1694
Rp1695
(dp1696
g29
g30
(g31
tp1697
Rp1698
(dp1699
g38
g39
sg1429
g37
sg1428
g37
sbsg55
(lp1700
g1429
ag1428
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp1701
sg63
g1636
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp1702
sg75
Nsg76
Nsb(dp1703
sg5
(g18
g7
Ntp1704
Rp1705
(dp1706
g22
(dp1707
sg24
g5
(g25
g7
Ntp1708
Rp1709
(dp1710
g29
g30
(g31
tp1711
Rp1712
(dp1713
g38
g39
sg1409
g37
sg1410
g37
sg1411
g37
sg1412
g37
sbsg55
(lp1714
g1410
ag1411
ag1409
ag1412
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp1715
sg63
g1636
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp1716
sg75
Nsg76
Nsb(dp1717
ssg355
(dp1718
sg357
(dp1719
g1620
(dp1720
g1705
(dp1721
g361
(lp1722
(g1430
g1410
tp1723
asssg1640
(dp1724
g1705
(dp1725
g361
(lp1726
(g1430
g1411
tp1727
asssg1658
(dp1728
g1620
(dp1729
g361
(lp1730
(g1463
g1429
tp1731
assg1705
(dp1732
g361
(lp1733
(g1463
g1409
tp1734
assg1640
(dp1735
g361
(lp1736
(g1463
g1429
tp1737
asssg1675
(dp1738
g1620
(dp1739
g361
(lp1740
(g1463
g1428
tp1741
assg1705
(dp1742
g361
(lp1743
(g1463
g1412
tp1744
assg1640
(dp1745
g361
(lp1746
(g1463
g1428
tp1747
asssg1691
(dp1748
g1658
(dp1749
g361
(lp1750
(g1429
g1457
tp1751
assg1675
(dp1752
g361
(lp1753
(g1428
g1457
tp1754
asssg1705
(dp1755
ssg403
g1719
sg404
(dp1756
g1620
(dp1757
g1658
g1729
sg1675
g1739
ssg1640
(dp1758
g1658
g1735
sg1675
g1745
ssg1658
(dp1759
g1691
g1749
ssg1675
(dp1760
g1691
g1752
ssg1691
(dp1761
sg1705
(dp1762
g1658
g1732
sg1675
g1742
sg1640
g1725
sg1620
g1721
sssg412
g1719
sbsg59
g1636
sg63
g1067
sg71
g1636
sg72
g413
((lp1763
(lp1764
g416
ag413
((lp1765
(lp1766
g419
ag416
aa(lp1767
g421
ag422
aa(lp1768
g424
ag425
aa(lp1769
g427
ag428
aa(lp1770
g430
ag431
aa(lp1771
g433
ag434
aa(lp1772
g436
ag437
aa(lp1773
g439
ag440
aatp1774
Rp1775
aa(lp1776
g444
ag413
((lp1777
(lp1778
g419
ag444
aa(lp1779
g448
ag449
aa(lp1780
g451
ag452
aa(lp1781
g454
ag455
aa(lp1782
g457
ag458
aa(lp1783
g460
ag461
aa(lp1784
g463
ag464
aa(lp1785
g466
ag467
aa(lp1786
g469
ag470
aa(lp1787
g472
ag473
aa(lp1788
g475
ag476
aa(lp1789
g478
ag479
aa(lp1790
g481
ag482
aa(lp1791
g484
ag485
aa(lp1792
g487
ag488
aa(lp1793
g490
ag491
aa(lp1794
g493
ag494
aa(lp1795
g496
ag497
aa(lp1796
g499
ag500
aatp1797
Rp1798
aa(lp1799
g504
ag413
((lp1800
(lp1801
g419
ag504
aa(lp1802
g508
ag509
aatp1803
Rp1804
aatp1805
Rp1806
sg76
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g18
g7
Ntp1810
Rp1811
(dp1812
g22
(dp1813
sg24
g5
(g1167
g7
Ntp1814
Rp1815
(dp1816
g29
g30
(g1171
tp1817
Rp1818
(dp1819
g140
I00
sg1175
g37
sg199
g37
sg1176
g37
sg192
g37
sg333
g37
sg142
g37
sg307
g37
sg1177
g37
sg1178
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg144
g145
sg151
g5
(g152
g153
(dp1821
g155
g156
stp1822
Rp1823
(dp1824
g160
S'environ_items'
p1825
sg59
g151
sbsg1184
g37
sg1185
g37
sg162
g156
sg1186
g37
sg1187
g37
sg38
g39
sg1188
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'mean_func_fsl_warp_0'
p1826
sg61
(dp1827
sg63
g1067
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1826
sg72
Nsg73
(lp1828
sg75
Nsg76
Nsbg192
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g18
g7
Ntp1831
Rp1832
(dp1833
g22
(dp1834
sg24
g5
(g1422
g7
Ntp1835
Rp1836
(dp1837
g1426
(lp1838
S'motion_parameters'
p1839
asg29
g30
(g1432
tp1840
Rp1841
(dp1842
g140
I00
sg1438
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g37
sg38
g39
sbsg1440
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1442
(lp1847
g1845
ag1846
asg1444
Nsbsg58
Nsg59
S'motion_plt_0'
p1848
sg61
(dp1849
sg63
g1067
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1848
sg72
Nsg73
(lp1850
sg75
Nsg76
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g18
g7
Ntp1853
Rp1854
(dp1855
g22
(dp1856
sg24
g5
(g1422
g7
Ntp1857
Rp1858
(dp1859
g1426
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg29
g30
(g1432
tp1864
Rp1865
(dp1866
g140
I00
sg38
g39
sg1861
g37
sg1438
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g37
sbsg1440
(dp1869
S'hist_path'
p1870
Nssg1442
(lp1871
g1870
asg1444
Nsbsg58
Nsg59
S'fd_plot_0'
p1872
sg61
(dp1873
sg63
g1067
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1872
sg72
Nsg73
(lp1874
sg75
Nsg76
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g18
g7
Ntp1884
Rp1885
(dp1886
g22
(dp1887
sg24
g5
(g25
g7
Ntp1888
Rp1889
(dp1890
g29
g30
(g31
tp1891
Rp1892
(dp1893
g38
g39
sS'frames_ex_1D'
p1894
g37
sS'FDJ_1D'
p1895
g37
sS'FD_1D'
p1896
g37
sS'frames_in_1D'
p1897
g37
sS'motion_params'
p1898
g37
sS'power_params'
p1899
g37
sbsg55
(lp1900
g1896
ag1895
ag1894
ag1897
ag1899
ag1898
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp1901
sg63
S'gen_motion_stats_0'
p1902
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp1903
sg75
Nsg76
Nsb(dp1904
sg5
(g18
g7
Ntp1905
Rp1906
(dp1907
g22
(dp1908
sg24
g5
(g1422
g7
Ntp1909
Rp1910
(dp1911
g1426
(lp1912
g199
ag284
aS'frames_before'
p1913
aS'frames_after'
p1914
asg29
g30
(g1432
tp1915
Rp1916
(dp1917
g140
I00
sg1914
g37
sg1438
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1918
sg199
g37
sg284
g37
sg38
g39
sg1913
g37
sbsg1440
(dp1919
g192
Nssg1442
(lp1920
g192
asg1444
Nsbsg58
Nsg59
S'exclude_frames'
p1921
sg61
(dp1922
sg63
g1902
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1921
sg72
Nsg73
(lp1923
sg75
Nsg76
Nsb(dp1924
sg5
(g18
g7
Ntp1925
Rp1926
(dp1927
g22
(dp1928
sg24
g5
(g1422
g7
Ntp1929
Rp1930
(dp1931
g1426
(lp1932
S'rest'
p1933
aS'mask'
p1934
asg29
g30
(g1432
tp1935
Rp1936
(dp1937
g140
I00
sg1934
g37
sg38
g39
sg1438
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p1938
sg1933
g37
sbsg1440
(dp1939
g192
Nssg1442
(lp1940
g192
asg1444
Nsbsg58
Nsg59
S'cal_DVARS'
p1941
sg61
(dp1942
sg63
g1902
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1941
sg72
Nsg73
(lp1943
sg75
Nsg76
Nsb(dp1944
sg5
(g18
g7
Ntp1945
Rp1946
(dp1947
g22
(dp1948
sg24
g5
(g1422
g7
Ntp1949
Rp1950
(dp1951
g1426
(lp1952
S'subject_id'
p1953
aS'scan_id'
p1954
aS'movement_parameters'
p1955
aS'max_displacement'
p1956
asg29
g30
(g1432
tp1957
Rp1958
(dp1959
g140
I00
sg1956
g37
sg1954
g37
sg1953
g37
sg1438
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1960
sg1955
g37
sg38
g39
sbsg1440
(dp1961
g192
Nssg1442
(lp1962
g192
asg1444
Nsbsg58
Nsg59
S'calc_motion_parameters'
p1963
sg61
(dp1964
sg63
g1902
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1963
sg72
Nsg73
(lp1965
sg75
Nsg76
Nsb(dp1966
sg5
(g18
g7
Ntp1967
Rp1968
(dp1969
g22
(dp1970
sg24
g5
(g1422
g7
Ntp1971
Rp1972
(dp1973
g1426
(lp1974
g1953
ag1954
ag1896
ag1895
ag284
aS'DVARS'
p1975
asg29
g30
(g1432
tp1976
Rp1977
(dp1978
g140
I00
sg38
g39
sg1954
g37
sg1953
g37
sg1975
g37
sg1438
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1979
sg1895
g37
sg1896
g37
sg284
g37
sbsg1440
(dp1980
g192
Nssg1442
(lp1981
g192
asg1444
Nsbsg58
Nsg59
S'calc_power_parameters'
p1982
sg61
(dp1983
sg63
g1902
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1982
sg72
Nsg73
(lp1984
sg75
Nsg76
Nsb(dp1985
sg5
(g18
g7
Ntp1986
Rp1987
(dp1988
g22
(dp1989
sg24
g5
(g25
g7
Ntp1990
Rp1991
(dp1992
g29
g30
(g31
tp1993
Rp1994
(dp1995
g1956
g37
sg38
g39
sg1954
g37
sg1953
g37
sg1934
g37
sg1955
g37
sS'oned_matrix_save'
p1996
g37
sS'motion_correct'
p1997
g37
sbsg55
(lp1998
g1953
ag1954
ag1955
ag1956
ag1997
ag1934
ag1996
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp1999
sg63
g1902
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp2000
sg75
Nsg76
Nsb(dp2001
sg5
(g18
g7
Ntp2002
Rp2003
(dp2004
g22
(dp2005
sg24
g5
(g25
g7
Ntp2006
Rp2007
(dp2008
g29
g30
(g31
tp2009
Rp2010
(dp2011
g284
(lp2012
F0.2
asg38
g39
sS'remove_frames_before'
p2013
I1
sS'remove_frames_after'
p2014
I2
sbsg55
(lp2015
g284
ag2013
ag2014
asg57
I01
sbsg58
Nsg59
S'scrubbing_input'
p2016
sg61
(dp2017
sg63
g1902
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
(g284
(lp2018
F0.2
atp2019
sg70
I00
sg71
g2016
sg72
Nsg73
(lp2020
sg75
Nsg76
Nsb(dp2021
sg5
(g18
g7
Ntp2022
Rp2023
(dp2024
g22
(dp2025
sg24
g5
(g1422
g7
Ntp2026
Rp2027
(dp2028
g1426
(lp2029
g199
asg29
g30
(g1432
tp2030
Rp2031
(dp2032
g140
I00
sg38
g39
sg1438
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p2033
sg199
g37
sbsg1440
(dp2034
g192
Nssg1442
(lp2035
g192
asg1444
Nsbsg58
Nsg59
S'calculate_FD'
p2036
sg61
(dp2037
sg63
g1902
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2036
sg72
Nsg73
(lp2038
sg75
Nsg76
Nsb(dp2039
sg5
(g18
g7
Ntp2040
Rp2041
(dp2042
g22
(dp2043
sg24
g5
(g1422
g7
Ntp2044
Rp2045
(dp2046
g1426
(lp2047
g199
asg29
g30
(g1432
tp2048
Rp2049
(dp2050
g140
I00
sg38
g39
sg1438
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p2051
sg199
g37
sbsg1440
(dp2052
g192
Nssg1442
(lp2053
g192
asg1444
Nsbsg58
Nsg59
S'calculate_FDJ'
p2054
sg61
(dp2055
sg63
g1902
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2054
sg72
Nsg73
(lp2056
sg75
Nsg76
Nsb(dp2057
sg5
(g18
g7
Ntp2058
Rp2059
(dp2060
g22
(dp2061
sg24
g5
(g1422
g7
Ntp2062
Rp2063
(dp2064
g1426
(lp2065
g199
ag284
aS'exclude_list'
p2066
asg29
g30
(g1432
tp2067
Rp2068
(dp2069
g140
I00
sg2066
g37
sg1438
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p2070
sg199
g37
sg284
g37
sg38
g39
sbsg1440
(dp2071
g192
Nssg1442
(lp2072
g192
asg1444
Nsbsg58
Nsg59
S'include_frames'
p2073
sg61
(dp2074
sg63
g1902
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2073
sg72
Nsg73
(lp2075
sg75
Nsg76
Nsb(dp2076
ssg355
(dp2077
sg357
(dp2078
g1885
(dp2079
sg1906
(dp2080
g1885
(dp2081
g361
(lp2082
(g192
g1894
tp2083
assg2059
(dp2084
g361
(lp2085
(g192
g2066
tp2086
asssg1926
(dp2087
g1968
(dp2088
g361
(lp2089
(g192
g1975
tp2090
asssg1946
(dp2091
g1885
(dp2092
g361
(lp2093
(g192
g1898
tp2094
asssg1968
(dp2095
g1885
(dp2096
g361
(lp2097
(g192
g1899
tp2098
asssg1987
(dp2099
g1946
(dp2100
g361
(lp2101
(g1953
g1953
tp2102
a(g1954
g1954
tp2103
a(g1955
g1955
tp2104
a(g1956
g1956
tp2105
assg2023
(dp2106
g361
(lp2107
(g1955
g199
tp2108
assg1968
(dp2109
g361
(lp2110
(g1953
g1953
tp2111
a(g1954
g1954
tp2112
assg1926
(dp2113
g361
(lp2114
(g1997
g1933
tp2115
a(g1934
g1934
tp2116
assg2041
(dp2117
g361
(lp2118
(g1996
g199
tp2119
asssg2003
(dp2120
g1906
(dp2121
g361
(lp2122
(g284
g284
tp2123
a(g2013
g1913
tp2124
a(g2014
g1914
tp2125
assg2059
(dp2126
g361
(lp2127
(g284
g284
tp2128
assg1968
(dp2129
g361
(lp2130
(g284
g284
tp2131
asssg2023
(dp2132
g1885
(dp2133
g361
(lp2134
(g192
g1896
tp2135
assg1968
(dp2136
g361
(lp2137
(g192
g1896
tp2138
assg2059
(dp2139
g361
(lp2140
(g192
g199
tp2141
assg1906
(dp2142
g361
(lp2143
(g192
g199
tp2144
asssg2041
(dp2145
g1885
(dp2146
g361
(lp2147
(g192
g1895
tp2148
assg1968
(dp2149
g361
(lp2150
(g192
g1895
tp2151
asssg2059
(dp2152
g1885
(dp2153
g361
(lp2154
(g192
g1897
tp2155
assssg403
g2078
sg404
(dp2156
g1885
(dp2157
g1906
g2081
sg1946
g2092
sg2059
g2153
sg1968
g2096
sg2023
g2133
sg2041
g2146
ssg1906
(dp2158
g2023
g2142
sg2003
g2121
ssg1926
(dp2159
g1987
g2113
ssg1946
(dp2160
g1987
g2100
ssg1968
(dp2161
g2023
g2136
sg2003
g2129
sg1987
g2109
sg2041
g2149
sg1926
g2088
ssg1987
(dp2162
sg2003
(dp2163
sg2023
(dp2164
g1987
g2106
ssg2041
(dp2165
g1987
g2117
ssg2059
(dp2166
g1906
g2084
sg2023
g2139
sg2003
g2126
sssg412
g2078
sbsg59
g1902
sg63
g1067
sg71
g1902
sg72
g413
((lp2167
(lp2168
g416
ag413
((lp2169
(lp2170
g419
ag416
aa(lp2171
g421
ag422
aa(lp2172
g424
ag425
aa(lp2173
g427
ag428
aa(lp2174
g430
ag431
aa(lp2175
g433
ag434
aa(lp2176
g436
ag437
aa(lp2177
g439
ag440
aatp2178
Rp2179
aa(lp2180
g444
ag413
((lp2181
(lp2182
g419
ag444
aa(lp2183
g448
ag449
aa(lp2184
g451
ag452
aa(lp2185
g454
ag455
aa(lp2186
g457
ag458
aa(lp2187
g460
ag461
aa(lp2188
g463
ag464
aa(lp2189
g466
ag467
aa(lp2190
g469
ag470
aa(lp2191
g472
ag473
aa(lp2192
g475
ag476
aa(lp2193
g478
ag479
aa(lp2194
g481
ag482
aa(lp2195
g484
ag485
aa(lp2196
g487
ag488
aa(lp2197
g490
ag491
aa(lp2198
g493
ag494
aa(lp2199
g496
ag497
aa(lp2200
g499
ag500
aatp2201
Rp2202
aa(lp2203
g504
ag413
((lp2204
(lp2205
g419
ag504
aa(lp2206
g508
ag509
aatp2207
Rp2208
aatp2209
Rp2210
sg76
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g18
g7
Ntp2224
Rp2225
(dp2226
g22
(dp2227
sg24
g5
(cnipype.interfaces.afni.preprocess
Calc
p2228
g7
Ntp2229
Rp2230
(dp2231
g29
g30
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2232
tp2233
Rp2234
(dp2235
S'stop_idx'
p2236
g37
sg140
I00
sg38
g39
sg192
g37
sS'expr'
p2237
S'a*step(b)'
p2238
sg142
g37
sS'outputtype'
p2239
S'NIFTI_GZ'
p2240
sS'in_file_b'
p2241
g37
sS'in_file_c'
p2242
g37
sS'in_file_a'
p2243
g37
sg151
g5
(g152
g153
(dp2244
tp2245
Rp2246
(dp2247
g160
S'environ_items'
p2248
sg59
g151
sbsS'single_idx'
p2249
g37
sS'other'
p2250
g37
sS'start_idx'
p2251
g37
sg144
g145
sbsS'_outputtype'
p2252
g2240
sg165
Nsg166
g145
sbsg58
Nsg66
I00
sg61
(dp2253
sg68
Nsg65
Nsg75
Nsg59
S'anat_brain_only'
p2254
sg63
S'anat_preproc_0'
p2255
sg67
I00
sg69
Nsg70
I00
sg71
g2254
sg72
Nsg73
(lp2256
sg76
Nsb(dp2257
sg5
(g18
g7
Ntp2258
Rp2259
(dp2260
g22
(dp2261
sg24
g5
(g25
g7
Ntp2262
Rp2263
(dp2264
g29
g30
(g31
tp2265
Rp2266
(dp2267
g38
g39
sS'anat'
p2268
g37
sbsg55
(lp2269
g2268
asg57
I01
sbsg58
Nsg66
I00
sg61
(dp2270
sg68
Nsg65
Nsg75
Nsg59
g286
sg63
g2255
sg67
I00
sg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp2271
sg76
Nsb(dp2272
sg5
(g18
g7
Ntp2273
Rp2274
(dp2275
g22
(dp2276
sg24
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2277
g7
Ntp2278
Rp2279
(dp2280
g29
g30
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2281
tp2282
Rp2283
(dp2284
g140
I00
sg38
g39
sg192
g37
sg142
g37
sg2239
S'AFNI'
p2285
sg144
g145
sg151
g5
(g152
g153
(dp2286
tp2287
Rp2288
(dp2289
g160
S'environ_items'
p2290
sg59
g151
sbsg199
g37
sbsg2252
g2285
sg165
Nsg166
g145
sbsg58
Nsg66
I00
sg61
(dp2291
sg68
Nsg65
Nsg75
Nsg59
S'anat_skullstrip'
p2292
sg63
g2255
sg67
I00
sg69
Nsg70
I00
sg71
g2292
sg72
Nsg73
(lp2293
sg76
Nsb(dp2294
sg5
(g18
g7
Ntp2295
Rp2296
(dp2297
g22
(dp2298
sg24
g5
(cnipype.interfaces.afni.preprocess
Resample
p2299
g7
Ntp2300
Rp2301
(dp2302
g29
g30
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2303
tp2304
Rp2305
(dp2306
g140
I00
sg38
g39
sg192
g37
sg142
g37
sg2239
g2240
sS'resample_mode'
p2307
g37
sS'voxel_size'
p2308
g37
sg144
g145
sS'master'
p2309
g37
sg199
g37
sg151
g5
(g152
g153
(dp2310
tp2311
Rp2312
(dp2313
g160
S'environ_items'
p2314
sg59
g151
sbsS'orientation'
p2315
S'RPI'
p2316
sbsg2252
g2240
sg165
Nsg166
g145
sbsg58
Nsg66
I00
sg61
(dp2317
sg68
Nsg65
Nsg75
Nsg59
S'anat_reorient'
p2318
sg63
g2255
sg67
I00
sg69
Nsg70
I00
sg71
g2318
sg72
Nsg73
(lp2319
sg76
Nsb(dp2320
sg5
(g18
g7
Ntp2321
Rp2322
(dp2323
g22
(dp2324
sg24
g5
(g25
g7
Ntp2325
Rp2326
(dp2327
g29
g30
(g31
tp2328
Rp2329
(dp2330
S'reorient'
p2331
g37
sg282
g37
sS'refit'
p2332
g37
sg38
g39
sS'skullstrip'
p2333
g37
sbsg55
(lp2334
g2332
ag2331
ag2333
ag282
asg57
I01
sbsg58
Nsg66
I00
sg61
(dp2335
sg68
Nsg65
Nsg75
Nsg59
g60
sg63
g2255
sg67
I00
sg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp2336
sg76
Nsb(dp2337
sg5
(g18
g7
Ntp2338
Rp2339
(dp2340
g22
(dp2341
sg24
g5
(cnipype.interfaces.afni.preprocess
Refit
p2342
g7
Ntp2343
Rp2344
(dp2345
g29
g30
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2346
tp2347
Rp2348
(dp2349
g140
I00
sg38
g39
sS'deoblique'
p2350
I01
sg142
g37
sS'yorigin'
p2351
g37
sg144
g145
sg151
g5
(g152
g153
(dp2352
tp2353
Rp2354
(dp2355
g160
S'environ_items'
p2356
sg59
g151
sbsg199
g37
sS'xorigin'
p2357
g37
sS'zorigin'
p2358
g37
sbsg165
Nsg166
g145
sbsg58
Nsg66
I00
sg61
(dp2359
sg68
Nsg65
Nsg75
Nsg59
S'anat_deoblique'
p2360
sg63
g2255
sg67
I00
sg69
Nsg70
I00
sg71
g2360
sg72
Nsg73
(lp2361
sg76
Nsb(dp2362
ssg357
(dp2363
g2225
(dp2364
g2322
(dp2365
g361
(lp2366
(g192
g282
tp2367
asssg2259
(dp2368
g2339
(dp2369
g361
(lp2370
(g2268
g199
tp2371
asssg2274
(dp2372
g2225
(dp2373
g361
(lp2374
(g192
g2241
tp2375
assg2322
(dp2376
g361
(lp2377
(g192
g2333
tp2378
asssg2296
(dp2379
g2225
(dp2380
g361
(lp2381
(g192
g2243
tp2382
assg2322
(dp2383
g361
(lp2384
(g192
g2331
tp2385
assg2274
(dp2386
g361
(lp2387
(g192
g199
tp2388
asssg2322
(dp2389
sg2339
(dp2390
g2296
(dp2391
g361
(lp2392
(g192
g199
tp2393
assg2322
(dp2394
g361
(lp2395
(g192
g2332
tp2396
assssg403
g2363
sg404
(dp2397
g2225
(dp2398
g2274
g2373
sg2296
g2380
ssg2259
(dp2399
sg2274
(dp2400
g2296
g2386
ssg2296
(dp2401
g2339
g2391
ssg2322
(dp2402
g2225
g2365
sg2339
g2394
sg2296
g2383
sg2274
g2376
ssg2339
(dp2403
g2259
g2369
sssg355
(dp2404
sg412
g2363
sbsg59
g2255
sg63
g1067
sg71
g2255
sg72
g413
((lp2405
(lp2406
g416
ag413
((lp2407
(lp2408
g419
ag416
aa(lp2409
g421
ag422
aa(lp2410
g424
ag425
aa(lp2411
g427
ag428
aa(lp2412
g430
ag431
aa(lp2413
g433
ag434
aa(lp2414
g436
ag437
aa(lp2415
g439
ag440
aatp2416
Rp2417
aa(lp2418
g444
ag413
((lp2419
(lp2420
g419
ag444
aa(lp2421
g448
ag449
aa(lp2422
g451
ag452
aa(lp2423
g454
ag455
aa(lp2424
g457
ag458
aa(lp2425
g460
ag461
aa(lp2426
g463
ag464
aa(lp2427
g466
ag467
aa(lp2428
g469
ag470
aa(lp2429
g472
ag473
aa(lp2430
g475
ag476
aa(lp2431
g478
ag479
aa(lp2432
g481
ag482
aa(lp2433
g484
ag485
aa(lp2434
g487
ag488
aa(lp2435
g490
ag491
aa(lp2436
g493
ag494
aa(lp2437
g496
ag497
aa(lp2438
g499
ag500
aatp2439
Rp2440
aa(lp2441
g504
ag413
((lp2442
(lp2443
g419
ag504
aa(lp2444
g508
ag509
aatp2445
Rp2446
aatp2447
Rp2448
sg76
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g18
g7
Ntp2459
Rp2460
(dp2461
g22
(dp2462
sg24
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2463
g7
Ntp2464
Rp2465
(dp2466
g29
g30
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2467
tp2468
Rp2469
(dp2470
S'oned_file'
p2471
g37
sg140
I00
sg130
g37
sS'timeshift'
p2472
g37
sS'basefile'
p2473
g37
sg142
S'-Fourier -twopass'
p2474
sg2239
g2240
sS'zpad'
p2475
I4
sg144
g145
sS'md1d_file'
p2476
S'max_displacement.1D'
p2477
sg199
g37
sS'copyorigin'
p2478
g37
sg151
g5
(g152
g153
(dp2479
tp2480
Rp2481
(dp2482
g160
S'environ_items'
p2483
sg59
g151
sbsg1996
g37
sg38
g39
sg192
g37
sbsg2252
g2240
sg165
Nsg166
g145
sbsg58
Nsg66
I00
sg61
(dp2484
sg68
Nsg65
Nsg75
Nsg59
S'func_motion_correct_A'
p2485
sg63
S'func_preproc_automask_0'
p2486
sg67
I00
sg69
Nsg70
I00
sg71
g2485
sg72
Nsg73
(lp2487
sg76
Nsb(dp2488
sg5
(g18
g7
Ntp2489
Rp2490
(dp2491
g22
(dp2492
sg24
g5
(g2228
g7
Ntp2493
Rp2494
(dp2495
g29
g30
(g2232
tp2496
Rp2497
(dp2498
g2236
g37
sg140
I00
sg38
g39
sg192
g37
sg2237
S'a*b'
p2499
sg142
g37
sg2239
g2240
sg2241
g37
sg2242
g37
sg2243
g37
sg151
g5
(g152
g153
(dp2500
tp2501
Rp2502
(dp2503
g160
S'environ_items'
p2504
sg59
g151
sbsg2249
g37
sg2250
g37
sg2251
g37
sg144
g145
sbsg2252
g2240
sg165
Nsg166
g145
sbsg58
Nsg59
S'func_edge_detect'
p2505
sg61
(dp2506
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2505
sg72
Nsg73
(lp2507
sg75
Nsg76
Nsb(dp2508
sg5
(g18
g7
Ntp2509
Rp2510
(dp2511
g22
(dp2512
sg24
g5
(g211
g7
Ntp2513
Rp2514
(dp2515
g29
g30
(g215
tp2516
Rp2517
(dp2518
g140
I00
sg38
g39
sg190
S'-Tmin -bin'
p2519
sg219
S'char'
p2520
sg192
g37
sg142
g37
sg220
g37
sg144
g145
sg151
g5
(g152
g153
(dp2521
g155
g156
stp2522
Rp2523
(dp2524
g160
S'environ_items'
p2525
sg59
g151
sbsg199
g37
sg162
g156
sg226
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'func_mask_normalize'
p2526
sg61
(dp2527
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2526
sg72
Nsg73
(lp2528
sg75
Nsg76
Nsb(dp2529
sg5
(g18
g7
Ntp2530
Rp2531
(dp2532
g22
(dp2533
sg24
g5
(g2463
g7
Ntp2534
Rp2535
(dp2536
g29
g30
(g2467
tp2537
Rp2538
(dp2539
g2471
g37
sg140
I00
sg130
g37
sg2472
g37
sg2473
g37
sg142
g2474
sg2239
g2240
sg2475
I4
sg144
g145
sg2476
g37
sg199
g37
sg2478
g37
sg151
g5
(g152
g153
(dp2540
tp2541
Rp2542
(dp2543
g160
S'environ_items'
p2544
sg59
g151
sbsg1996
g37
sg38
g39
sg192
g37
sbsg2252
g2240
sg165
Nsg166
g145
sbsg58
Nsg59
S'func_motion_correct'
p2545
sg61
(dp2546
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2545
sg72
Nsg73
(lp2547
sg75
Nsg76
Nsb(dp2548
sg5
(g18
g7
Ntp2549
Rp2550
(dp2551
g22
(dp2552
sg24
g5
(cnipype.interfaces.afni.preprocess
TStat
p2553
g7
Ntp2554
Rp2555
(dp2556
g29
g30
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2557
tp2558
Rp2559
(dp2560
g140
I00
sg38
g39
sg192
g37
sg142
g37
sg1934
g37
sg2239
g2240
sg144
g145
sg151
g5
(g152
g153
(dp2561
tp2562
Rp2563
(dp2564
g160
S'environ_items'
p2565
sg59
g151
sbsg199
g37
sS'options'
p2566
S'-mean'
p2567
sbsg2252
g2240
sg165
Nsg166
g145
sbsg58
Nsg66
I00
sg61
(dp2568
sg68
Nsg65
Nsg75
Nsg59
S'func_get_mean_motion'
p2569
sg63
g2486
sg67
I00
sg69
Nsg70
I00
sg71
g2569
sg72
Nsg73
(lp2570
sg76
Nsb(dp2571
sg5
(g18
g7
Ntp2572
Rp2573
(dp2574
g22
(dp2575
sg24
g5
(g2342
g7
Ntp2576
Rp2577
(dp2578
g29
g30
(g2346
tp2579
Rp2580
(dp2581
g140
I00
sg38
g39
sg2350
I01
sg142
g37
sg2351
g37
sg144
g145
sg151
g5
(g152
g153
(dp2582
tp2583
Rp2584
(dp2585
g160
S'environ_items'
p2586
sg59
g151
sbsg199
g37
sg2357
g37
sg2358
g37
sbsg165
Nsg166
g145
sbsg58
Nsg59
S'func_deoblique'
p2587
sg61
(dp2588
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2587
sg72
Nsg73
(lp2589
sg75
Nsg76
Nsb(dp2590
sg5
(g18
g7
Ntp2591
Rp2592
(dp2593
g22
(dp2594
sg24
g5
(cnipype.interfaces.afni.preprocess
Automask
p2595
g7
Ntp2596
Rp2597
(dp2598
g29
g30
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2599
tp2600
Rp2601
(dp2602
g140
I00
sg38
g39
sg142
g37
sS'erode'
p2603
g37
sg192
g37
sS'dilate'
p2604
g37
sS'clfrac'
p2605
g37
sg2239
g2240
sS'brain_file'
p2606
g37
sg144
g145
sg151
g5
(g152
g153
(dp2607
tp2608
Rp2609
(dp2610
g160
S'environ_items'
p2611
sg59
g151
sbsg199
g37
sbsg2252
g2240
sg165
Nsg166
g145
sbsg58
Nsg59
S'func_get_brain_mask'
p2612
sg61
(dp2613
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2612
sg72
Nsg73
(lp2614
sg75
Nsg76
Nsb(dp2615
sg5
(g18
g7
Ntp2616
Rp2617
(dp2618
g22
(dp2619
sg24
g5
(g25
g7
Ntp2620
Rp2621
(dp2622
g29
g30
(g31
tp2623
Rp2624
(dp2625
g38
g39
sS'func'
p2626
g37
sbsg55
(lp2627
g2626
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp2628
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp2629
sg75
Nsg76
Nsb(dp2630
sg5
(g18
g7
Ntp2631
Rp2632
(dp2633
g22
(dp2634
sg24
g5
(g2553
g7
Ntp2635
Rp2636
(dp2637
g29
g30
(g2557
tp2638
Rp2639
(dp2640
g140
I00
sg38
g39
sg192
g37
sg142
g37
sg1934
g37
sg2239
g2240
sg144
g145
sg151
g5
(g152
g153
(dp2641
tp2642
Rp2643
(dp2644
g160
S'environ_items'
p2645
sg59
g151
sbsg199
g37
sg2566
g2567
sbsg2252
g2240
sg165
Nsg166
g145
sbsg58
Nsg59
S'func_get_mean_RPI'
p2646
sg61
(dp2647
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2646
sg72
Nsg73
(lp2648
sg75
Nsg76
Nsb(dp2649
sg5
(g18
g7
Ntp2650
Rp2651
(dp2652
g22
(dp2653
sg24
g5
(g2553
g7
Ntp2654
Rp2655
(dp2656
g29
g30
(g2557
tp2657
Rp2658
(dp2659
g140
I00
sg38
g39
sg192
g37
sg142
g37
sg1934
g37
sg2239
g2240
sg144
g145
sg151
g5
(g152
g153
(dp2660
tp2661
Rp2662
(dp2663
g160
S'environ_items'
p2664
sg59
g151
sbsg199
g37
sg2566
g2567
sbsg2252
g2240
sg165
Nsg166
g145
sbsg58
Nsg59
S'func_mean_skullstrip'
p2665
sg61
(dp2666
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2665
sg72
Nsg73
(lp2667
sg75
Nsg76
Nsb(dp2668
sg5
(g18
g7
Ntp2669
Rp2670
(dp2671
g22
(dp2672
sg24
g5
(g25
g7
Ntp2673
Rp2674
(dp2675
g29
g30
(g31
tp2676
Rp2677
(dp2678
g1956
g37
sS'motion_correct_ref'
p2679
g37
sg38
g39
sS'preprocessed_mask'
p2680
g37
sg1934
g37
sg2332
g37
sg2333
g37
sg2331
g37
sS'preprocessed'
p2681
g37
sS'slice_time_corrected'
p2682
g37
sg1955
g37
sS'example_func'
p2683
g37
sg1996
g37
sS'reorient_mean'
p2684
g37
sg1997
g37
sbsg55
(lp2685
g2332
ag2331
ag2684
ag1997
ag2679
ag1955
ag1956
ag1934
ag2333
ag2683
ag2681
ag2680
ag2682
ag1996
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp2686
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp2687
sg75
Nsg76
Nsb(dp2688
sg5
(g18
g7
Ntp2689
Rp2690
(dp2691
g22
(dp2692
sg24
g5
(g211
g7
Ntp2693
Rp2694
(dp2695
g29
g30
(g215
tp2696
Rp2697
(dp2698
g140
I00
sg38
g39
sg190
S'-ing 10000'
p2699
sg219
S'float'
p2700
sg192
g37
sg142
g37
sg220
g37
sg144
g145
sg151
g5
(g152
g153
(dp2701
g155
g156
stp2702
Rp2703
(dp2704
g160
S'environ_items'
p2705
sg59
g151
sbsg199
g37
sg162
g156
sg226
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'func_normalize'
p2706
sg61
(dp2707
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2706
sg72
Nsg73
(lp2708
sg75
Nsg76
Nsb(dp2709
sg5
(g18
g7
Ntp2710
Rp2711
(dp2712
g22
(dp2713
sg24
g5
(g2299
g7
Ntp2714
Rp2715
(dp2716
g29
g30
(g2303
tp2717
Rp2718
(dp2719
g140
I00
sg38
g39
sg192
g37
sg142
g37
sg2239
g2240
sg2307
g37
sg2308
g37
sg144
g145
sg2309
g37
sg199
g37
sg151
g5
(g152
g153
(dp2720
tp2721
Rp2722
(dp2723
g160
S'environ_items'
p2724
sg59
g151
sbsg2315
g2316
sbsg2252
g2240
sg165
Nsg166
g145
sbsg58
Nsg59
S'func_reorient'
p2725
sg61
(dp2726
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2725
sg72
Nsg73
(lp2727
sg75
Nsg76
Nsb(dp2728
ssg355
(dp2729
sg357
(dp2730
g2460
(dp2731
g2670
(dp2732
g361
(lp2733
(g192
g1997
tp2734
a(g2476
g1956
tp2735
a(g2471
g1955
tp2736
a(g1996
g1996
tp2737
assg2592
(dp2738
g361
(lp2739
(g192
g199
tp2740
assg2490
(dp2741
g361
(lp2742
(g192
g2243
tp2743
asssg2490
(dp2744
g2670
(dp2745
g361
(lp2746
(g192
g2333
tp2747
assg2690
(dp2748
g361
(lp2749
(g192
g199
tp2750
assg2651
(dp2751
g361
(lp2752
(g192
g199
tp2753
asssg2510
(dp2754
g2670
(dp2755
g361
(lp2756
(g192
g2680
tp2757
asssg2531
(dp2758
g2550
(dp2759
g361
(lp2760
(g192
g199
tp2761
asssg2550
(dp2762
g2670
(dp2763
g361
(lp2764
(g192
g2679
tp2765
assg2460
(dp2766
g361
(lp2767
(g192
g2473
tp2768
asssg2573
(dp2769
g2711
(dp2770
g361
(lp2771
(g192
g199
tp2772
asssg2592
(dp2773
g2670
(dp2774
g361
(lp2775
(g192
g1934
tp2776
assg2490
(dp2777
g361
(lp2778
(g192
g2241
tp2779
asssg2617
(dp2780
g2573
(dp2781
g361
(lp2782
(g2626
g199
tp2783
asssg2632
(dp2784
g2531
(dp2785
g361
(lp2786
(g192
g2473
tp2787
asssg2651
(dp2788
g2670
(dp2789
g361
(lp2790
(g192
g2683
tp2791
asssg2670
(dp2792
sg2690
(dp2793
g2670
(dp2794
g361
(lp2795
(g192
g2681
tp2796
assg2510
(dp2797
g361
(lp2798
(g192
g199
tp2799
asssg2711
(dp2800
g2670
(dp2801
g361
(lp2802
(g192
g2331
tp2803
assg2460
(dp2804
g361
(lp2805
(g192
g199
tp2806
assg2632
(dp2807
g361
(lp2808
(g192
g199
tp2809
assg2531
(dp2810
g361
(lp2811
(g192
g199
tp2812
assssg403
g2730
sg404
(dp2813
g2460
(dp2814
g2550
g2766
sg2711
g2804
ssg2490
(dp2815
g2460
g2741
sg2592
g2777
ssg2510
(dp2816
g2690
g2797
ssg2531
(dp2817
g2711
g2810
sg2632
g2785
ssg2550
(dp2818
g2531
g2759
ssg2573
(dp2819
g2617
g2781
ssg2592
(dp2820
g2460
g2738
ssg2617
(dp2821
sg2632
(dp2822
g2711
g2807
ssg2651
(dp2823
g2490
g2751
ssg2670
(dp2824
g2460
g2732
sg2510
g2755
sg2550
g2763
sg2592
g2774
sg2490
g2745
sg2711
g2801
sg2690
g2794
sg2651
g2789
ssg2690
(dp2825
g2490
g2748
ssg2711
(dp2826
g2573
g2770
sssg412
g2730
sbsg59
g2486
sg63
g1067
sg71
g2486
sg72
g413
((lp2827
(lp2828
g416
ag413
((lp2829
(lp2830
g419
ag416
aa(lp2831
g421
ag422
aa(lp2832
g424
ag425
aa(lp2833
g427
ag428
aa(lp2834
g430
ag431
aa(lp2835
g433
ag434
aa(lp2836
g436
ag437
aa(lp2837
g439
ag440
aatp2838
Rp2839
aa(lp2840
g444
ag413
((lp2841
(lp2842
g419
ag444
aa(lp2843
g448
ag449
aa(lp2844
g451
ag452
aa(lp2845
g454
ag455
aa(lp2846
g457
ag458
aa(lp2847
g460
ag461
aa(lp2848
g463
ag464
aa(lp2849
g466
ag467
aa(lp2850
g469
ag470
aa(lp2851
g472
ag473
aa(lp2852
g475
ag476
aa(lp2853
g478
ag479
aa(lp2854
g481
ag482
aa(lp2855
g484
ag485
aa(lp2856
g487
ag488
aa(lp2857
g490
ag491
aa(lp2858
g493
ag494
aa(lp2859
g496
ag497
aa(lp2860
g499
ag500
aatp2861
Rp2862
aa(lp2863
g504
ag413
((lp2864
(lp2865
g419
ag504
aa(lp2866
g508
ag509
aatp2867
Rp2868
aatp2869
Rp2870
sg76
NsbS'outputspec.example_func'
p2871
tp2872
sg1955
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g18
g7
Ntp2880
Rp2881
(dp2882
g22
(dp2883
sg24
g5
(g25
g7
Ntp2884
Rp2885
(dp2886
g29
g30
(g31
tp2887
Rp2888
(dp2889
g38
g39
sS'movement_file'
p2890
g37
sbsg55
(lp2891
g2890
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp2892
sg63
S'fristons_parameter_model_0'
p2893
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp2894
sg75
Nsg76
Nsb(dp2895
sg5
(g18
g7
Ntp2896
Rp2897
(dp2898
g22
(dp2899
sg24
g5
(g25
g7
Ntp2900
Rp2901
(dp2902
g29
g30
(g31
tp2903
Rp2904
(dp2905
g38
g39
sg2890
g37
sbsg55
(lp2906
g2890
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp2907
sg63
g2893
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp2908
sg75
Nsg76
Nsb(dp2909
sg5
(g18
g7
Ntp2910
Rp2911
(dp2912
g22
(dp2913
sg24
g5
(g1422
g7
Ntp2914
Rp2915
(dp2916
g1426
(lp2917
g199
asg29
g30
(g1432
tp2918
Rp2919
(dp2920
g140
I00
sg38
g39
sg1438
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2921
sg199
g37
sbsg1440
(dp2922
g192
Nssg1442
(lp2923
g192
asg1444
Nsbsg58
Nsg59
S'calc_friston'
p2924
sg61
(dp2925
sg63
g2893
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2924
sg72
Nsg73
(lp2926
sg75
Nsg76
Nsb(dp2927
ssg355
(dp2928
sg357
(dp2929
g2881
(dp2930
g2911
(dp2931
g361
(lp2932
(g2890
g199
tp2933
asssg2897
(dp2934
sg2911
(dp2935
g2897
(dp2936
g361
(lp2937
(g192
g2890
tp2938
assssg403
g2929
sg404
(dp2939
g2881
(dp2940
sg2897
(dp2941
g2911
g2936
ssg2911
(dp2942
g2881
g2931
sssg412
g2929
sbsg59
g2893
sg63
g1067
sg71
g2893
sg72
g413
((lp2943
(lp2944
g416
ag413
((lp2945
(lp2946
g419
ag416
aa(lp2947
g421
ag422
aa(lp2948
g424
ag425
aa(lp2949
g427
ag428
aa(lp2950
g430
ag431
aa(lp2951
g433
ag434
aa(lp2952
g436
ag437
aa(lp2953
g439
ag440
aatp2954
Rp2955
aa(lp2956
g444
ag413
((lp2957
(lp2958
g419
ag444
aa(lp2959
g448
ag449
aa(lp2960
g451
ag452
aa(lp2961
g454
ag455
aa(lp2962
g457
ag458
aa(lp2963
g460
ag461
aa(lp2964
g463
ag464
aa(lp2965
g466
ag467
aa(lp2966
g469
ag470
aa(lp2967
g472
ag473
aa(lp2968
g475
ag476
aa(lp2969
g478
ag479
aa(lp2970
g481
ag482
aa(lp2971
g484
ag485
aa(lp2972
g487
ag488
aa(lp2973
g490
ag491
aa(lp2974
g493
ag494
aa(lp2975
g496
ag497
aa(lp2976
g499
ag500
aatp2977
Rp2978
aa(lp2979
g504
ag413
((lp2980
(lp2981
g419
ag504
aa(lp2982
g508
ag509
aatp2983
Rp2984
aatp2985
Rp2986
sg76
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g18
g7
Ntp2997
Rp2998
(dp2999
g22
(dp3000
sg24
g5
(g1422
g7
Ntp3001
Rp3002
(dp3003
g1426
(lp3004
g1428
ag1429
ag1430
ag1431
asg29
g30
(g1432
tp3005
Rp3006
(dp3007
g140
I00
sg1430
S't1_edge_on_mean_func_in_t1_s.png'
p3008
sg1428
g37
sg1431
g1437
sg1438
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3009
sg1429
g37
sg38
g39
sbsg1440
(dp3010
g1430
Nssg1442
(lp3011
g1430
asg1444
Nsbsg58
Nsg59
g1445
sg61
(dp3012
sg63
S'montage_anat_0'
p3013
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1445
sg72
Nsg73
(lp3014
sg75
Nsg76
Nsb(dp3015
sg5
(g18
g7
Ntp3016
Rp3017
(dp3018
g22
(dp3019
sg24
g5
(g1422
g7
Ntp3020
Rp3021
(dp3022
g1426
(lp3023
g1457
asg29
g30
(g1432
tp3024
Rp3025
(dp3026
g140
I00
sg1438
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3027
sg1457
g37
sg38
g39
sbsg1440
(dp3028
g1463
Nssg1442
(lp3029
g1463
asg1444
Nsbsg58
Nsg66
I00
sg61
(dp3030
sg68
Nsg65
Nsg75
Nsg59
g1498
sg63
g3013
sg67
I00
sg69
Nsg70
I00
sg71
g1498
sg72
Nsg73
(lp3031
sg76
Nsb(dp3032
sg5
(g18
g7
Ntp3033
Rp3034
(dp3035
g22
(dp3036
sg24
g5
(g1422
g7
Ntp3037
Rp3038
(dp3039
g1426
(lp3040
g1428
ag1429
ag1430
ag1431
asg29
g30
(g1432
tp3041
Rp3042
(dp3043
g140
I00
sg1430
S't1_edge_on_mean_func_in_t1_a.png'
p3044
sg1428
g37
sg1431
g1437
sg1438
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3045
sg1429
g37
sg38
g39
sbsg1440
(dp3046
g1430
Nssg1442
(lp3047
g1430
asg1444
Nsbsg58
Nsg59
g1516
sg61
(dp3048
sg63
g3013
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1516
sg72
Nsg73
(lp3049
sg75
Nsg76
Nsb(dp3050
sg5
(g18
g7
Ntp3051
Rp3052
(dp3053
g22
(dp3054
sg24
g5
(g1422
g7
Ntp3055
Rp3056
(dp3057
g1426
(lp3058
g1457
asg29
g30
(g1432
tp3059
Rp3060
(dp3061
g140
I00
sg1438
g3027
sg1457
g37
sg38
g39
sbsg1440
(dp3062
g1463
Nssg1442
(lp3063
g1463
asg1444
Nsbsg58
Nsg59
g1465
sg61
(dp3064
sg63
g3013
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1465
sg72
Nsg73
(lp3065
sg75
Nsg76
Nsb(dp3066
sg5
(g18
g7
Ntp3067
Rp3068
(dp3069
g22
(dp3070
sg24
g5
(g25
g7
Ntp3071
Rp3072
(dp3073
g29
g30
(g31
tp3074
Rp3075
(dp3076
g38
g39
sg1429
g37
sg1428
g37
sbsg55
(lp3077
g1429
ag1428
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp3078
sg63
g3013
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp3079
sg75
Nsg76
Nsb(dp3080
sg5
(g18
g7
Ntp3081
Rp3082
(dp3083
g22
(dp3084
sg24
g5
(g25
g7
Ntp3085
Rp3086
(dp3087
g29
g30
(g31
tp3088
Rp3089
(dp3090
g38
g39
sg1409
g37
sg1410
g37
sg1411
g37
sg1412
g37
sbsg55
(lp3091
g1410
ag1411
ag1409
ag1412
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp3092
sg63
g3013
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp3093
sg75
Nsg76
Nsb(dp3094
ssg355
(dp3095
sg357
(dp3096
g2998
(dp3097
g3082
(dp3098
g361
(lp3099
(g1430
g1411
tp3100
asssg3017
(dp3101
g2998
(dp3102
g361
(lp3103
(g1463
g1428
tp3104
assg3034
(dp3105
g361
(lp3106
(g1463
g1428
tp3107
assg3082
(dp3108
g361
(lp3109
(g1463
g1412
tp3110
asssg3034
(dp3111
g3082
(dp3112
g361
(lp3113
(g1430
g1410
tp3114
asssg3052
(dp3115
g2998
(dp3116
g361
(lp3117
(g1463
g1429
tp3118
assg3034
(dp3119
g361
(lp3120
(g1463
g1429
tp3121
assg3082
(dp3122
g361
(lp3123
(g1463
g1409
tp3124
asssg3068
(dp3125
g3017
(dp3126
g361
(lp3127
(g1428
g1457
tp3128
assg3052
(dp3129
g361
(lp3130
(g1429
g1457
tp3131
asssg3082
(dp3132
ssg403
g3096
sg404
(dp3133
g2998
(dp3134
g3017
g3102
sg3052
g3116
ssg3017
(dp3135
g3068
g3126
ssg3034
(dp3136
g3017
g3105
sg3052
g3119
ssg3052
(dp3137
g3068
g3129
ssg3068
(dp3138
sg3082
(dp3139
g2998
g3098
sg3017
g3108
sg3052
g3122
sg3034
g3112
sssg412
g3096
sbsg59
g3013
sg63
g1067
sg71
g3013
sg72
g413
((lp3140
(lp3141
g416
ag413
((lp3142
(lp3143
g419
ag416
aa(lp3144
g421
ag422
aa(lp3145
g424
ag425
aa(lp3146
g427
ag428
aa(lp3147
g430
ag431
aa(lp3148
g433
ag434
aa(lp3149
g436
ag437
aa(lp3150
g439
ag440
aatp3151
Rp3152
aa(lp3153
g444
ag413
((lp3154
(lp3155
g419
ag444
aa(lp3156
g448
ag449
aa(lp3157
g451
ag452
aa(lp3158
g454
ag455
aa(lp3159
g457
ag458
aa(lp3160
g460
ag461
aa(lp3161
g463
ag464
aa(lp3162
g466
ag467
aa(lp3163
g469
ag470
aa(lp3164
g472
ag473
aa(lp3165
g475
ag476
aa(lp3166
g478
ag479
aa(lp3167
g481
ag482
aa(lp3168
g484
ag485
aa(lp3169
g487
ag488
aa(lp3170
g490
ag491
aa(lp3171
g493
ag494
aa(lp3172
g496
ag497
aa(lp3173
g499
ag500
aatp3174
Rp3175
aa(lp3176
g504
ag413
((lp3177
(lp3178
g419
ag504
aa(lp3179
g508
ag509
aatp3180
Rp3181
aatp3182
Rp3183
sg76
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg1956
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g18
g7
Ntp3201
Rp3202
(dp3203
g22
(dp3204
sg24
g5
(g1422
g7
Ntp3205
Rp3206
(dp3207
g1426
(lp3208
g1457
asg29
g30
(g1432
tp3209
Rp3210
(dp3211
g140
I00
sg1438
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3212
sg1457
g37
sg38
g39
sbsg1440
(dp3213
g1463
Nssg1442
(lp3214
g1463
asg1444
Nsbsg58
Nsg66
I00
sg61
(dp3215
sg68
Nsg65
Nsg75
Nsg59
S'resample_o_csf'
p3216
sg63
S'montage_csf_gm_wm_0'
p3217
sg67
I00
sg69
Nsg70
I00
sg71
g3216
sg72
Nsg73
(lp3218
sg76
Nsb(dp3219
sg5
(g18
g7
Ntp3220
Rp3221
(dp3222
g22
(dp3223
sg24
g5
(g25
g7
Ntp3224
Rp3225
(dp3226
g29
g30
(g31
tp3227
Rp3228
(dp3229
g38
g39
sS'overlay_gm'
p3230
g37
sg1429
g37
sS'overlay_csf'
p3231
g37
sS'overlay_wm'
p3232
g37
sbsg55
(lp3233
g1429
ag3231
ag3232
ag3230
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp3234
sg63
g3217
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp3235
sg75
Nsg76
Nsb(dp3236
sg5
(g18
g7
Ntp3237
Rp3238
(dp3239
g22
(dp3240
sg24
g5
(g1422
g7
Ntp3241
Rp3242
(dp3243
g1426
(lp3244
g3231
ag3232
ag3230
ag1429
ag1430
asg29
g30
(g1432
tp3245
Rp3246
(dp3247
g140
I00
sg1430
S'montage_csf_gm_wm_a.png'
p3248
sg3230
g37
sg1438
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3249
sg3231
g37
sg3232
g37
sg1429
g37
sg38
g39
sbsg1440
(dp3250
g1430
Nssg1442
(lp3251
g1430
asg1444
Nsbsg58
Nsg59
g1516
sg61
(dp3252
sg63
g3217
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1516
sg72
Nsg73
(lp3253
sg75
Nsg76
Nsb(dp3254
sg5
(g18
g7
Ntp3255
Rp3256
(dp3257
g22
(dp3258
sg24
g5
(g1422
g7
Ntp3259
Rp3260
(dp3261
g1426
(lp3262
g1457
asg29
g30
(g1432
tp3263
Rp3264
(dp3265
g140
I00
sg1438
g3212
sg1457
g37
sg38
g39
sbsg1440
(dp3266
g1463
Nssg1442
(lp3267
g1463
asg1444
Nsbsg58
Nsg66
I00
sg61
(dp3268
sg68
Nsg65
Nsg75
Nsg59
S'resample_o_wm'
p3269
sg63
g3217
sg67
I00
sg69
Nsg70
I00
sg71
g3269
sg72
Nsg73
(lp3270
sg76
Nsb(dp3271
sg5
(g18
g7
Ntp3272
Rp3273
(dp3274
g22
(dp3275
sg24
g5
(g25
g7
Ntp3276
Rp3277
(dp3278
g29
g30
(g31
tp3279
Rp3280
(dp3281
g38
g39
sS'resampled_overlay_csf'
p3282
g37
sS'resampled_overlay_gm'
p3283
g37
sg1410
g37
sg1411
g37
sg1409
g37
sS'resampled_overlay_wm'
p3284
g37
sbsg55
(lp3285
g1410
ag1411
ag1409
ag3282
ag3284
ag3283
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp3286
sg63
g3217
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp3287
sg75
Nsg76
Nsb(dp3288
sg5
(g18
g7
Ntp3289
Rp3290
(dp3291
g22
(dp3292
sg24
g5
(g1422
g7
Ntp3293
Rp3294
(dp3295
g1426
(lp3296
g1457
asg29
g30
(g1432
tp3297
Rp3298
(dp3299
g140
I00
sg1438
g3212
sg1457
g37
sg38
g39
sbsg1440
(dp3300
g1463
Nssg1442
(lp3301
g1463
asg1444
Nsbsg58
Nsg59
g1465
sg61
(dp3302
sg63
g3217
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1465
sg72
Nsg73
(lp3303
sg75
Nsg76
Nsb(dp3304
sg5
(g18
g7
Ntp3305
Rp3306
(dp3307
g22
(dp3308
sg24
g5
(g1422
g7
Ntp3309
Rp3310
(dp3311
g1426
(lp3312
g1457
asg29
g30
(g1432
tp3313
Rp3314
(dp3315
g140
I00
sg1438
g3212
sg1457
g37
sg38
g39
sbsg1440
(dp3316
g1463
Nssg1442
(lp3317
g1463
asg1444
Nsbsg58
Nsg66
I00
sg61
(dp3318
sg68
Nsg65
Nsg75
Nsg59
S'resample_o_gm'
p3319
sg63
g3217
sg67
I00
sg69
Nsg70
I00
sg71
g3319
sg72
Nsg73
(lp3320
sg76
Nsb(dp3321
sg5
(g18
g7
Ntp3322
Rp3323
(dp3324
g22
(dp3325
sg24
g5
(g1422
g7
Ntp3326
Rp3327
(dp3328
g1426
(lp3329
g3231
ag3232
ag3230
ag1429
ag1430
asg29
g30
(g1432
tp3330
Rp3331
(dp3332
g140
I00
sg1430
S'montage_csf_gm_wm_s.png'
p3333
sg3230
g37
sg1438
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3334
sg3231
g37
sg3232
g37
sg1429
g37
sg38
g39
sbsg1440
(dp3335
g1430
Nssg1442
(lp3336
g1430
asg1444
Nsbsg58
Nsg59
g1445
sg61
(dp3337
sg63
g3217
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1445
sg72
Nsg73
(lp3338
sg75
Nsg76
Nsb(dp3339
ssg355
(dp3340
sg357
(dp3341
g3202
(dp3342
g3238
(dp3343
g361
(lp3344
(g1463
g3231
tp3345
assg3273
(dp3346
g361
(lp3347
(g1463
g3282
tp3348
assg3323
(dp3349
g361
(lp3350
(g1463
g3231
tp3351
asssg3221
(dp3352
g3256
(dp3353
g361
(lp3354
(g3232
g1457
tp3355
assg3290
(dp3356
g361
(lp3357
(g1429
g1457
tp3358
assg3202
(dp3359
g361
(lp3360
(g3231
g1457
tp3361
assg3306
(dp3362
g361
(lp3363
(g3230
g1457
tp3364
asssg3238
(dp3365
g3273
(dp3366
g361
(lp3367
(g1430
g1410
tp3368
asssg3256
(dp3369
g3238
(dp3370
g361
(lp3371
(g1463
g3232
tp3372
assg3273
(dp3373
g361
(lp3374
(g1463
g3284
tp3375
assg3323
(dp3376
g361
(lp3377
(g1463
g3232
tp3378
asssg3273
(dp3379
sg3290
(dp3380
g3238
(dp3381
g361
(lp3382
(g1463
g1429
tp3383
assg3273
(dp3384
g361
(lp3385
(g1463
g1409
tp3386
assg3323
(dp3387
g361
(lp3388
(g1463
g1429
tp3389
asssg3306
(dp3390
g3238
(dp3391
g361
(lp3392
(g1463
g3230
tp3393
assg3273
(dp3394
g361
(lp3395
(g1463
g3283
tp3396
assg3323
(dp3397
g361
(lp3398
(g1463
g3230
tp3399
asssg3323
(dp3400
g3273
(dp3401
g361
(lp3402
(g1430
g1411
tp3403
assssg403
g3341
sg404
(dp3404
g3202
(dp3405
g3221
g3359
ssg3221
(dp3406
sg3238
(dp3407
g3256
g3370
sg3290
g3381
sg3202
g3343
sg3306
g3391
ssg3256
(dp3408
g3221
g3353
ssg3273
(dp3409
g3202
g3346
sg3238
g3366
sg3323
g3401
sg3290
g3384
sg3306
g3394
sg3256
g3373
ssg3290
(dp3410
g3221
g3356
ssg3306
(dp3411
g3221
g3362
ssg3323
(dp3412
g3256
g3376
sg3290
g3387
sg3202
g3349
sg3306
g3397
sssg412
g3341
sbsg59
g3217
sg63
g1067
sg71
g3217
sg72
g413
((lp3413
(lp3414
g416
ag413
((lp3415
(lp3416
g419
ag416
aa(lp3417
g421
ag422
aa(lp3418
g424
ag425
aa(lp3419
g427
ag428
aa(lp3420
g430
ag431
aa(lp3421
g433
ag434
aa(lp3422
g436
ag437
aa(lp3423
g439
ag440
aatp3424
Rp3425
aa(lp3426
g444
ag413
((lp3427
(lp3428
g419
ag444
aa(lp3429
g448
ag449
aa(lp3430
g451
ag452
aa(lp3431
g454
ag455
aa(lp3432
g457
ag458
aa(lp3433
g460
ag461
aa(lp3434
g463
ag464
aa(lp3435
g466
ag467
aa(lp3436
g469
ag470
aa(lp3437
g472
ag473
aa(lp3438
g475
ag476
aa(lp3439
g478
ag479
aa(lp3440
g481
ag482
aa(lp3441
g484
ag485
aa(lp3442
g487
ag488
aa(lp3443
g490
ag491
aa(lp3444
g493
ag494
aa(lp3445
g496
ag497
aa(lp3446
g499
ag500
aatp3447
Rp3448
aa(lp3449
g504
ag413
((lp3450
(lp3451
g419
ag504
aa(lp3452
g508
ag509
aatp3453
Rp3454
aatp3455
Rp3456
sg76
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g18
g7
Ntp3466
Rp3467
(dp3468
g22
(dp3469
sg24
g5
(g211
g7
Ntp3470
Rp3471
(dp3472
g29
g30
(g215
tp3473
Rp3474
(dp3475
g140
I00
sg38
g39
sg190
S'-thr 0.5 -bin'
p3476
sg219
g37
sg192
g37
sg142
g37
sg220
g37
sg144
g145
sg151
g5
(g152
g153
(dp3477
g155
g156
stp3478
Rp3479
(dp3480
g160
S'environ_items'
p3481
sg59
g151
sbsg199
g37
sg162
g156
sg226
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'wm_bb_mask'
p3482
sg61
(dp3483
sg63
S'func_to_anat_bbreg_0'
p3484
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g3482
sg72
Nsg73
(lp3485
sg75
Nsg76
Nsb(dp3486
sg5
(g18
g7
Ntp3487
Rp3488
(dp3489
g22
(dp3490
sg24
g5
(g25
g7
Ntp3491
Rp3492
(dp3493
g29
g30
(g31
tp3494
Rp3495
(dp3496
S'func_to_anat_linear_xfm'
p3497
g37
sg38
g39
sS'anat_func'
p3498
g37
sbsg55
(lp3499
g3497
ag3498
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp3500
sg63
g3484
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp3501
sg75
Nsg76
Nsb(dp3502
sg5
(g18
g7
Ntp3503
Rp3504
(dp3505
g22
(dp3506
sg24
g5
(g25
g7
Ntp3507
Rp3508
(dp3509
g29
g30
(g31
tp3510
Rp3511
(dp3512
g38
g39
sS'linear_reg_matrix'
p3513
g37
sS'bbr_schedule'
p3514
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3515
sS'anat_wm_segmentation'
p3516
g37
sS'anat_skull'
p3517
g37
sg2626
g37
sbsg55
(lp3518
g2626
ag3517
ag3513
ag3516
ag3514
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp3519
sg63
g3484
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp3520
sg75
Nsg76
Nsb(dp3521
sg5
(g18
g7
Ntp3522
Rp3523
(dp3524
g22
(dp3525
sg24
g5
(g294
g7
Ntp3526
Rp3527
(dp3528
g29
g30
(g298
tp3529
Rp3530
(dp3531
g302
g37
sg38
g39
sg303
g37
sg130
g37
sg304
g37
sg305
g37
sg306
g37
sg307
g37
sg309
g37
sg310
g37
sg311
g37
sg312
g37
sg313
g37
sg314
g37
sg315
g37
sg316
g37
sg317
g37
sg318
g37
sg199
g37
sg319
g37
sg320
g37
sg321
g37
sg322
g37
sg140
I00
sg323
g37
sg324
g37
sg142
g37
sg325
g37
sg326
g37
sg144
g145
sg327
g37
sg328
g37
sg329
g37
sg330
g37
sg331
g37
sg192
g37
sg332
g37
sg333
g37
sg334
g37
sg335
I6
sg336
g37
sg337
g37
sg338
g37
sg339
g37
sg340
g37
sg151
g5
(g152
g153
(dp3532
g155
g156
stp3533
Rp3534
(dp3535
g160
S'environ_items'
p3536
sg59
g151
sbsg346
g37
sg347
g37
sg162
g156
sg348
g37
sg349
g37
sg350
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'bbreg_func_to_anat'
p3537
sg61
(dp3538
sg63
g3484
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g3537
sg72
Nsg73
(lp3539
sg75
Nsg76
Nsb(dp3540
ssg355
(dp3541
sg357
(dp3542
g3467
(dp3543
g3523
(dp3544
g361
(lp3545
((g192
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3546
(ttp3547
g142
tp3548
asssg3488
(dp3549
sg3504
(dp3550
g3467
(dp3551
g361
(lp3552
(g3516
g199
tp3553
assg3523
(dp3554
g361
(lp3555
(g3514
g324
tp3556
a(g2626
g199
tp3557
a(g3517
g304
tp3558
a(g3513
g303
tp3559
asssg3523
(dp3560
g3488
(dp3561
g361
(lp3562
(g336
g3497
tp3563
a(g192
g3498
tp3564
assssg403
g3542
sg404
(dp3565
g3467
(dp3566
g3504
g3551
ssg3488
(dp3567
g3523
g3561
ssg3504
(dp3568
sg3523
(dp3569
g3467
g3544
sg3504
g3554
sssg412
g3542
sbsg59
g3484
sg63
g1067
sg71
g3484
sg72
g413
((lp3570
(lp3571
g416
ag413
((lp3572
(lp3573
g419
ag416
aa(lp3574
g421
ag422
aa(lp3575
g424
ag425
aa(lp3576
g427
ag428
aa(lp3577
g430
ag431
aa(lp3578
g433
ag434
aa(lp3579
g436
ag437
aa(lp3580
g439
ag440
aatp3581
Rp3582
aa(lp3583
g444
ag413
((lp3584
(lp3585
g419
ag444
aa(lp3586
g448
ag449
aa(lp3587
g451
ag452
aa(lp3588
g454
ag455
aa(lp3589
g457
ag458
aa(lp3590
g460
ag461
aa(lp3591
g463
ag464
aa(lp3592
g466
ag467
aa(lp3593
g469
ag470
aa(lp3594
g472
ag473
aa(lp3595
g475
ag476
aa(lp3596
g478
ag479
aa(lp3597
g481
ag482
aa(lp3598
g484
ag485
aa(lp3599
g487
ag488
aa(lp3600
g490
ag491
aa(lp3601
g493
ag494
aa(lp3602
g496
ag497
aa(lp3603
g499
ag500
aatp3604
Rp3605
aa(lp3606
g504
ag413
((lp3607
(lp3608
g419
ag504
aa(lp3609
g508
ag509
aatp3610
Rp3611
aatp3612
Rp3613
sg76
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g18
g7
Ntp3620
Rp3621
(dp3622
g22
(dp3623
sg24
g5
(g1422
g7
Ntp3624
Rp3625
(dp3626
g1426
(lp3627
S'measure_file'
p3628
asg29
g30
(g1432
tp3629
Rp3630
(dp3631
g140
I00
sg38
g39
sg1438
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g37
sbsg1440
(dp3633
S'snr_storefl'
p3634
Nssg1442
(lp3635
g3634
asg1444
Nsbsg58
Nsg59
S'snr_val0'
p3636
sg61
(dp3637
sg63
g1067
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g3636
sg72
Nsg73
(lp3638
sg75
Nsg76
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g18
g7
Ntp3648
Rp3649
(dp3650
g22
(dp3651
sg24
g5
(g1422
g7
Ntp3652
Rp3653
(dp3654
g1426
(lp3655
g3628
ag1863
asg29
g30
(g1432
tp3656
Rp3657
(dp3658
g140
I00
sg38
g39
sg1438
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g37
sg1863
S'snr'
p3660
sbsg1440
(dp3661
g1870
Nssg1442
(lp3662
g1870
asg1444
Nsbsg58
Nsg66
I00
sg61
(dp3663
sg68
Nsg65
Nsg75
Nsg59
S'hist_snr_0'
p3664
sg63
g1067
sg67
I00
sg69
Nsg70
I00
sg71
g3664
sg72
Nsg73
(lp3665
sg76
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g18
g7
Ntp3678
Rp3679
(dp3680
g22
(dp3681
sg24
g5
(g25
g7
Ntp3682
Rp3683
(dp3684
g29
g30
(g31
tp3685
Rp3686
(dp3687
g38
g39
sS'scan'
p3688
g37
sS'subject'
p3689
S'7_2513691013'
p3690
sbsg55
(lp3691
g3689
ag3688
asg57
I01
sbsg58
Nsg59
S'inputnode'
p3692
sg61
(dp3693
sg63
S'func_gather_0'
p3694
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
(lp3695
(g3688
(lp3696
S'rest_1_rest'
p3697
atp3698
asg70
I00
sg71
g3692
sg72
Nsg73
(lp3699
sg75
Nsg76
Nsb(dp3700
sg5
(g18
g7
Ntp3701
Rp3702
(dp3703
g22
(dp3704
sg24
g5
(g1422
g7
Ntp3705
Rp3706
(dp3707
g1426
(lp3708
g3688
aS'rest_dict'
p3709
asg29
g30
(g1432
tp3710
Rp3711
(dp3712
g140
I00
sg3709
(dp3713
g3697
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-13/KKI2009-13-fMRI.nii'
p3714
ssg1438
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3715
sg38
g39
sg3688
g37
sbsg1440
(dp3716
g1933
Nssg1442
(lp3717
g1933
asg1444
Nsbsg58
Nsg59
S'selectrest'
p3718
sg61
(dp3719
sg63
g3694
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g3718
sg72
Nsg73
(lp3720
sg75
Nsg76
Nsb(dp3721
sg5
(g18
g7
Ntp3722
Rp3723
(dp3724
g22
(dp3725
sg24
g5
(g25
g7
Ntp3726
Rp3727
(dp3728
g29
g30
(g31
tp3729
Rp3730
(dp3731
g38
g39
sg3688
g37
sg1933
g37
sg3689
g37
sbsg55
(lp3732
g3689
ag1933
ag3688
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp3733
sg63
g3694
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp3734
sg75
Nsg76
Nsb(dp3735
ssg355
(dp3736
sg357
(dp3737
g3679
(dp3738
g3702
(dp3739
g361
(lp3740
(g3688
g3688
tp3741
assg3723
(dp3742
g361
(lp3743
(g3689
g3689
tp3744
a(g3688
g3688
tp3745
asssg3702
(dp3746
g3723
(dp3747
g361
(lp3748
(g1933
g1933
tp3749
asssg3723
(dp3750
ssg403
g3737
sg404
(dp3751
g3679
(dp3752
sg3702
(dp3753
g3679
g3739
ssg3723
(dp3754
g3679
g3742
sg3702
g3747
sssg412
g3737
sbsg59
g3694
sg63
g1067
sg71
g3694
sg72
g413
((lp3755
(lp3756
g416
ag413
((lp3757
(lp3758
g419
ag416
aa(lp3759
g421
ag422
aa(lp3760
g424
ag425
aa(lp3761
g427
ag428
aa(lp3762
g430
ag431
aa(lp3763
g433
ag434
aa(lp3764
g436
ag437
aa(lp3765
g439
ag440
aatp3766
Rp3767
aa(lp3768
g444
ag413
((lp3769
(lp3770
g419
ag444
aa(lp3771
g448
ag449
aa(lp3772
g451
ag452
aa(lp3773
g454
ag455
aa(lp3774
g457
ag458
aa(lp3775
g460
ag461
aa(lp3776
g463
ag464
aa(lp3777
g466
ag467
aa(lp3778
g469
ag470
aa(lp3779
g472
ag473
aa(lp3780
g475
ag476
aa(lp3781
g478
ag479
aa(lp3782
g481
ag482
aa(lp3783
g484
ag485
aa(lp3784
g487
ag488
aa(lp3785
g490
ag491
aa(lp3786
g493
ag494
aa(lp3787
g496
ag497
aa(lp3788
g499
ag500
aatp3789
Rp3790
aa(lp3791
g504
ag413
((lp3792
(lp3793
g419
ag504
aa(lp3794
g508
ag509
aatp3795
Rp3796
aatp3797
Rp3798
sg76
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g18
g7
Ntp3808
Rp3809
(dp3810
g22
(dp3811
sg24
g5
(g1167
g7
Ntp3812
Rp3813
(dp3814
g29
g30
(g1171
tp3815
Rp3816
(dp3817
g140
I00
sg1175
g37
sg199
g37
sg1176
g37
sg192
g37
sg333
g37
sg142
g37
sg307
g37
sg1177
g37
sg1178
g1820
sg144
g145
sg151
g5
(g152
g153
(dp3818
g155
g156
stp3819
Rp3820
(dp3821
g160
S'environ_items'
p3822
sg59
g151
sbsg1184
g37
sg1185
g37
sg162
g156
sg1186
g37
sg1187
g37
sg38
g39
sg1188
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'func_mni_fsl_warp_0'
p3823
sg61
(dp3824
sg63
g1067
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g3823
sg72
Nsg73
(lp3825
sg75
Nsg76
Nsbg192
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g18
g7
Ntp3835
Rp3836
(dp3837
g22
(dp3838
sg24
g5
(g25
g7
Ntp3839
Rp3840
(dp3841
g29
g30
(g31
tp3842
Rp3843
(dp3844
g38
g39
sS'mask_outputs'
p3845
g37
sbsg55
(lp3846
g3845
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp3847
sg63
S'voxel_timeseries_0'
p3848
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp3849
sg75
Nsg76
Nsb(dp3850
sg5
(g18
g7
Ntp3851
Rp3852
(dp3853
g22
(dp3854
sg24
g5
(g25
g7
Ntp3855
Rp3856
(dp3857
g29
g30
(g31
tp3858
Rp3859
(dp3860
g38
g39
sg162
(lp3861
I01
aI01
asg1933
g37
sbsg55
(lp3862
g1933
ag162
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp3863
sg63
g3848
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp3864
sg75
Nsg76
Nsb(dp3865
sg5
(g18
g7
Ntp3866
Rp3867
(dp3868
g22
(dp3869
sg24
g5
(g1422
g7
Ntp3870
Rp3871
(dp3872
g1426
(lp3873
S'data_file'
p3874
aS'template'
p3875
ag162
asg29
g30
(g1432
tp3876
Rp3877
(dp3878
g140
I00
sg38
g39
sg3874
g37
sg1438
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3879
sg3875
g37
sg162
g37
sbsg1440
(dp3880
g192
Nssg1442
(lp3881
g192
asg1444
Nsbsg58
Nsg59
S'timeseries_voxel'
p3882
sg61
(dp3883
sg63
g3848
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g3882
sg72
Nsg73
(lp3884
sg75
Nsg76
Nsb(dp3885
sg5
(g18
g7
Ntp3886
Rp3887
(dp3888
g22
(dp3889
sg24
g5
(g25
g7
Ntp3890
Rp3891
(dp3892
g29
g30
(g31
tp3893
Rp3894
(dp3895
g38
g39
sg1934
g37
sbsg55
(lp3896
g1934
asg57
I01
sbsg58
Nsg59
S'input_mask'
p3897
sg61
(dp3898
sg63
g3848
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g3897
sg72
Nsg73
(lp3899
sg75
Nsg76
Nsb(dp3900
ssg355
(dp3901
sg357
(dp3902
g3836
(dp3903
sg3852
(dp3904
g3867
(dp3905
g361
(lp3906
(g1933
g3874
tp3907
a(g162
g162
tp3908
asssg3867
(dp3909
g3836
(dp3910
g361
(lp3911
(g192
g3845
tp3912
asssg3887
(dp3913
g3867
(dp3914
g361
(lp3915
(g1934
g3875
tp3916
assssg403
g3902
sg404
(dp3917
g3836
(dp3918
g3867
g3910
ssg3852
(dp3919
sg3867
(dp3920
g3852
g3905
sg3887
g3914
ssg3887
(dp3921
ssg412
g3902
sbsg59
g3848
sg63
g1067
sg71
g3848
sg72
g413
((lp3922
(lp3923
g416
ag413
((lp3924
(lp3925
g419
ag416
aa(lp3926
g421
ag422
aa(lp3927
g424
ag425
aa(lp3928
g427
ag428
aa(lp3929
g430
ag431
aa(lp3930
g433
ag434
aa(lp3931
g436
ag437
aa(lp3932
g439
ag440
aatp3933
Rp3934
aa(lp3935
g444
ag413
((lp3936
(lp3937
g419
ag444
aa(lp3938
g448
ag449
aa(lp3939
g451
ag452
aa(lp3940
g454
ag455
aa(lp3941
g457
ag458
aa(lp3942
g460
ag461
aa(lp3943
g463
ag464
aa(lp3944
g466
ag467
aa(lp3945
g469
ag470
aa(lp3946
g472
ag473
aa(lp3947
g475
ag476
aa(lp3948
g478
ag479
aa(lp3949
g481
ag482
aa(lp3950
g484
ag485
aa(lp3951
g487
ag488
aa(lp3952
g490
ag491
aa(lp3953
g493
ag494
aa(lp3954
g496
ag497
aa(lp3955
g499
ag500
aatp3956
Rp3957
aa(lp3958
g504
ag413
((lp3959
(lp3960
g419
ag504
aa(lp3961
g508
ag509
aatp3962
Rp3963
aatp3964
Rp3965
sg76
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g18
g7
Ntp3986
Rp3987
(dp3988
g22
(dp3989
sg24
g5
(g25
g7
Ntp3990
Rp3991
(dp3992
g29
g30
(g31
tp3993
Rp3994
(dp3995
g38
g39
sg1429
g37
sg1428
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p3996
sbsg55
(lp3997
g1429
ag1428
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp3998
sg63
S'montage_mni_anat_0'
p3999
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp4000
sg75
Nsg76
Nsb(dp4001
sg5
(g18
g7
Ntp4002
Rp4003
(dp4004
g22
(dp4005
sg24
g5
(g1422
g7
Ntp4006
Rp4007
(dp4008
g1426
(lp4009
g1457
asg29
g30
(g1432
tp4010
Rp4011
(dp4012
g140
I00
sg1438
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4013
sg1457
g37
sg38
g39
sbsg1440
(dp4014
g1463
Nssg1442
(lp4015
g1463
asg1444
Nsbsg58
Nsg59
g1465
sg61
(dp4016
sg63
g3999
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1465
sg72
Nsg73
(lp4017
sg75
Nsg76
Nsb(dp4018
sg5
(g18
g7
Ntp4019
Rp4020
(dp4021
g22
(dp4022
sg24
g5
(g1422
g7
Ntp4023
Rp4024
(dp4025
g1426
(lp4026
g1428
ag1429
ag1430
ag1431
asg29
g30
(g1432
tp4027
Rp4028
(dp4029
g140
I00
sg1430
S'mni_anat_s.png'
p4030
sg1428
g37
sg1431
g1437
sg1438
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4031
sg1429
g37
sg38
g39
sbsg1440
(dp4032
g1430
Nssg1442
(lp4033
g1430
asg1444
Nsbsg58
Nsg59
g1445
sg61
(dp4034
sg63
g3999
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1445
sg72
Nsg73
(lp4035
sg75
Nsg76
Nsb(dp4036
sg5
(g18
g7
Ntp4037
Rp4038
(dp4039
g22
(dp4040
sg24
g5
(g1422
g7
Ntp4041
Rp4042
(dp4043
g1426
(lp4044
g1457
asg29
g30
(g1432
tp4045
Rp4046
(dp4047
g140
I00
sg1438
g4013
sg1457
g37
sg38
g39
sbsg1440
(dp4048
g1463
Nssg1442
(lp4049
g1463
asg1444
Nsbsg58
Nsg66
I00
sg61
(dp4050
sg68
Nsg65
Nsg75
Nsg59
g1498
sg63
g3999
sg67
I00
sg69
Nsg70
I00
sg71
g1498
sg72
Nsg73
(lp4051
sg76
Nsb(dp4052
sg5
(g18
g7
Ntp4053
Rp4054
(dp4055
g22
(dp4056
sg24
g5
(g1422
g7
Ntp4057
Rp4058
(dp4059
g1426
(lp4060
g1428
ag1429
ag1430
ag1431
asg29
g30
(g1432
tp4061
Rp4062
(dp4063
g140
I00
sg1430
S'mni_anat_a.png'
p4064
sg1428
g37
sg1431
g1437
sg1438
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4065
sg1429
g37
sg38
g39
sbsg1440
(dp4066
g1430
Nssg1442
(lp4067
g1430
asg1444
Nsbsg58
Nsg59
g1516
sg61
(dp4068
sg63
g3999
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1516
sg72
Nsg73
(lp4069
sg75
Nsg76
Nsb(dp4070
sg5
(g18
g7
Ntp4071
Rp4072
(dp4073
g22
(dp4074
sg24
g5
(g25
g7
Ntp4075
Rp4076
(dp4077
g29
g30
(g31
tp4078
Rp4079
(dp4080
g38
g39
sg1409
g37
sg1410
g37
sg1411
g37
sg1412
g37
sbsg55
(lp4081
g1410
ag1411
ag1409
ag1412
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp4082
sg63
g3999
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp4083
sg75
Nsg76
Nsb(dp4084
ssg355
(dp4085
sg357
(dp4086
g3987
(dp4087
g4003
(dp4088
g361
(lp4089
(g1429
g1457
tp4090
assg4038
(dp4091
g361
(lp4092
(g1428
g1457
tp4093
asssg4003
(dp4094
g4054
(dp4095
g361
(lp4096
(g1463
g1429
tp4097
assg4072
(dp4098
g361
(lp4099
(g1463
g1409
tp4100
assg4020
(dp4101
g361
(lp4102
(g1463
g1429
tp4103
asssg4020
(dp4104
g4072
(dp4105
g361
(lp4106
(g1430
g1411
tp4107
asssg4038
(dp4108
g4054
(dp4109
g361
(lp4110
(g1463
g1428
tp4111
assg4072
(dp4112
g361
(lp4113
(g1463
g1412
tp4114
assg4020
(dp4115
g361
(lp4116
(g1463
g1428
tp4117
asssg4054
(dp4118
g4072
(dp4119
g361
(lp4120
(g1430
g1410
tp4121
asssg4072
(dp4122
ssg403
g4086
sg404
(dp4123
g3987
(dp4124
sg4003
(dp4125
g3987
g4088
ssg4020
(dp4126
g4003
g4101
sg4038
g4115
ssg4038
(dp4127
g3987
g4091
ssg4054
(dp4128
g4003
g4095
sg4038
g4109
ssg4072
(dp4129
g4003
g4098
sg4020
g4105
sg4038
g4112
sg4054
g4119
sssg412
g4086
sbsg59
g3999
sg63
g1067
sg71
g3999
sg72
g413
((lp4130
(lp4131
g416
ag413
((lp4132
(lp4133
g419
ag416
aa(lp4134
g421
ag422
aa(lp4135
g424
ag425
aa(lp4136
g427
ag428
aa(lp4137
g430
ag431
aa(lp4138
g433
ag434
aa(lp4139
g436
ag437
aa(lp4140
g439
ag440
aatp4141
Rp4142
aa(lp4143
g444
ag413
((lp4144
(lp4145
g419
ag444
aa(lp4146
g448
ag449
aa(lp4147
g451
ag452
aa(lp4148
g454
ag455
aa(lp4149
g457
ag458
aa(lp4150
g460
ag461
aa(lp4151
g463
ag464
aa(lp4152
g466
ag467
aa(lp4153
g469
ag470
aa(lp4154
g472
ag473
aa(lp4155
g475
ag476
aa(lp4156
g478
ag479
aa(lp4157
g481
ag482
aa(lp4158
g484
ag485
aa(lp4159
g487
ag488
aa(lp4160
g490
ag491
aa(lp4161
g493
ag494
aa(lp4162
g496
ag497
aa(lp4163
g499
ag500
aatp4164
Rp4165
aa(lp4166
g504
ag413
((lp4167
(lp4168
g419
ag504
aa(lp4169
g508
ag509
aatp4170
Rp4171
aatp4172
Rp4173
sg76
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg1997
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g18
g7
Ntp4188
Rp4189
(dp4190
g22
(dp4191
sg24
g5
(g1167
g7
Ntp4192
Rp4193
(dp4194
g29
g30
(g1171
tp4195
Rp4196
(dp4197
g140
I00
sg1175
g37
sg199
g37
sg1176
g37
sg192
g37
sg333
g37
sg142
g37
sg307
S'nn'
p4198
sg1177
g37
sg1178
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg144
g145
sg151
g5
(g152
g153
(dp4200
g155
g156
stp4201
Rp4202
(dp4203
g160
S'environ_items'
p4204
sg59
g151
sbsg1184
g37
sg1185
g37
sg162
g156
sg1186
g37
sg1187
g37
sg38
g39
sg1188
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'func_mni_fsl_warp_mask_0'
p4205
sg61
(dp4206
sg63
g1067
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4205
sg72
Nsg73
(lp4207
sg75
Nsg76
Nsbg192
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g18
g7
Ntp4217
Rp4218
(dp4219
g22
(dp4220
sg24
g5
(g1422
g7
Ntp4221
Rp4222
(dp4223
g1426
(lp4224
g1457
asg29
g30
(g1432
tp4225
Rp4226
(dp4227
g140
I00
sg1438
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4228
sg1457
g37
sg38
g39
sbsg1440
(dp4229
g1463
Nssg1442
(lp4230
g1463
asg1444
Nsbsg58
Nsg59
g1465
sg61
(dp4231
sg63
S'montage_skull_0'
p4232
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1465
sg72
Nsg73
(lp4233
sg75
Nsg76
Nsb(dp4234
sg5
(g18
g7
Ntp4235
Rp4236
(dp4237
g22
(dp4238
sg24
g5
(g1422
g7
Ntp4239
Rp4240
(dp4241
g1426
(lp4242
g1457
asg29
g30
(g1432
tp4243
Rp4244
(dp4245
g140
I00
sg1438
g4228
sg1457
g37
sg38
g39
sbsg1440
(dp4246
g1463
Nssg1442
(lp4247
g1463
asg1444
Nsbsg58
Nsg66
I00
sg61
(dp4248
sg68
Nsg65
Nsg75
Nsg59
g1498
sg63
g4232
sg67
I00
sg69
Nsg70
I00
sg71
g1498
sg72
Nsg73
(lp4249
sg76
Nsb(dp4250
sg5
(g18
g7
Ntp4251
Rp4252
(dp4253
g22
(dp4254
sg24
g5
(g1422
g7
Ntp4255
Rp4256
(dp4257
g1426
(lp4258
g1428
ag1429
ag1430
ag1431
asg29
g30
(g1432
tp4259
Rp4260
(dp4261
g140
I00
sg1430
S'skull_vis_s.png'
p4262
sg1428
g37
sg1431
g1437
sg1438
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4263
sg1429
g37
sg38
g39
sbsg1440
(dp4264
g1430
Nssg1442
(lp4265
g1430
asg1444
Nsbsg58
Nsg59
g1445
sg61
(dp4266
sg63
g4232
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1445
sg72
Nsg73
(lp4267
sg75
Nsg76
Nsb(dp4268
sg5
(g18
g7
Ntp4269
Rp4270
(dp4271
g22
(dp4272
sg24
g5
(g1422
g7
Ntp4273
Rp4274
(dp4275
g1426
(lp4276
g1428
ag1429
ag1430
ag1431
asg29
g30
(g1432
tp4277
Rp4278
(dp4279
g140
I00
sg1430
S'skull_vis_a.png'
p4280
sg1428
g37
sg1431
g1437
sg1438
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4281
sg1429
g37
sg38
g39
sbsg1440
(dp4282
g1430
Nssg1442
(lp4283
g1430
asg1444
Nsbsg58
Nsg59
g1516
sg61
(dp4284
sg63
g4232
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1516
sg72
Nsg73
(lp4285
sg75
Nsg76
Nsb(dp4286
sg5
(g18
g7
Ntp4287
Rp4288
(dp4289
g22
(dp4290
sg24
g5
(g25
g7
Ntp4291
Rp4292
(dp4293
g29
g30
(g31
tp4294
Rp4295
(dp4296
g38
g39
sg1429
g37
sg1428
g37
sbsg55
(lp4297
g1429
ag1428
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp4298
sg63
g4232
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp4299
sg75
Nsg76
Nsb(dp4300
sg5
(g18
g7
Ntp4301
Rp4302
(dp4303
g22
(dp4304
sg24
g5
(g25
g7
Ntp4305
Rp4306
(dp4307
g29
g30
(g31
tp4308
Rp4309
(dp4310
g38
g39
sg1409
g37
sg1410
g37
sg1411
g37
sg1412
g37
sbsg55
(lp4311
g1410
ag1411
ag1409
ag1412
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp4312
sg63
g4232
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp4313
sg75
Nsg76
Nsb(dp4314
ssg355
(dp4315
sg357
(dp4316
g4218
(dp4317
g4302
(dp4318
g361
(lp4319
(g1463
g1409
tp4320
assg4270
(dp4321
g361
(lp4322
(g1463
g1429
tp4323
assg4252
(dp4324
g361
(lp4325
(g1463
g1429
tp4326
asssg4236
(dp4327
g4302
(dp4328
g361
(lp4329
(g1463
g1412
tp4330
assg4270
(dp4331
g361
(lp4332
(g1463
g1428
tp4333
assg4252
(dp4334
g361
(lp4335
(g1463
g1428
tp4336
asssg4252
(dp4337
g4302
(dp4338
g361
(lp4339
(g1430
g1411
tp4340
asssg4270
(dp4341
g4302
(dp4342
g361
(lp4343
(g1430
g1410
tp4344
asssg4288
(dp4345
g4236
(dp4346
g361
(lp4347
(g1428
g1457
tp4348
assg4218
(dp4349
g361
(lp4350
(g1429
g1457
tp4351
asssg4302
(dp4352
ssg403
g4316
sg404
(dp4353
g4218
(dp4354
g4288
g4349
ssg4236
(dp4355
g4288
g4346
ssg4252
(dp4356
g4236
g4334
sg4218
g4324
ssg4270
(dp4357
g4236
g4331
sg4218
g4321
ssg4288
(dp4358
sg4302
(dp4359
g4236
g4328
sg4252
g4338
sg4218
g4318
sg4270
g4342
sssg412
g4316
sbsg59
g4232
sg63
g1067
sg71
g4232
sg72
g413
((lp4360
(lp4361
g416
ag413
((lp4362
(lp4363
g419
ag416
aa(lp4364
g421
ag422
aa(lp4365
g424
ag425
aa(lp4366
g427
ag428
aa(lp4367
g430
ag431
aa(lp4368
g433
ag434
aa(lp4369
g436
ag437
aa(lp4370
g439
ag440
aatp4371
Rp4372
aa(lp4373
g444
ag413
((lp4374
(lp4375
g419
ag444
aa(lp4376
g448
ag449
aa(lp4377
g451
ag452
aa(lp4378
g454
ag455
aa(lp4379
g457
ag458
aa(lp4380
g460
ag461
aa(lp4381
g463
ag464
aa(lp4382
g466
ag467
aa(lp4383
g469
ag470
aa(lp4384
g472
ag473
aa(lp4385
g475
ag476
aa(lp4386
g478
ag479
aa(lp4387
g481
ag482
aa(lp4388
g484
ag485
aa(lp4389
g487
ag488
aa(lp4390
g490
ag491
aa(lp4391
g493
ag494
aa(lp4392
g496
ag497
aa(lp4393
g499
ag500
aatp4394
Rp4395
aa(lp4396
g504
ag413
((lp4397
(lp4398
g419
ag504
aa(lp4399
g508
ag509
aatp4400
Rp4401
aatp4402
Rp4403
sg76
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2681
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2682
(g5
(g18
g7
Ntp4413
Rp4414
(dp4415
g22
(dp4416
sg24
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g29
g30
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g140
I00
sg38
g39
sS'tpattern'
p4425
g37
sg192
g37
sS'tr'
p4426
g37
sg142
g37
sg307
g37
sg2239
g2240
sS'tzero'
p4427
g37
sS'ignore'
p4428
g37
sS'rltplus'
p4429
g37
sg144
g145
sS'tslice'
p4430
g37
sg199
g37
sS'rlt'
p4431
g37
sg151
g5
(g152
g153
(dp4432
tp4433
Rp4434
(dp4435
g160
S'environ_items'
p4436
sg59
g151
sbsbsg2252
g2240
sg165
Nsg166
g145
sbsg58
Nsg59
S'func_slice_timing_correction_0'
p4437
sg61
(dp4438
sg63
g1067
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4437
sg72
Nsg73
(lp4439
sg75
Nsg76
Nsbg192
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g18
g7
Ntp4449
Rp4450
(dp4451
g22
(dp4452
sg24
g5
(g25
g7
Ntp4453
Rp4454
(dp4455
g29
g30
(g31
tp4456
Rp4457
(dp4458
g38
g39
sS'roi_outputs'
p4459
g37
sbsg55
(lp4460
g4459
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp4461
sg63
S'roi_timeseries_0'
p4462
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp4463
sg75
Nsg76
Nsb(dp4464
sg5
(g18
g7
Ntp4465
Rp4466
(dp4467
g22
(dp4468
sg24
g5
(g25
g7
Ntp4469
Rp4470
(dp4471
g29
g30
(g31
tp4472
Rp4473
(dp4474
g38
g39
sg162
(lp4475
I01
aI01
asg1933
g37
sbsg55
(lp4476
g1933
ag162
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp4477
sg63
g4462
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp4478
sg75
Nsg76
Nsb(dp4479
sg5
(g18
g7
Ntp4480
Rp4481
(dp4482
g22
(dp4483
sg24
g5
(g1422
g7
Ntp4484
Rp4485
(dp4486
g1426
(lp4487
g3874
ag3875
ag162
asg29
g30
(g1432
tp4488
Rp4489
(dp4490
g140
I00
sg38
g39
sg3874
g37
sg1438
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4491
sg3875
g37
sg162
g37
sbsg1440
(dp4492
g192
Nssg1442
(lp4493
g192
asg1444
Nsbsg58
Nsg59
S'timeseries_roi'
p4494
sg61
(dp4495
sg63
g4462
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4494
sg72
Nsg73
(lp4496
sg75
Nsg76
Nsb(dp4497
sg5
(g18
g7
Ntp4498
Rp4499
(dp4500
g22
(dp4501
sg24
g5
(g25
g7
Ntp4502
Rp4503
(dp4504
g29
g30
(g31
tp4505
Rp4506
(dp4507
g38
g39
sS'roi'
p4508
g37
sbsg55
(lp4509
g4508
asg57
I01
sbsg58
Nsg59
S'input_roi'
p4510
sg61
(dp4511
sg63
g4462
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4510
sg72
Nsg73
(lp4512
sg75
Nsg76
Nsb(dp4513
ssg355
(dp4514
sg357
(dp4515
g4450
(dp4516
sg4466
(dp4517
g4481
(dp4518
g361
(lp4519
(g1933
g3874
tp4520
a(g162
g162
tp4521
asssg4481
(dp4522
g4450
(dp4523
g361
(lp4524
(g192
g4459
tp4525
asssg4499
(dp4526
g4481
(dp4527
g361
(lp4528
(g4508
g3875
tp4529
assssg403
g4515
sg404
(dp4530
g4450
(dp4531
g4481
g4523
ssg4466
(dp4532
sg4481
(dp4533
g4466
g4518
sg4499
g4527
ssg4499
(dp4534
ssg412
g4515
sbsg59
g4462
sg63
g1067
sg71
g4462
sg72
g413
((lp4535
(lp4536
g416
ag413
((lp4537
(lp4538
g419
ag416
aa(lp4539
g421
ag422
aa(lp4540
g424
ag425
aa(lp4541
g427
ag428
aa(lp4542
g430
ag431
aa(lp4543
g433
ag434
aa(lp4544
g436
ag437
aa(lp4545
g439
ag440
aatp4546
Rp4547
aa(lp4548
g444
ag413
((lp4549
(lp4550
g419
ag444
aa(lp4551
g448
ag449
aa(lp4552
g451
ag452
aa(lp4553
g454
ag455
aa(lp4554
g457
ag458
aa(lp4555
g460
ag461
aa(lp4556
g463
ag464
aa(lp4557
g466
ag467
aa(lp4558
g469
ag470
aa(lp4559
g472
ag473
aa(lp4560
g475
ag476
aa(lp4561
g478
ag479
aa(lp4562
g481
ag482
aa(lp4563
g484
ag485
aa(lp4564
g487
ag488
aa(lp4565
g490
ag491
aa(lp4566
g493
ag494
aa(lp4567
g496
ag497
aa(lp4568
g499
ag500
aatp4569
Rp4570
aa(lp4571
g504
ag413
((lp4572
(lp4573
g419
ag504
aa(lp4574
g508
ag509
aatp4575
Rp4576
aatp4577
Rp4578
sg76
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g18
g7
Ntp4589
Rp4590
(dp4591
g22
(dp4592
sg24
g5
(g294
g7
Ntp4593
Rp4594
(dp4595
g29
g30
(g298
tp4596
Rp4597
(dp4598
g302
g37
sg38
g39
sg303
g37
sg130
g37
sg304
g37
sg305
g37
sg306
g37
sg307
g308
sg309
g37
sg310
g37
sg311
g37
sg312
g37
sg313
g37
sg314
g37
sg315
g37
sg316
g37
sg317
g37
sg318
g37
sg199
g37
sg319
g37
sg320
g37
sg321
g37
sg322
g37
sg140
I00
sg323
g37
sg324
g37
sg142
S'-applyisoxfm 2'
p4599
sg325
g37
sg326
g37
sg144
g145
sg327
g37
sg328
g37
sg329
g37
sg330
g37
sg331
g37
sg192
g37
sg332
g37
sg333
g37
sg334
g37
sg335
g37
sg336
g37
sg337
g37
sg338
g37
sg339
g37
sg340
g37
sg151
g5
(g152
g153
(dp4600
g155
g156
stp4601
Rp4602
(dp4603
g160
S'environ_items'
p4604
sg59
g151
sbsg346
g37
sg347
g37
sg162
g156
sg348
g37
sg349
g37
sg350
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'gm_anat_to_2mm_flirt_applyxfm'
p4605
sg61
(dp4606
sg63
S'nuisance_0'
p4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4605
sg72
Nsg73
(lp4608
sg75
Nsg76
Nsb(dp4609
sg5
(g18
g7
Ntp4610
Rp4611
(dp4612
g22
(dp4613
sg24
g5
(g25
g7
Ntp4614
Rp4615
(dp4616
g29
g30
(g31
tp4617
Rp4618
(dp4619
g38
g39
sS'regressors'
p4620
g37
sg3689
g37
sbsg55
(lp4621
g3689
ag4620
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp4622
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp4623
sg75
Nsg76
Nsb(dp4624
sg5
(g18
g7
Ntp4625
Rp4626
(dp4627
g22
(dp4628
sg24
g5
(g294
g7
Ntp4629
Rp4630
(dp4631
g29
g30
(g298
tp4632
Rp4633
(dp4634
g302
g37
sg38
g39
sg303
g37
sg130
g37
sg304
g37
sg305
g37
sg306
g37
sg307
g308
sg309
g37
sg310
g37
sg311
g37
sg312
g37
sg313
g37
sg314
g37
sg315
g37
sg316
g37
sg317
g37
sg318
g37
sg199
g37
sg319
g37
sg320
g37
sg321
g37
sg322
g37
sg140
I00
sg323
g37
sg324
g37
sg142
g4599
sg325
g37
sg326
g37
sg144
g145
sg327
g37
sg328
g37
sg329
g37
sg330
g37
sg331
g37
sg192
g37
sg332
g37
sg333
g37
sg334
g37
sg335
g37
sg336
g37
sg337
g37
sg338
g37
sg339
g37
sg340
g37
sg151
g5
(g152
g153
(dp4635
g155
g156
stp4636
Rp4637
(dp4638
g160
S'environ_items'
p4639
sg59
g151
sbsg346
g37
sg347
g37
sg162
g156
sg348
g37
sg349
g37
sg350
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'wm_anat_to_2mm_flirt_applyxfm'
p4640
sg61
(dp4641
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4640
sg72
Nsg73
(lp4642
sg75
Nsg76
Nsb(dp4643
sg5
(g18
g7
Ntp4644
Rp4645
(dp4646
g22
(dp4647
sg24
g5
(g294
g7
Ntp4648
Rp4649
(dp4650
g29
g30
(g298
tp4651
Rp4652
(dp4653
g302
g37
sg38
g39
sg303
g37
sg130
g37
sg304
g37
sg305
g37
sg306
g37
sg307
g37
sg309
g37
sg310
g37
sg311
g37
sg312
g37
sg313
g37
sg314
g37
sg315
g37
sg316
g37
sg317
g37
sg318
g37
sg199
g37
sg319
g37
sg320
g37
sg321
g37
sg322
g37
sg140
I00
sg323
g37
sg324
g37
sg142
g4599
sg325
g37
sg326
g37
sg144
g145
sg327
g37
sg328
g37
sg329
g37
sg330
g37
sg331
g37
sg192
g37
sg332
g37
sg333
g37
sg334
g37
sg335
g37
sg336
g37
sg337
g37
sg338
g37
sg339
g37
sg340
g37
sg151
g5
(g152
g153
(dp4654
g155
g156
stp4655
Rp4656
(dp4657
g160
S'environ_items'
p4658
sg59
g151
sbsg346
g37
sg347
g37
sg162
g156
sg348
g37
sg349
g37
sg350
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'func_to_2mm_flirt_applyxfm'
p4659
sg61
(dp4660
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4659
sg72
Nsg73
(lp4661
sg75
Nsg76
Nsb(dp4662
sg5
(g18
g7
Ntp4663
Rp4664
(dp4665
g22
(dp4666
sg24
g5
(g294
g7
Ntp4667
Rp4668
(dp4669
g29
g30
(g298
tp4670
Rp4671
(dp4672
g302
g37
sg38
g39
sg303
g37
sg130
g37
sg304
g37
sg305
g37
sg306
g37
sg307
g308
sg309
g37
sg310
g37
sg311
g37
sg312
g37
sg313
g37
sg314
g37
sg315
g37
sg316
g37
sg317
g37
sg318
g37
sg199
g37
sg319
g37
sg320
g37
sg321
g37
sg322
g37
sg140
I00
sg323
g37
sg324
g37
sg142
g4599
sg325
g37
sg326
g37
sg144
g145
sg327
g37
sg328
g37
sg329
g37
sg330
g37
sg331
g37
sg192
g37
sg332
g37
sg333
g37
sg334
g37
sg335
g37
sg336
g37
sg337
g37
sg338
g37
sg339
g37
sg340
g37
sg151
g5
(g152
g153
(dp4673
g155
g156
stp4674
Rp4675
(dp4676
g160
S'environ_items'
p4677
sg59
g151
sbsg346
g37
sg347
g37
sg162
g156
sg348
g37
sg349
g37
sg350
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'csf_anat_to_2mm_flirt_applyxfm'
p4678
sg61
(dp4679
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4678
sg72
Nsg73
(lp4680
sg75
Nsg76
Nsb(dp4681
sg5
(g18
g7
Ntp4682
Rp4683
(dp4684
g22
(dp4685
sg24
g5
(g25
g7
Ntp4686
Rp4687
(dp4688
g29
g30
(g31
tp4689
Rp4690
(dp4691
S'motion_components'
p4692
g37
sS'anat_to_mni_initial_xfm'
p4693
g37
sS'lat_ventricles_mask'
p4694
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4695
sg50
g37
sS'anat_to_mni_rigid_xfm'
p4696
g37
sS'compcor_ncomponents'
p4697
g37
sS'anat_to_mni_affine_xfm'
p4698
g37
sS'selector'
p4699
g37
sg49
g37
sS'template_brain'
p4700
g37
sg3497
g37
sS'mni_to_anat_linear_xfm'
p4701
g37
sg51
g37
sg38
g39
sg3689
g37
sbsg55
(lp4702
g3689
ag49
ag51
ag50
ag4701
ag4693
ag4696
ag4698
ag3497
ag4694
ag4692
ag4699
ag4697
ag4700
asg57
I01
sbsg58
Nsg59
g286
sg61
(dp4703
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g286
sg72
Nsg73
(lp4704
sg75
Nsg76
Nsb(dp4705
sg5
(g18
g7
Ntp4706
Rp4707
(dp4708
g22
(dp4709
sg24
g5
(g1422
g7
Ntp4710
Rp4711
(dp4712
g1426
(lp4713
g3874
aS'ventricles_mask_file'
p4714
aS'wm_seg_file'
p4715
aS'csf_seg_file'
p4716
aS'gm_seg_file'
p4717
ag734
ag106
ag88
asg29
g30
(g1432
tp4718
Rp4719
(dp4720
g140
I00
sg38
g39
sg734
g37
sg106
g37
sg3874
g37
sg1438
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4721
sg4717
g37
sg4714
g37
sg88
g37
sg4716
g37
sg4715
g37
sbsg1440
(dp4722
S'file_gm'
p4723
NsS'file_wm'
p4724
NsS'file_csf'
p4725
Nssg1442
(lp4726
g4724
ag4725
ag4723
asg1444
Nsbsg58
Nsg59
S'tissue_masks'
p4727
sg61
(dp4728
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4727
sg72
Nsg73
(lp4729
sg75
Nsg76
Nsb(dp4730
sg5
(g18
g7
Ntp4731
Rp4732
(dp4733
g22
(dp4734
sg24
g5
(g1422
g7
Ntp4735
Rp4736
(dp4737
g1426
(lp4738
g3689
ag4699
aS'wm_sig_file'
p4739
aS'csf_sig_file'
p4740
aS'gm_sig_file'
p4741
aS'motion_file'
p4742
ag4697
asg29
g30
(g1432
tp4743
Rp4744
(dp4745
g140
I00
sg38
g39
sg4742
g37
sg4697
g37
sg1438
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4746
sg4740
g37
sg4739
g37
sg4741
g37
sg4699
g37
sg3689
g37
sbsg1440
(dp4747
S'regressors_file'
p4748
NsS'residual_file'
p4749
Nssg1442
(lp4750
g4749
ag4748
asg1444
Nsbsg58
Nsg59
S'residuals'
p4751
sg61
(dp4752
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
(lp4753
(g4699
(lp4754
(dp4755
S'global'
p4756
I0
sS'linear'
p4757
I1
sS'wm'
p4758
I0
sS'pc1'
p4759
I0
sS'motion'
p4760
I0
sS'quadratic'
p4761
I1
sS'gm'
p4762
I0
sS'compcor'
p4763
I1
sS'csf'
p4764
I1
satp4765
a(g4697
(lp4766
I5
atp4767
asg70
I00
sg71
g4751
sg72
Nsg73
(lp4768
sg75
Nsg76
Nsb(dp4769
sg5
(g18
g7
Ntp4770
Rp4771
(dp4772
g22
(dp4773
sg24
g5
(g294
g7
Ntp4774
Rp4775
(dp4776
g29
g30
(g298
tp4777
Rp4778
(dp4779
g302
g37
sg38
g39
sg303
g37
sg130
g37
sg304
g37
sg305
g37
sg306
g37
sg307
g308
sg309
g37
sg310
g37
sg311
g37
sg312
g37
sg313
g37
sg314
g37
sg315
g37
sg316
g37
sg317
g37
sg318
g37
sg199
g37
sg319
g37
sg320
g37
sg321
g37
sg322
g37
sg140
I00
sg323
g37
sg324
g37
sg142
g4599
sg325
g37
sg326
g37
sg144
g145
sg327
g37
sg328
g37
sg329
g37
sg330
g37
sg331
g37
sg192
g37
sg332
g37
sg333
g37
sg334
g37
sg335
g37
sg336
g37
sg337
g37
sg338
g37
sg339
g37
sg340
g37
sg151
g5
(g152
g153
(dp4780
g155
g156
stp4781
Rp4782
(dp4783
g160
S'environ_items'
p4784
sg59
g151
sbsg346
g37
sg347
g37
sg162
g156
sg348
g37
sg349
g37
sg350
g37
sbsg164
g156
sg165
Nsg166
g145
sbsg58
Nsg59
S'ho_mni_to_2mm_flirt_applyxfm'
p4785
sg61
(dp4786
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4785
sg72
Nsg73
(lp4787
sg75
Nsg76
Nsb(dp4788
ssg355
(dp4789
sg357
(dp4790
g4590
(dp4791
g4707
(dp4792
g361
(lp4793
(g192
g4717
tp4794
asssg4611
(dp4795
sg4626
(dp4796
g4707
(dp4797
g361
(lp4798
(g192
g4715
tp4799
asssg4645
(dp4800
g4707
(dp4801
g361
(lp4802
(g192
g3874
tp4803
asssg4664
(dp4804
g4707
(dp4805
g361
(lp4806
(g192
g4716
tp4807
asssg4683
(dp4808
g4590
(dp4809
g361
(lp4810
(g50
g199
tp4811
a(g50
g304
tp4812
assg4626
(dp4813
g361
(lp4814
(g49
g199
tp4815
a(g49
g304
tp4816
assg4732
(dp4817
g361
(lp4818
(g3689
g3689
tp4819
a(g4692
g4742
tp4820
a(g4699
g4699
tp4821
a(g4697
g4697
tp4822
assg4645
(dp4823
g361
(lp4824
(g3689
g199
tp4825
a(g51
g304
tp4826
a(g3497
g303
tp4827
assg4664
(dp4828
g361
(lp4829
(g51
g199
tp4830
a(g51
g304
tp4831
assg4771
(dp4832
g361
(lp4833
(g4701
g303
tp4834
a(g4694
g199
tp4835
a(g51
g304
tp4836
asssg4707
(dp4837
g4732
(dp4838
g361
(lp4839
(g4724
g4739
tp4840
a(g4725
g4740
tp4841
a(g4723
g4741
tp4842
asssg4732
(dp4843
g4611
(dp4844
g361
(lp4845
(g4749
g3689
tp4846
a(g4748
g4620
tp4847
asssg4771
(dp4848
g4707
(dp4849
g361
(lp4850
(g192
g4714
tp4851
assssg403
g4790
sg404
(dp4852
g4590
(dp4853
g4683
g4809
ssg4611
(dp4854
g4732
g4844
ssg4626
(dp4855
g4683
g4813
ssg4645
(dp4856
g4683
g4823
ssg4664
(dp4857
g4683
g4828
ssg4683
(dp4858
sg4707
(dp4859
g4645
g4801
sg4590
g4792
sg4626
g4797
sg4771
g4849
sg4664
g4805
ssg4732
(dp4860
g4683
g4817
sg4707
g4838
ssg4771
(dp4861
g4683
g4832
sssg412
g4790
sbsg59
g4607
sg63
g1067
sg71
g4607
sg72
g413
((lp4862
(lp4863
g416
ag413
((lp4864
(lp4865
g419
ag416
aa(lp4866
g421
ag422
aa(lp4867
g424
ag425
aa(lp4868
g427
ag428
aa(lp4869
g430
ag431
aa(lp4870
g433
ag434
aa(lp4871
g436
ag437
aa(lp4872
g439
ag440
aatp4873
Rp4874
aa(lp4875
g444
ag413
((lp4876
(lp4877
g419
ag444
aa(lp4878
g448
ag449
aa(lp4879
g451
ag452
aa(lp4880
g454
ag455
aa(lp4881
g457
ag458
aa(lp4882
g460
ag461
aa(lp4883
g463
ag464
aa(lp4884
g466
ag467
aa(lp4885
g469
ag470
aa(lp4886
g472
ag473
aa(lp4887
g475
ag476
aa(lp4888
g478
ag479
aa(lp4889
g481
ag482
aa(lp4890
g484
ag485
aa(lp4891
g487
ag488
aa(lp4892
g490
ag491
aa(lp4893
g493
ag494
aa(lp4894
g496
ag497
aa(lp4895
g499
ag500
aatp4896
Rp4897
aa(lp4898
g504
ag413
((lp4899
(lp4900
g419
ag504
aa(lp4901
g508
ag509
aatp4902
Rp4903
aatp4904
Rp4905
sg76
NsbS'outputspec.subject'
p4906
tp4907
sg1898
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg1899
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Completed'
p4921
sS'strat_0'
p4922
(lp4923
g2255
ag1138
ag64
ag4437
ag2486
ag2893
aS'func_to_anat_FLIRT_0'
p4924
ag3484
ag1902
ag4607
ag3823
ag4462
ag3848
asg1953
g3690
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1430302853.865892
s.