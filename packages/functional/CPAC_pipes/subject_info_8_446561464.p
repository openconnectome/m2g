(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(g6
g7
Ntp18
Rp19
(dp20
g11
g5
(g12
g7
Ntp21
Rp22
(dp23
g16
(dp24
g5
(cnipype.pipeline.engine
Node
p25
g7
Ntp26
Rp27
(dp28
S'input_source'
p29
(dp30
sS'_interface'
p31
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p32
g7
Ntp33
Rp34
(dp35
S'inputs'
p36
ctraits.traits
__newobj__
p37
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p38
tp39
Rp40
(dp41
S'ignore_exception'
p42
I00
sS'__traits_version__'
p43
S'4.5.0'
p44
sS'op_string'
p45
ctraits.trait_base
_Undefined
p46
(tRp47
sS'out_data_type'
p48
g47
sS'out_file'
p49
g47
sS'args'
p50
g47
sS'in_file2'
p51
g47
sS'terminal_output'
p52
S'stream'
p53
sS'environ'
p54
g5
(ctraits.trait_handlers
TraitDictObject
p55
c__builtin__
dict
p56
(dp57
S'FSLOUTPUTTYPE'
p58
S'NIFTI_GZ'
p59
stp60
Rp61
(dp62
S'name_items'
p63
S'environ_items'
p64
sS'name'
p65
g54
sbsS'in_file'
p66
g47
sS'output_type'
p67
g59
sS'suffix'
p68
g47
sbsS'_output_type'
p69
g59
sS'_environ'
p70
NsS'_terminal_output'
p71
g53
sbsS'_result'
p72
Nsg65
S'binarize_threshold_WM'
p73
sS'plugin_args'
p74
(dp75
sS'_hierarchy'
p76
S'WM'
p77
sS'itersource'
p78
NsS'run_without_submitting'
p79
I00
sS'synchronize'
p80
I00
sS'parameterization'
p81
NsS'iterables'
p82
NsS'_got_inputs'
p83
I00
sS'_id'
p84
g73
sS'config'
p85
NsS'needed_outputs'
p86
(lp87
sS'overwrite'
p88
NsS'base_dir'
p89
Nsb(dp90
sg5
(g25
g7
Ntp91
Rp92
(dp93
g29
(dp94
sg31
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p95
g7
Ntp96
Rp97
(dp98
g36
g37
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p99
tp100
Rp101
(dp102
g42
I00
sS'nan2zeros'
p103
g47
sg45
S'-mas %s '
p104
sg49
g47
sg50
g47
sS'internal_datatype'
p105
g47
sg43
g44
sg52
g53
sg54
g5
(g55
g56
(dp106
g58
g59
stp107
Rp108
(dp109
g63
S'environ_items'
p110
sg65
g54
sbsg66
g47
sg67
g59
sS'output_datatype'
p111
g47
sS'operand_files'
p112
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'overlap_WM_map_with_prior'
p113
sg74
(dp114
sg76
g77
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g113
sg85
Nsg86
(lp115
sg88
Nsg89
Nsb(dp116
sg5
(g25
g7
Ntp117
Rp118
(dp119
g29
(dp120
sg31
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p121
g7
Ntp122
Rp123
(dp124
g36
g37
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p125
tp126
Rp127
(dp128
S'rigid2D'
p129
g47
sg43
g44
sS'in_matrix_file'
p130
g47
sS'verbose'
p131
g47
sS'reference'
p132
g47
sS'padding_size'
p133
g47
sS'sinc_window'
p134
g47
sS'interp'
p135
S'nearestneighbour'
p136
sS'wmnorms'
p137
g47
sS'coarse_search'
p138
g47
sS'no_resample'
p139
g47
sS'sinc_width'
p140
g47
sS'in_weight'
p141
g47
sS'fieldmap'
p142
g47
sS'echospacing'
p143
g47
sS'ref_weight'
p144
g47
sS'apply_isoxfm'
p145
g47
sS'fieldmapmask'
p146
g47
sg66
g47
sS'bbrtype'
p147
g47
sS'no_clamp'
p148
g47
sS'force_scaling'
p149
g47
sS'pedir'
p150
g47
sg42
I00
sS'display_init'
p151
g47
sS'schedule'
p152
g47
sg50
g47
sS'uses_qform'
p153
g47
sS'wmcoords'
p154
g47
sg52
g53
sS'fine_search'
p155
g47
sS'angle_rep'
p156
g47
sS'no_search'
p157
g47
sS'apply_xfm'
p158
I01
sS'wm_seg'
p159
g47
sg49
g47
sS'bbrslope'
p160
g47
sS'datatype'
p161
g47
sS'save_log'
p162
g47
sS'dof'
p163
g47
sS'out_matrix_file'
p164
g47
sS'no_resample_blur'
p165
g47
sS'min_sampling'
p166
g47
sS'cost_func'
p167
g47
sS'cost'
p168
g47
sg54
g5
(g55
g56
(dp169
g58
g59
stp170
Rp171
(dp172
g63
S'environ_items'
p173
sg65
g54
sbsS'searchr_x'
p174
g47
sS'out_log'
p175
g47
sg67
g59
sS'searchr_z'
p176
g47
sS'bins'
p177
g47
sS'searchr_y'
p178
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'WM_prior_mni_to_t1'
p179
sg74
(dp180
sg76
g77
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g179
sg85
Nsg86
(lp181
sg88
Nsg89
Nsb(dp182
sg5
(g25
g7
Ntp183
Rp184
(dp185
g29
(dp186
sg31
g5
(g95
g7
Ntp187
Rp188
(dp189
g36
g37
(g99
tp190
Rp191
(dp192
g42
I00
sg103
g47
sg45
g104
sg49
g47
sg50
g47
sg105
g47
sg43
g44
sg52
g53
sg54
g5
(g55
g56
(dp193
g58
g59
stp194
Rp195
(dp196
g63
S'environ_items'
p197
sg65
g54
sbsg66
g47
sg67
g59
sg111
g47
sg112
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'WM_mask'
p198
sg74
(dp199
sg76
g77
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g198
sg85
Nsg86
(lp200
sg88
Nsg89
Nsb(dp201
sg5
(g25
g7
Ntp202
Rp203
(dp204
g29
(dp205
sg31
g5
(cnipype.interfaces.utility
IdentityInterface
p206
g7
Ntp207
Rp208
(dp209
g36
g37
(cnipype.interfaces.base
DynamicTraitedSpec
p210
tp211
Rp212
(dp213
S'standard2highres_rig'
p214
g47
sg43
g44
sS'standard2highres_init'
p215
g47
sS'tissue_prior'
p216
g47
sS'standard2highres_mat'
p217
g47
sS'brain'
p218
g47
sS'probability_map'
p219
g47
sS'threshold'
p220
g47
sbsS'_fields'
p221
(lp222
g216
ag220
ag218
ag219
ag215
ag217
ag214
asS'_mandatory_inputs'
p223
I01
sbsg72
Nsg65
S'inputspec'
p224
sg74
(dp225
sg76
g77
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp226
sg88
Nsg89
Nsb(dp227
sg5
(g25
g7
Ntp228
Rp229
(dp230
g29
(dp231
sg31
g5
(g206
g7
Ntp232
Rp233
(dp234
g36
g37
(g210
tp235
Rp236
(dp237
g43
g44
sS'segment_combo'
p238
g47
sS'segment_mask'
p239
g47
sS'tissueprior_mni2t1'
p240
g47
sS'segment_bin'
p241
g47
sbsg221
(lp242
g240
ag238
ag241
ag239
asg223
I01
sbsg72
Nsg65
S'outputspec'
p243
sg74
(dp244
sg76
g77
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp245
sg88
Nsg89
Nsb(dp246
ssS'graph'
p247
(dp248
sS'succ'
p249
(dp250
g27
(dp251
g184
(dp252
S'connect'
p253
(lp254
(g49
g66
tp255
assg229
(dp256
g253
(lp257
(g49
g241
tp258
asssg92
(dp259
g27
(dp260
g253
(lp261
(g49
g66
tp262
assg229
(dp263
g253
(lp264
(g49
g238
tp265
asssg118
(dp266
g92
(dp267
g253
(lp268
(g49
g112
tp269
assg184
(dp270
g253
(lp271
(g49
g112
tp272
assg229
(dp273
g253
(lp274
(g49
g240
tp275
asssg184
(dp276
g229
(dp277
g253
(lp278
(g49
g239
tp279
asssg203
(dp280
g118
(dp281
g253
(lp282
(g216
g66
tp283
a(g218
g132
tp284
a(g217
g130
tp285
assg27
(dp286
g253
(lp287
((g220
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p288
(ttp289
g45
tp290
assg92
(dp291
g253
(lp292
(g219
g66
tp293
asssg229
(dp294
ssS'edge'
p295
g250
sS'pred'
p296
(dp297
g27
(dp298
g92
g260
sg203
g286
ssg92
(dp299
g203
g291
sg118
g267
ssg118
(dp300
g203
g281
ssg184
(dp301
g27
g252
sg118
g270
ssg203
(dp302
sg229
(dp303
g118
g273
sg27
g256
sg184
g277
sg92
g263
sssS'adj'
p304
g250
sbsg65
g77
sg76
S'seg_preproc_0'
p305
sg84
g77
sg85
ccollections
OrderedDict
p306
((lp307
(lp308
S'logging'
p309
ag306
((lp310
(lp311
S'__name__'
p312
ag309
aa(lp313
S'workflow_level'
p314
aS'INFO'
p315
aa(lp316
S'filemanip_level'
p317
aS'INFO'
p318
aa(lp319
S'interface_level'
p320
aS'INFO'
p321
aa(lp322
S'log_to_file'
p323
aS'True'
p324
aa(lp325
S'log_directory'
p326
aS'/mnt/ssd1/data/outputs/CPAC/CPAC_test1/outputs/logs/8_446561464'
p327
aa(lp328
S'log_size'
p329
aS'16384000'
p330
aa(lp331
S'log_rotate'
p332
aS'4'
p333
aatp334
Rp335
aa(lp336
S'execution'
p337
ag306
((lp338
(lp339
g312
ag337
aa(lp340
S'create_report'
p341
aS'true'
p342
aa(lp343
S'crashdump_dir'
p344
aS'/home/eric/Documents/m2g/packages/functional/CPAC_pipes'
p345
aa(lp346
S'display_variable'
p347
aS':1'
p348
aa(lp349
S'hash_method'
p350
aS'timestamp'
p351
aa(lp352
S'job_finished_timeout'
p353
aS'5'
p354
aa(lp355
S'keep_inputs'
p356
aS'false'
p357
aa(lp358
S'local_hash_check'
p359
aS'true'
p360
aa(lp361
S'matplotlib_backend'
p362
aS'Agg'
p363
aa(lp364
S'plugin'
p365
aS'Linear'
p366
aa(lp367
S'remove_node_directories'
p368
aS'false'
p369
aa(lp370
S'remove_unnecessary_outputs'
p371
aS'true'
p372
aa(lp373
S'single_thread_matlab'
p374
aS'true'
p375
aa(lp376
S'stop_on_first_crash'
p377
aS'false'
p378
aa(lp379
S'stop_on_first_rerun'
p380
aS'false'
p381
aa(lp382
S'use_relative_paths'
p383
aS'false'
p384
aa(lp385
S'stop_on_unknown_version'
p386
aS'false'
p387
aa(lp388
S'write_provenance'
p389
aS'false'
p390
aa(lp391
S'parameterize_dirs'
p392
aS'true'
p393
aatp394
Rp395
aa(lp396
S'check'
p397
ag306
((lp398
(lp399
g312
ag397
aa(lp400
S'interval'
p401
aS'1209600'
p402
aatp403
Rp404
aatp405
Rp406
sg89
Nsb(dp407
sg5
(g25
g7
Ntp408
Rp409
(dp410
g29
(dp411
sg31
g5
(g206
g7
Ntp412
Rp413
(dp414
g36
g37
(g210
tp415
Rp416
(dp417
g214
g47
sg43
g44
sg215
g47
sg218
g47
sS'PRIOR_GRAY'
p418
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p419
sg217
g47
sS'PRIOR_CSF'
p420
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p421
sS'PRIOR_WHITE'
p422
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p423
sbsg221
(lp424
g218
ag215
ag217
ag214
ag420
ag418
ag422
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp425
sg76
g305
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp426
sg88
Nsg89
Nsb(dp427
sg5
(g25
g7
Ntp428
Rp429
(dp430
g29
(dp431
sg31
g5
(g206
g7
Ntp432
Rp433
(dp434
g36
g37
(g210
tp435
Rp436
(dp437
g43
g44
sS'csf_threshold'
p438
(lp439
F0.96
asbsg221
(lp440
g438
asg223
I01
sbsg72
Nsg65
g438
sg74
(dp441
sg76
g305
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
(g438
(lp442
F0.96
atp443
sg83
I00
sg84
g438
sg85
Nsg86
(lp444
sg88
Nsg89
Nsb(dp445
sg5
(g25
g7
Ntp446
Rp447
(dp448
g29
(dp449
sg31
g5
(g206
g7
Ntp450
Rp451
(dp452
g36
g37
(g210
tp453
Rp454
(dp455
S'partial_volume_files'
p456
g47
sg43
g44
sS'gm_combo'
p457
g47
sS'mixeltype'
p458
g47
sS'csf_mni2t1'
p459
g47
sS'wm_bin'
p460
g47
sS'csf_bin'
p461
g47
sS'probability_maps'
p462
g47
sS'wm_mni2t1'
p463
g47
sS'csf_combo'
p464
g47
sS'wm_combo'
p465
g47
sS'wm_mask'
p466
g47
sS'gm_mask'
p467
g47
sS'csf_mask'
p468
g47
sS'gm_bin'
p469
g47
sS'partial_volume_map'
p470
g47
sS'gm_mni2t1'
p471
g47
sbsg221
(lp472
g459
ag464
ag461
ag468
ag471
ag457
ag469
ag467
ag463
ag465
ag460
ag462
ag458
ag470
ag456
ag466
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp473
sg76
g305
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp474
sg88
Nsg89
Nsb(dp475
sg5
(g6
g7
Ntp476
Rp477
(dp478
g11
g5
(g12
g7
Ntp479
Rp480
(dp481
g16
(dp482
g5
(g25
g7
Ntp483
Rp484
(dp485
g29
(dp486
sg31
g5
(g95
g7
Ntp487
Rp488
(dp489
g36
g37
(g99
tp490
Rp491
(dp492
g42
I00
sg103
g47
sg45
g104
sg49
g47
sg50
g47
sg105
g47
sg43
g44
sg52
g53
sg54
g5
(g55
g56
(dp493
g58
g59
stp494
Rp495
(dp496
g63
S'environ_items'
p497
sg65
g54
sbsg66
g47
sg67
g59
sg111
g47
sg112
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'overlap_GM_map_with_prior'
p498
sg74
(dp499
sg76
S'GM'
p500
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g498
sg85
Nsg86
(lp501
sg88
Nsg89
Nsb(dp502
sg5
(g25
g7
Ntp503
Rp504
(dp505
g29
(dp506
sg31
g5
(g206
g7
Ntp507
Rp508
(dp509
g36
g37
(g210
tp510
Rp511
(dp512
g43
g44
sg238
g47
sg239
g47
sg240
g47
sg241
g47
sbsg221
(lp513
g240
ag238
ag241
ag239
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp514
sg76
g500
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp515
sg88
Nsg89
Nsb(dp516
sg5
(g25
g7
Ntp517
Rp518
(dp519
g29
(dp520
sg31
g5
(g121
g7
Ntp521
Rp522
(dp523
g36
g37
(g125
tp524
Rp525
(dp526
g129
g47
sg43
g44
sg130
g47
sg131
g47
sg132
g47
sg133
g47
sg134
g47
sg135
g136
sg137
g47
sg138
g47
sg139
g47
sg140
g47
sg141
g47
sg142
g47
sg143
g47
sg144
g47
sg145
g47
sg146
g47
sg66
g47
sg147
g47
sg148
g47
sg149
g47
sg150
g47
sg42
I00
sg151
g47
sg152
g47
sg50
g47
sg153
g47
sg154
g47
sg52
g53
sg155
g47
sg156
g47
sg157
g47
sg158
I01
sg159
g47
sg49
g47
sg160
g47
sg161
g47
sg162
g47
sg163
g47
sg164
g47
sg165
g47
sg166
g47
sg167
g47
sg168
g47
sg54
g5
(g55
g56
(dp527
g58
g59
stp528
Rp529
(dp530
g63
S'environ_items'
p531
sg65
g54
sbsg174
g47
sg175
g47
sg67
g59
sg176
g47
sg177
g47
sg178
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'GM_prior_mni_to_t1'
p532
sg74
(dp533
sg76
g500
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g532
sg85
Nsg86
(lp534
sg88
Nsg89
Nsb(dp535
sg5
(g25
g7
Ntp536
Rp537
(dp538
g29
(dp539
sg31
g5
(g206
g7
Ntp540
Rp541
(dp542
g36
g37
(g210
tp543
Rp544
(dp545
g214
g47
sg43
g44
sg215
g47
sg216
g47
sg217
g47
sg218
g47
sg219
g47
sg220
g47
sbsg221
(lp546
g216
ag220
ag218
ag219
ag215
ag217
ag214
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp547
sg76
g500
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp548
sg88
Nsg89
Nsb(dp549
sg5
(g25
g7
Ntp550
Rp551
(dp552
g29
(dp553
sg31
g5
(g95
g7
Ntp554
Rp555
(dp556
g36
g37
(g99
tp557
Rp558
(dp559
g42
I00
sg103
g47
sg45
g104
sg49
g47
sg50
g47
sg105
g47
sg43
g44
sg52
g53
sg54
g5
(g55
g56
(dp560
g58
g59
stp561
Rp562
(dp563
g63
S'environ_items'
p564
sg65
g54
sbsg66
g47
sg67
g59
sg111
g47
sg112
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'GM_mask'
p565
sg74
(dp566
sg76
g500
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g565
sg85
Nsg86
(lp567
sg88
Nsg89
Nsb(dp568
sg5
(g25
g7
Ntp569
Rp570
(dp571
g29
(dp572
sg31
g5
(g32
g7
Ntp573
Rp574
(dp575
g36
g37
(g38
tp576
Rp577
(dp578
g42
I00
sg43
g44
sg45
g47
sg48
g47
sg49
g47
sg50
g47
sg51
g47
sg52
g53
sg54
g5
(g55
g56
(dp579
g58
g59
stp580
Rp581
(dp582
g63
S'environ_items'
p583
sg65
g54
sbsg66
g47
sg67
g59
sg68
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'binarize_threshold_GM'
p584
sg74
(dp585
sg76
g500
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g584
sg85
Nsg86
(lp586
sg88
Nsg89
Nsb(dp587
ssg247
(dp588
sg249
(dp589
g484
(dp590
g570
(dp591
g253
(lp592
(g49
g66
tp593
assg504
(dp594
g253
(lp595
(g49
g238
tp596
asssg504
(dp597
sg518
(dp598
g484
(dp599
g253
(lp600
(g49
g112
tp601
assg551
(dp602
g253
(lp603
(g49
g112
tp604
assg504
(dp605
g253
(lp606
(g49
g240
tp607
asssg537
(dp608
g518
(dp609
g253
(lp610
(g216
g66
tp611
a(g218
g132
tp612
a(g217
g130
tp613
assg570
(dp614
g253
(lp615
((g220
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p616
(ttp617
g45
tp618
assg484
(dp619
g253
(lp620
(g219
g66
tp621
asssg551
(dp622
g504
(dp623
g253
(lp624
(g49
g239
tp625
asssg570
(dp626
g551
(dp627
g253
(lp628
(g49
g66
tp629
assg504
(dp630
g253
(lp631
(g49
g241
tp632
assssg295
g589
sg296
(dp633
g484
(dp634
g537
g619
sg518
g599
ssg504
(dp635
g518
g605
sg570
g630
sg551
g623
sg484
g594
ssg518
(dp636
g537
g609
ssg537
(dp637
sg551
(dp638
g570
g627
sg518
g602
ssg570
(dp639
g484
g591
sg537
g614
sssg304
g589
sbsg65
g500
sg76
g305
sg84
g500
sg85
g306
((lp640
(lp641
g309
ag306
((lp642
(lp643
g312
ag309
aa(lp644
g314
ag315
aa(lp645
g317
ag318
aa(lp646
g320
ag321
aa(lp647
g323
ag324
aa(lp648
g326
ag327
aa(lp649
g329
ag330
aa(lp650
g332
ag333
aatp651
Rp652
aa(lp653
g337
ag306
((lp654
(lp655
g312
ag337
aa(lp656
g341
ag342
aa(lp657
g344
ag345
aa(lp658
g347
ag348
aa(lp659
g350
ag351
aa(lp660
g353
ag354
aa(lp661
g356
ag357
aa(lp662
g359
ag360
aa(lp663
g362
ag363
aa(lp664
g365
ag366
aa(lp665
g368
ag369
aa(lp666
g371
ag372
aa(lp667
g374
ag375
aa(lp668
g377
ag378
aa(lp669
g380
ag381
aa(lp670
g383
ag384
aa(lp671
g386
ag387
aa(lp672
g389
ag390
aa(lp673
g392
ag393
aatp674
Rp675
aa(lp676
g397
ag306
((lp677
(lp678
g312
ag397
aa(lp679
g401
ag402
aatp680
Rp681
aatp682
Rp683
sg89
Nsb(dp684
sg5
(g25
g7
Ntp685
Rp686
(dp687
g29
(dp688
sg31
g5
(g206
g7
Ntp689
Rp690
(dp691
g36
g37
(g210
tp692
Rp693
(dp694
g43
g44
sS'wm_threshold'
p695
(lp696
F0.96
asbsg221
(lp697
g695
asg223
I01
sbsg72
Nsg65
g695
sg74
(dp698
sg76
g305
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
(g695
(lp699
F0.96
atp700
sg83
I00
sg84
g695
sg85
Nsg86
(lp701
sg88
Nsg89
Nsb(dp702
sg5
(g25
g7
Ntp703
Rp704
(dp705
g29
(dp706
sg31
g5
(cnipype.interfaces.fsl.preprocess
FAST
p707
g7
Ntp708
Rp709
(dp710
g36
g37
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p711
tp712
Rp713
(dp714
S'number_classes'
p715
g47
sS'out_basename'
p716
S'segment'
p717
sS'hyper'
p718
g47
sg131
g47
sS'init_seg_smooth'
p719
g47
sS'init_transform'
p720
g47
sS'no_pve'
p721
g47
sS'output_biascorrected'
p722
g47
sS'mixel_smooth'
p723
g47
sS'segments'
p724
I01
sS'iters_afterbias'
p725
g47
sS'bias_lowpass'
p726
g47
sS'other_priors'
p727
g47
sg43
g44
sg42
I00
sS'img_type'
p728
I1
sg50
g47
sg462
I01
sS'manual_seg'
p729
g47
sg52
g53
sS'output_biasfield'
p730
g47
sS'no_bias'
p731
g47
sS'use_priors'
p732
g47
sS'in_files'
p733
g47
sS'segment_iters'
p734
g47
sg54
g5
(g55
g56
(dp735
g58
g59
stp736
Rp737
(dp738
g63
S'environ_items'
p739
sg65
g54
sbsg67
g59
sS'bias_iters'
p740
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
g717
sg74
(dp741
sg76
g305
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g717
sg85
Nsg86
(lp742
sg88
Nsg89
Nsb(dp743
sg5
(g6
g7
Ntp744
Rp745
(dp746
g11
g5
(g12
g7
Ntp747
Rp748
(dp749
g16
(dp750
g5
(g25
g7
Ntp751
Rp752
(dp753
g29
(dp754
sg31
g5
(g32
g7
Ntp755
Rp756
(dp757
g36
g37
(g38
tp758
Rp759
(dp760
g42
I00
sg43
g44
sg45
g47
sg48
g47
sg49
g47
sg50
g47
sg51
g47
sg52
g53
sg54
g5
(g55
g56
(dp761
g58
g59
stp762
Rp763
(dp764
g63
S'environ_items'
p765
sg65
g54
sbsg66
g47
sg67
g59
sg68
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'binarize_threshold_CSF'
p766
sg74
(dp767
sg76
S'CSF'
p768
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g766
sg85
Nsg86
(lp769
sg88
Nsg89
Nsb(dp770
sg5
(g25
g7
Ntp771
Rp772
(dp773
g29
(dp774
sg31
g5
(g121
g7
Ntp775
Rp776
(dp777
g36
g37
(g125
tp778
Rp779
(dp780
g129
g47
sg43
g44
sg130
g47
sg131
g47
sg132
g47
sg133
g47
sg134
g47
sg135
g136
sg137
g47
sg138
g47
sg139
g47
sg140
g47
sg141
g47
sg142
g47
sg143
g47
sg144
g47
sg145
g47
sg146
g47
sg66
g47
sg147
g47
sg148
g47
sg149
g47
sg150
g47
sg42
I00
sg151
g47
sg152
g47
sg50
g47
sg153
g47
sg154
g47
sg52
g53
sg155
g47
sg156
g47
sg157
g47
sg158
I01
sg159
g47
sg49
g47
sg160
g47
sg161
g47
sg162
g47
sg163
g47
sg164
g47
sg165
g47
sg166
g47
sg167
g47
sg168
g47
sg54
g5
(g55
g56
(dp781
g58
g59
stp782
Rp783
(dp784
g63
S'environ_items'
p785
sg65
g54
sbsg174
g47
sg175
g47
sg67
g59
sg176
g47
sg177
g47
sg178
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'CSF_prior_mni_to_t1'
p786
sg74
(dp787
sg76
g768
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g786
sg85
Nsg86
(lp788
sg88
Nsg89
Nsb(dp789
sg5
(g25
g7
Ntp790
Rp791
(dp792
g29
(dp793
sg31
g5
(g206
g7
Ntp794
Rp795
(dp796
g36
g37
(g210
tp797
Rp798
(dp799
g214
g47
sg43
g44
sg215
g47
sg216
g47
sg217
g47
sg218
g47
sg219
g47
sg220
g47
sbsg221
(lp800
g216
ag220
ag218
ag219
ag215
ag217
ag214
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp801
sg76
g768
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp802
sg88
Nsg89
Nsb(dp803
sg5
(g25
g7
Ntp804
Rp805
(dp806
g29
(dp807
sg31
g5
(g95
g7
Ntp808
Rp809
(dp810
g36
g37
(g99
tp811
Rp812
(dp813
g42
I00
sg103
g47
sg45
g104
sg49
g47
sg50
g47
sg105
g47
sg43
g44
sg52
g53
sg54
g5
(g55
g56
(dp814
g58
g59
stp815
Rp816
(dp817
g63
S'environ_items'
p818
sg65
g54
sbsg66
g47
sg67
g59
sg111
g47
sg112
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'overlap_CSF_map_with_prior'
p819
sg74
(dp820
sg76
g768
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g819
sg85
Nsg86
(lp821
sg88
Nsg89
Nsb(dp822
sg5
(g25
g7
Ntp823
Rp824
(dp825
g29
(dp826
sg31
g5
(g206
g7
Ntp827
Rp828
(dp829
g36
g37
(g210
tp830
Rp831
(dp832
g43
g44
sg238
g47
sg239
g47
sg240
g47
sg241
g47
sbsg221
(lp833
g240
ag238
ag241
ag239
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp834
sg76
g768
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp835
sg88
Nsg89
Nsb(dp836
sg5
(g25
g7
Ntp837
Rp838
(dp839
g29
(dp840
sg31
g5
(g95
g7
Ntp841
Rp842
(dp843
g36
g37
(g99
tp844
Rp845
(dp846
g42
I00
sg103
g47
sg45
g104
sg49
g47
sg50
g47
sg105
g47
sg43
g44
sg52
g53
sg54
g5
(g55
g56
(dp847
g58
g59
stp848
Rp849
(dp850
g63
S'environ_items'
p851
sg65
g54
sbsg66
g47
sg67
g59
sg111
g47
sg112
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'CSF_mask'
p852
sg74
(dp853
sg76
g768
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g852
sg85
Nsg86
(lp854
sg88
Nsg89
Nsb(dp855
ssg247
(dp856
sg249
(dp857
g752
(dp858
g824
(dp859
g253
(lp860
(g49
g241
tp861
assg838
(dp862
g253
(lp863
(g49
g66
tp864
asssg772
(dp865
g824
(dp866
g253
(lp867
(g49
g240
tp868
assg805
(dp869
g253
(lp870
(g49
g112
tp871
assg838
(dp872
g253
(lp873
(g49
g112
tp874
asssg791
(dp875
g772
(dp876
g253
(lp877
(g216
g66
tp878
a(g218
g132
tp879
a(g217
g130
tp880
assg805
(dp881
g253
(lp882
(g219
g66
tp883
assg752
(dp884
g253
(lp885
((g220
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p886
(ttp887
g45
tp888
asssg805
(dp889
g752
(dp890
g253
(lp891
(g49
g66
tp892
assg824
(dp893
g253
(lp894
(g49
g238
tp895
asssg824
(dp896
sg838
(dp897
g824
(dp898
g253
(lp899
(g49
g239
tp900
assssg295
g857
sg296
(dp901
g752
(dp902
g791
g884
sg805
g890
ssg772
(dp903
g791
g876
ssg791
(dp904
sg805
(dp905
g791
g881
sg772
g869
ssg824
(dp906
g772
g866
sg838
g898
sg805
g893
sg752
g859
ssg838
(dp907
g752
g862
sg772
g872
sssg304
g857
sbsg65
g768
sg76
g305
sg84
g768
sg85
g306
((lp908
(lp909
g309
ag306
((lp910
(lp911
g312
ag309
aa(lp912
g314
ag315
aa(lp913
g317
ag318
aa(lp914
g320
ag321
aa(lp915
g323
ag324
aa(lp916
g326
ag327
aa(lp917
g329
ag330
aa(lp918
g332
ag333
aatp919
Rp920
aa(lp921
g337
ag306
((lp922
(lp923
g312
ag337
aa(lp924
g341
ag342
aa(lp925
g344
ag345
aa(lp926
g347
ag348
aa(lp927
g350
ag351
aa(lp928
g353
ag354
aa(lp929
g356
ag357
aa(lp930
g359
ag360
aa(lp931
g362
ag363
aa(lp932
g365
ag366
aa(lp933
g368
ag369
aa(lp934
g371
ag372
aa(lp935
g374
ag375
aa(lp936
g377
ag378
aa(lp937
g380
ag381
aa(lp938
g383
ag384
aa(lp939
g386
ag387
aa(lp940
g389
ag390
aa(lp941
g392
ag393
aatp942
Rp943
aa(lp944
g397
ag306
((lp945
(lp946
g312
ag397
aa(lp947
g401
ag402
aatp948
Rp949
aatp950
Rp951
sg89
Nsb(dp952
sg5
(g25
g7
Ntp953
Rp954
(dp955
g29
(dp956
sg31
g5
(g206
g7
Ntp957
Rp958
(dp959
g36
g37
(g210
tp960
Rp961
(dp962
g43
g44
sS'gm_threshold'
p963
(lp964
F0.7
asbsg221
(lp965
g963
asg223
I01
sbsg72
Nsg65
g963
sg74
(dp966
sg76
g305
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
(g963
(lp967
F0.7
atp968
sg83
I00
sg84
g963
sg85
Nsg86
(lp969
sg88
Nsg89
Nsb(dp970
ssg247
(dp971
sg249
(dp972
g19
(dp973
g447
(dp974
g253
(lp975
(S'outputspec.tissueprior_mni2t1'
p976
g463
tp977
a(S'outputspec.segment_combo'
p978
g465
tp979
a(S'outputspec.segment_bin'
p980
g460
tp981
a(S'outputspec.segment_mask'
p982
g466
tp983
asssg409
(dp984
g477
(dp985
g253
(lp986
(g218
S'inputspec.brain'
p987
tp988
a(g418
S'inputspec.tissue_prior'
p989
tp990
a(g217
S'inputspec.standard2highres_mat'
p991
tp992
assg704
(dp993
g253
(lp994
(g218
g733
tp995
assg745
(dp996
g253
(lp997
(g218
g987
tp998
a(g420
g989
tp999
a(g217
g991
tp1000
assg19
(dp1001
g253
(lp1002
(g218
g987
tp1003
a(g422
g989
tp1004
a(g217
g991
tp1005
asssg429
(dp1006
g745
(dp1007
g253
(lp1008
(g438
S'inputspec.threshold'
p1009
tp1010
asssg447
(dp1011
sg477
(dp1012
g447
(dp1013
g253
(lp1014
(g976
g471
tp1015
a(g978
g457
tp1016
a(g980
g469
tp1017
a(g982
g467
tp1018
asssg686
(dp1019
g19
(dp1020
g253
(lp1021
(g695
g1009
tp1022
asssg704
(dp1023
g477
(dp1024
g253
(lp1025
((g462
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1026
(ttp1027
S'inputspec.probability_map'
p1028
tp1029
assg19
(dp1030
g253
(lp1031
((g462
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1032
(ttp1033
g1028
tp1034
assg447
(dp1035
g253
(lp1036
(g462
g462
tp1037
a(g458
g458
tp1038
a(g456
g456
tp1039
a(g470
g470
tp1040
assg745
(dp1041
g253
(lp1042
((g462
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1043
(ttp1044
g1028
tp1045
asssg745
(dp1046
g447
(dp1047
g253
(lp1048
(g976
g459
tp1049
a(g978
g464
tp1050
a(g980
g461
tp1051
a(g982
g468
tp1052
asssg954
(dp1053
g477
(dp1054
g253
(lp1055
(g963
g1009
tp1056
assssg295
g972
sg296
(dp1057
g19
(dp1058
g704
g1030
sg409
g1001
sg686
g1020
ssg409
(dp1059
sg429
(dp1060
sg447
(dp1061
g477
g1013
sg704
g1035
sg745
g1047
sg19
g974
ssg477
(dp1062
g704
g1024
sg409
g985
sg954
g1054
ssg686
(dp1063
sg704
(dp1064
g409
g993
ssg745
(dp1065
g704
g1041
sg409
g996
sg429
g1007
ssg954
(dp1066
ssg304
g972
sbsg65
g305
sg76
S'resting_preproc_8_446561464'
p1067
sg84
g305
sg85
g306
((lp1068
(lp1069
g309
ag306
((lp1070
(lp1071
g312
ag309
aa(lp1072
g314
ag315
aa(lp1073
g317
ag318
aa(lp1074
g320
ag321
aa(lp1075
g323
ag324
aa(lp1076
g326
ag327
aa(lp1077
g329
ag330
aa(lp1078
g332
ag333
aatp1079
Rp1080
aa(lp1081
g337
ag306
((lp1082
(lp1083
g312
ag337
aa(lp1084
g341
ag342
aa(lp1085
g344
ag345
aa(lp1086
g347
ag348
aa(lp1087
g350
ag351
aa(lp1088
g353
ag354
aa(lp1089
g356
ag357
aa(lp1090
g359
ag360
aa(lp1091
g362
ag363
aa(lp1092
g365
ag366
aa(lp1093
g368
ag369
aa(lp1094
g371
ag372
aa(lp1095
g374
ag375
aa(lp1096
g377
ag378
aa(lp1097
g380
ag381
aa(lp1098
g383
ag384
aa(lp1099
g386
ag387
aa(lp1100
g389
ag390
aa(lp1101
g392
ag393
aatp1102
Rp1103
aa(lp1104
g397
ag306
((lp1105
(lp1106
g312
ag397
aa(lp1107
g401
ag402
aatp1108
Rp1109
aatp1110
Rp1111
sg89
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g25
g7
Ntp1122
Rp1123
(dp1124
g29
(dp1125
sg31
g5
(g121
g7
Ntp1126
Rp1127
(dp1128
g36
g37
(g125
tp1129
Rp1130
(dp1131
g129
g47
sg43
g44
sg130
g47
sg131
g47
sg132
g47
sg133
g47
sg134
g47
sg135
g47
sg137
g47
sg138
g47
sg139
g47
sg140
g47
sg141
g47
sg142
g47
sg143
g47
sg144
g47
sg145
g47
sg146
g47
sg66
g47
sg147
g47
sg148
g47
sg149
g47
sg150
g47
sg42
I00
sg151
g47
sg152
g47
sg50
g47
sg153
g47
sg154
g47
sg52
g53
sg155
g47
sg156
g47
sg157
g47
sg158
g47
sg159
g47
sg49
g47
sg160
g47
sg161
g47
sg162
g47
sg163
g47
sg164
g47
sg165
g47
sg166
g47
sg167
g47
sg168
S'corratio'
p1132
sg54
g5
(g55
g56
(dp1133
g58
g59
stp1134
Rp1135
(dp1136
g63
S'environ_items'
p1137
sg65
g54
sbsg174
g47
sg175
g47
sg67
g59
sg176
g47
sg177
g47
sg178
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'linear_reg_0'
p1138
sg74
(dp1139
sg76
S'anat_mni_fnirt_register_0'
p1140
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1138
sg85
Nsg86
(lp1141
sg88
Nsg89
Nsb(dp1142
sg5
(g25
g7
Ntp1143
Rp1144
(dp1145
g29
(dp1146
sg31
g5
(g206
g7
Ntp1147
Rp1148
(dp1149
g36
g37
(g210
tp1150
Rp1151
(dp1152
g43
g44
sS'output_brain'
p1153
g47
sS'nonlinear_xfm'
p1154
g47
sS'invlinear_xfm'
p1155
g47
sS'linear_xfm'
p1156
g47
sbsg221
(lp1157
g1153
ag1156
ag1155
ag1154
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp1158
sg76
g1140
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp1159
sg88
Nsg89
Nsb(dp1160
sg5
(g25
g7
Ntp1161
Rp1162
(dp1163
g29
(dp1164
sg31
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1165
g7
Ntp1166
Rp1167
(dp1168
g36
g37
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1169
tp1170
Rp1171
(dp1172
g42
I00
sS'supersample'
p1173
g47
sg66
g47
sS'superlevel'
p1174
g47
sg49
g47
sg161
g47
sg50
g47
sg135
g47
sS'field_file'
p1175
g47
sS'ref_file'
p1176
g47
sg52
g53
sg54
g5
(g55
g56
(dp1177
g58
g59
stp1178
Rp1179
(dp1180
g63
S'environ_items'
p1181
sg65
g54
sbsS'premat'
p1182
g47
sS'mask_file'
p1183
g47
sg67
g59
sS'relwarp'
p1184
g47
sS'abswarp'
p1185
g47
sg43
g44
sS'postmat'
p1186
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'brain_warp'
p1187
sg74
(dp1188
sg76
g1140
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1187
sg85
Nsg86
(lp1189
sg88
Nsg89
Nsb(dp1190
sg5
(g25
g7
Ntp1191
Rp1192
(dp1193
g29
(dp1194
sg31
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1195
g7
Ntp1196
Rp1197
(dp1198
g36
g37
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1199
tp1200
Rp1201
(dp1202
g43
g44
sS'derive_from_ref'
p1203
g47
sS'in_intensitymap_file'
p1204
g47
sS'modulatedref_file'
p1205
g47
sS'refmask_val'
p1206
g47
sS'hessian_precision'
p1207
g47
sS'in_fwhm'
p1208
g47
sS'skip_implicit_in_masking'
p1209
g47
sS'inmask_file'
p1210
g47
sS'refmask_file'
p1211
g47
sS'inwarp_file'
p1212
g47
sS'skip_lambda_ssq'
p1213
g47
sS'intensity_mapping_model'
p1214
g47
sS'affine_file'
p1215
g47
sS'apply_inmask'
p1216
g47
sS'spline_order'
p1217
g47
sS'apply_refmask'
p1218
g47
sS'subsampling_scheme'
p1219
g47
sg66
g47
sS'warped_file'
p1220
g47
sS'skip_refmask'
p1221
g47
sg42
I00
sS'ref_fwhm'
p1222
g47
sS'inmask_val'
p1223
g47
sS'config_file'
p1224
g47
sg1175
g47
sg50
g47
sS'apply_intensity_mapping'
p1225
g47
sS'regularization_lambda'
p1226
g47
sg52
g53
sS'regularization_model'
p1227
g47
sS'jacobian_range'
p1228
g47
sS'out_intensitymap_file'
p1229
g47
sS'skip_implicit_ref_masking'
p1230
g47
sg1176
g47
sS'skip_inmask'
p1231
g47
sS'fieldcoeff_file'
p1232
I01
sS'warp_resolution'
p1233
g47
sS'jacobian_file'
p1234
I01
sg54
g5
(g55
g56
(dp1235
g58
g59
stp1236
Rp1237
(dp1238
g63
S'environ_items'
p1239
sg65
g54
sbsS'bias_regularization_lambda'
p1240
g47
sg67
g59
sS'skip_intensity_mapping'
p1241
g47
sS'log_file'
p1242
g47
sS'biasfield_resolution'
p1243
g47
sS'intensity_mapping_order'
p1244
g47
sS'max_nonlin_iter'
p1245
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'nonlinear_reg_1'
p1246
sg74
(dp1247
sg76
g1140
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1246
sg85
Nsg86
(lp1248
sg88
Nsg89
Nsb(dp1249
sg5
(g25
g7
Ntp1250
Rp1251
(dp1252
g29
(dp1253
sg31
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1254
g7
Ntp1255
Rp1256
(dp1257
g36
g37
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1258
tp1259
Rp1260
(dp1261
g42
I00
sg43
g44
sg49
g47
sg50
g47
sg51
g47
sS'fix_scale_skew'
p1262
g47
sS'invert_xfm'
p1263
I01
sg52
g53
sS'concat_xfm'
p1264
g47
sg66
g47
sg67
g59
sg54
g5
(g55
g56
(dp1265
g58
g59
stp1266
Rp1267
(dp1268
g63
S'environ_items'
p1269
sg65
g54
sbsbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'inv_linear_reg0_xfm'
p1270
sg74
(dp1271
sg76
g1140
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1270
sg85
Nsg86
(lp1272
sg88
Nsg89
Nsb(dp1273
sg5
(g25
g7
Ntp1274
Rp1275
(dp1276
g29
(dp1277
sg31
g5
(g206
g7
Ntp1278
Rp1279
(dp1280
g36
g37
(g210
tp1281
Rp1282
(dp1283
S'fnirt_config'
p1284
S'T1_2_MNI152_2mm'
p1285
sg43
g44
sS'input_brain'
p1286
g47
sS'reference_skull'
p1287
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1288
sS'reference_brain'
p1289
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1290
sS'input_skull'
p1291
g47
sbsg221
(lp1292
g1286
ag1291
ag1289
ag1287
ag1284
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp1293
sg76
g1140
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp1294
sg88
Nsg89
Nsb(dp1295
ssg247
(dp1296
sg249
(dp1297
g1123
(dp1298
g1192
(dp1299
g253
(lp1300
(g164
g1215
tp1301
assg1144
(dp1302
g253
(lp1303
(g164
g1156
tp1304
assg1251
(dp1305
g253
(lp1306
(g164
g66
tp1307
asssg1144
(dp1308
sg1162
(dp1309
g1144
(dp1310
g253
(lp1311
(g49
g1153
tp1312
asssg1192
(dp1313
g1144
(dp1314
g253
(lp1315
(g1232
g1154
tp1316
assg1162
(dp1317
g253
(lp1318
(g1232
g1175
tp1319
asssg1251
(dp1320
g1144
(dp1321
g253
(lp1322
(g49
g1155
tp1323
asssg1275
(dp1324
g1123
(dp1325
g253
(lp1326
(g1286
g66
tp1327
a(g1289
g132
tp1328
assg1162
(dp1329
g253
(lp1330
(g1286
g66
tp1331
a(g1289
g1176
tp1332
assg1192
(dp1333
g253
(lp1334
(g1291
g66
tp1335
a(g1287
g1176
tp1336
a(g1284
g1224
tp1337
assssg295
g1297
sg296
(dp1338
g1123
(dp1339
g1275
g1325
ssg1144
(dp1340
g1192
g1314
sg1123
g1302
sg1162
g1310
sg1251
g1321
ssg1162
(dp1341
g1192
g1317
sg1275
g1329
ssg1192
(dp1342
g1123
g1299
sg1275
g1333
ssg1251
(dp1343
g1123
g1305
ssg1275
(dp1344
ssg304
g1297
sbsg65
g1140
sg76
g1067
sg84
g1140
sg85
g306
((lp1345
(lp1346
g309
ag306
((lp1347
(lp1348
g312
ag309
aa(lp1349
g314
ag315
aa(lp1350
g317
ag318
aa(lp1351
g320
ag321
aa(lp1352
g323
ag324
aa(lp1353
g326
ag327
aa(lp1354
g329
ag330
aa(lp1355
g332
ag333
aatp1356
Rp1357
aa(lp1358
g337
ag306
((lp1359
(lp1360
g312
ag337
aa(lp1361
g341
ag342
aa(lp1362
g344
ag345
aa(lp1363
g347
ag348
aa(lp1364
g350
ag351
aa(lp1365
g353
ag354
aa(lp1366
g356
ag357
aa(lp1367
g359
ag360
aa(lp1368
g362
ag363
aa(lp1369
g365
ag366
aa(lp1370
g368
ag369
aa(lp1371
g371
ag372
aa(lp1372
g374
ag375
aa(lp1373
g377
ag378
aa(lp1374
g380
ag381
aa(lp1375
g383
ag384
aa(lp1376
g386
ag387
aa(lp1377
g389
ag390
aa(lp1378
g392
ag393
aatp1379
Rp1380
aa(lp1381
g397
ag306
((lp1382
(lp1383
g312
ag397
aa(lp1384
g401
ag402
aatp1385
Rp1386
aatp1387
Rp1388
sg89
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g25
g7
Ntp1399
Rp1400
(dp1401
g29
(dp1402
sg31
g5
(cnipype.interfaces.utility
Function
p1403
g7
Ntp1404
Rp1405
(dp1406
S'_input_names'
p1407
(lp1408
S'overlay'
p1409
aS'underlay'
p1410
aS'png_name'
p1411
aS'cbar_name'
p1412
asg36
g37
(cnipype.interfaces.utility
FunctionInputSpec
p1413
tp1414
Rp1415
(dp1416
g42
I00
sg1411
S'MNI_edge_on_mean_func_mni_a.png'
p1417
sg1409
g47
sg1412
S'red'
p1418
sS'function_str'
p1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1420
sg1410
g47
sg43
g44
sbsS'_out'
p1421
(dp1422
g1411
NssS'_output_names'
p1423
(lp1424
g1411
asS'imports'
p1425
Nsbsg72
Nsg65
S'montage_a'
p1426
sg74
(dp1427
sg76
S'montage_mfi_0'
p1428
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1426
sg85
Nsg86
(lp1429
sg88
Nsg89
Nsb(dp1430
sg5
(g25
g7
Ntp1431
Rp1432
(dp1433
g29
(dp1434
sg31
g5
(g206
g7
Ntp1435
Rp1436
(dp1437
g36
g37
(g210
tp1438
Rp1439
(dp1440
g43
g44
sS'resampled_underlay'
p1441
g47
sS'axial_png'
p1442
g47
sS'sagittal_png'
p1443
g47
sS'resampled_overlay'
p1444
g47
sbsg221
(lp1445
g1442
ag1443
ag1441
ag1444
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp1446
sg76
g1428
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp1447
sg88
Nsg89
Nsb(dp1448
sg5
(g25
g7
Ntp1449
Rp1450
(dp1451
g29
(dp1452
sg31
g5
(g1403
g7
Ntp1453
Rp1454
(dp1455
g1407
(lp1456
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp1457
Rp1458
(dp1459
g42
I00
sg1411
S'MNI_edge_on_mean_func_mni_s.png'
p1460
sg1409
g47
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1461
sg1410
g47
sg43
g44
sbsg1421
(dp1462
g1411
Nssg1423
(lp1463
g1411
asg1425
Nsbsg72
Nsg65
S'montage_s'
p1464
sg74
(dp1465
sg76
g1428
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1464
sg85
Nsg86
(lp1466
sg88
Nsg89
Nsb(dp1467
sg5
(g25
g7
Ntp1468
Rp1469
(dp1470
g29
(dp1471
sg31
g5
(g206
g7
Ntp1472
Rp1473
(dp1474
g36
g37
(g210
tp1475
Rp1476
(dp1477
g43
g44
sg1410
g47
sg1409
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1478
sbsg221
(lp1479
g1410
ag1409
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp1480
sg76
g1428
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp1481
sg88
Nsg89
Nsb(dp1482
sg5
(g25
g7
Ntp1483
Rp1484
(dp1485
g29
(dp1486
sg31
g5
(g1403
g7
Ntp1487
Rp1488
(dp1489
g1407
(lp1490
S'file_'
p1491
asg36
g37
(g1413
tp1492
Rp1493
(dp1494
g42
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1495
sg1491
g47
sg43
g44
sbsg1421
(dp1496
S'new_fname'
p1497
Nssg1423
(lp1498
g1497
asg1425
Nsbsg72
Nsg65
S'resample_u'
p1499
sg74
(dp1500
sg76
g1428
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1499
sg85
Nsg86
(lp1501
sg88
Nsg89
Nsb(dp1502
sg5
(g25
g7
Ntp1503
Rp1504
(dp1505
g29
(dp1506
sg31
g5
(g1403
g7
Ntp1507
Rp1508
(dp1509
g1407
(lp1510
g1491
asg36
g37
(g1413
tp1511
Rp1512
(dp1513
g42
I00
sg1419
g1495
sg1491
g47
sg43
g44
sbsg1421
(dp1514
g1497
Nssg1423
(lp1515
g1497
asg1425
Nsbsg72
Nsg79
I00
sg74
(dp1516
sg81
Nsg78
Nsg88
Nsg65
S'resample_o'
p1517
sg76
g1428
sg80
I00
sg82
Nsg83
I00
sg84
g1517
sg85
Nsg86
(lp1518
sg89
Nsb(dp1519
ssg247
(dp1520
sg249
(dp1521
g1400
(dp1522
g1432
(dp1523
g253
(lp1524
(g1411
g1442
tp1525
asssg1432
(dp1526
sg1450
(dp1527
g1432
(dp1528
g253
(lp1529
(g1411
g1443
tp1530
asssg1469
(dp1531
g1484
(dp1532
g253
(lp1533
(g1410
g1491
tp1534
assg1504
(dp1535
g253
(lp1536
(g1409
g1491
tp1537
asssg1484
(dp1538
g1432
(dp1539
g253
(lp1540
(g1497
g1441
tp1541
assg1400
(dp1542
g253
(lp1543
(g1497
g1410
tp1544
assg1450
(dp1545
g253
(lp1546
(g1497
g1410
tp1547
asssg1504
(dp1548
g1432
(dp1549
g253
(lp1550
(g1497
g1444
tp1551
assg1400
(dp1552
g253
(lp1553
(g1497
g1409
tp1554
assg1450
(dp1555
g253
(lp1556
(g1497
g1409
tp1557
assssg295
g1521
sg296
(dp1558
g1400
(dp1559
g1484
g1542
sg1504
g1552
ssg1432
(dp1560
g1450
g1528
sg1484
g1539
sg1504
g1549
sg1400
g1523
ssg1450
(dp1561
g1484
g1545
sg1504
g1555
ssg1469
(dp1562
sg1484
(dp1563
g1469
g1532
ssg1504
(dp1564
g1469
g1535
sssg304
g1521
sbsg65
g1428
sg76
g1067
sg84
g1428
sg85
g306
((lp1565
(lp1566
g309
ag306
((lp1567
(lp1568
g312
ag309
aa(lp1569
g314
ag315
aa(lp1570
g317
ag318
aa(lp1571
g320
ag321
aa(lp1572
g323
ag324
aa(lp1573
g326
ag327
aa(lp1574
g329
ag330
aa(lp1575
g332
ag333
aatp1576
Rp1577
aa(lp1578
g337
ag306
((lp1579
(lp1580
g312
ag337
aa(lp1581
g341
ag342
aa(lp1582
g344
ag345
aa(lp1583
g347
ag348
aa(lp1584
g350
ag351
aa(lp1585
g353
ag354
aa(lp1586
g356
ag357
aa(lp1587
g359
ag360
aa(lp1588
g362
ag363
aa(lp1589
g365
ag366
aa(lp1590
g368
ag369
aa(lp1591
g371
ag372
aa(lp1592
g374
ag375
aa(lp1593
g377
ag378
aa(lp1594
g380
ag381
aa(lp1595
g383
ag384
aa(lp1596
g386
ag387
aa(lp1597
g389
ag390
aa(lp1598
g392
ag393
aatp1599
Rp1600
aa(lp1601
g397
ag306
((lp1602
(lp1603
g312
ag397
aa(lp1604
g401
ag402
aatp1605
Rp1606
aatp1607
Rp1608
sg89
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g25
g7
Ntp1619
Rp1620
(dp1621
g29
(dp1622
sg31
g5
(g206
g7
Ntp1623
Rp1624
(dp1625
g36
g37
(g210
tp1626
Rp1627
(dp1628
g43
g44
sg1441
g47
sg1442
g47
sg1443
g47
sg1444
g47
sbsg221
(lp1629
g1442
ag1443
ag1441
ag1444
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp1630
sg76
S'montage_snr_0'
p1631
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp1632
sg88
Nsg89
Nsb(dp1633
sg5
(g25
g7
Ntp1634
Rp1635
(dp1636
g29
(dp1637
sg31
g5
(g1403
g7
Ntp1638
Rp1639
(dp1640
g1407
(lp1641
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp1642
Rp1643
(dp1644
g42
I00
sg1411
S'snr_a.png'
p1645
sg1409
g47
sg1412
S'red_to_blue'
p1646
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1647
sg1410
g47
sg43
g44
sbsg1421
(dp1648
g1411
Nssg1423
(lp1649
g1411
asg1425
Nsbsg72
Nsg65
g1426
sg74
(dp1650
sg76
g1631
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1426
sg85
Nsg86
(lp1651
sg88
Nsg89
Nsb(dp1652
sg5
(g25
g7
Ntp1653
Rp1654
(dp1655
g29
(dp1656
sg31
g5
(g1403
g7
Ntp1657
Rp1658
(dp1659
g1407
(lp1660
g1491
asg36
g37
(g1413
tp1661
Rp1662
(dp1663
g42
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1664
sg1491
g47
sg43
g44
sbsg1421
(dp1665
g1497
Nssg1423
(lp1666
g1497
asg1425
Nsbsg72
Nsg65
g1499
sg74
(dp1667
sg76
g1631
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1499
sg85
Nsg86
(lp1668
sg88
Nsg89
Nsb(dp1669
sg5
(g25
g7
Ntp1670
Rp1671
(dp1672
g29
(dp1673
sg31
g5
(g1403
g7
Ntp1674
Rp1675
(dp1676
g1407
(lp1677
g1491
asg36
g37
(g1413
tp1678
Rp1679
(dp1680
g42
I00
sg1419
g1664
sg1491
g47
sg43
g44
sbsg1421
(dp1681
g1497
Nssg1423
(lp1682
g1497
asg1425
Nsbsg72
Nsg79
I00
sg74
(dp1683
sg81
Nsg78
Nsg88
Nsg65
g1517
sg76
g1631
sg80
I00
sg82
Nsg83
I00
sg84
g1517
sg85
Nsg86
(lp1684
sg89
Nsb(dp1685
sg5
(g25
g7
Ntp1686
Rp1687
(dp1688
g29
(dp1689
sg31
g5
(g1403
g7
Ntp1690
Rp1691
(dp1692
g1407
(lp1693
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp1694
Rp1695
(dp1696
g42
I00
sg1411
S'snr_s.png'
p1697
sg1409
g47
sg1412
g1646
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1698
sg1410
g47
sg43
g44
sbsg1421
(dp1699
g1411
Nssg1423
(lp1700
g1411
asg1425
Nsbsg72
Nsg65
g1464
sg74
(dp1701
sg76
g1631
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1464
sg85
Nsg86
(lp1702
sg88
Nsg89
Nsb(dp1703
sg5
(g25
g7
Ntp1704
Rp1705
(dp1706
g29
(dp1707
sg31
g5
(g206
g7
Ntp1708
Rp1709
(dp1710
g36
g37
(g210
tp1711
Rp1712
(dp1713
g43
g44
sg1410
g47
sg1409
g47
sbsg221
(lp1714
g1410
ag1409
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp1715
sg76
g1631
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp1716
sg88
Nsg89
Nsb(dp1717
ssg247
(dp1718
sg249
(dp1719
g1620
(dp1720
sg1635
(dp1721
g1620
(dp1722
g253
(lp1723
(g1411
g1442
tp1724
asssg1654
(dp1725
g1620
(dp1726
g253
(lp1727
(g1497
g1441
tp1728
assg1635
(dp1729
g253
(lp1730
(g1497
g1410
tp1731
assg1687
(dp1732
g253
(lp1733
(g1497
g1410
tp1734
asssg1671
(dp1735
g1620
(dp1736
g253
(lp1737
(g1497
g1444
tp1738
assg1635
(dp1739
g253
(lp1740
(g1497
g1409
tp1741
assg1687
(dp1742
g253
(lp1743
(g1497
g1409
tp1744
asssg1687
(dp1745
g1620
(dp1746
g253
(lp1747
(g1411
g1443
tp1748
asssg1705
(dp1749
g1671
(dp1750
g253
(lp1751
(g1409
g1491
tp1752
assg1654
(dp1753
g253
(lp1754
(g1410
g1491
tp1755
assssg295
g1719
sg296
(dp1756
g1620
(dp1757
g1671
g1736
sg1654
g1726
sg1687
g1746
sg1635
g1722
ssg1635
(dp1758
g1671
g1739
sg1654
g1729
ssg1654
(dp1759
g1705
g1753
ssg1671
(dp1760
g1705
g1750
ssg1687
(dp1761
g1671
g1742
sg1654
g1732
ssg1705
(dp1762
ssg304
g1719
sbsg65
g1631
sg76
g1067
sg84
g1631
sg85
g306
((lp1763
(lp1764
g309
ag306
((lp1765
(lp1766
g312
ag309
aa(lp1767
g314
ag315
aa(lp1768
g317
ag318
aa(lp1769
g320
ag321
aa(lp1770
g323
ag324
aa(lp1771
g326
ag327
aa(lp1772
g329
ag330
aa(lp1773
g332
ag333
aatp1774
Rp1775
aa(lp1776
g337
ag306
((lp1777
(lp1778
g312
ag337
aa(lp1779
g341
ag342
aa(lp1780
g344
ag345
aa(lp1781
g347
ag348
aa(lp1782
g350
ag351
aa(lp1783
g353
ag354
aa(lp1784
g356
ag357
aa(lp1785
g359
ag360
aa(lp1786
g362
ag363
aa(lp1787
g365
ag366
aa(lp1788
g368
ag369
aa(lp1789
g371
ag372
aa(lp1790
g374
ag375
aa(lp1791
g377
ag378
aa(lp1792
g380
ag381
aa(lp1793
g383
ag384
aa(lp1794
g386
ag387
aa(lp1795
g389
ag390
aa(lp1796
g392
ag393
aatp1797
Rp1798
aa(lp1799
g397
ag306
((lp1800
(lp1801
g312
ag397
aa(lp1802
g401
ag402
aatp1803
Rp1804
aatp1805
Rp1806
sg89
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g25
g7
Ntp1810
Rp1811
(dp1812
g29
(dp1813
sg31
g5
(g1165
g7
Ntp1814
Rp1815
(dp1816
g36
g37
(g1169
tp1817
Rp1818
(dp1819
g42
I00
sg1173
g47
sg66
g47
sg1174
g47
sg49
g47
sg161
g47
sg50
g47
sg135
g47
sg1175
g47
sg1176
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg52
g53
sg54
g5
(g55
g56
(dp1821
g58
g59
stp1822
Rp1823
(dp1824
g63
S'environ_items'
p1825
sg65
g54
sbsg1182
g47
sg1183
g47
sg67
g59
sg1184
g47
sg1185
g47
sg43
g44
sg1186
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'mean_func_fsl_warp_0'
p1826
sg74
(dp1827
sg76
g1067
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1826
sg85
Nsg86
(lp1828
sg88
Nsg89
Nsbg49
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g25
g7
Ntp1831
Rp1832
(dp1833
g29
(dp1834
sg31
g5
(g1403
g7
Ntp1835
Rp1836
(dp1837
g1407
(lp1838
S'motion_parameters'
p1839
asg36
g37
(g1413
tp1840
Rp1841
(dp1842
g42
I00
sg1419
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g47
sg43
g44
sbsg1421
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1423
(lp1847
g1845
ag1846
asg1425
Nsbsg72
Nsg65
S'motion_plt_0'
p1848
sg74
(dp1849
sg76
g1067
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1848
sg85
Nsg86
(lp1850
sg88
Nsg89
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g25
g7
Ntp1853
Rp1854
(dp1855
g29
(dp1856
sg31
g5
(g1403
g7
Ntp1857
Rp1858
(dp1859
g1407
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg36
g37
(g1413
tp1864
Rp1865
(dp1866
g42
I00
sg43
g44
sg1861
g47
sg1419
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g47
sbsg1421
(dp1869
S'hist_path'
p1870
Nssg1423
(lp1871
g1870
asg1425
Nsbsg72
Nsg65
S'fd_plot_0'
p1872
sg74
(dp1873
sg76
g1067
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1872
sg85
Nsg86
(lp1874
sg88
Nsg89
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g25
g7
Ntp1884
Rp1885
(dp1886
g29
(dp1887
sg31
g5
(g1403
g7
Ntp1888
Rp1889
(dp1890
g1407
(lp1891
g66
asg36
g37
(g1413
tp1892
Rp1893
(dp1894
g42
I00
sg43
g44
sg1419
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p1895
sg66
g47
sbsg1421
(dp1896
g49
Nssg1423
(lp1897
g49
asg1425
Nsbsg72
Nsg65
S'calculate_FD'
p1898
sg74
(dp1899
sg76
S'gen_motion_stats_0'
p1900
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1898
sg85
Nsg86
(lp1901
sg88
Nsg89
Nsb(dp1902
sg5
(g25
g7
Ntp1903
Rp1904
(dp1905
g29
(dp1906
sg31
g5
(g1403
g7
Ntp1907
Rp1908
(dp1909
g1407
(lp1910
g66
asg36
g37
(g1413
tp1911
Rp1912
(dp1913
g42
I00
sg43
g44
sg1419
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p1914
sg66
g47
sbsg1421
(dp1915
g49
Nssg1423
(lp1916
g49
asg1425
Nsbsg72
Nsg65
S'calculate_FDJ'
p1917
sg74
(dp1918
sg76
g1900
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1917
sg85
Nsg86
(lp1919
sg88
Nsg89
Nsb(dp1920
sg5
(g25
g7
Ntp1921
Rp1922
(dp1923
g29
(dp1924
sg31
g5
(g206
g7
Ntp1925
Rp1926
(dp1927
g36
g37
(g210
tp1928
Rp1929
(dp1930
g43
g44
sS'frames_ex_1D'
p1931
g47
sS'FDJ_1D'
p1932
g47
sS'FD_1D'
p1933
g47
sS'frames_in_1D'
p1934
g47
sS'motion_params'
p1935
g47
sS'power_params'
p1936
g47
sbsg221
(lp1937
g1933
ag1932
ag1931
ag1934
ag1936
ag1935
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp1938
sg76
g1900
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp1939
sg88
Nsg89
Nsb(dp1940
sg5
(g25
g7
Ntp1941
Rp1942
(dp1943
g29
(dp1944
sg31
g5
(g206
g7
Ntp1945
Rp1946
(dp1947
g36
g37
(g210
tp1948
Rp1949
(dp1950
S'max_displacement'
p1951
g47
sg43
g44
sS'scan_id'
p1952
g47
sS'subject_id'
p1953
g47
sS'mask'
p1954
g47
sS'movement_parameters'
p1955
g47
sS'oned_matrix_save'
p1956
g47
sS'motion_correct'
p1957
g47
sbsg221
(lp1958
g1953
ag1952
ag1955
ag1951
ag1957
ag1954
ag1956
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp1959
sg76
g1900
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp1960
sg88
Nsg89
Nsb(dp1961
sg5
(g25
g7
Ntp1962
Rp1963
(dp1964
g29
(dp1965
sg31
g5
(g1403
g7
Ntp1966
Rp1967
(dp1968
g1407
(lp1969
g66
ag220
aS'exclude_list'
p1970
asg36
g37
(g1413
tp1971
Rp1972
(dp1973
g42
I00
sg1970
g47
sg1419
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1974
sg66
g47
sg220
g47
sg43
g44
sbsg1421
(dp1975
g49
Nssg1423
(lp1976
g49
asg1425
Nsbsg72
Nsg65
S'include_frames'
p1977
sg74
(dp1978
sg76
g1900
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1977
sg85
Nsg86
(lp1979
sg88
Nsg89
Nsb(dp1980
sg5
(g25
g7
Ntp1981
Rp1982
(dp1983
g29
(dp1984
sg31
g5
(g1403
g7
Ntp1985
Rp1986
(dp1987
g1407
(lp1988
g66
ag220
aS'frames_before'
p1989
aS'frames_after'
p1990
asg36
g37
(g1413
tp1991
Rp1992
(dp1993
g42
I00
sg1990
g47
sg1419
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1994
sg66
g47
sg220
g47
sg43
g44
sg1989
g47
sbsg1421
(dp1995
g49
Nssg1423
(lp1996
g49
asg1425
Nsbsg72
Nsg65
S'exclude_frames'
p1997
sg74
(dp1998
sg76
g1900
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1997
sg85
Nsg86
(lp1999
sg88
Nsg89
Nsb(dp2000
sg5
(g25
g7
Ntp2001
Rp2002
(dp2003
g29
(dp2004
sg31
g5
(g1403
g7
Ntp2005
Rp2006
(dp2007
g1407
(lp2008
S'rest'
p2009
ag1954
asg36
g37
(g1413
tp2010
Rp2011
(dp2012
g42
I00
sg1954
g47
sg43
g44
sg1419
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p2013
sg2009
g47
sbsg1421
(dp2014
g49
Nssg1423
(lp2015
g49
asg1425
Nsbsg72
Nsg65
S'cal_DVARS'
p2016
sg74
(dp2017
sg76
g1900
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g2016
sg85
Nsg86
(lp2018
sg88
Nsg89
Nsb(dp2019
sg5
(g25
g7
Ntp2020
Rp2021
(dp2022
g29
(dp2023
sg31
g5
(g1403
g7
Ntp2024
Rp2025
(dp2026
g1407
(lp2027
g1953
ag1952
ag1933
ag1932
ag220
aS'DVARS'
p2028
asg36
g37
(g1413
tp2029
Rp2030
(dp2031
g42
I00
sg43
g44
sg1952
g47
sg1953
g47
sg2028
g47
sg1419
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p2032
sg1932
g47
sg1933
g47
sg220
g47
sbsg1421
(dp2033
g49
Nssg1423
(lp2034
g49
asg1425
Nsbsg72
Nsg65
S'calc_power_parameters'
p2035
sg74
(dp2036
sg76
g1900
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g2035
sg85
Nsg86
(lp2037
sg88
Nsg89
Nsb(dp2038
sg5
(g25
g7
Ntp2039
Rp2040
(dp2041
g29
(dp2042
sg31
g5
(g1403
g7
Ntp2043
Rp2044
(dp2045
g1407
(lp2046
g1953
ag1952
ag1955
ag1951
asg36
g37
(g1413
tp2047
Rp2048
(dp2049
g42
I00
sg1951
g47
sg1952
g47
sg1953
g47
sg1419
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p2050
sg1955
g47
sg43
g44
sbsg1421
(dp2051
g49
Nssg1423
(lp2052
g49
asg1425
Nsbsg72
Nsg65
S'calc_motion_parameters'
p2053
sg74
(dp2054
sg76
g1900
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g2053
sg85
Nsg86
(lp2055
sg88
Nsg89
Nsb(dp2056
sg5
(g25
g7
Ntp2057
Rp2058
(dp2059
g29
(dp2060
sg31
g5
(g206
g7
Ntp2061
Rp2062
(dp2063
g36
g37
(g210
tp2064
Rp2065
(dp2066
g220
(lp2067
F0.2
asg43
g44
sS'remove_frames_before'
p2068
I1
sS'remove_frames_after'
p2069
I2
sbsg221
(lp2070
g220
ag2068
ag2069
asg223
I01
sbsg72
Nsg65
S'scrubbing_input'
p2071
sg74
(dp2072
sg76
g1900
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
(g220
(lp2073
F0.2
atp2074
sg83
I00
sg84
g2071
sg85
Nsg86
(lp2075
sg88
Nsg89
Nsb(dp2076
ssg247
(dp2077
sg249
(dp2078
g1885
(dp2079
g1922
(dp2080
g253
(lp2081
(g49
g1933
tp2082
assg2021
(dp2083
g253
(lp2084
(g49
g1933
tp2085
assg1963
(dp2086
g253
(lp2087
(g49
g66
tp2088
assg1982
(dp2089
g253
(lp2090
(g49
g66
tp2091
asssg1904
(dp2092
g1922
(dp2093
g253
(lp2094
(g49
g1932
tp2095
assg2021
(dp2096
g253
(lp2097
(g49
g1932
tp2098
asssg1922
(dp2099
sg1942
(dp2100
g2040
(dp2101
g253
(lp2102
(g1953
g1953
tp2103
a(g1952
g1952
tp2104
a(g1955
g1955
tp2105
a(g1951
g1951
tp2106
assg1885
(dp2107
g253
(lp2108
(g1955
g66
tp2109
assg2021
(dp2110
g253
(lp2111
(g1953
g1953
tp2112
a(g1952
g1952
tp2113
assg2002
(dp2114
g253
(lp2115
(g1957
g2009
tp2116
a(g1954
g1954
tp2117
assg1904
(dp2118
g253
(lp2119
(g1956
g66
tp2120
asssg1963
(dp2121
g1922
(dp2122
g253
(lp2123
(g49
g1934
tp2124
asssg1982
(dp2125
g1922
(dp2126
g253
(lp2127
(g49
g1931
tp2128
assg1963
(dp2129
g253
(lp2130
(g49
g1970
tp2131
asssg2002
(dp2132
g2021
(dp2133
g253
(lp2134
(g49
g2028
tp2135
asssg2021
(dp2136
g1922
(dp2137
g253
(lp2138
(g49
g1936
tp2139
asssg2040
(dp2140
g1922
(dp2141
g253
(lp2142
(g49
g1935
tp2143
asssg2058
(dp2144
g1982
(dp2145
g253
(lp2146
(g220
g220
tp2147
a(g2068
g1989
tp2148
a(g2069
g1990
tp2149
assg1963
(dp2150
g253
(lp2151
(g220
g220
tp2152
assg2021
(dp2153
g253
(lp2154
(g220
g220
tp2155
assssg295
g2078
sg296
(dp2156
g1885
(dp2157
g1942
g2107
ssg1904
(dp2158
g1942
g2118
ssg1922
(dp2159
g1885
g2080
sg1904
g2093
sg2021
g2137
sg1982
g2126
sg2040
g2141
sg1963
g2122
ssg1942
(dp2160
sg1963
(dp2161
g1885
g2086
sg2058
g2150
sg1982
g2129
ssg1982
(dp2162
g1885
g2089
sg2058
g2145
ssg2002
(dp2163
g1942
g2114
ssg2021
(dp2164
g1904
g2096
sg1885
g2083
sg1942
g2110
sg2058
g2153
sg2002
g2133
ssg2040
(dp2165
g1942
g2101
ssg2058
(dp2166
ssg304
g2078
sbsg65
g1900
sg76
g1067
sg84
g1900
sg85
g306
((lp2167
(lp2168
g309
ag306
((lp2169
(lp2170
g312
ag309
aa(lp2171
g314
ag315
aa(lp2172
g317
ag318
aa(lp2173
g320
ag321
aa(lp2174
g323
ag324
aa(lp2175
g326
ag327
aa(lp2176
g329
ag330
aa(lp2177
g332
ag333
aatp2178
Rp2179
aa(lp2180
g337
ag306
((lp2181
(lp2182
g312
ag337
aa(lp2183
g341
ag342
aa(lp2184
g344
ag345
aa(lp2185
g347
ag348
aa(lp2186
g350
ag351
aa(lp2187
g353
ag354
aa(lp2188
g356
ag357
aa(lp2189
g359
ag360
aa(lp2190
g362
ag363
aa(lp2191
g365
ag366
aa(lp2192
g368
ag369
aa(lp2193
g371
ag372
aa(lp2194
g374
ag375
aa(lp2195
g377
ag378
aa(lp2196
g380
ag381
aa(lp2197
g383
ag384
aa(lp2198
g386
ag387
aa(lp2199
g389
ag390
aa(lp2200
g392
ag393
aatp2201
Rp2202
aa(lp2203
g397
ag306
((lp2204
(lp2205
g312
ag397
aa(lp2206
g401
ag402
aatp2207
Rp2208
aatp2209
Rp2210
sg89
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g25
g7
Ntp2224
Rp2225
(dp2226
g29
(dp2227
sg31
g5
(cnipype.interfaces.afni.preprocess
Refit
p2228
g7
Ntp2229
Rp2230
(dp2231
g36
g37
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2232
tp2233
Rp2234
(dp2235
g42
I00
sg43
g44
sS'deoblique'
p2236
I01
sg50
g47
sS'yorigin'
p2237
g47
sg52
g53
sg54
g5
(g55
g56
(dp2238
tp2239
Rp2240
(dp2241
g63
S'environ_items'
p2242
sg65
g54
sbsg66
g47
sS'xorigin'
p2243
g47
sS'zorigin'
p2244
g47
sbsg70
Nsg71
g53
sbsg72
Nsg79
I00
sg74
(dp2245
sg81
Nsg78
Nsg88
Nsg65
S'anat_deoblique'
p2246
sg76
S'anat_preproc_0'
p2247
sg80
I00
sg82
Nsg83
I00
sg84
g2246
sg85
Nsg86
(lp2248
sg89
Nsb(dp2249
sg5
(g25
g7
Ntp2250
Rp2251
(dp2252
g29
(dp2253
sg31
g5
(cnipype.interfaces.afni.preprocess
Calc
p2254
g7
Ntp2255
Rp2256
(dp2257
g36
g37
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2258
tp2259
Rp2260
(dp2261
S'stop_idx'
p2262
g47
sg42
I00
sg43
g44
sg49
g47
sS'expr'
p2263
S'a*step(b)'
p2264
sg50
g47
sS'outputtype'
p2265
S'NIFTI_GZ'
p2266
sS'in_file_b'
p2267
g47
sS'in_file_c'
p2268
g47
sS'in_file_a'
p2269
g47
sg54
g5
(g55
g56
(dp2270
tp2271
Rp2272
(dp2273
g63
S'environ_items'
p2274
sg65
g54
sbsS'single_idx'
p2275
g47
sS'other'
p2276
g47
sS'start_idx'
p2277
g47
sg52
g53
sbsS'_outputtype'
p2278
g2266
sg70
Nsg71
g53
sbsg72
Nsg79
I00
sg74
(dp2279
sg81
Nsg78
Nsg88
Nsg65
S'anat_brain_only'
p2280
sg76
g2247
sg80
I00
sg82
Nsg83
I00
sg84
g2280
sg85
Nsg86
(lp2281
sg89
Nsb(dp2282
sg5
(g25
g7
Ntp2283
Rp2284
(dp2285
g29
(dp2286
sg31
g5
(g206
g7
Ntp2287
Rp2288
(dp2289
g36
g37
(g210
tp2290
Rp2291
(dp2292
S'reorient'
p2293
g47
sg218
g47
sS'refit'
p2294
g47
sg43
g44
sS'skullstrip'
p2295
g47
sbsg221
(lp2296
g2294
ag2293
ag2295
ag218
asg223
I01
sbsg72
Nsg79
I00
sg74
(dp2297
sg81
Nsg78
Nsg88
Nsg65
g243
sg76
g2247
sg80
I00
sg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp2298
sg89
Nsb(dp2299
sg5
(g25
g7
Ntp2300
Rp2301
(dp2302
g29
(dp2303
sg31
g5
(g206
g7
Ntp2304
Rp2305
(dp2306
g36
g37
(g210
tp2307
Rp2308
(dp2309
g43
g44
sS'anat'
p2310
g47
sbsg221
(lp2311
g2310
asg223
I01
sbsg72
Nsg79
I00
sg74
(dp2312
sg81
Nsg78
Nsg88
Nsg65
g224
sg76
g2247
sg80
I00
sg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp2313
sg89
Nsb(dp2314
sg5
(g25
g7
Ntp2315
Rp2316
(dp2317
g29
(dp2318
sg31
g5
(cnipype.interfaces.afni.preprocess
Resample
p2319
g7
Ntp2320
Rp2321
(dp2322
g36
g37
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2323
tp2324
Rp2325
(dp2326
g42
I00
sg43
g44
sg49
g47
sg50
g47
sg2265
g2266
sS'resample_mode'
p2327
g47
sS'voxel_size'
p2328
g47
sg52
g53
sS'master'
p2329
g47
sg66
g47
sg54
g5
(g55
g56
(dp2330
tp2331
Rp2332
(dp2333
g63
S'environ_items'
p2334
sg65
g54
sbsS'orientation'
p2335
S'RPI'
p2336
sbsg2278
g2266
sg70
Nsg71
g53
sbsg72
Nsg79
I00
sg74
(dp2337
sg81
Nsg78
Nsg88
Nsg65
S'anat_reorient'
p2338
sg76
g2247
sg80
I00
sg82
Nsg83
I00
sg84
g2338
sg85
Nsg86
(lp2339
sg89
Nsb(dp2340
sg5
(g25
g7
Ntp2341
Rp2342
(dp2343
g29
(dp2344
sg31
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2345
g7
Ntp2346
Rp2347
(dp2348
g36
g37
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2349
tp2350
Rp2351
(dp2352
g42
I00
sg43
g44
sg49
g47
sg50
g47
sg2265
S'AFNI'
p2353
sg52
g53
sg54
g5
(g55
g56
(dp2354
tp2355
Rp2356
(dp2357
g63
S'environ_items'
p2358
sg65
g54
sbsg66
g47
sbsg2278
g2353
sg70
Nsg71
g53
sbsg72
Nsg79
I00
sg74
(dp2359
sg81
Nsg78
Nsg88
Nsg65
S'anat_skullstrip'
p2360
sg76
g2247
sg80
I00
sg82
Nsg83
I00
sg84
g2360
sg85
Nsg86
(lp2361
sg89
Nsb(dp2362
ssg249
(dp2363
g2225
(dp2364
g2316
(dp2365
g253
(lp2366
(g49
g66
tp2367
assg2284
(dp2368
g253
(lp2369
(g49
g2294
tp2370
asssg2251
(dp2371
g2284
(dp2372
g253
(lp2373
(g49
g218
tp2374
asssg2284
(dp2375
sg2301
(dp2376
g2225
(dp2377
g253
(lp2378
(g2310
g66
tp2379
asssg2316
(dp2380
g2284
(dp2381
g253
(lp2382
(g49
g2293
tp2383
assg2251
(dp2384
g253
(lp2385
(g49
g2269
tp2386
assg2342
(dp2387
g253
(lp2388
(g49
g66
tp2389
asssg2342
(dp2390
g2251
(dp2391
g253
(lp2392
(g49
g2267
tp2393
assg2284
(dp2394
g253
(lp2395
(g49
g2295
tp2396
assssg295
g2363
sg296
(dp2397
g2225
(dp2398
g2301
g2377
ssg2251
(dp2399
g2316
g2384
sg2342
g2391
ssg2284
(dp2400
g2225
g2368
sg2316
g2381
sg2342
g2394
sg2251
g2372
ssg2301
(dp2401
sg2316
(dp2402
g2225
g2365
ssg2342
(dp2403
g2316
g2387
sssg247
(dp2404
sg304
g2363
sbsg65
g2247
sg76
g1067
sg84
g2247
sg85
g306
((lp2405
(lp2406
g309
ag306
((lp2407
(lp2408
g312
ag309
aa(lp2409
g314
ag315
aa(lp2410
g317
ag318
aa(lp2411
g320
ag321
aa(lp2412
g323
ag324
aa(lp2413
g326
ag327
aa(lp2414
g329
ag330
aa(lp2415
g332
ag333
aatp2416
Rp2417
aa(lp2418
g337
ag306
((lp2419
(lp2420
g312
ag337
aa(lp2421
g341
ag342
aa(lp2422
g344
ag345
aa(lp2423
g347
ag348
aa(lp2424
g350
ag351
aa(lp2425
g353
ag354
aa(lp2426
g356
ag357
aa(lp2427
g359
ag360
aa(lp2428
g362
ag363
aa(lp2429
g365
ag366
aa(lp2430
g368
ag369
aa(lp2431
g371
ag372
aa(lp2432
g374
ag375
aa(lp2433
g377
ag378
aa(lp2434
g380
ag381
aa(lp2435
g383
ag384
aa(lp2436
g386
ag387
aa(lp2437
g389
ag390
aa(lp2438
g392
ag393
aatp2439
Rp2440
aa(lp2441
g397
ag306
((lp2442
(lp2443
g312
ag397
aa(lp2444
g401
ag402
aatp2445
Rp2446
aatp2447
Rp2448
sg89
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g25
g7
Ntp2459
Rp2460
(dp2461
g29
(dp2462
sg31
g5
(g206
g7
Ntp2463
Rp2464
(dp2465
g36
g37
(g210
tp2466
Rp2467
(dp2468
g43
g44
sS'func'
p2469
g47
sbsg221
(lp2470
g2469
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp2471
sg76
S'func_preproc_automask_0'
p2472
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp2473
sg88
Nsg89
Nsb(dp2474
sg5
(g25
g7
Ntp2475
Rp2476
(dp2477
g29
(dp2478
sg31
g5
(g2228
g7
Ntp2479
Rp2480
(dp2481
g36
g37
(g2232
tp2482
Rp2483
(dp2484
g42
I00
sg43
g44
sg2236
I01
sg50
g47
sg2237
g47
sg52
g53
sg54
g5
(g55
g56
(dp2485
tp2486
Rp2487
(dp2488
g63
S'environ_items'
p2489
sg65
g54
sbsg66
g47
sg2243
g47
sg2244
g47
sbsg70
Nsg71
g53
sbsg72
Nsg65
S'func_deoblique'
p2490
sg74
(dp2491
sg76
g2472
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g2490
sg85
Nsg86
(lp2492
sg88
Nsg89
Nsb(dp2493
sg5
(g25
g7
Ntp2494
Rp2495
(dp2496
g29
(dp2497
sg31
g5
(g2319
g7
Ntp2498
Rp2499
(dp2500
g36
g37
(g2323
tp2501
Rp2502
(dp2503
g42
I00
sg43
g44
sg49
g47
sg50
g47
sg2265
g2266
sg2327
g47
sg2328
g47
sg52
g53
sg2329
g47
sg66
g47
sg54
g5
(g55
g56
(dp2504
tp2505
Rp2506
(dp2507
g63
S'environ_items'
p2508
sg65
g54
sbsg2335
g2336
sbsg2278
g2266
sg70
Nsg71
g53
sbsg72
Nsg65
S'func_reorient'
p2509
sg74
(dp2510
sg76
g2472
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g2509
sg85
Nsg86
(lp2511
sg88
Nsg89
Nsb(dp2512
sg5
(g25
g7
Ntp2513
Rp2514
(dp2515
g29
(dp2516
sg31
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2517
g7
Ntp2518
Rp2519
(dp2520
g36
g37
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2521
tp2522
Rp2523
(dp2524
S'oned_file'
p2525
g47
sg42
I00
sg131
g47
sS'timeshift'
p2526
g47
sS'basefile'
p2527
g47
sg50
S'-Fourier -twopass'
p2528
sg2265
g2266
sS'zpad'
p2529
I4
sg52
g53
sS'md1d_file'
p2530
S'max_displacement.1D'
p2531
sg66
g47
sS'copyorigin'
p2532
g47
sg54
g5
(g55
g56
(dp2533
tp2534
Rp2535
(dp2536
g63
S'environ_items'
p2537
sg65
g54
sbsg1956
g47
sg43
g44
sg49
g47
sbsg2278
g2266
sg70
Nsg71
g53
sbsg72
Nsg79
I00
sg74
(dp2538
sg81
Nsg78
Nsg88
Nsg65
S'func_motion_correct_A'
p2539
sg76
g2472
sg80
I00
sg82
Nsg83
I00
sg84
g2539
sg85
Nsg86
(lp2540
sg89
Nsb(dp2541
sg5
(g25
g7
Ntp2542
Rp2543
(dp2544
g29
(dp2545
sg31
g5
(cnipype.interfaces.afni.preprocess
TStat
p2546
g7
Ntp2547
Rp2548
(dp2549
g36
g37
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2550
tp2551
Rp2552
(dp2553
g42
I00
sg43
g44
sg49
g47
sg50
g47
sg1954
g47
sg2265
g2266
sg52
g53
sg54
g5
(g55
g56
(dp2554
tp2555
Rp2556
(dp2557
g63
S'environ_items'
p2558
sg65
g54
sbsg66
g47
sS'options'
p2559
S'-mean'
p2560
sbsg2278
g2266
sg70
Nsg71
g53
sbsg72
Nsg79
I00
sg74
(dp2561
sg81
Nsg78
Nsg88
Nsg65
S'func_get_mean_motion'
p2562
sg76
g2472
sg80
I00
sg82
Nsg83
I00
sg84
g2562
sg85
Nsg86
(lp2563
sg89
Nsb(dp2564
sg5
(g25
g7
Ntp2565
Rp2566
(dp2567
g29
(dp2568
sg31
g5
(g2546
g7
Ntp2569
Rp2570
(dp2571
g36
g37
(g2550
tp2572
Rp2573
(dp2574
g42
I00
sg43
g44
sg49
g47
sg50
g47
sg1954
g47
sg2265
g2266
sg52
g53
sg54
g5
(g55
g56
(dp2575
tp2576
Rp2577
(dp2578
g63
S'environ_items'
p2579
sg65
g54
sbsg66
g47
sg2559
g2560
sbsg2278
g2266
sg70
Nsg71
g53
sbsg72
Nsg65
S'func_get_mean_RPI'
p2580
sg74
(dp2581
sg76
g2472
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g2580
sg85
Nsg86
(lp2582
sg88
Nsg89
Nsb(dp2583
sg5
(g25
g7
Ntp2584
Rp2585
(dp2586
g29
(dp2587
sg31
g5
(g2546
g7
Ntp2588
Rp2589
(dp2590
g36
g37
(g2550
tp2591
Rp2592
(dp2593
g42
I00
sg43
g44
sg49
g47
sg50
g47
sg1954
g47
sg2265
g2266
sg52
g53
sg54
g5
(g55
g56
(dp2594
tp2595
Rp2596
(dp2597
g63
S'environ_items'
p2598
sg65
g54
sbsg66
g47
sg2559
g2560
sbsg2278
g2266
sg70
Nsg71
g53
sbsg72
Nsg65
S'func_mean_skullstrip'
p2599
sg74
(dp2600
sg76
g2472
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g2599
sg85
Nsg86
(lp2601
sg88
Nsg89
Nsb(dp2602
sg5
(g25
g7
Ntp2603
Rp2604
(dp2605
g29
(dp2606
sg31
g5
(g32
g7
Ntp2607
Rp2608
(dp2609
g36
g37
(g38
tp2610
Rp2611
(dp2612
g42
I00
sg43
g44
sg45
S'-Tmin -bin'
p2613
sg48
S'char'
p2614
sg49
g47
sg50
g47
sg51
g47
sg52
g53
sg54
g5
(g55
g56
(dp2615
g58
g59
stp2616
Rp2617
(dp2618
g63
S'environ_items'
p2619
sg65
g54
sbsg66
g47
sg67
g59
sg68
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'func_mask_normalize'
p2620
sg74
(dp2621
sg76
g2472
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g2620
sg85
Nsg86
(lp2622
sg88
Nsg89
Nsb(dp2623
sg5
(g25
g7
Ntp2624
Rp2625
(dp2626
g29
(dp2627
sg31
g5
(cnipype.interfaces.afni.preprocess
Automask
p2628
g7
Ntp2629
Rp2630
(dp2631
g36
g37
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2632
tp2633
Rp2634
(dp2635
g42
I00
sg43
g44
sg50
g47
sS'erode'
p2636
g47
sg49
g47
sS'dilate'
p2637
g47
sS'clfrac'
p2638
g47
sg2265
g2266
sS'brain_file'
p2639
g47
sg52
g53
sg54
g5
(g55
g56
(dp2640
tp2641
Rp2642
(dp2643
g63
S'environ_items'
p2644
sg65
g54
sbsg66
g47
sbsg2278
g2266
sg70
Nsg71
g53
sbsg72
Nsg65
S'func_get_brain_mask'
p2645
sg74
(dp2646
sg76
g2472
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g2645
sg85
Nsg86
(lp2647
sg88
Nsg89
Nsb(dp2648
sg5
(g25
g7
Ntp2649
Rp2650
(dp2651
g29
(dp2652
sg31
g5
(g2254
g7
Ntp2653
Rp2654
(dp2655
g36
g37
(g2258
tp2656
Rp2657
(dp2658
g2262
g47
sg42
I00
sg43
g44
sg49
g47
sg2263
S'a*b'
p2659
sg50
g47
sg2265
g2266
sg2267
g47
sg2268
g47
sg2269
g47
sg54
g5
(g55
g56
(dp2660
tp2661
Rp2662
(dp2663
g63
S'environ_items'
p2664
sg65
g54
sbsg2275
g47
sg2276
g47
sg2277
g47
sg52
g53
sbsg2278
g2266
sg70
Nsg71
g53
sbsg72
Nsg65
S'func_edge_detect'
p2665
sg74
(dp2666
sg76
g2472
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g2665
sg85
Nsg86
(lp2667
sg88
Nsg89
Nsb(dp2668
sg5
(g25
g7
Ntp2669
Rp2670
(dp2671
g29
(dp2672
sg31
g5
(g2517
g7
Ntp2673
Rp2674
(dp2675
g36
g37
(g2521
tp2676
Rp2677
(dp2678
g2525
g47
sg42
I00
sg131
g47
sg2526
g47
sg2527
g47
sg50
g2528
sg2265
g2266
sg2529
I4
sg52
g53
sg2530
g47
sg66
g47
sg2532
g47
sg54
g5
(g55
g56
(dp2679
tp2680
Rp2681
(dp2682
g63
S'environ_items'
p2683
sg65
g54
sbsg1956
g47
sg43
g44
sg49
g47
sbsg2278
g2266
sg70
Nsg71
g53
sbsg72
Nsg65
S'func_motion_correct'
p2684
sg74
(dp2685
sg76
g2472
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g2684
sg85
Nsg86
(lp2686
sg88
Nsg89
Nsb(dp2687
sg5
(g25
g7
Ntp2688
Rp2689
(dp2690
g29
(dp2691
sg31
g5
(g206
g7
Ntp2692
Rp2693
(dp2694
g36
g37
(g210
tp2695
Rp2696
(dp2697
g1951
g47
sS'motion_correct_ref'
p2698
g47
sg43
g44
sS'preprocessed_mask'
p2699
g47
sg1954
g47
sg2294
g47
sg2295
g47
sg2293
g47
sS'preprocessed'
p2700
g47
sS'slice_time_corrected'
p2701
g47
sg1955
g47
sS'example_func'
p2702
g47
sg1956
g47
sS'reorient_mean'
p2703
g47
sg1957
g47
sbsg221
(lp2704
g2294
ag2293
ag2703
ag1957
ag2698
ag1955
ag1951
ag1954
ag2295
ag2702
ag2700
ag2699
ag2701
ag1956
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp2705
sg76
g2472
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp2706
sg88
Nsg89
Nsb(dp2707
sg5
(g25
g7
Ntp2708
Rp2709
(dp2710
g29
(dp2711
sg31
g5
(g32
g7
Ntp2712
Rp2713
(dp2714
g36
g37
(g38
tp2715
Rp2716
(dp2717
g42
I00
sg43
g44
sg45
S'-ing 10000'
p2718
sg48
S'float'
p2719
sg49
g47
sg50
g47
sg51
g47
sg52
g53
sg54
g5
(g55
g56
(dp2720
g58
g59
stp2721
Rp2722
(dp2723
g63
S'environ_items'
p2724
sg65
g54
sbsg66
g47
sg67
g59
sg68
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'func_normalize'
p2725
sg74
(dp2726
sg76
g2472
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g2725
sg85
Nsg86
(lp2727
sg88
Nsg89
Nsb(dp2728
ssg247
(dp2729
sg249
(dp2730
g2460
(dp2731
g2476
(dp2732
g253
(lp2733
(g2469
g66
tp2734
asssg2476
(dp2735
g2495
(dp2736
g253
(lp2737
(g49
g66
tp2738
asssg2495
(dp2739
g2670
(dp2740
g253
(lp2741
(g49
g66
tp2742
assg2514
(dp2743
g253
(lp2744
(g49
g66
tp2745
assg2689
(dp2746
g253
(lp2747
(g49
g2293
tp2748
assg2566
(dp2749
g253
(lp2750
(g49
g66
tp2751
asssg2514
(dp2752
g2650
(dp2753
g253
(lp2754
(g49
g2269
tp2755
assg2689
(dp2756
g253
(lp2757
(g49
g1957
tp2758
a(g2530
g1951
tp2759
a(g2525
g1955
tp2760
a(g1956
g1956
tp2761
assg2625
(dp2762
g253
(lp2763
(g49
g66
tp2764
asssg2543
(dp2765
g2514
(dp2766
g253
(lp2767
(g49
g2527
tp2768
assg2689
(dp2769
g253
(lp2770
(g49
g2698
tp2771
asssg2566
(dp2772
g2670
(dp2773
g253
(lp2774
(g49
g2527
tp2775
asssg2585
(dp2776
g2689
(dp2777
g253
(lp2778
(g49
g2702
tp2779
asssg2604
(dp2780
g2689
(dp2781
g253
(lp2782
(g49
g2699
tp2783
asssg2625
(dp2784
g2650
(dp2785
g253
(lp2786
(g49
g2267
tp2787
assg2689
(dp2788
g253
(lp2789
(g49
g1954
tp2790
asssg2650
(dp2791
g2585
(dp2792
g253
(lp2793
(g49
g66
tp2794
assg2689
(dp2795
g253
(lp2796
(g49
g2295
tp2797
assg2709
(dp2798
g253
(lp2799
(g49
g66
tp2800
asssg2670
(dp2801
g2543
(dp2802
g253
(lp2803
(g49
g66
tp2804
asssg2689
(dp2805
sg2709
(dp2806
g2604
(dp2807
g253
(lp2808
(g49
g66
tp2809
assg2689
(dp2810
g253
(lp2811
(g49
g2700
tp2812
assssg295
g2730
sg296
(dp2813
g2460
(dp2814
sg2476
(dp2815
g2460
g2732
ssg2495
(dp2816
g2476
g2736
ssg2514
(dp2817
g2495
g2743
sg2543
g2766
ssg2543
(dp2818
g2670
g2802
ssg2566
(dp2819
g2495
g2749
ssg2585
(dp2820
g2650
g2792
ssg2604
(dp2821
g2709
g2807
ssg2625
(dp2822
g2514
g2762
ssg2650
(dp2823
g2514
g2753
sg2625
g2785
ssg2670
(dp2824
g2495
g2740
sg2566
g2773
ssg2689
(dp2825
g2585
g2777
sg2495
g2746
sg2514
g2756
sg2543
g2769
sg2604
g2781
sg2625
g2788
sg2650
g2795
sg2709
g2810
ssg2709
(dp2826
g2650
g2798
sssg304
g2730
sbsg65
g2472
sg76
g1067
sg84
g2472
sg85
g306
((lp2827
(lp2828
g309
ag306
((lp2829
(lp2830
g312
ag309
aa(lp2831
g314
ag315
aa(lp2832
g317
ag318
aa(lp2833
g320
ag321
aa(lp2834
g323
ag324
aa(lp2835
g326
ag327
aa(lp2836
g329
ag330
aa(lp2837
g332
ag333
aatp2838
Rp2839
aa(lp2840
g337
ag306
((lp2841
(lp2842
g312
ag337
aa(lp2843
g341
ag342
aa(lp2844
g344
ag345
aa(lp2845
g347
ag348
aa(lp2846
g350
ag351
aa(lp2847
g353
ag354
aa(lp2848
g356
ag357
aa(lp2849
g359
ag360
aa(lp2850
g362
ag363
aa(lp2851
g365
ag366
aa(lp2852
g368
ag369
aa(lp2853
g371
ag372
aa(lp2854
g374
ag375
aa(lp2855
g377
ag378
aa(lp2856
g380
ag381
aa(lp2857
g383
ag384
aa(lp2858
g386
ag387
aa(lp2859
g389
ag390
aa(lp2860
g392
ag393
aatp2861
Rp2862
aa(lp2863
g397
ag306
((lp2864
(lp2865
g312
ag397
aa(lp2866
g401
ag402
aatp2867
Rp2868
aatp2869
Rp2870
sg89
NsbS'outputspec.example_func'
p2871
tp2872
sg1955
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g25
g7
Ntp2880
Rp2881
(dp2882
g29
(dp2883
sg31
g5
(g206
g7
Ntp2884
Rp2885
(dp2886
g36
g37
(g210
tp2887
Rp2888
(dp2889
g43
g44
sS'movement_file'
p2890
g47
sbsg221
(lp2891
g2890
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp2892
sg76
S'fristons_parameter_model_0'
p2893
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp2894
sg88
Nsg89
Nsb(dp2895
sg5
(g25
g7
Ntp2896
Rp2897
(dp2898
g29
(dp2899
sg31
g5
(g206
g7
Ntp2900
Rp2901
(dp2902
g36
g37
(g210
tp2903
Rp2904
(dp2905
g43
g44
sg2890
g47
sbsg221
(lp2906
g2890
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp2907
sg76
g2893
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp2908
sg88
Nsg89
Nsb(dp2909
sg5
(g25
g7
Ntp2910
Rp2911
(dp2912
g29
(dp2913
sg31
g5
(g1403
g7
Ntp2914
Rp2915
(dp2916
g1407
(lp2917
g66
asg36
g37
(g1413
tp2918
Rp2919
(dp2920
g42
I00
sg43
g44
sg1419
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2921
sg66
g47
sbsg1421
(dp2922
g49
Nssg1423
(lp2923
g49
asg1425
Nsbsg72
Nsg65
S'calc_friston'
p2924
sg74
(dp2925
sg76
g2893
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g2924
sg85
Nsg86
(lp2926
sg88
Nsg89
Nsb(dp2927
ssg247
(dp2928
sg249
(dp2929
g2881
(dp2930
sg2897
(dp2931
g2911
(dp2932
g253
(lp2933
(g2890
g66
tp2934
asssg2911
(dp2935
g2881
(dp2936
g253
(lp2937
(g49
g2890
tp2938
assssg295
g2929
sg296
(dp2939
g2881
(dp2940
g2911
g2936
ssg2897
(dp2941
sg2911
(dp2942
g2897
g2932
sssg304
g2929
sbsg65
g2893
sg76
g1067
sg84
g2893
sg85
g306
((lp2943
(lp2944
g309
ag306
((lp2945
(lp2946
g312
ag309
aa(lp2947
g314
ag315
aa(lp2948
g317
ag318
aa(lp2949
g320
ag321
aa(lp2950
g323
ag324
aa(lp2951
g326
ag327
aa(lp2952
g329
ag330
aa(lp2953
g332
ag333
aatp2954
Rp2955
aa(lp2956
g337
ag306
((lp2957
(lp2958
g312
ag337
aa(lp2959
g341
ag342
aa(lp2960
g344
ag345
aa(lp2961
g347
ag348
aa(lp2962
g350
ag351
aa(lp2963
g353
ag354
aa(lp2964
g356
ag357
aa(lp2965
g359
ag360
aa(lp2966
g362
ag363
aa(lp2967
g365
ag366
aa(lp2968
g368
ag369
aa(lp2969
g371
ag372
aa(lp2970
g374
ag375
aa(lp2971
g377
ag378
aa(lp2972
g380
ag381
aa(lp2973
g383
ag384
aa(lp2974
g386
ag387
aa(lp2975
g389
ag390
aa(lp2976
g392
ag393
aatp2977
Rp2978
aa(lp2979
g397
ag306
((lp2980
(lp2981
g312
ag397
aa(lp2982
g401
ag402
aatp2983
Rp2984
aatp2985
Rp2986
sg89
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g25
g7
Ntp2997
Rp2998
(dp2999
g29
(dp3000
sg31
g5
(g206
g7
Ntp3001
Rp3002
(dp3003
g36
g37
(g210
tp3004
Rp3005
(dp3006
g43
g44
sg1441
g47
sg1442
g47
sg1443
g47
sg1444
g47
sbsg221
(lp3007
g1442
ag1443
ag1441
ag1444
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp3008
sg76
S'montage_anat_0'
p3009
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp3010
sg88
Nsg89
Nsb(dp3011
sg5
(g25
g7
Ntp3012
Rp3013
(dp3014
g29
(dp3015
sg31
g5
(g1403
g7
Ntp3016
Rp3017
(dp3018
g1407
(lp3019
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp3020
Rp3021
(dp3022
g42
I00
sg1411
S't1_edge_on_mean_func_in_t1_s.png'
p3023
sg1409
g47
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3024
sg1410
g47
sg43
g44
sbsg1421
(dp3025
g1411
Nssg1423
(lp3026
g1411
asg1425
Nsbsg72
Nsg65
g1464
sg74
(dp3027
sg76
g3009
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1464
sg85
Nsg86
(lp3028
sg88
Nsg89
Nsb(dp3029
sg5
(g25
g7
Ntp3030
Rp3031
(dp3032
g29
(dp3033
sg31
g5
(g1403
g7
Ntp3034
Rp3035
(dp3036
g1407
(lp3037
g1491
asg36
g37
(g1413
tp3038
Rp3039
(dp3040
g42
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3041
sg1491
g47
sg43
g44
sbsg1421
(dp3042
g1497
Nssg1423
(lp3043
g1497
asg1425
Nsbsg72
Nsg65
g1499
sg74
(dp3044
sg76
g3009
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1499
sg85
Nsg86
(lp3045
sg88
Nsg89
Nsb(dp3046
sg5
(g25
g7
Ntp3047
Rp3048
(dp3049
g29
(dp3050
sg31
g5
(g1403
g7
Ntp3051
Rp3052
(dp3053
g1407
(lp3054
g1491
asg36
g37
(g1413
tp3055
Rp3056
(dp3057
g42
I00
sg1419
g3041
sg1491
g47
sg43
g44
sbsg1421
(dp3058
g1497
Nssg1423
(lp3059
g1497
asg1425
Nsbsg72
Nsg79
I00
sg74
(dp3060
sg81
Nsg78
Nsg88
Nsg65
g1517
sg76
g3009
sg80
I00
sg82
Nsg83
I00
sg84
g1517
sg85
Nsg86
(lp3061
sg89
Nsb(dp3062
sg5
(g25
g7
Ntp3063
Rp3064
(dp3065
g29
(dp3066
sg31
g5
(g206
g7
Ntp3067
Rp3068
(dp3069
g36
g37
(g210
tp3070
Rp3071
(dp3072
g43
g44
sg1410
g47
sg1409
g47
sbsg221
(lp3073
g1410
ag1409
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp3074
sg76
g3009
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp3075
sg88
Nsg89
Nsb(dp3076
sg5
(g25
g7
Ntp3077
Rp3078
(dp3079
g29
(dp3080
sg31
g5
(g1403
g7
Ntp3081
Rp3082
(dp3083
g1407
(lp3084
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp3085
Rp3086
(dp3087
g42
I00
sg1411
S't1_edge_on_mean_func_in_t1_a.png'
p3088
sg1409
g47
sg1412
g1418
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3089
sg1410
g47
sg43
g44
sbsg1421
(dp3090
g1411
Nssg1423
(lp3091
g1411
asg1425
Nsbsg72
Nsg65
g1426
sg74
(dp3092
sg76
g3009
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1426
sg85
Nsg86
(lp3093
sg88
Nsg89
Nsb(dp3094
ssg247
(dp3095
sg249
(dp3096
g2998
(dp3097
sg3013
(dp3098
g2998
(dp3099
g253
(lp3100
(g1411
g1443
tp3101
asssg3031
(dp3102
g2998
(dp3103
g253
(lp3104
(g1497
g1441
tp3105
assg3078
(dp3106
g253
(lp3107
(g1497
g1410
tp3108
assg3013
(dp3109
g253
(lp3110
(g1497
g1410
tp3111
asssg3048
(dp3112
g2998
(dp3113
g253
(lp3114
(g1497
g1444
tp3115
assg3078
(dp3116
g253
(lp3117
(g1497
g1409
tp3118
assg3013
(dp3119
g253
(lp3120
(g1497
g1409
tp3121
asssg3064
(dp3122
g3048
(dp3123
g253
(lp3124
(g1409
g1491
tp3125
assg3031
(dp3126
g253
(lp3127
(g1410
g1491
tp3128
asssg3078
(dp3129
g2998
(dp3130
g253
(lp3131
(g1411
g1442
tp3132
assssg295
g3096
sg296
(dp3133
g2998
(dp3134
g3013
g3099
sg3048
g3113
sg3031
g3103
sg3078
g3130
ssg3013
(dp3135
g3048
g3119
sg3031
g3109
ssg3031
(dp3136
g3064
g3126
ssg3048
(dp3137
g3064
g3123
ssg3064
(dp3138
sg3078
(dp3139
g3048
g3116
sg3031
g3106
sssg304
g3096
sbsg65
g3009
sg76
g1067
sg84
g3009
sg85
g306
((lp3140
(lp3141
g309
ag306
((lp3142
(lp3143
g312
ag309
aa(lp3144
g314
ag315
aa(lp3145
g317
ag318
aa(lp3146
g320
ag321
aa(lp3147
g323
ag324
aa(lp3148
g326
ag327
aa(lp3149
g329
ag330
aa(lp3150
g332
ag333
aatp3151
Rp3152
aa(lp3153
g337
ag306
((lp3154
(lp3155
g312
ag337
aa(lp3156
g341
ag342
aa(lp3157
g344
ag345
aa(lp3158
g347
ag348
aa(lp3159
g350
ag351
aa(lp3160
g353
ag354
aa(lp3161
g356
ag357
aa(lp3162
g359
ag360
aa(lp3163
g362
ag363
aa(lp3164
g365
ag366
aa(lp3165
g368
ag369
aa(lp3166
g371
ag372
aa(lp3167
g374
ag375
aa(lp3168
g377
ag378
aa(lp3169
g380
ag381
aa(lp3170
g383
ag384
aa(lp3171
g386
ag387
aa(lp3172
g389
ag390
aa(lp3173
g392
ag393
aatp3174
Rp3175
aa(lp3176
g397
ag306
((lp3177
(lp3178
g312
ag397
aa(lp3179
g401
ag402
aatp3180
Rp3181
aatp3182
Rp3183
sg89
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg1951
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g25
g7
Ntp3201
Rp3202
(dp3203
g29
(dp3204
sg31
g5
(g1403
g7
Ntp3205
Rp3206
(dp3207
g1407
(lp3208
g1491
asg36
g37
(g1413
tp3209
Rp3210
(dp3211
g42
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3212
sg1491
g47
sg43
g44
sbsg1421
(dp3213
g1497
Nssg1423
(lp3214
g1497
asg1425
Nsbsg72
Nsg79
I00
sg74
(dp3215
sg81
Nsg78
Nsg88
Nsg65
S'resample_o_csf'
p3216
sg76
S'montage_csf_gm_wm_0'
p3217
sg80
I00
sg82
Nsg83
I00
sg84
g3216
sg85
Nsg86
(lp3218
sg89
Nsb(dp3219
sg5
(g25
g7
Ntp3220
Rp3221
(dp3222
g29
(dp3223
sg31
g5
(g1403
g7
Ntp3224
Rp3225
(dp3226
g1407
(lp3227
S'overlay_csf'
p3228
aS'overlay_wm'
p3229
aS'overlay_gm'
p3230
ag1410
ag1411
asg36
g37
(g1413
tp3231
Rp3232
(dp3233
g42
I00
sg1411
S'montage_csf_gm_wm_s.png'
p3234
sg3230
g47
sg1419
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3235
sg3228
g47
sg3229
g47
sg1410
g47
sg43
g44
sbsg1421
(dp3236
g1411
Nssg1423
(lp3237
g1411
asg1425
Nsbsg72
Nsg65
g1464
sg74
(dp3238
sg76
g3217
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1464
sg85
Nsg86
(lp3239
sg88
Nsg89
Nsb(dp3240
sg5
(g25
g7
Ntp3241
Rp3242
(dp3243
g29
(dp3244
sg31
g5
(g1403
g7
Ntp3245
Rp3246
(dp3247
g1407
(lp3248
g1491
asg36
g37
(g1413
tp3249
Rp3250
(dp3251
g42
I00
sg1419
g3212
sg1491
g47
sg43
g44
sbsg1421
(dp3252
g1497
Nssg1423
(lp3253
g1497
asg1425
Nsbsg72
Nsg79
I00
sg74
(dp3254
sg81
Nsg78
Nsg88
Nsg65
S'resample_o_gm'
p3255
sg76
g3217
sg80
I00
sg82
Nsg83
I00
sg84
g3255
sg85
Nsg86
(lp3256
sg89
Nsb(dp3257
sg5
(g25
g7
Ntp3258
Rp3259
(dp3260
g29
(dp3261
sg31
g5
(g1403
g7
Ntp3262
Rp3263
(dp3264
g1407
(lp3265
g1491
asg36
g37
(g1413
tp3266
Rp3267
(dp3268
g42
I00
sg1419
g3212
sg1491
g47
sg43
g44
sbsg1421
(dp3269
g1497
Nssg1423
(lp3270
g1497
asg1425
Nsbsg72
Nsg79
I00
sg74
(dp3271
sg81
Nsg78
Nsg88
Nsg65
S'resample_o_wm'
p3272
sg76
g3217
sg80
I00
sg82
Nsg83
I00
sg84
g3272
sg85
Nsg86
(lp3273
sg89
Nsb(dp3274
sg5
(g25
g7
Ntp3275
Rp3276
(dp3277
g29
(dp3278
sg31
g5
(g206
g7
Ntp3279
Rp3280
(dp3281
g36
g37
(g210
tp3282
Rp3283
(dp3284
g43
g44
sS'resampled_overlay_csf'
p3285
g47
sS'resampled_overlay_gm'
p3286
g47
sg1442
g47
sg1443
g47
sg1441
g47
sS'resampled_overlay_wm'
p3287
g47
sbsg221
(lp3288
g1442
ag1443
ag1441
ag3285
ag3287
ag3286
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp3289
sg76
g3217
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp3290
sg88
Nsg89
Nsb(dp3291
sg5
(g25
g7
Ntp3292
Rp3293
(dp3294
g29
(dp3295
sg31
g5
(g1403
g7
Ntp3296
Rp3297
(dp3298
g1407
(lp3299
g1491
asg36
g37
(g1413
tp3300
Rp3301
(dp3302
g42
I00
sg1419
g3212
sg1491
g47
sg43
g44
sbsg1421
(dp3303
g1497
Nssg1423
(lp3304
g1497
asg1425
Nsbsg72
Nsg65
g1499
sg74
(dp3305
sg76
g3217
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1499
sg85
Nsg86
(lp3306
sg88
Nsg89
Nsb(dp3307
sg5
(g25
g7
Ntp3308
Rp3309
(dp3310
g29
(dp3311
sg31
g5
(g206
g7
Ntp3312
Rp3313
(dp3314
g36
g37
(g210
tp3315
Rp3316
(dp3317
g43
g44
sg3230
g47
sg1410
g47
sg3228
g47
sg3229
g47
sbsg221
(lp3318
g1410
ag3228
ag3229
ag3230
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp3319
sg76
g3217
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp3320
sg88
Nsg89
Nsb(dp3321
sg5
(g25
g7
Ntp3322
Rp3323
(dp3324
g29
(dp3325
sg31
g5
(g1403
g7
Ntp3326
Rp3327
(dp3328
g1407
(lp3329
g3228
ag3229
ag3230
ag1410
ag1411
asg36
g37
(g1413
tp3330
Rp3331
(dp3332
g42
I00
sg1411
S'montage_csf_gm_wm_a.png'
p3333
sg3230
g47
sg1419
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3334
sg3228
g47
sg3229
g47
sg1410
g47
sg43
g44
sbsg1421
(dp3335
g1411
Nssg1423
(lp3336
g1411
asg1425
Nsbsg72
Nsg65
g1426
sg74
(dp3337
sg76
g3217
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1426
sg85
Nsg86
(lp3338
sg88
Nsg89
Nsb(dp3339
ssg247
(dp3340
sg249
(dp3341
g3202
(dp3342
g3276
(dp3343
g253
(lp3344
(g1497
g3285
tp3345
assg3323
(dp3346
g253
(lp3347
(g1497
g3228
tp3348
assg3221
(dp3349
g253
(lp3350
(g1497
g3228
tp3351
asssg3221
(dp3352
g3276
(dp3353
g253
(lp3354
(g1411
g1443
tp3355
asssg3242
(dp3356
g3276
(dp3357
g253
(lp3358
(g1497
g3286
tp3359
assg3323
(dp3360
g253
(lp3361
(g1497
g3230
tp3362
assg3221
(dp3363
g253
(lp3364
(g1497
g3230
tp3365
asssg3259
(dp3366
g3276
(dp3367
g253
(lp3368
(g1497
g3287
tp3369
assg3323
(dp3370
g253
(lp3371
(g1497
g3229
tp3372
assg3221
(dp3373
g253
(lp3374
(g1497
g3229
tp3375
asssg3276
(dp3376
sg3293
(dp3377
g3276
(dp3378
g253
(lp3379
(g1497
g1441
tp3380
assg3323
(dp3381
g253
(lp3382
(g1497
g1410
tp3383
assg3221
(dp3384
g253
(lp3385
(g1497
g1410
tp3386
asssg3309
(dp3387
g3259
(dp3388
g253
(lp3389
(g3229
g1491
tp3390
assg3293
(dp3391
g253
(lp3392
(g1410
g1491
tp3393
assg3242
(dp3394
g253
(lp3395
(g3230
g1491
tp3396
assg3202
(dp3397
g253
(lp3398
(g3228
g1491
tp3399
asssg3323
(dp3400
g3276
(dp3401
g253
(lp3402
(g1411
g1442
tp3403
assssg295
g3341
sg296
(dp3404
g3202
(dp3405
g3309
g3397
ssg3221
(dp3406
g3259
g3373
sg3293
g3384
sg3242
g3363
sg3202
g3349
ssg3242
(dp3407
g3309
g3394
ssg3259
(dp3408
g3309
g3388
ssg3276
(dp3409
g3202
g3343
sg3323
g3401
sg3293
g3378
sg3259
g3367
sg3221
g3353
sg3242
g3357
ssg3293
(dp3410
g3309
g3391
ssg3309
(dp3411
sg3323
(dp3412
g3259
g3370
sg3293
g3381
sg3242
g3360
sg3202
g3346
sssg304
g3341
sbsg65
g3217
sg76
g1067
sg84
g3217
sg85
g306
((lp3413
(lp3414
g309
ag306
((lp3415
(lp3416
g312
ag309
aa(lp3417
g314
ag315
aa(lp3418
g317
ag318
aa(lp3419
g320
ag321
aa(lp3420
g323
ag324
aa(lp3421
g326
ag327
aa(lp3422
g329
ag330
aa(lp3423
g332
ag333
aatp3424
Rp3425
aa(lp3426
g337
ag306
((lp3427
(lp3428
g312
ag337
aa(lp3429
g341
ag342
aa(lp3430
g344
ag345
aa(lp3431
g347
ag348
aa(lp3432
g350
ag351
aa(lp3433
g353
ag354
aa(lp3434
g356
ag357
aa(lp3435
g359
ag360
aa(lp3436
g362
ag363
aa(lp3437
g365
ag366
aa(lp3438
g368
ag369
aa(lp3439
g371
ag372
aa(lp3440
g374
ag375
aa(lp3441
g377
ag378
aa(lp3442
g380
ag381
aa(lp3443
g383
ag384
aa(lp3444
g386
ag387
aa(lp3445
g389
ag390
aa(lp3446
g392
ag393
aatp3447
Rp3448
aa(lp3449
g397
ag306
((lp3450
(lp3451
g312
ag397
aa(lp3452
g401
ag402
aatp3453
Rp3454
aatp3455
Rp3456
sg89
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g25
g7
Ntp3466
Rp3467
(dp3468
g29
(dp3469
sg31
g5
(g206
g7
Ntp3470
Rp3471
(dp3472
g36
g37
(g210
tp3473
Rp3474
(dp3475
S'func_to_anat_linear_xfm'
p3476
g47
sg43
g44
sS'anat_func'
p3477
g47
sbsg221
(lp3478
g3476
ag3477
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp3479
sg76
S'func_to_anat_bbreg_0'
p3480
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp3481
sg88
Nsg89
Nsb(dp3482
sg5
(g25
g7
Ntp3483
Rp3484
(dp3485
g29
(dp3486
sg31
g5
(g32
g7
Ntp3487
Rp3488
(dp3489
g36
g37
(g38
tp3490
Rp3491
(dp3492
g42
I00
sg43
g44
sg45
S'-thr 0.5 -bin'
p3493
sg48
g47
sg49
g47
sg50
g47
sg51
g47
sg52
g53
sg54
g5
(g55
g56
(dp3494
g58
g59
stp3495
Rp3496
(dp3497
g63
S'environ_items'
p3498
sg65
g54
sbsg66
g47
sg67
g59
sg68
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'wm_bb_mask'
p3499
sg74
(dp3500
sg76
g3480
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g3499
sg85
Nsg86
(lp3501
sg88
Nsg89
Nsb(dp3502
sg5
(g25
g7
Ntp3503
Rp3504
(dp3505
g29
(dp3506
sg31
g5
(g206
g7
Ntp3507
Rp3508
(dp3509
g36
g37
(g210
tp3510
Rp3511
(dp3512
g43
g44
sS'linear_reg_matrix'
p3513
g47
sS'bbr_schedule'
p3514
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3515
sS'anat_wm_segmentation'
p3516
g47
sS'anat_skull'
p3517
g47
sg2469
g47
sbsg221
(lp3518
g2469
ag3517
ag3513
ag3516
ag3514
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp3519
sg76
g3480
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp3520
sg88
Nsg89
Nsb(dp3521
sg5
(g25
g7
Ntp3522
Rp3523
(dp3524
g29
(dp3525
sg31
g5
(g121
g7
Ntp3526
Rp3527
(dp3528
g36
g37
(g125
tp3529
Rp3530
(dp3531
g129
g47
sg43
g44
sg130
g47
sg131
g47
sg132
g47
sg133
g47
sg134
g47
sg135
g47
sg137
g47
sg138
g47
sg139
g47
sg140
g47
sg141
g47
sg142
g47
sg143
g47
sg144
g47
sg145
g47
sg146
g47
sg66
g47
sg147
g47
sg148
g47
sg149
g47
sg150
g47
sg42
I00
sg151
g47
sg152
g47
sg50
g47
sg153
g47
sg154
g47
sg52
g53
sg155
g47
sg156
g47
sg157
g47
sg158
g47
sg159
g47
sg49
g47
sg160
g47
sg161
g47
sg162
g47
sg163
I6
sg164
g47
sg165
g47
sg166
g47
sg167
g47
sg168
g47
sg54
g5
(g55
g56
(dp3532
g58
g59
stp3533
Rp3534
(dp3535
g63
S'environ_items'
p3536
sg65
g54
sbsg174
g47
sg175
g47
sg67
g59
sg176
g47
sg177
g47
sg178
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'bbreg_func_to_anat'
p3537
sg74
(dp3538
sg76
g3480
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g3537
sg85
Nsg86
(lp3539
sg88
Nsg89
Nsb(dp3540
ssg247
(dp3541
sg249
(dp3542
g3467
(dp3543
sg3484
(dp3544
g3523
(dp3545
g253
(lp3546
((g49
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3547
(ttp3548
g50
tp3549
asssg3504
(dp3550
g3484
(dp3551
g253
(lp3552
(g3516
g66
tp3553
assg3523
(dp3554
g253
(lp3555
(g3514
g152
tp3556
a(g2469
g66
tp3557
a(g3517
g132
tp3558
a(g3513
g130
tp3559
asssg3523
(dp3560
g3467
(dp3561
g253
(lp3562
(g164
g3476
tp3563
a(g49
g3477
tp3564
assssg295
g3542
sg296
(dp3565
g3467
(dp3566
g3523
g3561
ssg3484
(dp3567
g3504
g3551
ssg3504
(dp3568
sg3523
(dp3569
g3484
g3545
sg3504
g3554
sssg304
g3542
sbsg65
g3480
sg76
g1067
sg84
g3480
sg85
g306
((lp3570
(lp3571
g309
ag306
((lp3572
(lp3573
g312
ag309
aa(lp3574
g314
ag315
aa(lp3575
g317
ag318
aa(lp3576
g320
ag321
aa(lp3577
g323
ag324
aa(lp3578
g326
ag327
aa(lp3579
g329
ag330
aa(lp3580
g332
ag333
aatp3581
Rp3582
aa(lp3583
g337
ag306
((lp3584
(lp3585
g312
ag337
aa(lp3586
g341
ag342
aa(lp3587
g344
ag345
aa(lp3588
g347
ag348
aa(lp3589
g350
ag351
aa(lp3590
g353
ag354
aa(lp3591
g356
ag357
aa(lp3592
g359
ag360
aa(lp3593
g362
ag363
aa(lp3594
g365
ag366
aa(lp3595
g368
ag369
aa(lp3596
g371
ag372
aa(lp3597
g374
ag375
aa(lp3598
g377
ag378
aa(lp3599
g380
ag381
aa(lp3600
g383
ag384
aa(lp3601
g386
ag387
aa(lp3602
g389
ag390
aa(lp3603
g392
ag393
aatp3604
Rp3605
aa(lp3606
g397
ag306
((lp3607
(lp3608
g312
ag397
aa(lp3609
g401
ag402
aatp3610
Rp3611
aatp3612
Rp3613
sg89
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g25
g7
Ntp3620
Rp3621
(dp3622
g29
(dp3623
sg31
g5
(g1403
g7
Ntp3624
Rp3625
(dp3626
g1407
(lp3627
S'measure_file'
p3628
asg36
g37
(g1413
tp3629
Rp3630
(dp3631
g42
I00
sg43
g44
sg1419
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g47
sbsg1421
(dp3633
S'snr_storefl'
p3634
Nssg1423
(lp3635
g3634
asg1425
Nsbsg72
Nsg65
S'snr_val0'
p3636
sg74
(dp3637
sg76
g1067
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g3636
sg85
Nsg86
(lp3638
sg88
Nsg89
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g25
g7
Ntp3648
Rp3649
(dp3650
g29
(dp3651
sg31
g5
(g1403
g7
Ntp3652
Rp3653
(dp3654
g1407
(lp3655
g3628
ag1863
asg36
g37
(g1413
tp3656
Rp3657
(dp3658
g42
I00
sg43
g44
sg1419
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g47
sg1863
S'snr'
p3660
sbsg1421
(dp3661
g1870
Nssg1423
(lp3662
g1870
asg1425
Nsbsg72
Nsg79
I00
sg74
(dp3663
sg81
Nsg78
Nsg88
Nsg65
S'hist_snr_0'
p3664
sg76
g1067
sg80
I00
sg82
Nsg83
I00
sg84
g3664
sg85
Nsg86
(lp3665
sg89
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g25
g7
Ntp3678
Rp3679
(dp3680
g29
(dp3681
sg31
g5
(g206
g7
Ntp3682
Rp3683
(dp3684
g36
g37
(g210
tp3685
Rp3686
(dp3687
g43
g44
sS'scan'
p3688
g47
sg2009
g47
sS'subject'
p3689
g47
sbsg221
(lp3690
g3689
ag2009
ag3688
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp3691
sg76
S'func_gather_0'
p3692
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp3693
sg88
Nsg89
Nsb(dp3694
sg5
(g25
g7
Ntp3695
Rp3696
(dp3697
g29
(dp3698
sg31
g5
(g206
g7
Ntp3699
Rp3700
(dp3701
g36
g37
(g210
tp3702
Rp3703
(dp3704
g43
g44
sg3688
g47
sg3689
S'8_446561464'
p3705
sbsg221
(lp3706
g3689
ag3688
asg223
I01
sbsg72
Nsg65
S'inputnode'
p3707
sg74
(dp3708
sg76
g3692
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
(lp3709
(g3688
(lp3710
S'rest_1_rest'
p3711
atp3712
asg83
I00
sg84
g3707
sg85
Nsg86
(lp3713
sg88
Nsg89
Nsb(dp3714
sg5
(g25
g7
Ntp3715
Rp3716
(dp3717
g29
(dp3718
sg31
g5
(g1403
g7
Ntp3719
Rp3720
(dp3721
g1407
(lp3722
g3688
aS'rest_dict'
p3723
asg36
g37
(g1413
tp3724
Rp3725
(dp3726
g42
I00
sg3723
(dp3727
g3711
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-22/KKI2009-22-fMRI.nii'
p3728
ssg1419
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3729
sg43
g44
sg3688
g47
sbsg1421
(dp3730
g2009
Nssg1423
(lp3731
g2009
asg1425
Nsbsg72
Nsg65
S'selectrest'
p3732
sg74
(dp3733
sg76
g3692
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g3732
sg85
Nsg86
(lp3734
sg88
Nsg89
Nsb(dp3735
ssg247
(dp3736
sg249
(dp3737
g3679
(dp3738
sg3696
(dp3739
g3716
(dp3740
g253
(lp3741
(g3688
g3688
tp3742
assg3679
(dp3743
g253
(lp3744
(g3689
g3689
tp3745
a(g3688
g3688
tp3746
asssg3716
(dp3747
g3679
(dp3748
g253
(lp3749
(g2009
g2009
tp3750
assssg295
g3737
sg296
(dp3751
g3679
(dp3752
g3696
g3743
sg3716
g3748
ssg3696
(dp3753
sg3716
(dp3754
g3696
g3740
sssg304
g3737
sbsg65
g3692
sg76
g1067
sg84
g3692
sg85
g306
((lp3755
(lp3756
g309
ag306
((lp3757
(lp3758
g312
ag309
aa(lp3759
g314
ag315
aa(lp3760
g317
ag318
aa(lp3761
g320
ag321
aa(lp3762
g323
ag324
aa(lp3763
g326
ag327
aa(lp3764
g329
ag330
aa(lp3765
g332
ag333
aatp3766
Rp3767
aa(lp3768
g337
ag306
((lp3769
(lp3770
g312
ag337
aa(lp3771
g341
ag342
aa(lp3772
g344
ag345
aa(lp3773
g347
ag348
aa(lp3774
g350
ag351
aa(lp3775
g353
ag354
aa(lp3776
g356
ag357
aa(lp3777
g359
ag360
aa(lp3778
g362
ag363
aa(lp3779
g365
ag366
aa(lp3780
g368
ag369
aa(lp3781
g371
ag372
aa(lp3782
g374
ag375
aa(lp3783
g377
ag378
aa(lp3784
g380
ag381
aa(lp3785
g383
ag384
aa(lp3786
g386
ag387
aa(lp3787
g389
ag390
aa(lp3788
g392
ag393
aatp3789
Rp3790
aa(lp3791
g397
ag306
((lp3792
(lp3793
g312
ag397
aa(lp3794
g401
ag402
aatp3795
Rp3796
aatp3797
Rp3798
sg89
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g25
g7
Ntp3808
Rp3809
(dp3810
g29
(dp3811
sg31
g5
(g1165
g7
Ntp3812
Rp3813
(dp3814
g36
g37
(g1169
tp3815
Rp3816
(dp3817
g42
I00
sg1173
g47
sg66
g47
sg1174
g47
sg49
g47
sg161
g47
sg50
g47
sg135
g47
sg1175
g47
sg1176
g1820
sg52
g53
sg54
g5
(g55
g56
(dp3818
g58
g59
stp3819
Rp3820
(dp3821
g63
S'environ_items'
p3822
sg65
g54
sbsg1182
g47
sg1183
g47
sg67
g59
sg1184
g47
sg1185
g47
sg43
g44
sg1186
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'func_mni_fsl_warp_0'
p3823
sg74
(dp3824
sg76
g1067
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g3823
sg85
Nsg86
(lp3825
sg88
Nsg89
Nsbg49
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g25
g7
Ntp3835
Rp3836
(dp3837
g29
(dp3838
sg31
g5
(g206
g7
Ntp3839
Rp3840
(dp3841
g36
g37
(g210
tp3842
Rp3843
(dp3844
g43
g44
sS'mask_outputs'
p3845
g47
sbsg221
(lp3846
g3845
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp3847
sg76
S'voxel_timeseries_0'
p3848
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp3849
sg88
Nsg89
Nsb(dp3850
sg5
(g25
g7
Ntp3851
Rp3852
(dp3853
g29
(dp3854
sg31
g5
(g1403
g7
Ntp3855
Rp3856
(dp3857
g1407
(lp3858
S'data_file'
p3859
aS'template'
p3860
ag67
asg36
g37
(g1413
tp3861
Rp3862
(dp3863
g42
I00
sg43
g44
sg3859
g47
sg1419
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3864
sg3860
g47
sg67
g47
sbsg1421
(dp3865
g49
Nssg1423
(lp3866
g49
asg1425
Nsbsg72
Nsg65
S'timeseries_voxel'
p3867
sg74
(dp3868
sg76
g3848
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g3867
sg85
Nsg86
(lp3869
sg88
Nsg89
Nsb(dp3870
sg5
(g25
g7
Ntp3871
Rp3872
(dp3873
g29
(dp3874
sg31
g5
(g206
g7
Ntp3875
Rp3876
(dp3877
g36
g37
(g210
tp3878
Rp3879
(dp3880
g43
g44
sg67
(lp3881
I01
aI01
asg2009
g47
sbsg221
(lp3882
g2009
ag67
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp3883
sg76
g3848
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp3884
sg88
Nsg89
Nsb(dp3885
sg5
(g25
g7
Ntp3886
Rp3887
(dp3888
g29
(dp3889
sg31
g5
(g206
g7
Ntp3890
Rp3891
(dp3892
g36
g37
(g210
tp3893
Rp3894
(dp3895
g43
g44
sg1954
g47
sbsg221
(lp3896
g1954
asg223
I01
sbsg72
Nsg65
S'input_mask'
p3897
sg74
(dp3898
sg76
g3848
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g3897
sg85
Nsg86
(lp3899
sg88
Nsg89
Nsb(dp3900
ssg247
(dp3901
sg249
(dp3902
g3836
(dp3903
sg3852
(dp3904
g3836
(dp3905
g253
(lp3906
(g49
g3845
tp3907
asssg3872
(dp3908
g3852
(dp3909
g253
(lp3910
(g2009
g3859
tp3911
a(g67
g67
tp3912
asssg3887
(dp3913
g3852
(dp3914
g253
(lp3915
(g1954
g3860
tp3916
assssg295
g3902
sg296
(dp3917
g3836
(dp3918
g3852
g3905
ssg3852
(dp3919
g3872
g3909
sg3887
g3914
ssg3872
(dp3920
sg3887
(dp3921
ssg304
g3902
sbsg65
g3848
sg76
g1067
sg84
g3848
sg85
g306
((lp3922
(lp3923
g309
ag306
((lp3924
(lp3925
g312
ag309
aa(lp3926
g314
ag315
aa(lp3927
g317
ag318
aa(lp3928
g320
ag321
aa(lp3929
g323
ag324
aa(lp3930
g326
ag327
aa(lp3931
g329
ag330
aa(lp3932
g332
ag333
aatp3933
Rp3934
aa(lp3935
g337
ag306
((lp3936
(lp3937
g312
ag337
aa(lp3938
g341
ag342
aa(lp3939
g344
ag345
aa(lp3940
g347
ag348
aa(lp3941
g350
ag351
aa(lp3942
g353
ag354
aa(lp3943
g356
ag357
aa(lp3944
g359
ag360
aa(lp3945
g362
ag363
aa(lp3946
g365
ag366
aa(lp3947
g368
ag369
aa(lp3948
g371
ag372
aa(lp3949
g374
ag375
aa(lp3950
g377
ag378
aa(lp3951
g380
ag381
aa(lp3952
g383
ag384
aa(lp3953
g386
ag387
aa(lp3954
g389
ag390
aa(lp3955
g392
ag393
aatp3956
Rp3957
aa(lp3958
g397
ag306
((lp3959
(lp3960
g312
ag397
aa(lp3961
g401
ag402
aatp3962
Rp3963
aatp3964
Rp3965
sg89
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g25
g7
Ntp3986
Rp3987
(dp3988
g29
(dp3989
sg31
g5
(g206
g7
Ntp3990
Rp3991
(dp3992
g36
g37
(g210
tp3993
Rp3994
(dp3995
g43
g44
sg1410
g47
sg1409
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p3996
sbsg221
(lp3997
g1410
ag1409
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp3998
sg76
S'montage_mni_anat_0'
p3999
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp4000
sg88
Nsg89
Nsb(dp4001
sg5
(g25
g7
Ntp4002
Rp4003
(dp4004
g29
(dp4005
sg31
g5
(g1403
g7
Ntp4006
Rp4007
(dp4008
g1407
(lp4009
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp4010
Rp4011
(dp4012
g42
I00
sg1411
S'mni_anat_s.png'
p4013
sg1409
g47
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4014
sg1410
g47
sg43
g44
sbsg1421
(dp4015
g1411
Nssg1423
(lp4016
g1411
asg1425
Nsbsg72
Nsg65
g1464
sg74
(dp4017
sg76
g3999
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1464
sg85
Nsg86
(lp4018
sg88
Nsg89
Nsb(dp4019
sg5
(g25
g7
Ntp4020
Rp4021
(dp4022
g29
(dp4023
sg31
g5
(g1403
g7
Ntp4024
Rp4025
(dp4026
g1407
(lp4027
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp4028
Rp4029
(dp4030
g42
I00
sg1411
S'mni_anat_a.png'
p4031
sg1409
g47
sg1412
g1418
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4032
sg1410
g47
sg43
g44
sbsg1421
(dp4033
g1411
Nssg1423
(lp4034
g1411
asg1425
Nsbsg72
Nsg65
g1426
sg74
(dp4035
sg76
g3999
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1426
sg85
Nsg86
(lp4036
sg88
Nsg89
Nsb(dp4037
sg5
(g25
g7
Ntp4038
Rp4039
(dp4040
g29
(dp4041
sg31
g5
(g1403
g7
Ntp4042
Rp4043
(dp4044
g1407
(lp4045
g1491
asg36
g37
(g1413
tp4046
Rp4047
(dp4048
g42
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4049
sg1491
g47
sg43
g44
sbsg1421
(dp4050
g1497
Nssg1423
(lp4051
g1497
asg1425
Nsbsg72
Nsg79
I00
sg74
(dp4052
sg81
Nsg78
Nsg88
Nsg65
g1517
sg76
g3999
sg80
I00
sg82
Nsg83
I00
sg84
g1517
sg85
Nsg86
(lp4053
sg89
Nsb(dp4054
sg5
(g25
g7
Ntp4055
Rp4056
(dp4057
g29
(dp4058
sg31
g5
(g1403
g7
Ntp4059
Rp4060
(dp4061
g1407
(lp4062
g1491
asg36
g37
(g1413
tp4063
Rp4064
(dp4065
g42
I00
sg1419
g4049
sg1491
g47
sg43
g44
sbsg1421
(dp4066
g1497
Nssg1423
(lp4067
g1497
asg1425
Nsbsg72
Nsg65
g1499
sg74
(dp4068
sg76
g3999
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1499
sg85
Nsg86
(lp4069
sg88
Nsg89
Nsb(dp4070
sg5
(g25
g7
Ntp4071
Rp4072
(dp4073
g29
(dp4074
sg31
g5
(g206
g7
Ntp4075
Rp4076
(dp4077
g36
g37
(g210
tp4078
Rp4079
(dp4080
g43
g44
sg1441
g47
sg1442
g47
sg1443
g47
sg1444
g47
sbsg221
(lp4081
g1442
ag1443
ag1441
ag1444
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp4082
sg76
g3999
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp4083
sg88
Nsg89
Nsb(dp4084
ssg247
(dp4085
sg249
(dp4086
g3987
(dp4087
g4056
(dp4088
g253
(lp4089
(g1410
g1491
tp4090
assg4039
(dp4091
g253
(lp4092
(g1409
g1491
tp4093
asssg4003
(dp4094
g4072
(dp4095
g253
(lp4096
(g1411
g1443
tp4097
asssg4021
(dp4098
g4072
(dp4099
g253
(lp4100
(g1411
g1442
tp4101
asssg4039
(dp4102
g4021
(dp4103
g253
(lp4104
(g1497
g1409
tp4105
assg4072
(dp4106
g253
(lp4107
(g1497
g1444
tp4108
assg4003
(dp4109
g253
(lp4110
(g1497
g1409
tp4111
asssg4056
(dp4112
g4021
(dp4113
g253
(lp4114
(g1497
g1410
tp4115
assg4072
(dp4116
g253
(lp4117
(g1497
g1441
tp4118
assg4003
(dp4119
g253
(lp4120
(g1497
g1410
tp4121
asssg4072
(dp4122
ssg295
g4086
sg296
(dp4123
g3987
(dp4124
sg4003
(dp4125
g4056
g4119
sg4039
g4109
ssg4021
(dp4126
g4056
g4113
sg4039
g4103
ssg4039
(dp4127
g3987
g4091
ssg4056
(dp4128
g3987
g4088
ssg4072
(dp4129
g4056
g4116
sg4003
g4095
sg4039
g4106
sg4021
g4099
sssg304
g4086
sbsg65
g3999
sg76
g1067
sg84
g3999
sg85
g306
((lp4130
(lp4131
g309
ag306
((lp4132
(lp4133
g312
ag309
aa(lp4134
g314
ag315
aa(lp4135
g317
ag318
aa(lp4136
g320
ag321
aa(lp4137
g323
ag324
aa(lp4138
g326
ag327
aa(lp4139
g329
ag330
aa(lp4140
g332
ag333
aatp4141
Rp4142
aa(lp4143
g337
ag306
((lp4144
(lp4145
g312
ag337
aa(lp4146
g341
ag342
aa(lp4147
g344
ag345
aa(lp4148
g347
ag348
aa(lp4149
g350
ag351
aa(lp4150
g353
ag354
aa(lp4151
g356
ag357
aa(lp4152
g359
ag360
aa(lp4153
g362
ag363
aa(lp4154
g365
ag366
aa(lp4155
g368
ag369
aa(lp4156
g371
ag372
aa(lp4157
g374
ag375
aa(lp4158
g377
ag378
aa(lp4159
g380
ag381
aa(lp4160
g383
ag384
aa(lp4161
g386
ag387
aa(lp4162
g389
ag390
aa(lp4163
g392
ag393
aatp4164
Rp4165
aa(lp4166
g397
ag306
((lp4167
(lp4168
g312
ag397
aa(lp4169
g401
ag402
aatp4170
Rp4171
aatp4172
Rp4173
sg89
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg1957
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g25
g7
Ntp4188
Rp4189
(dp4190
g29
(dp4191
sg31
g5
(g1165
g7
Ntp4192
Rp4193
(dp4194
g36
g37
(g1169
tp4195
Rp4196
(dp4197
g42
I00
sg1173
g47
sg66
g47
sg1174
g47
sg49
g47
sg161
g47
sg50
g47
sg135
S'nn'
p4198
sg1175
g47
sg1176
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg52
g53
sg54
g5
(g55
g56
(dp4200
g58
g59
stp4201
Rp4202
(dp4203
g63
S'environ_items'
p4204
sg65
g54
sbsg1182
g47
sg1183
g47
sg67
g59
sg1184
g47
sg1185
g47
sg43
g44
sg1186
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'func_mni_fsl_warp_mask_0'
p4205
sg74
(dp4206
sg76
g1067
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g4205
sg85
Nsg86
(lp4207
sg88
Nsg89
Nsbg49
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g25
g7
Ntp4217
Rp4218
(dp4219
g29
(dp4220
sg31
g5
(g206
g7
Ntp4221
Rp4222
(dp4223
g36
g37
(g210
tp4224
Rp4225
(dp4226
g43
g44
sg1441
g47
sg1442
g47
sg1443
g47
sg1444
g47
sbsg221
(lp4227
g1442
ag1443
ag1441
ag1444
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp4228
sg76
S'montage_skull_0'
p4229
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp4230
sg88
Nsg89
Nsb(dp4231
sg5
(g25
g7
Ntp4232
Rp4233
(dp4234
g29
(dp4235
sg31
g5
(g1403
g7
Ntp4236
Rp4237
(dp4238
g1407
(lp4239
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp4240
Rp4241
(dp4242
g42
I00
sg1411
S'skull_vis_a.png'
p4243
sg1409
g47
sg1412
g1418
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4244
sg1410
g47
sg43
g44
sbsg1421
(dp4245
g1411
Nssg1423
(lp4246
g1411
asg1425
Nsbsg72
Nsg65
g1426
sg74
(dp4247
sg76
g4229
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1426
sg85
Nsg86
(lp4248
sg88
Nsg89
Nsb(dp4249
sg5
(g25
g7
Ntp4250
Rp4251
(dp4252
g29
(dp4253
sg31
g5
(g1403
g7
Ntp4254
Rp4255
(dp4256
g1407
(lp4257
g1491
asg36
g37
(g1413
tp4258
Rp4259
(dp4260
g42
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4261
sg1491
g47
sg43
g44
sbsg1421
(dp4262
g1497
Nssg1423
(lp4263
g1497
asg1425
Nsbsg72
Nsg65
g1499
sg74
(dp4264
sg76
g4229
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1499
sg85
Nsg86
(lp4265
sg88
Nsg89
Nsb(dp4266
sg5
(g25
g7
Ntp4267
Rp4268
(dp4269
g29
(dp4270
sg31
g5
(g1403
g7
Ntp4271
Rp4272
(dp4273
g1407
(lp4274
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp4275
Rp4276
(dp4277
g42
I00
sg1411
S'skull_vis_s.png'
p4278
sg1409
g47
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4279
sg1410
g47
sg43
g44
sbsg1421
(dp4280
g1411
Nssg1423
(lp4281
g1411
asg1425
Nsbsg72
Nsg65
g1464
sg74
(dp4282
sg76
g4229
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g1464
sg85
Nsg86
(lp4283
sg88
Nsg89
Nsb(dp4284
sg5
(g25
g7
Ntp4285
Rp4286
(dp4287
g29
(dp4288
sg31
g5
(g206
g7
Ntp4289
Rp4290
(dp4291
g36
g37
(g210
tp4292
Rp4293
(dp4294
g43
g44
sg1410
g47
sg1409
g47
sbsg221
(lp4295
g1410
ag1409
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp4296
sg76
g4229
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp4297
sg88
Nsg89
Nsb(dp4298
sg5
(g25
g7
Ntp4299
Rp4300
(dp4301
g29
(dp4302
sg31
g5
(g1403
g7
Ntp4303
Rp4304
(dp4305
g1407
(lp4306
g1491
asg36
g37
(g1413
tp4307
Rp4308
(dp4309
g42
I00
sg1419
g4261
sg1491
g47
sg43
g44
sbsg1421
(dp4310
g1497
Nssg1423
(lp4311
g1497
asg1425
Nsbsg72
Nsg79
I00
sg74
(dp4312
sg81
Nsg78
Nsg88
Nsg65
g1517
sg76
g4229
sg80
I00
sg82
Nsg83
I00
sg84
g1517
sg85
Nsg86
(lp4313
sg89
Nsb(dp4314
ssg247
(dp4315
sg249
(dp4316
g4218
(dp4317
sg4233
(dp4318
g4218
(dp4319
g253
(lp4320
(g1411
g1442
tp4321
asssg4251
(dp4322
g4233
(dp4323
g253
(lp4324
(g1497
g1410
tp4325
assg4218
(dp4326
g253
(lp4327
(g1497
g1441
tp4328
assg4268
(dp4329
g253
(lp4330
(g1497
g1410
tp4331
asssg4268
(dp4332
g4218
(dp4333
g253
(lp4334
(g1411
g1443
tp4335
asssg4286
(dp4336
g4251
(dp4337
g253
(lp4338
(g1410
g1491
tp4339
assg4300
(dp4340
g253
(lp4341
(g1409
g1491
tp4342
asssg4300
(dp4343
g4233
(dp4344
g253
(lp4345
(g1497
g1409
tp4346
assg4218
(dp4347
g253
(lp4348
(g1497
g1444
tp4349
assg4268
(dp4350
g253
(lp4351
(g1497
g1409
tp4352
assssg295
g4316
sg296
(dp4353
g4218
(dp4354
g4251
g4326
sg4268
g4333
sg4300
g4347
sg4233
g4319
ssg4233
(dp4355
g4251
g4323
sg4300
g4344
ssg4251
(dp4356
g4286
g4337
ssg4268
(dp4357
g4251
g4329
sg4300
g4350
ssg4286
(dp4358
sg4300
(dp4359
g4286
g4340
sssg304
g4316
sbsg65
g4229
sg76
g1067
sg84
g4229
sg85
g306
((lp4360
(lp4361
g309
ag306
((lp4362
(lp4363
g312
ag309
aa(lp4364
g314
ag315
aa(lp4365
g317
ag318
aa(lp4366
g320
ag321
aa(lp4367
g323
ag324
aa(lp4368
g326
ag327
aa(lp4369
g329
ag330
aa(lp4370
g332
ag333
aatp4371
Rp4372
aa(lp4373
g337
ag306
((lp4374
(lp4375
g312
ag337
aa(lp4376
g341
ag342
aa(lp4377
g344
ag345
aa(lp4378
g347
ag348
aa(lp4379
g350
ag351
aa(lp4380
g353
ag354
aa(lp4381
g356
ag357
aa(lp4382
g359
ag360
aa(lp4383
g362
ag363
aa(lp4384
g365
ag366
aa(lp4385
g368
ag369
aa(lp4386
g371
ag372
aa(lp4387
g374
ag375
aa(lp4388
g377
ag378
aa(lp4389
g380
ag381
aa(lp4390
g383
ag384
aa(lp4391
g386
ag387
aa(lp4392
g389
ag390
aa(lp4393
g392
ag393
aatp4394
Rp4395
aa(lp4396
g397
ag306
((lp4397
(lp4398
g312
ag397
aa(lp4399
g401
ag402
aatp4400
Rp4401
aatp4402
Rp4403
sg89
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2700
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2701
(g5
(g25
g7
Ntp4413
Rp4414
(dp4415
g29
(dp4416
sg31
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g36
g37
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g42
I00
sg43
g44
sS'tpattern'
p4425
g47
sg49
g47
sS'tr'
p4426
g47
sg50
g47
sg135
g47
sg2265
g2266
sS'tzero'
p4427
g47
sS'ignore'
p4428
g47
sS'rltplus'
p4429
g47
sg52
g53
sS'tslice'
p4430
g47
sg66
g47
sS'rlt'
p4431
g47
sg54
g5
(g55
g56
(dp4432
tp4433
Rp4434
(dp4435
g63
S'environ_items'
p4436
sg65
g54
sbsbsg2278
g2266
sg70
Nsg71
g53
sbsg72
Nsg65
S'func_slice_timing_correction_0'
p4437
sg74
(dp4438
sg76
g1067
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g4437
sg85
Nsg86
(lp4439
sg88
Nsg89
Nsbg49
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g25
g7
Ntp4449
Rp4450
(dp4451
g29
(dp4452
sg31
g5
(g1403
g7
Ntp4453
Rp4454
(dp4455
g1407
(lp4456
g3859
ag3860
ag67
asg36
g37
(g1413
tp4457
Rp4458
(dp4459
g42
I00
sg43
g44
sg3859
g47
sg1419
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4460
sg3860
g47
sg67
g47
sbsg1421
(dp4461
g49
Nssg1423
(lp4462
g49
asg1425
Nsbsg72
Nsg65
S'timeseries_roi'
p4463
sg74
(dp4464
sg76
S'roi_timeseries_0'
p4465
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g4463
sg85
Nsg86
(lp4466
sg88
Nsg89
Nsb(dp4467
sg5
(g25
g7
Ntp4468
Rp4469
(dp4470
g29
(dp4471
sg31
g5
(g206
g7
Ntp4472
Rp4473
(dp4474
g36
g37
(g210
tp4475
Rp4476
(dp4477
g43
g44
sS'roi_outputs'
p4478
g47
sbsg221
(lp4479
g4478
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp4480
sg76
g4465
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp4481
sg88
Nsg89
Nsb(dp4482
sg5
(g25
g7
Ntp4483
Rp4484
(dp4485
g29
(dp4486
sg31
g5
(g206
g7
Ntp4487
Rp4488
(dp4489
g36
g37
(g210
tp4490
Rp4491
(dp4492
g43
g44
sg67
(lp4493
I01
aI01
asg2009
g47
sbsg221
(lp4494
g2009
ag67
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp4495
sg76
g4465
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp4496
sg88
Nsg89
Nsb(dp4497
sg5
(g25
g7
Ntp4498
Rp4499
(dp4500
g29
(dp4501
sg31
g5
(g206
g7
Ntp4502
Rp4503
(dp4504
g36
g37
(g210
tp4505
Rp4506
(dp4507
g43
g44
sS'roi'
p4508
g47
sbsg221
(lp4509
g4508
asg223
I01
sbsg72
Nsg65
S'input_roi'
p4510
sg74
(dp4511
sg76
g4465
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g4510
sg85
Nsg86
(lp4512
sg88
Nsg89
Nsb(dp4513
ssg247
(dp4514
sg249
(dp4515
g4450
(dp4516
g4469
(dp4517
g253
(lp4518
(g49
g4478
tp4519
asssg4469
(dp4520
sg4484
(dp4521
g4450
(dp4522
g253
(lp4523
(g2009
g3859
tp4524
a(g67
g67
tp4525
asssg4499
(dp4526
g4450
(dp4527
g253
(lp4528
(g4508
g3860
tp4529
assssg295
g4515
sg296
(dp4530
g4450
(dp4531
g4499
g4527
sg4484
g4522
ssg4469
(dp4532
g4450
g4517
ssg4484
(dp4533
sg4499
(dp4534
ssg304
g4515
sbsg65
g4465
sg76
g1067
sg84
g4465
sg85
g306
((lp4535
(lp4536
g309
ag306
((lp4537
(lp4538
g312
ag309
aa(lp4539
g314
ag315
aa(lp4540
g317
ag318
aa(lp4541
g320
ag321
aa(lp4542
g323
ag324
aa(lp4543
g326
ag327
aa(lp4544
g329
ag330
aa(lp4545
g332
ag333
aatp4546
Rp4547
aa(lp4548
g337
ag306
((lp4549
(lp4550
g312
ag337
aa(lp4551
g341
ag342
aa(lp4552
g344
ag345
aa(lp4553
g347
ag348
aa(lp4554
g350
ag351
aa(lp4555
g353
ag354
aa(lp4556
g356
ag357
aa(lp4557
g359
ag360
aa(lp4558
g362
ag363
aa(lp4559
g365
ag366
aa(lp4560
g368
ag369
aa(lp4561
g371
ag372
aa(lp4562
g374
ag375
aa(lp4563
g377
ag378
aa(lp4564
g380
ag381
aa(lp4565
g383
ag384
aa(lp4566
g386
ag387
aa(lp4567
g389
ag390
aa(lp4568
g392
ag393
aatp4569
Rp4570
aa(lp4571
g397
ag306
((lp4572
(lp4573
g312
ag397
aa(lp4574
g401
ag402
aatp4575
Rp4576
aatp4577
Rp4578
sg89
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g25
g7
Ntp4589
Rp4590
(dp4591
g29
(dp4592
sg31
g5
(g1403
g7
Ntp4593
Rp4594
(dp4595
g1407
(lp4596
g3689
aS'selector'
p4597
aS'wm_sig_file'
p4598
aS'csf_sig_file'
p4599
aS'gm_sig_file'
p4600
aS'motion_file'
p4601
aS'compcor_ncomponents'
p4602
asg36
g37
(g1413
tp4603
Rp4604
(dp4605
g42
I00
sg43
g44
sg4601
g47
sg4602
g47
sg1419
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4606
sg4599
g47
sg4598
g47
sg4600
g47
sg4597
g47
sg3689
g47
sbsg1421
(dp4607
S'regressors_file'
p4608
NsS'residual_file'
p4609
Nssg1423
(lp4610
g4609
ag4608
asg1425
Nsbsg72
Nsg65
S'residuals'
p4611
sg74
(dp4612
sg76
S'nuisance_0'
p4613
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
(lp4614
(g4597
(lp4615
(dp4616
S'global'
p4617
I0
sS'linear'
p4618
I1
sS'wm'
p4619
I0
sS'pc1'
p4620
I0
sS'motion'
p4621
I0
sS'quadratic'
p4622
I1
sS'gm'
p4623
I0
sS'compcor'
p4624
I1
sS'csf'
p4625
I1
satp4626
a(g4602
(lp4627
I5
atp4628
asg83
I00
sg84
g4611
sg85
Nsg86
(lp4629
sg88
Nsg89
Nsb(dp4630
sg5
(g25
g7
Ntp4631
Rp4632
(dp4633
g29
(dp4634
sg31
g5
(g121
g7
Ntp4635
Rp4636
(dp4637
g36
g37
(g125
tp4638
Rp4639
(dp4640
g129
g47
sg43
g44
sg130
g47
sg131
g47
sg132
g47
sg133
g47
sg134
g47
sg135
g136
sg137
g47
sg138
g47
sg139
g47
sg140
g47
sg141
g47
sg142
g47
sg143
g47
sg144
g47
sg145
g47
sg146
g47
sg66
g47
sg147
g47
sg148
g47
sg149
g47
sg150
g47
sg42
I00
sg151
g47
sg152
g47
sg50
S'-applyisoxfm 2'
p4641
sg153
g47
sg154
g47
sg52
g53
sg155
g47
sg156
g47
sg157
g47
sg158
g47
sg159
g47
sg49
g47
sg160
g47
sg161
g47
sg162
g47
sg163
g47
sg164
g47
sg165
g47
sg166
g47
sg167
g47
sg168
g47
sg54
g5
(g55
g56
(dp4642
g58
g59
stp4643
Rp4644
(dp4645
g63
S'environ_items'
p4646
sg65
g54
sbsg174
g47
sg175
g47
sg67
g59
sg176
g47
sg177
g47
sg178
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'gm_anat_to_2mm_flirt_applyxfm'
p4647
sg74
(dp4648
sg76
g4613
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g4647
sg85
Nsg86
(lp4649
sg88
Nsg89
Nsb(dp4650
sg5
(g25
g7
Ntp4651
Rp4652
(dp4653
g29
(dp4654
sg31
g5
(g121
g7
Ntp4655
Rp4656
(dp4657
g36
g37
(g125
tp4658
Rp4659
(dp4660
g129
g47
sg43
g44
sg130
g47
sg131
g47
sg132
g47
sg133
g47
sg134
g47
sg135
g136
sg137
g47
sg138
g47
sg139
g47
sg140
g47
sg141
g47
sg142
g47
sg143
g47
sg144
g47
sg145
g47
sg146
g47
sg66
g47
sg147
g47
sg148
g47
sg149
g47
sg150
g47
sg42
I00
sg151
g47
sg152
g47
sg50
g4641
sg153
g47
sg154
g47
sg52
g53
sg155
g47
sg156
g47
sg157
g47
sg158
g47
sg159
g47
sg49
g47
sg160
g47
sg161
g47
sg162
g47
sg163
g47
sg164
g47
sg165
g47
sg166
g47
sg167
g47
sg168
g47
sg54
g5
(g55
g56
(dp4661
g58
g59
stp4662
Rp4663
(dp4664
g63
S'environ_items'
p4665
sg65
g54
sbsg174
g47
sg175
g47
sg67
g59
sg176
g47
sg177
g47
sg178
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'ho_mni_to_2mm_flirt_applyxfm'
p4666
sg74
(dp4667
sg76
g4613
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g4666
sg85
Nsg86
(lp4668
sg88
Nsg89
Nsb(dp4669
sg5
(g25
g7
Ntp4670
Rp4671
(dp4672
g29
(dp4673
sg31
g5
(g206
g7
Ntp4674
Rp4675
(dp4676
g36
g37
(g210
tp4677
Rp4678
(dp4679
g43
g44
sS'regressors'
p4680
g47
sg3689
g47
sbsg221
(lp4681
g3689
ag4680
asg223
I01
sbsg72
Nsg65
g243
sg74
(dp4682
sg76
g4613
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g243
sg85
Nsg86
(lp4683
sg88
Nsg89
Nsb(dp4684
sg5
(g25
g7
Ntp4685
Rp4686
(dp4687
g29
(dp4688
sg31
g5
(g206
g7
Ntp4689
Rp4690
(dp4691
g36
g37
(g210
tp4692
Rp4693
(dp4694
S'motion_components'
p4695
g47
sS'anat_to_mni_initial_xfm'
p4696
g47
sS'lat_ventricles_mask'
p4697
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4698
sg467
g47
sS'anat_to_mni_rigid_xfm'
p4699
g47
sg4602
g47
sS'anat_to_mni_affine_xfm'
p4700
g47
sg4597
g47
sg466
g47
sS'template_brain'
p4701
g47
sg3476
g47
sS'mni_to_anat_linear_xfm'
p4702
g47
sg468
g47
sg43
g44
sg3689
g47
sbsg221
(lp4703
g3689
ag466
ag468
ag467
ag4702
ag4696
ag4699
ag4700
ag3476
ag4697
ag4695
ag4597
ag4602
ag4701
asg223
I01
sbsg72
Nsg65
g224
sg74
(dp4704
sg76
g4613
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g224
sg85
Nsg86
(lp4705
sg88
Nsg89
Nsb(dp4706
sg5
(g25
g7
Ntp4707
Rp4708
(dp4709
g29
(dp4710
sg31
g5
(g121
g7
Ntp4711
Rp4712
(dp4713
g36
g37
(g125
tp4714
Rp4715
(dp4716
g129
g47
sg43
g44
sg130
g47
sg131
g47
sg132
g47
sg133
g47
sg134
g47
sg135
g136
sg137
g47
sg138
g47
sg139
g47
sg140
g47
sg141
g47
sg142
g47
sg143
g47
sg144
g47
sg145
g47
sg146
g47
sg66
g47
sg147
g47
sg148
g47
sg149
g47
sg150
g47
sg42
I00
sg151
g47
sg152
g47
sg50
g4641
sg153
g47
sg154
g47
sg52
g53
sg155
g47
sg156
g47
sg157
g47
sg158
g47
sg159
g47
sg49
g47
sg160
g47
sg161
g47
sg162
g47
sg163
g47
sg164
g47
sg165
g47
sg166
g47
sg167
g47
sg168
g47
sg54
g5
(g55
g56
(dp4717
g58
g59
stp4718
Rp4719
(dp4720
g63
S'environ_items'
p4721
sg65
g54
sbsg174
g47
sg175
g47
sg67
g59
sg176
g47
sg177
g47
sg178
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'wm_anat_to_2mm_flirt_applyxfm'
p4722
sg74
(dp4723
sg76
g4613
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g4722
sg85
Nsg86
(lp4724
sg88
Nsg89
Nsb(dp4725
sg5
(g25
g7
Ntp4726
Rp4727
(dp4728
g29
(dp4729
sg31
g5
(g121
g7
Ntp4730
Rp4731
(dp4732
g36
g37
(g125
tp4733
Rp4734
(dp4735
g129
g47
sg43
g44
sg130
g47
sg131
g47
sg132
g47
sg133
g47
sg134
g47
sg135
g136
sg137
g47
sg138
g47
sg139
g47
sg140
g47
sg141
g47
sg142
g47
sg143
g47
sg144
g47
sg145
g47
sg146
g47
sg66
g47
sg147
g47
sg148
g47
sg149
g47
sg150
g47
sg42
I00
sg151
g47
sg152
g47
sg50
g4641
sg153
g47
sg154
g47
sg52
g53
sg155
g47
sg156
g47
sg157
g47
sg158
g47
sg159
g47
sg49
g47
sg160
g47
sg161
g47
sg162
g47
sg163
g47
sg164
g47
sg165
g47
sg166
g47
sg167
g47
sg168
g47
sg54
g5
(g55
g56
(dp4736
g58
g59
stp4737
Rp4738
(dp4739
g63
S'environ_items'
p4740
sg65
g54
sbsg174
g47
sg175
g47
sg67
g59
sg176
g47
sg177
g47
sg178
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'csf_anat_to_2mm_flirt_applyxfm'
p4741
sg74
(dp4742
sg76
g4613
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g4741
sg85
Nsg86
(lp4743
sg88
Nsg89
Nsb(dp4744
sg5
(g25
g7
Ntp4745
Rp4746
(dp4747
g29
(dp4748
sg31
g5
(g121
g7
Ntp4749
Rp4750
(dp4751
g36
g37
(g125
tp4752
Rp4753
(dp4754
g129
g47
sg43
g44
sg130
g47
sg131
g47
sg132
g47
sg133
g47
sg134
g47
sg135
g47
sg137
g47
sg138
g47
sg139
g47
sg140
g47
sg141
g47
sg142
g47
sg143
g47
sg144
g47
sg145
g47
sg146
g47
sg66
g47
sg147
g47
sg148
g47
sg149
g47
sg150
g47
sg42
I00
sg151
g47
sg152
g47
sg50
g4641
sg153
g47
sg154
g47
sg52
g53
sg155
g47
sg156
g47
sg157
g47
sg158
g47
sg159
g47
sg49
g47
sg160
g47
sg161
g47
sg162
g47
sg163
g47
sg164
g47
sg165
g47
sg166
g47
sg167
g47
sg168
g47
sg54
g5
(g55
g56
(dp4755
g58
g59
stp4756
Rp4757
(dp4758
g63
S'environ_items'
p4759
sg65
g54
sbsg174
g47
sg175
g47
sg67
g59
sg176
g47
sg177
g47
sg178
g47
sbsg69
g59
sg70
Nsg71
g53
sbsg72
Nsg65
S'func_to_2mm_flirt_applyxfm'
p4760
sg74
(dp4761
sg76
g4613
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g4760
sg85
Nsg86
(lp4762
sg88
Nsg89
Nsb(dp4763
sg5
(g25
g7
Ntp4764
Rp4765
(dp4766
g29
(dp4767
sg31
g5
(g1403
g7
Ntp4768
Rp4769
(dp4770
g1407
(lp4771
g3859
aS'ventricles_mask_file'
p4772
aS'wm_seg_file'
p4773
aS'csf_seg_file'
p4774
aS'gm_seg_file'
p4775
ag695
ag438
ag963
asg36
g37
(g1413
tp4776
Rp4777
(dp4778
g42
I00
sg43
g44
sg695
g47
sg438
g47
sg3859
g47
sg1419
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4779
sg4775
g47
sg4772
g47
sg963
g47
sg4774
g47
sg4773
g47
sbsg1421
(dp4780
S'file_gm'
p4781
NsS'file_wm'
p4782
NsS'file_csf'
p4783
Nssg1423
(lp4784
g4782
ag4783
ag4781
asg1425
Nsbsg72
Nsg65
S'tissue_masks'
p4785
sg74
(dp4786
sg76
g4613
sg78
Nsg79
I00
sg80
I00
sg81
Nsg82
Nsg83
I00
sg84
g4785
sg85
Nsg86
(lp4787
sg88
Nsg89
Nsb(dp4788
ssg247
(dp4789
sg249
(dp4790
g4590
(dp4791
g4671
(dp4792
g253
(lp4793
(g4609
g3689
tp4794
a(g4608
g4680
tp4795
asssg4632
(dp4796
g4765
(dp4797
g253
(lp4798
(g49
g4775
tp4799
asssg4652
(dp4800
g4765
(dp4801
g253
(lp4802
(g49
g4772
tp4803
asssg4671
(dp4804
sg4686
(dp4805
g4632
(dp4806
g253
(lp4807
(g467
g66
tp4808
a(g467
g132
tp4809
assg4652
(dp4810
g253
(lp4811
(g4702
g130
tp4812
a(g4697
g66
tp4813
a(g468
g132
tp4814
assg4727
(dp4815
g253
(lp4816
(g468
g66
tp4817
a(g468
g132
tp4818
assg4590
(dp4819
g253
(lp4820
(g3689
g3689
tp4821
a(g4695
g4601
tp4822
a(g4597
g4597
tp4823
a(g4602
g4602
tp4824
assg4746
(dp4825
g253
(lp4826
(g3689
g66
tp4827
a(g468
g132
tp4828
a(g3476
g130
tp4829
assg4708
(dp4830
g253
(lp4831
(g466
g66
tp4832
a(g466
g132
tp4833
asssg4708
(dp4834
g4765
(dp4835
g253
(lp4836
(g49
g4773
tp4837
asssg4727
(dp4838
g4765
(dp4839
g253
(lp4840
(g49
g4774
tp4841
asssg4746
(dp4842
g4765
(dp4843
g253
(lp4844
(g49
g3859
tp4845
asssg4765
(dp4846
g4590
(dp4847
g253
(lp4848
(g4782
g4598
tp4849
a(g4783
g4599
tp4850
a(g4781
g4600
tp4851
assssg295
g4790
sg296
(dp4852
g4590
(dp4853
g4686
g4819
sg4765
g4847
ssg4632
(dp4854
g4686
g4806
ssg4652
(dp4855
g4686
g4810
ssg4671
(dp4856
g4590
g4792
ssg4686
(dp4857
sg4708
(dp4858
g4686
g4830
ssg4727
(dp4859
g4686
g4815
ssg4746
(dp4860
g4686
g4825
ssg4765
(dp4861
g4652
g4801
sg4727
g4839
sg4632
g4797
sg4746
g4843
sg4708
g4835
sssg304
g4790
sbsg65
g4613
sg76
g1067
sg84
g4613
sg85
g306
((lp4862
(lp4863
g309
ag306
((lp4864
(lp4865
g312
ag309
aa(lp4866
g314
ag315
aa(lp4867
g317
ag318
aa(lp4868
g320
ag321
aa(lp4869
g323
ag324
aa(lp4870
g326
ag327
aa(lp4871
g329
ag330
aa(lp4872
g332
ag333
aatp4873
Rp4874
aa(lp4875
g337
ag306
((lp4876
(lp4877
g312
ag337
aa(lp4878
g341
ag342
aa(lp4879
g344
ag345
aa(lp4880
g347
ag348
aa(lp4881
g350
ag351
aa(lp4882
g353
ag354
aa(lp4883
g356
ag357
aa(lp4884
g359
ag360
aa(lp4885
g362
ag363
aa(lp4886
g365
ag366
aa(lp4887
g368
ag369
aa(lp4888
g371
ag372
aa(lp4889
g374
ag375
aa(lp4890
g377
ag378
aa(lp4891
g380
ag381
aa(lp4892
g383
ag384
aa(lp4893
g386
ag387
aa(lp4894
g389
ag390
aa(lp4895
g392
ag393
aatp4896
Rp4897
aa(lp4898
g397
ag306
((lp4899
(lp4900
g312
ag397
aa(lp4901
g401
ag402
aatp4902
Rp4903
aatp4904
Rp4905
sg89
NsbS'outputspec.subject'
p4906
tp4907
sg1935
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg1936
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Completed'
p4921
sS'strat_0'
p4922
(lp4923
g2247
ag1140
ag305
ag4437
ag2472
ag2893
aS'func_to_anat_FLIRT_0'
p4924
ag3480
ag1900
ag4613
ag3823
ag4465
ag3848
asg1953
g3705
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1430304086.584258
s.