(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(g6
g7
Ntp18
Rp19
(dp20
g11
g5
(g12
g7
Ntp21
Rp22
(dp23
g16
(dp24
g5
(cnipype.pipeline.engine
Node
p25
g7
Ntp26
Rp27
(dp28
S'input_source'
p29
(dp30
sS'_interface'
p31
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p32
g7
Ntp33
Rp34
(dp35
S'inputs'
p36
ctraits.traits
__newobj__
p37
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p38
tp39
Rp40
(dp41
S'ignore_exception'
p42
I00
sS'nan2zeros'
p43
ctraits.trait_base
_Undefined
p44
(tRp45
sS'op_string'
p46
S'-mas %s '
p47
sS'out_file'
p48
g45
sS'args'
p49
g45
sS'internal_datatype'
p50
g45
sS'__traits_version__'
p51
S'4.5.0'
p52
sS'terminal_output'
p53
S'stream'
p54
sS'environ'
p55
g5
(ctraits.trait_handlers
TraitDictObject
p56
c__builtin__
dict
p57
(dp58
S'FSLOUTPUTTYPE'
p59
S'NIFTI_GZ'
p60
stp61
Rp62
(dp63
S'name_items'
p64
S'environ_items'
p65
sS'name'
p66
g55
sbsS'in_file'
p67
g45
sS'output_type'
p68
g60
sS'output_datatype'
p69
g45
sS'operand_files'
p70
g45
sbsS'_output_type'
p71
g60
sS'_environ'
p72
NsS'_terminal_output'
p73
g54
sbsS'_result'
p74
Nsg66
S'CSF_mask'
p75
sS'plugin_args'
p76
(dp77
sS'_hierarchy'
p78
S'CSF'
p79
sS'itersource'
p80
NsS'run_without_submitting'
p81
I00
sS'synchronize'
p82
I00
sS'parameterization'
p83
NsS'iterables'
p84
NsS'_got_inputs'
p85
I00
sS'_id'
p86
g75
sS'config'
p87
NsS'needed_outputs'
p88
(lp89
sS'overwrite'
p90
NsS'base_dir'
p91
Nsb(dp92
sg5
(g25
g7
Ntp93
Rp94
(dp95
g29
(dp96
sg31
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p97
g7
Ntp98
Rp99
(dp100
g36
g37
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p101
tp102
Rp103
(dp104
g42
I00
sg51
g52
sg46
g45
sS'out_data_type'
p105
g45
sg48
g45
sg49
g45
sS'in_file2'
p106
g45
sg53
g54
sg55
g5
(g56
g57
(dp107
g59
g60
stp108
Rp109
(dp110
g64
S'environ_items'
p111
sg66
g55
sbsg67
g45
sg68
g60
sS'suffix'
p112
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'binarize_threshold_CSF'
p113
sg76
(dp114
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g113
sg87
Nsg88
(lp115
sg90
Nsg91
Nsb(dp116
sg5
(g25
g7
Ntp117
Rp118
(dp119
g29
(dp120
sg31
g5
(cnipype.interfaces.utility
IdentityInterface
p121
g7
Ntp122
Rp123
(dp124
g36
g37
(cnipype.interfaces.base
DynamicTraitedSpec
p125
tp126
Rp127
(dp128
S'standard2highres_rig'
p129
g45
sg51
g52
sS'standard2highres_init'
p130
g45
sS'tissue_prior'
p131
g45
sS'standard2highres_mat'
p132
g45
sS'brain'
p133
g45
sS'probability_map'
p134
g45
sS'threshold'
p135
g45
sbsS'_fields'
p136
(lp137
g131
ag135
ag133
ag134
ag130
ag132
ag129
asS'_mandatory_inputs'
p138
I01
sbsg74
Nsg66
S'inputspec'
p139
sg76
(dp140
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp141
sg90
Nsg91
Nsb(dp142
sg5
(g25
g7
Ntp143
Rp144
(dp145
g29
(dp146
sg31
g5
(g121
g7
Ntp147
Rp148
(dp149
g36
g37
(g125
tp150
Rp151
(dp152
g51
g52
sS'segment_combo'
p153
g45
sS'segment_mask'
p154
g45
sS'tissueprior_mni2t1'
p155
g45
sS'segment_bin'
p156
g45
sbsg136
(lp157
g155
ag153
ag156
ag154
asg138
I01
sbsg74
Nsg66
S'outputspec'
p158
sg76
(dp159
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp160
sg90
Nsg91
Nsb(dp161
sg5
(g25
g7
Ntp162
Rp163
(dp164
g29
(dp165
sg31
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p166
g7
Ntp167
Rp168
(dp169
g36
g37
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p170
tp171
Rp172
(dp173
S'rigid2D'
p174
g45
sg51
g52
sS'in_matrix_file'
p175
g45
sS'verbose'
p176
g45
sS'reference'
p177
g45
sS'padding_size'
p178
g45
sS'sinc_window'
p179
g45
sS'interp'
p180
S'nearestneighbour'
p181
sS'wmnorms'
p182
g45
sS'coarse_search'
p183
g45
sS'no_resample'
p184
g45
sS'sinc_width'
p185
g45
sS'in_weight'
p186
g45
sS'fieldmap'
p187
g45
sS'echospacing'
p188
g45
sS'ref_weight'
p189
g45
sS'apply_isoxfm'
p190
g45
sS'fieldmapmask'
p191
g45
sg67
g45
sS'bbrtype'
p192
g45
sS'no_clamp'
p193
g45
sS'force_scaling'
p194
g45
sS'pedir'
p195
g45
sg42
I00
sS'display_init'
p196
g45
sS'schedule'
p197
g45
sg49
g45
sS'uses_qform'
p198
g45
sS'wmcoords'
p199
g45
sg53
g54
sS'fine_search'
p200
g45
sS'angle_rep'
p201
g45
sS'no_search'
p202
g45
sS'apply_xfm'
p203
I01
sS'wm_seg'
p204
g45
sg48
g45
sS'bbrslope'
p205
g45
sS'datatype'
p206
g45
sS'save_log'
p207
g45
sS'dof'
p208
g45
sS'out_matrix_file'
p209
g45
sS'no_resample_blur'
p210
g45
sS'min_sampling'
p211
g45
sS'cost_func'
p212
g45
sS'cost'
p213
g45
sg55
g5
(g56
g57
(dp214
g59
g60
stp215
Rp216
(dp217
g64
S'environ_items'
p218
sg66
g55
sbsS'searchr_x'
p219
g45
sS'out_log'
p220
g45
sg68
g60
sS'searchr_z'
p221
g45
sS'bins'
p222
g45
sS'searchr_y'
p223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'CSF_prior_mni_to_t1'
p224
sg76
(dp225
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g224
sg87
Nsg88
(lp226
sg90
Nsg91
Nsb(dp227
sg5
(g25
g7
Ntp228
Rp229
(dp230
g29
(dp231
sg31
g5
(g32
g7
Ntp232
Rp233
(dp234
g36
g37
(g38
tp235
Rp236
(dp237
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp238
g59
g60
stp239
Rp240
(dp241
g64
S'environ_items'
p242
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'overlap_CSF_map_with_prior'
p243
sg76
(dp244
sg78
g79
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g243
sg87
Nsg88
(lp245
sg90
Nsg91
Nsb(dp246
ssS'graph'
p247
(dp248
sS'succ'
p249
(dp250
g27
(dp251
g144
(dp252
S'connect'
p253
(lp254
(g48
g154
tp255
asssg94
(dp256
g27
(dp257
g253
(lp258
(g48
g67
tp259
assg144
(dp260
g253
(lp261
(g48
g156
tp262
asssg118
(dp263
g229
(dp264
g253
(lp265
(g134
g67
tp266
assg163
(dp267
g253
(lp268
(g131
g67
tp269
a(g133
g177
tp270
a(g132
g175
tp271
assg94
(dp272
g253
(lp273
((g135
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p274
(ttp275
g46
tp276
asssg144
(dp277
sg163
(dp278
g229
(dp279
g253
(lp280
(g48
g70
tp281
assg144
(dp282
g253
(lp283
(g48
g155
tp284
assg27
(dp285
g253
(lp286
(g48
g70
tp287
asssg229
(dp288
g94
(dp289
g253
(lp290
(g48
g67
tp291
assg144
(dp292
g253
(lp293
(g48
g153
tp294
assssS'edge'
p295
g250
sS'pred'
p296
(dp297
g27
(dp298
g94
g257
sg163
g285
ssg94
(dp299
g229
g289
sg118
g272
ssg118
(dp300
sg144
(dp301
g229
g292
sg27
g252
sg163
g282
sg94
g260
ssg163
(dp302
g118
g267
ssg229
(dp303
g118
g264
sg163
g279
sssS'adj'
p304
g250
sbsg66
g79
sg78
S'seg_preproc_0'
p305
sg86
g79
sg87
ccollections
OrderedDict
p306
((lp307
(lp308
S'logging'
p309
ag306
((lp310
(lp311
S'__name__'
p312
ag309
aa(lp313
S'workflow_level'
p314
aS'INFO'
p315
aa(lp316
S'filemanip_level'
p317
aS'INFO'
p318
aa(lp319
S'interface_level'
p320
aS'INFO'
p321
aa(lp322
S'log_to_file'
p323
aS'True'
p324
aa(lp325
S'log_directory'
p326
aS'/mnt/ssd1/data/outputs/CPAC/CPAC_test1/outputs/logs/11_987690887'
p327
aa(lp328
S'log_size'
p329
aS'16384000'
p330
aa(lp331
S'log_rotate'
p332
aS'4'
p333
aatp334
Rp335
aa(lp336
S'execution'
p337
ag306
((lp338
(lp339
g312
ag337
aa(lp340
S'create_report'
p341
aS'true'
p342
aa(lp343
S'crashdump_dir'
p344
aS'/home/eric/Documents/m2g/packages/functional/CPAC_pipes'
p345
aa(lp346
S'display_variable'
p347
aS':1'
p348
aa(lp349
S'hash_method'
p350
aS'timestamp'
p351
aa(lp352
S'job_finished_timeout'
p353
aS'5'
p354
aa(lp355
S'keep_inputs'
p356
aS'false'
p357
aa(lp358
S'local_hash_check'
p359
aS'true'
p360
aa(lp361
S'matplotlib_backend'
p362
aS'Agg'
p363
aa(lp364
S'plugin'
p365
aS'Linear'
p366
aa(lp367
S'remove_node_directories'
p368
aS'false'
p369
aa(lp370
S'remove_unnecessary_outputs'
p371
aS'true'
p372
aa(lp373
S'single_thread_matlab'
p374
aS'true'
p375
aa(lp376
S'stop_on_first_crash'
p377
aS'false'
p378
aa(lp379
S'stop_on_first_rerun'
p380
aS'false'
p381
aa(lp382
S'use_relative_paths'
p383
aS'false'
p384
aa(lp385
S'stop_on_unknown_version'
p386
aS'false'
p387
aa(lp388
S'write_provenance'
p389
aS'false'
p390
aa(lp391
S'parameterize_dirs'
p392
aS'true'
p393
aatp394
Rp395
aa(lp396
S'check'
p397
ag306
((lp398
(lp399
g312
ag397
aa(lp400
S'interval'
p401
aS'1209600'
p402
aatp403
Rp404
aatp405
Rp406
sg91
Nsb(dp407
sg5
(g25
g7
Ntp408
Rp409
(dp410
g29
(dp411
sg31
g5
(g121
g7
Ntp412
Rp413
(dp414
g36
g37
(g125
tp415
Rp416
(dp417
S'partial_volume_files'
p418
g45
sg51
g52
sS'gm_combo'
p419
g45
sS'mixeltype'
p420
g45
sS'csf_mni2t1'
p421
g45
sS'wm_bin'
p422
g45
sS'csf_bin'
p423
g45
sS'probability_maps'
p424
g45
sS'wm_mni2t1'
p425
g45
sS'csf_combo'
p426
g45
sS'wm_combo'
p427
g45
sS'wm_mask'
p428
g45
sS'gm_mask'
p429
g45
sS'csf_mask'
p430
g45
sS'gm_bin'
p431
g45
sS'partial_volume_map'
p432
g45
sS'gm_mni2t1'
p433
g45
sbsg136
(lp434
g421
ag426
ag423
ag430
ag433
ag419
ag431
ag429
ag425
ag427
ag422
ag424
ag420
ag432
ag418
ag428
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp435
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp436
sg90
Nsg91
Nsb(dp437
sg5
(g25
g7
Ntp438
Rp439
(dp440
g29
(dp441
sg31
g5
(cnipype.interfaces.fsl.preprocess
FAST
p442
g7
Ntp443
Rp444
(dp445
g36
g37
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p446
tp447
Rp448
(dp449
S'number_classes'
p450
g45
sS'out_basename'
p451
S'segment'
p452
sS'hyper'
p453
g45
sg176
g45
sS'init_seg_smooth'
p454
g45
sS'init_transform'
p455
g45
sS'no_pve'
p456
g45
sS'output_biascorrected'
p457
g45
sS'mixel_smooth'
p458
g45
sS'segments'
p459
I01
sS'iters_afterbias'
p460
g45
sS'bias_lowpass'
p461
g45
sS'other_priors'
p462
g45
sg51
g52
sg42
I00
sS'img_type'
p463
I1
sg49
g45
sg424
I01
sS'manual_seg'
p464
g45
sg53
g54
sS'output_biasfield'
p465
g45
sS'no_bias'
p466
g45
sS'use_priors'
p467
g45
sS'in_files'
p468
g45
sS'segment_iters'
p469
g45
sg55
g5
(g56
g57
(dp470
g59
g60
stp471
Rp472
(dp473
g64
S'environ_items'
p474
sg66
g55
sbsg68
g60
sS'bias_iters'
p475
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
g452
sg76
(dp476
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g452
sg87
Nsg88
(lp477
sg90
Nsg91
Nsb(dp478
sg5
(g25
g7
Ntp479
Rp480
(dp481
g29
(dp482
sg31
g5
(g121
g7
Ntp483
Rp484
(dp485
g36
g37
(g125
tp486
Rp487
(dp488
g129
g45
sg51
g52
sg130
g45
sg133
g45
sS'PRIOR_GRAY'
p489
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p490
sg132
g45
sS'PRIOR_CSF'
p491
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p492
sS'PRIOR_WHITE'
p493
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p494
sbsg136
(lp495
g133
ag130
ag132
ag129
ag491
ag489
ag493
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp496
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp497
sg90
Nsg91
Nsb(dp498
sg5
(g25
g7
Ntp499
Rp500
(dp501
g29
(dp502
sg31
g5
(g121
g7
Ntp503
Rp504
(dp505
g36
g37
(g125
tp506
Rp507
(dp508
g51
g52
sS'gm_threshold'
p509
(lp510
F0.7
asbsg136
(lp511
g509
asg138
I01
sbsg74
Nsg66
g509
sg76
(dp512
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g509
(lp513
F0.7
atp514
sg85
I00
sg86
g509
sg87
Nsg88
(lp515
sg90
Nsg91
Nsb(dp516
sg5
(g6
g7
Ntp517
Rp518
(dp519
g11
g5
(g12
g7
Ntp520
Rp521
(dp522
g16
(dp523
g5
(g25
g7
Ntp524
Rp525
(dp526
g29
(dp527
sg31
g5
(g32
g7
Ntp528
Rp529
(dp530
g36
g37
(g38
tp531
Rp532
(dp533
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp534
g59
g60
stp535
Rp536
(dp537
g64
S'environ_items'
p538
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'WM_mask'
p539
sg76
(dp540
sg78
S'WM'
p541
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g539
sg87
Nsg88
(lp542
sg90
Nsg91
Nsb(dp543
sg5
(g25
g7
Ntp544
Rp545
(dp546
g29
(dp547
sg31
g5
(g97
g7
Ntp548
Rp549
(dp550
g36
g37
(g101
tp551
Rp552
(dp553
g42
I00
sg51
g52
sg46
g45
sg105
g45
sg48
g45
sg49
g45
sg106
g45
sg53
g54
sg55
g5
(g56
g57
(dp554
g59
g60
stp555
Rp556
(dp557
g64
S'environ_items'
p558
sg66
g55
sbsg67
g45
sg68
g60
sg112
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'binarize_threshold_WM'
p559
sg76
(dp560
sg78
g541
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g559
sg87
Nsg88
(lp561
sg90
Nsg91
Nsb(dp562
sg5
(g25
g7
Ntp563
Rp564
(dp565
g29
(dp566
sg31
g5
(g121
g7
Ntp567
Rp568
(dp569
g36
g37
(g125
tp570
Rp571
(dp572
g129
g45
sg51
g52
sg130
g45
sg131
g45
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sbsg136
(lp573
g131
ag135
ag133
ag134
ag130
ag132
ag129
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp574
sg78
g541
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp575
sg90
Nsg91
Nsb(dp576
sg5
(g25
g7
Ntp577
Rp578
(dp579
g29
(dp580
sg31
g5
(g32
g7
Ntp581
Rp582
(dp583
g36
g37
(g38
tp584
Rp585
(dp586
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp587
g59
g60
stp588
Rp589
(dp590
g64
S'environ_items'
p591
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'overlap_WM_map_with_prior'
p592
sg76
(dp593
sg78
g541
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g592
sg87
Nsg88
(lp594
sg90
Nsg91
Nsb(dp595
sg5
(g25
g7
Ntp596
Rp597
(dp598
g29
(dp599
sg31
g5
(g121
g7
Ntp600
Rp601
(dp602
g36
g37
(g125
tp603
Rp604
(dp605
g51
g52
sg153
g45
sg154
g45
sg155
g45
sg156
g45
sbsg136
(lp606
g155
ag153
ag156
ag154
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp607
sg78
g541
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp608
sg90
Nsg91
Nsb(dp609
sg5
(g25
g7
Ntp610
Rp611
(dp612
g29
(dp613
sg31
g5
(g166
g7
Ntp614
Rp615
(dp616
g36
g37
(g170
tp617
Rp618
(dp619
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g181
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g45
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
I01
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp620
g59
g60
stp621
Rp622
(dp623
g64
S'environ_items'
p624
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'WM_prior_mni_to_t1'
p625
sg76
(dp626
sg78
g541
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g625
sg87
Nsg88
(lp627
sg90
Nsg91
Nsb(dp628
ssg247
(dp629
sg249
(dp630
g525
(dp631
g597
(dp632
g253
(lp633
(g48
g154
tp634
asssg545
(dp635
g597
(dp636
g253
(lp637
(g48
g156
tp638
assg525
(dp639
g253
(lp640
(g48
g67
tp641
asssg564
(dp642
g545
(dp643
g253
(lp644
((g135
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p645
(ttp646
g46
tp647
assg611
(dp648
g253
(lp649
(g131
g67
tp650
a(g133
g177
tp651
a(g132
g175
tp652
assg578
(dp653
g253
(lp654
(g134
g67
tp655
asssg578
(dp656
g597
(dp657
g253
(lp658
(g48
g153
tp659
assg545
(dp660
g253
(lp661
(g48
g67
tp662
asssg597
(dp663
sg611
(dp664
g597
(dp665
g253
(lp666
(g48
g155
tp667
assg578
(dp668
g253
(lp669
(g48
g70
tp670
assg525
(dp671
g253
(lp672
(g48
g70
tp673
assssg295
g630
sg296
(dp674
g525
(dp675
g545
g639
sg611
g671
ssg545
(dp676
g578
g660
sg564
g643
ssg564
(dp677
sg578
(dp678
g564
g653
sg611
g668
ssg597
(dp679
g545
g636
sg525
g632
sg611
g665
sg578
g657
ssg611
(dp680
g564
g648
sssg304
g630
sbsg66
g541
sg78
g305
sg86
g541
sg87
g306
((lp681
(lp682
g309
ag306
((lp683
(lp684
g312
ag309
aa(lp685
g314
ag315
aa(lp686
g317
ag318
aa(lp687
g320
ag321
aa(lp688
g323
ag324
aa(lp689
g326
ag327
aa(lp690
g329
ag330
aa(lp691
g332
ag333
aatp692
Rp693
aa(lp694
g337
ag306
((lp695
(lp696
g312
ag337
aa(lp697
g341
ag342
aa(lp698
g344
ag345
aa(lp699
g347
ag348
aa(lp700
g350
ag351
aa(lp701
g353
ag354
aa(lp702
g356
ag357
aa(lp703
g359
ag360
aa(lp704
g362
ag363
aa(lp705
g365
ag366
aa(lp706
g368
ag369
aa(lp707
g371
ag372
aa(lp708
g374
ag375
aa(lp709
g377
ag378
aa(lp710
g380
ag381
aa(lp711
g383
ag384
aa(lp712
g386
ag387
aa(lp713
g389
ag390
aa(lp714
g392
ag393
aatp715
Rp716
aa(lp717
g397
ag306
((lp718
(lp719
g312
ag397
aa(lp720
g401
ag402
aatp721
Rp722
aatp723
Rp724
sg91
Nsb(dp725
sg5
(g25
g7
Ntp726
Rp727
(dp728
g29
(dp729
sg31
g5
(g121
g7
Ntp730
Rp731
(dp732
g36
g37
(g125
tp733
Rp734
(dp735
g51
g52
sS'wm_threshold'
p736
(lp737
F0.96
asbsg136
(lp738
g736
asg138
I01
sbsg74
Nsg66
g736
sg76
(dp739
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g736
(lp740
F0.96
atp741
sg85
I00
sg86
g736
sg87
Nsg88
(lp742
sg90
Nsg91
Nsb(dp743
sg5
(g25
g7
Ntp744
Rp745
(dp746
g29
(dp747
sg31
g5
(g121
g7
Ntp748
Rp749
(dp750
g36
g37
(g125
tp751
Rp752
(dp753
g51
g52
sS'csf_threshold'
p754
(lp755
F0.96
asbsg136
(lp756
g754
asg138
I01
sbsg74
Nsg66
g754
sg76
(dp757
sg78
g305
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g754
(lp758
F0.96
atp759
sg85
I00
sg86
g754
sg87
Nsg88
(lp760
sg90
Nsg91
Nsb(dp761
sg5
(g6
g7
Ntp762
Rp763
(dp764
g11
g5
(g12
g7
Ntp765
Rp766
(dp767
g16
(dp768
g5
(g25
g7
Ntp769
Rp770
(dp771
g29
(dp772
sg31
g5
(g97
g7
Ntp773
Rp774
(dp775
g36
g37
(g101
tp776
Rp777
(dp778
g42
I00
sg51
g52
sg46
g45
sg105
g45
sg48
g45
sg49
g45
sg106
g45
sg53
g54
sg55
g5
(g56
g57
(dp779
g59
g60
stp780
Rp781
(dp782
g64
S'environ_items'
p783
sg66
g55
sbsg67
g45
sg68
g60
sg112
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'binarize_threshold_GM'
p784
sg76
(dp785
sg78
S'GM'
p786
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g784
sg87
Nsg88
(lp787
sg90
Nsg91
Nsb(dp788
sg5
(g25
g7
Ntp789
Rp790
(dp791
g29
(dp792
sg31
g5
(g121
g7
Ntp793
Rp794
(dp795
g36
g37
(g125
tp796
Rp797
(dp798
g51
g52
sg153
g45
sg154
g45
sg155
g45
sg156
g45
sbsg136
(lp799
g155
ag153
ag156
ag154
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp800
sg78
g786
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp801
sg90
Nsg91
Nsb(dp802
sg5
(g25
g7
Ntp803
Rp804
(dp805
g29
(dp806
sg31
g5
(g166
g7
Ntp807
Rp808
(dp809
g36
g37
(g170
tp810
Rp811
(dp812
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g181
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g45
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
I01
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp813
g59
g60
stp814
Rp815
(dp816
g64
S'environ_items'
p817
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'GM_prior_mni_to_t1'
p818
sg76
(dp819
sg78
g786
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g818
sg87
Nsg88
(lp820
sg90
Nsg91
Nsb(dp821
sg5
(g25
g7
Ntp822
Rp823
(dp824
g29
(dp825
sg31
g5
(g32
g7
Ntp826
Rp827
(dp828
g36
g37
(g38
tp829
Rp830
(dp831
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp832
g59
g60
stp833
Rp834
(dp835
g64
S'environ_items'
p836
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'GM_mask'
p837
sg76
(dp838
sg78
g786
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g837
sg87
Nsg88
(lp839
sg90
Nsg91
Nsb(dp840
sg5
(g25
g7
Ntp841
Rp842
(dp843
g29
(dp844
sg31
g5
(g121
g7
Ntp845
Rp846
(dp847
g36
g37
(g125
tp848
Rp849
(dp850
g129
g45
sg51
g52
sg130
g45
sg131
g45
sg132
g45
sg133
g45
sg134
g45
sg135
g45
sbsg136
(lp851
g131
ag135
ag133
ag134
ag130
ag132
ag129
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp852
sg78
g786
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp853
sg90
Nsg91
Nsb(dp854
sg5
(g25
g7
Ntp855
Rp856
(dp857
g29
(dp858
sg31
g5
(g32
g7
Ntp859
Rp860
(dp861
g36
g37
(g38
tp862
Rp863
(dp864
g42
I00
sg43
g45
sg46
g47
sg48
g45
sg49
g45
sg50
g45
sg51
g52
sg53
g54
sg55
g5
(g56
g57
(dp865
g59
g60
stp866
Rp867
(dp868
g64
S'environ_items'
p869
sg66
g55
sbsg67
g45
sg68
g60
sg69
g45
sg70
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'overlap_GM_map_with_prior'
p870
sg76
(dp871
sg78
g786
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g870
sg87
Nsg88
(lp872
sg90
Nsg91
Nsb(dp873
ssg247
(dp874
sg249
(dp875
g770
(dp876
g823
(dp877
g253
(lp878
(g48
g67
tp879
assg790
(dp880
g253
(lp881
(g48
g156
tp882
asssg790
(dp883
sg804
(dp884
g823
(dp885
g253
(lp886
(g48
g70
tp887
assg856
(dp888
g253
(lp889
(g48
g70
tp890
assg790
(dp891
g253
(lp892
(g48
g155
tp893
asssg823
(dp894
g790
(dp895
g253
(lp896
(g48
g154
tp897
asssg842
(dp898
g804
(dp899
g253
(lp900
(g131
g67
tp901
a(g133
g177
tp902
a(g132
g175
tp903
assg856
(dp904
g253
(lp905
(g134
g67
tp906
assg770
(dp907
g253
(lp908
((g135
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p909
(ttp910
g46
tp911
asssg856
(dp912
g770
(dp913
g253
(lp914
(g48
g67
tp915
assg790
(dp916
g253
(lp917
(g48
g153
tp918
assssg295
g875
sg296
(dp919
g770
(dp920
g842
g907
sg856
g913
ssg790
(dp921
g823
g895
sg804
g891
sg856
g916
sg770
g880
ssg804
(dp922
g842
g899
ssg823
(dp923
g804
g885
sg770
g877
ssg842
(dp924
sg856
(dp925
g842
g904
sg804
g888
sssg304
g875
sbsg66
g786
sg78
g305
sg86
g786
sg87
g306
((lp926
(lp927
g309
ag306
((lp928
(lp929
g312
ag309
aa(lp930
g314
ag315
aa(lp931
g317
ag318
aa(lp932
g320
ag321
aa(lp933
g323
ag324
aa(lp934
g326
ag327
aa(lp935
g329
ag330
aa(lp936
g332
ag333
aatp937
Rp938
aa(lp939
g337
ag306
((lp940
(lp941
g312
ag337
aa(lp942
g341
ag342
aa(lp943
g344
ag345
aa(lp944
g347
ag348
aa(lp945
g350
ag351
aa(lp946
g353
ag354
aa(lp947
g356
ag357
aa(lp948
g359
ag360
aa(lp949
g362
ag363
aa(lp950
g365
ag366
aa(lp951
g368
ag369
aa(lp952
g371
ag372
aa(lp953
g374
ag375
aa(lp954
g377
ag378
aa(lp955
g380
ag381
aa(lp956
g383
ag384
aa(lp957
g386
ag387
aa(lp958
g389
ag390
aa(lp959
g392
ag393
aatp960
Rp961
aa(lp962
g397
ag306
((lp963
(lp964
g312
ag397
aa(lp965
g401
ag402
aatp966
Rp967
aatp968
Rp969
sg91
Nsb(dp970
ssg247
(dp971
sg249
(dp972
g19
(dp973
g409
(dp974
g253
(lp975
(S'outputspec.tissueprior_mni2t1'
p976
g421
tp977
a(S'outputspec.segment_combo'
p978
g426
tp979
a(S'outputspec.segment_bin'
p980
g423
tp981
a(S'outputspec.segment_mask'
p982
g430
tp983
asssg409
(dp984
sg439
(dp985
g409
(dp986
g253
(lp987
(g424
g424
tp988
a(g420
g420
tp989
a(g418
g418
tp990
a(g432
g432
tp991
assg518
(dp992
g253
(lp993
((g424
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p994
(ttp995
S'inputspec.probability_map'
p996
tp997
assg763
(dp998
g253
(lp999
((g424
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1000
(ttp1001
g996
tp1002
assg19
(dp1003
g253
(lp1004
((g424
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1005
(ttp1006
g996
tp1007
asssg480
(dp1008
g439
(dp1009
g253
(lp1010
(g133
g468
tp1011
assg518
(dp1012
g253
(lp1013
(g133
S'inputspec.brain'
p1014
tp1015
a(g493
S'inputspec.tissue_prior'
p1016
tp1017
a(g132
S'inputspec.standard2highres_mat'
p1018
tp1019
assg763
(dp1020
g253
(lp1021
(g133
g1014
tp1022
a(g489
g1016
tp1023
a(g132
g1018
tp1024
assg19
(dp1025
g253
(lp1026
(g133
g1014
tp1027
a(g491
g1016
tp1028
a(g132
g1018
tp1029
asssg500
(dp1030
g763
(dp1031
g253
(lp1032
(g509
S'inputspec.threshold'
p1033
tp1034
asssg518
(dp1035
g409
(dp1036
g253
(lp1037
(g976
g425
tp1038
a(g978
g427
tp1039
a(g980
g422
tp1040
a(g982
g428
tp1041
asssg727
(dp1042
g518
(dp1043
g253
(lp1044
(g736
g1033
tp1045
asssg745
(dp1046
g19
(dp1047
g253
(lp1048
(g754
g1033
tp1049
asssg763
(dp1050
g409
(dp1051
g253
(lp1052
(g976
g433
tp1053
a(g978
g419
tp1054
a(g980
g431
tp1055
a(g982
g429
tp1056
assssg295
g972
sg296
(dp1057
g19
(dp1058
g439
g1003
sg480
g1025
sg745
g1047
ssg409
(dp1059
g439
g986
sg518
g1036
sg763
g1051
sg19
g974
ssg439
(dp1060
g480
g1009
ssg480
(dp1061
sg500
(dp1062
sg518
(dp1063
g439
g992
sg480
g1012
sg727
g1043
ssg727
(dp1064
sg745
(dp1065
sg763
(dp1066
g439
g998
sg480
g1020
sg500
g1031
sssg304
g972
sbsg66
g305
sg78
S'resting_preproc_11_987690887'
p1067
sg86
g305
sg87
g306
((lp1068
(lp1069
g309
ag306
((lp1070
(lp1071
g312
ag309
aa(lp1072
g314
ag315
aa(lp1073
g317
ag318
aa(lp1074
g320
ag321
aa(lp1075
g323
ag324
aa(lp1076
g326
ag327
aa(lp1077
g329
ag330
aa(lp1078
g332
ag333
aatp1079
Rp1080
aa(lp1081
g337
ag306
((lp1082
(lp1083
g312
ag337
aa(lp1084
g341
ag342
aa(lp1085
g344
ag345
aa(lp1086
g347
ag348
aa(lp1087
g350
ag351
aa(lp1088
g353
ag354
aa(lp1089
g356
ag357
aa(lp1090
g359
ag360
aa(lp1091
g362
ag363
aa(lp1092
g365
ag366
aa(lp1093
g368
ag369
aa(lp1094
g371
ag372
aa(lp1095
g374
ag375
aa(lp1096
g377
ag378
aa(lp1097
g380
ag381
aa(lp1098
g383
ag384
aa(lp1099
g386
ag387
aa(lp1100
g389
ag390
aa(lp1101
g392
ag393
aatp1102
Rp1103
aa(lp1104
g397
ag306
((lp1105
(lp1106
g312
ag397
aa(lp1107
g401
ag402
aatp1108
Rp1109
aatp1110
Rp1111
sg91
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g25
g7
Ntp1122
Rp1123
(dp1124
g29
(dp1125
sg31
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1126
g7
Ntp1127
Rp1128
(dp1129
g36
g37
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1130
tp1131
Rp1132
(dp1133
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg106
g45
sS'fix_scale_skew'
p1134
g45
sS'invert_xfm'
p1135
I01
sg53
g54
sS'concat_xfm'
p1136
g45
sg67
g45
sg68
g60
sg55
g5
(g56
g57
(dp1137
g59
g60
stp1138
Rp1139
(dp1140
g64
S'environ_items'
p1141
sg66
g55
sbsbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'inv_linear_reg0_xfm'
p1142
sg76
(dp1143
sg78
S'anat_mni_fnirt_register_0'
p1144
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1142
sg87
Nsg88
(lp1145
sg90
Nsg91
Nsb(dp1146
sg5
(g25
g7
Ntp1147
Rp1148
(dp1149
g29
(dp1150
sg31
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1151
g7
Ntp1152
Rp1153
(dp1154
g36
g37
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1155
tp1156
Rp1157
(dp1158
g51
g52
sS'derive_from_ref'
p1159
g45
sS'in_intensitymap_file'
p1160
g45
sS'modulatedref_file'
p1161
g45
sS'refmask_val'
p1162
g45
sS'hessian_precision'
p1163
g45
sS'in_fwhm'
p1164
g45
sS'skip_implicit_in_masking'
p1165
g45
sS'inmask_file'
p1166
g45
sS'refmask_file'
p1167
g45
sS'inwarp_file'
p1168
g45
sS'skip_lambda_ssq'
p1169
g45
sS'intensity_mapping_model'
p1170
g45
sS'affine_file'
p1171
g45
sS'apply_inmask'
p1172
g45
sS'spline_order'
p1173
g45
sS'apply_refmask'
p1174
g45
sS'subsampling_scheme'
p1175
g45
sg67
g45
sS'warped_file'
p1176
g45
sS'skip_refmask'
p1177
g45
sg42
I00
sS'ref_fwhm'
p1178
g45
sS'inmask_val'
p1179
g45
sS'config_file'
p1180
g45
sS'field_file'
p1181
g45
sg49
g45
sS'apply_intensity_mapping'
p1182
g45
sS'regularization_lambda'
p1183
g45
sg53
g54
sS'regularization_model'
p1184
g45
sS'jacobian_range'
p1185
g45
sS'out_intensitymap_file'
p1186
g45
sS'skip_implicit_ref_masking'
p1187
g45
sS'ref_file'
p1188
g45
sS'skip_inmask'
p1189
g45
sS'fieldcoeff_file'
p1190
I01
sS'warp_resolution'
p1191
g45
sS'jacobian_file'
p1192
I01
sg55
g5
(g56
g57
(dp1193
g59
g60
stp1194
Rp1195
(dp1196
g64
S'environ_items'
p1197
sg66
g55
sbsS'bias_regularization_lambda'
p1198
g45
sg68
g60
sS'skip_intensity_mapping'
p1199
g45
sS'log_file'
p1200
g45
sS'biasfield_resolution'
p1201
g45
sS'intensity_mapping_order'
p1202
g45
sS'max_nonlin_iter'
p1203
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'nonlinear_reg_1'
p1204
sg76
(dp1205
sg78
g1144
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1204
sg87
Nsg88
(lp1206
sg90
Nsg91
Nsb(dp1207
sg5
(g25
g7
Ntp1208
Rp1209
(dp1210
g29
(dp1211
sg31
g5
(g166
g7
Ntp1212
Rp1213
(dp1214
g36
g37
(g170
tp1215
Rp1216
(dp1217
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g45
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g45
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
g45
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
S'corratio'
p1218
sg55
g5
(g56
g57
(dp1219
g59
g60
stp1220
Rp1221
(dp1222
g64
S'environ_items'
p1223
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'linear_reg_0'
p1224
sg76
(dp1225
sg78
g1144
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1224
sg87
Nsg88
(lp1226
sg90
Nsg91
Nsb(dp1227
sg5
(g25
g7
Ntp1228
Rp1229
(dp1230
g29
(dp1231
sg31
g5
(g121
g7
Ntp1232
Rp1233
(dp1234
g36
g37
(g125
tp1235
Rp1236
(dp1237
g51
g52
sS'output_brain'
p1238
g45
sS'nonlinear_xfm'
p1239
g45
sS'invlinear_xfm'
p1240
g45
sS'linear_xfm'
p1241
g45
sbsg136
(lp1242
g1238
ag1241
ag1240
ag1239
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp1243
sg78
g1144
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp1244
sg90
Nsg91
Nsb(dp1245
sg5
(g25
g7
Ntp1246
Rp1247
(dp1248
g29
(dp1249
sg31
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1250
g7
Ntp1251
Rp1252
(dp1253
g36
g37
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1254
tp1255
Rp1256
(dp1257
g42
I00
sS'supersample'
p1258
g45
sg67
g45
sS'superlevel'
p1259
g45
sg48
g45
sg206
g45
sg49
g45
sg180
g45
sg1181
g45
sg1188
g45
sg53
g54
sg55
g5
(g56
g57
(dp1260
g59
g60
stp1261
Rp1262
(dp1263
g64
S'environ_items'
p1264
sg66
g55
sbsS'premat'
p1265
g45
sS'mask_file'
p1266
g45
sg68
g60
sS'relwarp'
p1267
g45
sS'abswarp'
p1268
g45
sg51
g52
sS'postmat'
p1269
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'brain_warp'
p1270
sg76
(dp1271
sg78
g1144
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1270
sg87
Nsg88
(lp1272
sg90
Nsg91
Nsb(dp1273
sg5
(g25
g7
Ntp1274
Rp1275
(dp1276
g29
(dp1277
sg31
g5
(g121
g7
Ntp1278
Rp1279
(dp1280
g36
g37
(g125
tp1281
Rp1282
(dp1283
S'fnirt_config'
p1284
S'T1_2_MNI152_2mm'
p1285
sg51
g52
sS'input_brain'
p1286
g45
sS'reference_skull'
p1287
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1288
sS'reference_brain'
p1289
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1290
sS'input_skull'
p1291
g45
sbsg136
(lp1292
g1286
ag1291
ag1289
ag1287
ag1284
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp1293
sg78
g1144
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp1294
sg90
Nsg91
Nsb(dp1295
ssg247
(dp1296
sg249
(dp1297
g1123
(dp1298
g1229
(dp1299
g253
(lp1300
(g48
g1240
tp1301
asssg1148
(dp1302
g1229
(dp1303
g253
(lp1304
(g1190
g1239
tp1305
assg1247
(dp1306
g253
(lp1307
(g1190
g1181
tp1308
asssg1209
(dp1309
g1148
(dp1310
g253
(lp1311
(g209
g1171
tp1312
assg1229
(dp1313
g253
(lp1314
(g209
g1241
tp1315
assg1123
(dp1316
g253
(lp1317
(g209
g67
tp1318
asssg1229
(dp1319
sg1247
(dp1320
g1229
(dp1321
g253
(lp1322
(g48
g1238
tp1323
asssg1275
(dp1324
g1209
(dp1325
g253
(lp1326
(g1286
g67
tp1327
a(g1289
g177
tp1328
assg1247
(dp1329
g253
(lp1330
(g1286
g67
tp1331
a(g1289
g1188
tp1332
assg1148
(dp1333
g253
(lp1334
(g1291
g67
tp1335
a(g1287
g1188
tp1336
a(g1284
g1180
tp1337
assssg295
g1297
sg296
(dp1338
g1123
(dp1339
g1209
g1316
ssg1148
(dp1340
g1209
g1310
sg1275
g1333
ssg1209
(dp1341
g1275
g1325
ssg1229
(dp1342
g1148
g1303
sg1209
g1313
sg1247
g1321
sg1123
g1299
ssg1247
(dp1343
g1148
g1306
sg1275
g1329
ssg1275
(dp1344
ssg304
g1297
sbsg66
g1144
sg78
g1067
sg86
g1144
sg87
g306
((lp1345
(lp1346
g309
ag306
((lp1347
(lp1348
g312
ag309
aa(lp1349
g314
ag315
aa(lp1350
g317
ag318
aa(lp1351
g320
ag321
aa(lp1352
g323
ag324
aa(lp1353
g326
ag327
aa(lp1354
g329
ag330
aa(lp1355
g332
ag333
aatp1356
Rp1357
aa(lp1358
g337
ag306
((lp1359
(lp1360
g312
ag337
aa(lp1361
g341
ag342
aa(lp1362
g344
ag345
aa(lp1363
g347
ag348
aa(lp1364
g350
ag351
aa(lp1365
g353
ag354
aa(lp1366
g356
ag357
aa(lp1367
g359
ag360
aa(lp1368
g362
ag363
aa(lp1369
g365
ag366
aa(lp1370
g368
ag369
aa(lp1371
g371
ag372
aa(lp1372
g374
ag375
aa(lp1373
g377
ag378
aa(lp1374
g380
ag381
aa(lp1375
g383
ag384
aa(lp1376
g386
ag387
aa(lp1377
g389
ag390
aa(lp1378
g392
ag393
aatp1379
Rp1380
aa(lp1381
g397
ag306
((lp1382
(lp1383
g312
ag397
aa(lp1384
g401
ag402
aatp1385
Rp1386
aatp1387
Rp1388
sg91
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g25
g7
Ntp1399
Rp1400
(dp1401
g29
(dp1402
sg31
g5
(cnipype.interfaces.utility
Function
p1403
g7
Ntp1404
Rp1405
(dp1406
S'_input_names'
p1407
(lp1408
S'overlay'
p1409
aS'underlay'
p1410
aS'png_name'
p1411
aS'cbar_name'
p1412
asg36
g37
(cnipype.interfaces.utility
FunctionInputSpec
p1413
tp1414
Rp1415
(dp1416
g42
I00
sg1411
S'MNI_edge_on_mean_func_mni_a.png'
p1417
sg1409
g45
sg1412
S'red'
p1418
sS'function_str'
p1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1420
sg1410
g45
sg51
g52
sbsS'_out'
p1421
(dp1422
g1411
NssS'_output_names'
p1423
(lp1424
g1411
asS'imports'
p1425
Nsbsg74
Nsg66
S'montage_a'
p1426
sg76
(dp1427
sg78
S'montage_mfi_0'
p1428
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1426
sg87
Nsg88
(lp1429
sg90
Nsg91
Nsb(dp1430
sg5
(g25
g7
Ntp1431
Rp1432
(dp1433
g29
(dp1434
sg31
g5
(g121
g7
Ntp1435
Rp1436
(dp1437
g36
g37
(g125
tp1438
Rp1439
(dp1440
g51
g52
sg1410
g45
sg1409
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1441
sbsg136
(lp1442
g1410
ag1409
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp1443
sg78
g1428
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp1444
sg90
Nsg91
Nsb(dp1445
sg5
(g25
g7
Ntp1446
Rp1447
(dp1448
g29
(dp1449
sg31
g5
(g1403
g7
Ntp1450
Rp1451
(dp1452
g1407
(lp1453
S'file_'
p1454
asg36
g37
(g1413
tp1455
Rp1456
(dp1457
g42
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1458
sg1454
g45
sg51
g52
sbsg1421
(dp1459
S'new_fname'
p1460
Nssg1423
(lp1461
g1460
asg1425
Nsbsg74
Nsg81
I00
sg76
(dp1462
sg83
Nsg80
Nsg90
Nsg66
S'resample_o'
p1463
sg78
g1428
sg82
I00
sg84
Nsg85
I00
sg86
g1463
sg87
Nsg88
(lp1464
sg91
Nsb(dp1465
sg5
(g25
g7
Ntp1466
Rp1467
(dp1468
g29
(dp1469
sg31
g5
(g121
g7
Ntp1470
Rp1471
(dp1472
g36
g37
(g125
tp1473
Rp1474
(dp1475
g51
g52
sS'resampled_underlay'
p1476
g45
sS'axial_png'
p1477
g45
sS'sagittal_png'
p1478
g45
sS'resampled_overlay'
p1479
g45
sbsg136
(lp1480
g1477
ag1478
ag1476
ag1479
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp1481
sg78
g1428
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp1482
sg90
Nsg91
Nsb(dp1483
sg5
(g25
g7
Ntp1484
Rp1485
(dp1486
g29
(dp1487
sg31
g5
(g1403
g7
Ntp1488
Rp1489
(dp1490
g1407
(lp1491
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp1492
Rp1493
(dp1494
g42
I00
sg1411
S'MNI_edge_on_mean_func_mni_s.png'
p1495
sg1409
g45
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1496
sg1410
g45
sg51
g52
sbsg1421
(dp1497
g1411
Nssg1423
(lp1498
g1411
asg1425
Nsbsg74
Nsg66
S'montage_s'
p1499
sg76
(dp1500
sg78
g1428
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp1501
sg90
Nsg91
Nsb(dp1502
sg5
(g25
g7
Ntp1503
Rp1504
(dp1505
g29
(dp1506
sg31
g5
(g1403
g7
Ntp1507
Rp1508
(dp1509
g1407
(lp1510
g1454
asg36
g37
(g1413
tp1511
Rp1512
(dp1513
g42
I00
sg1419
g1458
sg1454
g45
sg51
g52
sbsg1421
(dp1514
g1460
Nssg1423
(lp1515
g1460
asg1425
Nsbsg74
Nsg66
S'resample_u'
p1516
sg76
(dp1517
sg78
g1428
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp1518
sg90
Nsg91
Nsb(dp1519
ssg247
(dp1520
sg249
(dp1521
g1400
(dp1522
g1467
(dp1523
g253
(lp1524
(g1411
g1477
tp1525
asssg1432
(dp1526
g1447
(dp1527
g253
(lp1528
(g1409
g1454
tp1529
assg1504
(dp1530
g253
(lp1531
(g1410
g1454
tp1532
asssg1447
(dp1533
g1400
(dp1534
g253
(lp1535
(g1460
g1409
tp1536
assg1467
(dp1537
g253
(lp1538
(g1460
g1479
tp1539
assg1485
(dp1540
g253
(lp1541
(g1460
g1409
tp1542
asssg1467
(dp1543
sg1485
(dp1544
g1467
(dp1545
g253
(lp1546
(g1411
g1478
tp1547
asssg1504
(dp1548
g1400
(dp1549
g253
(lp1550
(g1460
g1410
tp1551
assg1467
(dp1552
g253
(lp1553
(g1460
g1476
tp1554
assg1485
(dp1555
g253
(lp1556
(g1460
g1410
tp1557
assssg295
g1521
sg296
(dp1558
g1400
(dp1559
g1447
g1534
sg1504
g1549
ssg1432
(dp1560
sg1447
(dp1561
g1432
g1527
ssg1467
(dp1562
g1485
g1545
sg1447
g1537
sg1504
g1552
sg1400
g1523
ssg1485
(dp1563
g1447
g1540
sg1504
g1555
ssg1504
(dp1564
g1432
g1530
sssg304
g1521
sbsg66
g1428
sg78
g1067
sg86
g1428
sg87
g306
((lp1565
(lp1566
g309
ag306
((lp1567
(lp1568
g312
ag309
aa(lp1569
g314
ag315
aa(lp1570
g317
ag318
aa(lp1571
g320
ag321
aa(lp1572
g323
ag324
aa(lp1573
g326
ag327
aa(lp1574
g329
ag330
aa(lp1575
g332
ag333
aatp1576
Rp1577
aa(lp1578
g337
ag306
((lp1579
(lp1580
g312
ag337
aa(lp1581
g341
ag342
aa(lp1582
g344
ag345
aa(lp1583
g347
ag348
aa(lp1584
g350
ag351
aa(lp1585
g353
ag354
aa(lp1586
g356
ag357
aa(lp1587
g359
ag360
aa(lp1588
g362
ag363
aa(lp1589
g365
ag366
aa(lp1590
g368
ag369
aa(lp1591
g371
ag372
aa(lp1592
g374
ag375
aa(lp1593
g377
ag378
aa(lp1594
g380
ag381
aa(lp1595
g383
ag384
aa(lp1596
g386
ag387
aa(lp1597
g389
ag390
aa(lp1598
g392
ag393
aatp1599
Rp1600
aa(lp1601
g397
ag306
((lp1602
(lp1603
g312
ag397
aa(lp1604
g401
ag402
aatp1605
Rp1606
aatp1607
Rp1608
sg91
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g25
g7
Ntp1619
Rp1620
(dp1621
g29
(dp1622
sg31
g5
(g121
g7
Ntp1623
Rp1624
(dp1625
g36
g37
(g125
tp1626
Rp1627
(dp1628
g51
g52
sg1410
g45
sg1409
g45
sbsg136
(lp1629
g1410
ag1409
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp1630
sg78
S'montage_snr_0'
p1631
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp1632
sg90
Nsg91
Nsb(dp1633
sg5
(g25
g7
Ntp1634
Rp1635
(dp1636
g29
(dp1637
sg31
g5
(g1403
g7
Ntp1638
Rp1639
(dp1640
g1407
(lp1641
g1454
asg36
g37
(g1413
tp1642
Rp1643
(dp1644
g42
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1645
sg1454
g45
sg51
g52
sbsg1421
(dp1646
g1460
Nssg1423
(lp1647
g1460
asg1425
Nsbsg74
Nsg81
I00
sg76
(dp1648
sg83
Nsg80
Nsg90
Nsg66
g1463
sg78
g1631
sg82
I00
sg84
Nsg85
I00
sg86
g1463
sg87
Nsg88
(lp1649
sg91
Nsb(dp1650
sg5
(g25
g7
Ntp1651
Rp1652
(dp1653
g29
(dp1654
sg31
g5
(g121
g7
Ntp1655
Rp1656
(dp1657
g36
g37
(g125
tp1658
Rp1659
(dp1660
g51
g52
sg1476
g45
sg1477
g45
sg1478
g45
sg1479
g45
sbsg136
(lp1661
g1477
ag1478
ag1476
ag1479
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp1662
sg78
g1631
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp1663
sg90
Nsg91
Nsb(dp1664
sg5
(g25
g7
Ntp1665
Rp1666
(dp1667
g29
(dp1668
sg31
g5
(g1403
g7
Ntp1669
Rp1670
(dp1671
g1407
(lp1672
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp1673
Rp1674
(dp1675
g42
I00
sg1411
S'snr_a.png'
p1676
sg1409
g45
sg1412
S'red_to_blue'
p1677
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1678
sg1410
g45
sg51
g52
sbsg1421
(dp1679
g1411
Nssg1423
(lp1680
g1411
asg1425
Nsbsg74
Nsg66
g1426
sg76
(dp1681
sg78
g1631
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1426
sg87
Nsg88
(lp1682
sg90
Nsg91
Nsb(dp1683
sg5
(g25
g7
Ntp1684
Rp1685
(dp1686
g29
(dp1687
sg31
g5
(g1403
g7
Ntp1688
Rp1689
(dp1690
g1407
(lp1691
g1454
asg36
g37
(g1413
tp1692
Rp1693
(dp1694
g42
I00
sg1419
g1645
sg1454
g45
sg51
g52
sbsg1421
(dp1695
g1460
Nssg1423
(lp1696
g1460
asg1425
Nsbsg74
Nsg66
g1516
sg76
(dp1697
sg78
g1631
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp1698
sg90
Nsg91
Nsb(dp1699
sg5
(g25
g7
Ntp1700
Rp1701
(dp1702
g29
(dp1703
sg31
g5
(g1403
g7
Ntp1704
Rp1705
(dp1706
g1407
(lp1707
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp1708
Rp1709
(dp1710
g42
I00
sg1411
S'snr_s.png'
p1711
sg1409
g45
sg1412
g1677
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1712
sg1410
g45
sg51
g52
sbsg1421
(dp1713
g1411
Nssg1423
(lp1714
g1411
asg1425
Nsbsg74
Nsg66
g1499
sg76
(dp1715
sg78
g1631
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp1716
sg90
Nsg91
Nsb(dp1717
ssg247
(dp1718
sg249
(dp1719
g1620
(dp1720
g1635
(dp1721
g253
(lp1722
(g1409
g1454
tp1723
assg1685
(dp1724
g253
(lp1725
(g1410
g1454
tp1726
asssg1635
(dp1727
g1652
(dp1728
g253
(lp1729
(g1460
g1479
tp1730
assg1666
(dp1731
g253
(lp1732
(g1460
g1409
tp1733
assg1701
(dp1734
g253
(lp1735
(g1460
g1409
tp1736
asssg1652
(dp1737
sg1666
(dp1738
g1652
(dp1739
g253
(lp1740
(g1411
g1477
tp1741
asssg1685
(dp1742
g1652
(dp1743
g253
(lp1744
(g1460
g1476
tp1745
assg1666
(dp1746
g253
(lp1747
(g1460
g1410
tp1748
assg1701
(dp1749
g253
(lp1750
(g1460
g1410
tp1751
asssg1701
(dp1752
g1652
(dp1753
g253
(lp1754
(g1411
g1478
tp1755
assssg295
g1719
sg296
(dp1756
g1620
(dp1757
sg1635
(dp1758
g1620
g1721
ssg1652
(dp1759
g1635
g1728
sg1685
g1743
sg1701
g1753
sg1666
g1739
ssg1666
(dp1760
g1635
g1731
sg1685
g1746
ssg1685
(dp1761
g1620
g1724
ssg1701
(dp1762
g1635
g1734
sg1685
g1749
sssg304
g1719
sbsg66
g1631
sg78
g1067
sg86
g1631
sg87
g306
((lp1763
(lp1764
g309
ag306
((lp1765
(lp1766
g312
ag309
aa(lp1767
g314
ag315
aa(lp1768
g317
ag318
aa(lp1769
g320
ag321
aa(lp1770
g323
ag324
aa(lp1771
g326
ag327
aa(lp1772
g329
ag330
aa(lp1773
g332
ag333
aatp1774
Rp1775
aa(lp1776
g337
ag306
((lp1777
(lp1778
g312
ag337
aa(lp1779
g341
ag342
aa(lp1780
g344
ag345
aa(lp1781
g347
ag348
aa(lp1782
g350
ag351
aa(lp1783
g353
ag354
aa(lp1784
g356
ag357
aa(lp1785
g359
ag360
aa(lp1786
g362
ag363
aa(lp1787
g365
ag366
aa(lp1788
g368
ag369
aa(lp1789
g371
ag372
aa(lp1790
g374
ag375
aa(lp1791
g377
ag378
aa(lp1792
g380
ag381
aa(lp1793
g383
ag384
aa(lp1794
g386
ag387
aa(lp1795
g389
ag390
aa(lp1796
g392
ag393
aatp1797
Rp1798
aa(lp1799
g397
ag306
((lp1800
(lp1801
g312
ag397
aa(lp1802
g401
ag402
aatp1803
Rp1804
aatp1805
Rp1806
sg91
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g25
g7
Ntp1810
Rp1811
(dp1812
g29
(dp1813
sg31
g5
(g1250
g7
Ntp1814
Rp1815
(dp1816
g36
g37
(g1254
tp1817
Rp1818
(dp1819
g42
I00
sg1258
g45
sg67
g45
sg1259
g45
sg48
g45
sg206
g45
sg49
g45
sg180
g45
sg1181
g45
sg1188
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg53
g54
sg55
g5
(g56
g57
(dp1821
g59
g60
stp1822
Rp1823
(dp1824
g64
S'environ_items'
p1825
sg66
g55
sbsg1265
g45
sg1266
g45
sg68
g60
sg1267
g45
sg1268
g45
sg51
g52
sg1269
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'mean_func_fsl_warp_0'
p1826
sg76
(dp1827
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1826
sg87
Nsg88
(lp1828
sg90
Nsg91
Nsbg48
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g25
g7
Ntp1831
Rp1832
(dp1833
g29
(dp1834
sg31
g5
(g1403
g7
Ntp1835
Rp1836
(dp1837
g1407
(lp1838
S'motion_parameters'
p1839
asg36
g37
(g1413
tp1840
Rp1841
(dp1842
g42
I00
sg1419
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g45
sg51
g52
sbsg1421
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1423
(lp1847
g1845
ag1846
asg1425
Nsbsg74
Nsg66
S'motion_plt_0'
p1848
sg76
(dp1849
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1848
sg87
Nsg88
(lp1850
sg90
Nsg91
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g25
g7
Ntp1853
Rp1854
(dp1855
g29
(dp1856
sg31
g5
(g1403
g7
Ntp1857
Rp1858
(dp1859
g1407
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg36
g37
(g1413
tp1864
Rp1865
(dp1866
g42
I00
sg51
g52
sg1861
g45
sg1419
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g45
sbsg1421
(dp1869
S'hist_path'
p1870
Nssg1423
(lp1871
g1870
asg1425
Nsbsg74
Nsg66
S'fd_plot_0'
p1872
sg76
(dp1873
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1872
sg87
Nsg88
(lp1874
sg90
Nsg91
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g25
g7
Ntp1884
Rp1885
(dp1886
g29
(dp1887
sg31
g5
(g1403
g7
Ntp1888
Rp1889
(dp1890
g1407
(lp1891
g67
asg36
g37
(g1413
tp1892
Rp1893
(dp1894
g42
I00
sg51
g52
sg1419
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p1895
sg67
g45
sbsg1421
(dp1896
g48
Nssg1423
(lp1897
g48
asg1425
Nsbsg74
Nsg66
S'calculate_FD'
p1898
sg76
(dp1899
sg78
S'gen_motion_stats_0'
p1900
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1898
sg87
Nsg88
(lp1901
sg90
Nsg91
Nsb(dp1902
sg5
(g25
g7
Ntp1903
Rp1904
(dp1905
g29
(dp1906
sg31
g5
(g1403
g7
Ntp1907
Rp1908
(dp1909
g1407
(lp1910
S'subject_id'
p1911
aS'scan_id'
p1912
aS'movement_parameters'
p1913
aS'max_displacement'
p1914
asg36
g37
(g1413
tp1915
Rp1916
(dp1917
g42
I00
sg1914
g45
sg1912
g45
sg1911
g45
sg1419
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1918
sg1913
g45
sg51
g52
sbsg1421
(dp1919
g48
Nssg1423
(lp1920
g48
asg1425
Nsbsg74
Nsg66
S'calc_motion_parameters'
p1921
sg76
(dp1922
sg78
g1900
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1921
sg87
Nsg88
(lp1923
sg90
Nsg91
Nsb(dp1924
sg5
(g25
g7
Ntp1925
Rp1926
(dp1927
g29
(dp1928
sg31
g5
(g121
g7
Ntp1929
Rp1930
(dp1931
g36
g37
(g125
tp1932
Rp1933
(dp1934
g51
g52
sS'frames_ex_1D'
p1935
g45
sS'FDJ_1D'
p1936
g45
sS'FD_1D'
p1937
g45
sS'frames_in_1D'
p1938
g45
sS'motion_params'
p1939
g45
sS'power_params'
p1940
g45
sbsg136
(lp1941
g1937
ag1936
ag1935
ag1938
ag1940
ag1939
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp1942
sg78
g1900
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp1943
sg90
Nsg91
Nsb(dp1944
sg5
(g25
g7
Ntp1945
Rp1946
(dp1947
g29
(dp1948
sg31
g5
(g1403
g7
Ntp1949
Rp1950
(dp1951
g1407
(lp1952
g67
ag135
aS'exclude_list'
p1953
asg36
g37
(g1413
tp1954
Rp1955
(dp1956
g42
I00
sg1953
g45
sg1419
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1957
sg67
g45
sg135
g45
sg51
g52
sbsg1421
(dp1958
g48
Nssg1423
(lp1959
g48
asg1425
Nsbsg74
Nsg66
S'include_frames'
p1960
sg76
(dp1961
sg78
g1900
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1960
sg87
Nsg88
(lp1962
sg90
Nsg91
Nsb(dp1963
sg5
(g25
g7
Ntp1964
Rp1965
(dp1966
g29
(dp1967
sg31
g5
(g1403
g7
Ntp1968
Rp1969
(dp1970
g1407
(lp1971
g1911
ag1912
ag1937
ag1936
ag135
aS'DVARS'
p1972
asg36
g37
(g1413
tp1973
Rp1974
(dp1975
g42
I00
sg51
g52
sg1912
g45
sg1911
g45
sg1972
g45
sg1419
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1976
sg1936
g45
sg1937
g45
sg135
g45
sbsg1421
(dp1977
g48
Nssg1423
(lp1978
g48
asg1425
Nsbsg74
Nsg66
S'calc_power_parameters'
p1979
sg76
(dp1980
sg78
g1900
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1979
sg87
Nsg88
(lp1981
sg90
Nsg91
Nsb(dp1982
sg5
(g25
g7
Ntp1983
Rp1984
(dp1985
g29
(dp1986
sg31
g5
(g121
g7
Ntp1987
Rp1988
(dp1989
g36
g37
(g125
tp1990
Rp1991
(dp1992
g135
(lp1993
F0.2
asg51
g52
sS'remove_frames_before'
p1994
I1
sS'remove_frames_after'
p1995
I2
sbsg136
(lp1996
g135
ag1994
ag1995
asg138
I01
sbsg74
Nsg66
S'scrubbing_input'
p1997
sg76
(dp1998
sg78
g1900
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(g135
(lp1999
F0.2
atp2000
sg85
I00
sg86
g1997
sg87
Nsg88
(lp2001
sg90
Nsg91
Nsb(dp2002
sg5
(g25
g7
Ntp2003
Rp2004
(dp2005
g29
(dp2006
sg31
g5
(g1403
g7
Ntp2007
Rp2008
(dp2009
g1407
(lp2010
g67
asg36
g37
(g1413
tp2011
Rp2012
(dp2013
g42
I00
sg51
g52
sg1419
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p2014
sg67
g45
sbsg1421
(dp2015
g48
Nssg1423
(lp2016
g48
asg1425
Nsbsg74
Nsg66
S'calculate_FDJ'
p2017
sg76
(dp2018
sg78
g1900
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2017
sg87
Nsg88
(lp2019
sg90
Nsg91
Nsb(dp2020
sg5
(g25
g7
Ntp2021
Rp2022
(dp2023
g29
(dp2024
sg31
g5
(g121
g7
Ntp2025
Rp2026
(dp2027
g36
g37
(g125
tp2028
Rp2029
(dp2030
g1914
g45
sg51
g52
sg1912
g45
sg1911
g45
sS'mask'
p2031
g45
sg1913
g45
sS'oned_matrix_save'
p2032
g45
sS'motion_correct'
p2033
g45
sbsg136
(lp2034
g1911
ag1912
ag1913
ag1914
ag2033
ag2031
ag2032
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp2035
sg78
g1900
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp2036
sg90
Nsg91
Nsb(dp2037
sg5
(g25
g7
Ntp2038
Rp2039
(dp2040
g29
(dp2041
sg31
g5
(g1403
g7
Ntp2042
Rp2043
(dp2044
g1407
(lp2045
g67
ag135
aS'frames_before'
p2046
aS'frames_after'
p2047
asg36
g37
(g1413
tp2048
Rp2049
(dp2050
g42
I00
sg2047
g45
sg1419
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p2051
sg67
g45
sg135
g45
sg51
g52
sg2046
g45
sbsg1421
(dp2052
g48
Nssg1423
(lp2053
g48
asg1425
Nsbsg74
Nsg66
S'exclude_frames'
p2054
sg76
(dp2055
sg78
g1900
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2054
sg87
Nsg88
(lp2056
sg90
Nsg91
Nsb(dp2057
sg5
(g25
g7
Ntp2058
Rp2059
(dp2060
g29
(dp2061
sg31
g5
(g1403
g7
Ntp2062
Rp2063
(dp2064
g1407
(lp2065
S'rest'
p2066
ag2031
asg36
g37
(g1413
tp2067
Rp2068
(dp2069
g42
I00
sg2031
g45
sg51
g52
sg1419
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p2070
sg2066
g45
sbsg1421
(dp2071
g48
Nssg1423
(lp2072
g48
asg1425
Nsbsg74
Nsg66
S'cal_DVARS'
p2073
sg76
(dp2074
sg78
g1900
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2073
sg87
Nsg88
(lp2075
sg90
Nsg91
Nsb(dp2076
ssg247
(dp2077
sg249
(dp2078
g1885
(dp2079
g1965
(dp2080
g253
(lp2081
(g48
g1937
tp2082
assg1926
(dp2083
g253
(lp2084
(g48
g1937
tp2085
assg2039
(dp2086
g253
(lp2087
(g48
g67
tp2088
assg1946
(dp2089
g253
(lp2090
(g48
g67
tp2091
asssg1904
(dp2092
g1926
(dp2093
g253
(lp2094
(g48
g1939
tp2095
asssg1926
(dp2096
sg1946
(dp2097
g1926
(dp2098
g253
(lp2099
(g48
g1938
tp2100
asssg1965
(dp2101
g1926
(dp2102
g253
(lp2103
(g48
g1940
tp2104
asssg1984
(dp2105
g1946
(dp2106
g253
(lp2107
(g135
g135
tp2108
assg2039
(dp2109
g253
(lp2110
(g135
g135
tp2111
a(g1994
g2046
tp2112
a(g1995
g2047
tp2113
assg1965
(dp2114
g253
(lp2115
(g135
g135
tp2116
asssg2004
(dp2117
g1926
(dp2118
g253
(lp2119
(g48
g1936
tp2120
assg1965
(dp2121
g253
(lp2122
(g48
g1936
tp2123
asssg2022
(dp2124
g2004
(dp2125
g253
(lp2126
(g2032
g67
tp2127
assg2059
(dp2128
g253
(lp2129
(g2033
g2066
tp2130
a(g2031
g2031
tp2131
assg1904
(dp2132
g253
(lp2133
(g1911
g1911
tp2134
a(g1912
g1912
tp2135
a(g1913
g1913
tp2136
a(g1914
g1914
tp2137
assg1965
(dp2138
g253
(lp2139
(g1911
g1911
tp2140
a(g1912
g1912
tp2141
assg1885
(dp2142
g253
(lp2143
(g1913
g67
tp2144
asssg2039
(dp2145
g1926
(dp2146
g253
(lp2147
(g48
g1935
tp2148
assg1946
(dp2149
g253
(lp2150
(g48
g1953
tp2151
asssg2059
(dp2152
g1965
(dp2153
g253
(lp2154
(g48
g1972
tp2155
assssg295
g2078
sg296
(dp2156
g1885
(dp2157
g2022
g2142
ssg1904
(dp2158
g2022
g2132
ssg1926
(dp2159
g1885
g2083
sg1904
g2093
sg1946
g2098
sg1965
g2102
sg2004
g2118
sg2039
g2146
ssg1946
(dp2160
g1885
g2089
sg1984
g2106
sg2039
g2149
ssg1965
(dp2161
g2004
g2121
sg2022
g2138
sg1885
g2080
sg1984
g2114
sg2059
g2153
ssg1984
(dp2162
sg2004
(dp2163
g2022
g2125
ssg2022
(dp2164
sg2039
(dp2165
g1885
g2086
sg1984
g2109
ssg2059
(dp2166
g2022
g2128
sssg304
g2078
sbsg66
g1900
sg78
g1067
sg86
g1900
sg87
g306
((lp2167
(lp2168
g309
ag306
((lp2169
(lp2170
g312
ag309
aa(lp2171
g314
ag315
aa(lp2172
g317
ag318
aa(lp2173
g320
ag321
aa(lp2174
g323
ag324
aa(lp2175
g326
ag327
aa(lp2176
g329
ag330
aa(lp2177
g332
ag333
aatp2178
Rp2179
aa(lp2180
g337
ag306
((lp2181
(lp2182
g312
ag337
aa(lp2183
g341
ag342
aa(lp2184
g344
ag345
aa(lp2185
g347
ag348
aa(lp2186
g350
ag351
aa(lp2187
g353
ag354
aa(lp2188
g356
ag357
aa(lp2189
g359
ag360
aa(lp2190
g362
ag363
aa(lp2191
g365
ag366
aa(lp2192
g368
ag369
aa(lp2193
g371
ag372
aa(lp2194
g374
ag375
aa(lp2195
g377
ag378
aa(lp2196
g380
ag381
aa(lp2197
g383
ag384
aa(lp2198
g386
ag387
aa(lp2199
g389
ag390
aa(lp2200
g392
ag393
aatp2201
Rp2202
aa(lp2203
g397
ag306
((lp2204
(lp2205
g312
ag397
aa(lp2206
g401
ag402
aatp2207
Rp2208
aatp2209
Rp2210
sg91
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g25
g7
Ntp2224
Rp2225
(dp2226
g29
(dp2227
sg31
g5
(cnipype.interfaces.afni.preprocess
Calc
p2228
g7
Ntp2229
Rp2230
(dp2231
g36
g37
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2232
tp2233
Rp2234
(dp2235
S'stop_idx'
p2236
g45
sg42
I00
sg51
g52
sg48
g45
sS'expr'
p2237
S'a*step(b)'
p2238
sg49
g45
sS'outputtype'
p2239
S'NIFTI_GZ'
p2240
sS'in_file_b'
p2241
g45
sS'in_file_c'
p2242
g45
sS'in_file_a'
p2243
g45
sg55
g5
(g56
g57
(dp2244
tp2245
Rp2246
(dp2247
g64
S'environ_items'
p2248
sg66
g55
sbsS'single_idx'
p2249
g45
sS'other'
p2250
g45
sS'start_idx'
p2251
g45
sg53
g54
sbsS'_outputtype'
p2252
g2240
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2253
sg83
Nsg80
Nsg90
Nsg66
S'anat_brain_only'
p2254
sg78
S'anat_preproc_0'
p2255
sg82
I00
sg84
Nsg85
I00
sg86
g2254
sg87
Nsg88
(lp2256
sg91
Nsb(dp2257
sg5
(g25
g7
Ntp2258
Rp2259
(dp2260
g29
(dp2261
sg31
g5
(cnipype.interfaces.afni.preprocess
Resample
p2262
g7
Ntp2263
Rp2264
(dp2265
g36
g37
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2266
tp2267
Rp2268
(dp2269
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2239
g2240
sS'resample_mode'
p2270
g45
sS'voxel_size'
p2271
g45
sg53
g54
sS'master'
p2272
g45
sg67
g45
sg55
g5
(g56
g57
(dp2273
tp2274
Rp2275
(dp2276
g64
S'environ_items'
p2277
sg66
g55
sbsS'orientation'
p2278
S'RPI'
p2279
sbsg2252
g2240
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2280
sg83
Nsg80
Nsg90
Nsg66
S'anat_reorient'
p2281
sg78
g2255
sg82
I00
sg84
Nsg85
I00
sg86
g2281
sg87
Nsg88
(lp2282
sg91
Nsb(dp2283
sg5
(g25
g7
Ntp2284
Rp2285
(dp2286
g29
(dp2287
sg31
g5
(g121
g7
Ntp2288
Rp2289
(dp2290
g36
g37
(g125
tp2291
Rp2292
(dp2293
S'reorient'
p2294
g45
sg133
g45
sS'refit'
p2295
g45
sg51
g52
sS'skullstrip'
p2296
g45
sbsg136
(lp2297
g2295
ag2294
ag2296
ag133
asg138
I01
sbsg74
Nsg81
I00
sg76
(dp2298
sg83
Nsg80
Nsg90
Nsg66
g158
sg78
g2255
sg82
I00
sg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp2299
sg91
Nsb(dp2300
sg5
(g25
g7
Ntp2301
Rp2302
(dp2303
g29
(dp2304
sg31
g5
(g121
g7
Ntp2305
Rp2306
(dp2307
g36
g37
(g125
tp2308
Rp2309
(dp2310
g51
g52
sS'anat'
p2311
g45
sbsg136
(lp2312
g2311
asg138
I01
sbsg74
Nsg81
I00
sg76
(dp2313
sg83
Nsg80
Nsg90
Nsg66
g139
sg78
g2255
sg82
I00
sg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp2314
sg91
Nsb(dp2315
sg5
(g25
g7
Ntp2316
Rp2317
(dp2318
g29
(dp2319
sg31
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2320
g7
Ntp2321
Rp2322
(dp2323
g36
g37
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2324
tp2325
Rp2326
(dp2327
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2239
S'AFNI'
p2328
sg53
g54
sg55
g5
(g56
g57
(dp2329
tp2330
Rp2331
(dp2332
g64
S'environ_items'
p2333
sg66
g55
sbsg67
g45
sbsg2252
g2328
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2334
sg83
Nsg80
Nsg90
Nsg66
S'anat_skullstrip'
p2335
sg78
g2255
sg82
I00
sg84
Nsg85
I00
sg86
g2335
sg87
Nsg88
(lp2336
sg91
Nsb(dp2337
sg5
(g25
g7
Ntp2338
Rp2339
(dp2340
g29
(dp2341
sg31
g5
(cnipype.interfaces.afni.preprocess
Refit
p2342
g7
Ntp2343
Rp2344
(dp2345
g36
g37
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2346
tp2347
Rp2348
(dp2349
g42
I00
sg51
g52
sS'deoblique'
p2350
I01
sg49
g45
sS'yorigin'
p2351
g45
sg53
g54
sg55
g5
(g56
g57
(dp2352
tp2353
Rp2354
(dp2355
g64
S'environ_items'
p2356
sg66
g55
sbsg67
g45
sS'xorigin'
p2357
g45
sS'zorigin'
p2358
g45
sbsg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2359
sg83
Nsg80
Nsg90
Nsg66
S'anat_deoblique'
p2360
sg78
g2255
sg82
I00
sg84
Nsg85
I00
sg86
g2360
sg87
Nsg88
(lp2361
sg91
Nsb(dp2362
ssg249
(dp2363
g2225
(dp2364
g2285
(dp2365
g253
(lp2366
(g48
g133
tp2367
asssg2259
(dp2368
g2317
(dp2369
g253
(lp2370
(g48
g67
tp2371
assg2285
(dp2372
g253
(lp2373
(g48
g2294
tp2374
assg2225
(dp2375
g253
(lp2376
(g48
g2243
tp2377
asssg2285
(dp2378
sg2302
(dp2379
g2339
(dp2380
g253
(lp2381
(g2311
g67
tp2382
asssg2317
(dp2383
g2225
(dp2384
g253
(lp2385
(g48
g2241
tp2386
assg2285
(dp2387
g253
(lp2388
(g48
g2296
tp2389
asssg2339
(dp2390
g2259
(dp2391
g253
(lp2392
(g48
g67
tp2393
assg2285
(dp2394
g253
(lp2395
(g48
g2295
tp2396
assssg295
g2363
sg296
(dp2397
g2225
(dp2398
g2259
g2375
sg2317
g2384
ssg2259
(dp2399
g2339
g2391
ssg2285
(dp2400
g2259
g2372
sg2339
g2394
sg2317
g2387
sg2225
g2365
ssg2302
(dp2401
sg2317
(dp2402
g2259
g2369
ssg2339
(dp2403
g2302
g2380
sssg247
(dp2404
sg304
g2363
sbsg66
g2255
sg78
g1067
sg86
g2255
sg87
g306
((lp2405
(lp2406
g309
ag306
((lp2407
(lp2408
g312
ag309
aa(lp2409
g314
ag315
aa(lp2410
g317
ag318
aa(lp2411
g320
ag321
aa(lp2412
g323
ag324
aa(lp2413
g326
ag327
aa(lp2414
g329
ag330
aa(lp2415
g332
ag333
aatp2416
Rp2417
aa(lp2418
g337
ag306
((lp2419
(lp2420
g312
ag337
aa(lp2421
g341
ag342
aa(lp2422
g344
ag345
aa(lp2423
g347
ag348
aa(lp2424
g350
ag351
aa(lp2425
g353
ag354
aa(lp2426
g356
ag357
aa(lp2427
g359
ag360
aa(lp2428
g362
ag363
aa(lp2429
g365
ag366
aa(lp2430
g368
ag369
aa(lp2431
g371
ag372
aa(lp2432
g374
ag375
aa(lp2433
g377
ag378
aa(lp2434
g380
ag381
aa(lp2435
g383
ag384
aa(lp2436
g386
ag387
aa(lp2437
g389
ag390
aa(lp2438
g392
ag393
aatp2439
Rp2440
aa(lp2441
g397
ag306
((lp2442
(lp2443
g312
ag397
aa(lp2444
g401
ag402
aatp2445
Rp2446
aatp2447
Rp2448
sg91
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g25
g7
Ntp2459
Rp2460
(dp2461
g29
(dp2462
sg31
g5
(g2342
g7
Ntp2463
Rp2464
(dp2465
g36
g37
(g2346
tp2466
Rp2467
(dp2468
g42
I00
sg51
g52
sg2350
I01
sg49
g45
sg2351
g45
sg53
g54
sg55
g5
(g56
g57
(dp2469
tp2470
Rp2471
(dp2472
g64
S'environ_items'
p2473
sg66
g55
sbsg67
g45
sg2357
g45
sg2358
g45
sbsg72
Nsg73
g54
sbsg74
Nsg66
S'func_deoblique'
p2474
sg76
(dp2475
sg78
S'func_preproc_automask_0'
p2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2474
sg87
Nsg88
(lp2477
sg90
Nsg91
Nsb(dp2478
sg5
(g25
g7
Ntp2479
Rp2480
(dp2481
g29
(dp2482
sg31
g5
(cnipype.interfaces.afni.preprocess
Automask
p2483
g7
Ntp2484
Rp2485
(dp2486
g36
g37
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2487
tp2488
Rp2489
(dp2490
g42
I00
sg51
g52
sg49
g45
sS'erode'
p2491
g45
sg48
g45
sS'dilate'
p2492
g45
sS'clfrac'
p2493
g45
sg2239
g2240
sS'brain_file'
p2494
g45
sg53
g54
sg55
g5
(g56
g57
(dp2495
tp2496
Rp2497
(dp2498
g64
S'environ_items'
p2499
sg66
g55
sbsg67
g45
sbsg2252
g2240
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_get_brain_mask'
p2500
sg76
(dp2501
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2500
sg87
Nsg88
(lp2502
sg90
Nsg91
Nsb(dp2503
sg5
(g25
g7
Ntp2504
Rp2505
(dp2506
g29
(dp2507
sg31
g5
(g121
g7
Ntp2508
Rp2509
(dp2510
g36
g37
(g125
tp2511
Rp2512
(dp2513
g1914
g45
sS'motion_correct_ref'
p2514
g45
sg51
g52
sS'preprocessed_mask'
p2515
g45
sg2031
g45
sg2295
g45
sg2296
g45
sg2294
g45
sS'preprocessed'
p2516
g45
sS'slice_time_corrected'
p2517
g45
sg1913
g45
sS'example_func'
p2518
g45
sg2032
g45
sS'reorient_mean'
p2519
g45
sg2033
g45
sbsg136
(lp2520
g2295
ag2294
ag2519
ag2033
ag2514
ag1913
ag1914
ag2031
ag2296
ag2518
ag2516
ag2515
ag2517
ag2032
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp2521
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp2522
sg90
Nsg91
Nsb(dp2523
sg5
(g25
g7
Ntp2524
Rp2525
(dp2526
g29
(dp2527
sg31
g5
(cnipype.interfaces.afni.preprocess
TStat
p2528
g7
Ntp2529
Rp2530
(dp2531
g36
g37
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2532
tp2533
Rp2534
(dp2535
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2031
g45
sg2239
g2240
sg53
g54
sg55
g5
(g56
g57
(dp2536
tp2537
Rp2538
(dp2539
g64
S'environ_items'
p2540
sg66
g55
sbsg67
g45
sS'options'
p2541
S'-mean'
p2542
sbsg2252
g2240
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2543
sg83
Nsg80
Nsg90
Nsg66
S'func_get_mean_motion'
p2544
sg78
g2476
sg82
I00
sg84
Nsg85
I00
sg86
g2544
sg87
Nsg88
(lp2545
sg91
Nsb(dp2546
sg5
(g25
g7
Ntp2547
Rp2548
(dp2549
g29
(dp2550
sg31
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2551
g7
Ntp2552
Rp2553
(dp2554
g36
g37
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2555
tp2556
Rp2557
(dp2558
S'oned_file'
p2559
g45
sg42
I00
sg176
g45
sS'timeshift'
p2560
g45
sS'basefile'
p2561
g45
sg49
S'-Fourier -twopass'
p2562
sg2239
g2240
sS'zpad'
p2563
I4
sg53
g54
sS'md1d_file'
p2564
g45
sg67
g45
sS'copyorigin'
p2565
g45
sg55
g5
(g56
g57
(dp2566
tp2567
Rp2568
(dp2569
g64
S'environ_items'
p2570
sg66
g55
sbsg2032
g45
sg51
g52
sg48
g45
sbsg2252
g2240
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_motion_correct'
p2571
sg76
(dp2572
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2571
sg87
Nsg88
(lp2573
sg90
Nsg91
Nsb(dp2574
sg5
(g25
g7
Ntp2575
Rp2576
(dp2577
g29
(dp2578
sg31
g5
(g121
g7
Ntp2579
Rp2580
(dp2581
g36
g37
(g125
tp2582
Rp2583
(dp2584
g51
g52
sS'func'
p2585
g45
sbsg136
(lp2586
g2585
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp2587
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp2588
sg90
Nsg91
Nsb(dp2589
sg5
(g25
g7
Ntp2590
Rp2591
(dp2592
g29
(dp2593
sg31
g5
(g2551
g7
Ntp2594
Rp2595
(dp2596
g36
g37
(g2555
tp2597
Rp2598
(dp2599
g2559
g45
sg42
I00
sg176
g45
sg2560
g45
sg2561
g45
sg49
g2562
sg2239
g2240
sg2563
I4
sg53
g54
sg2564
S'max_displacement.1D'
p2600
sg67
g45
sg2565
g45
sg55
g5
(g56
g57
(dp2601
tp2602
Rp2603
(dp2604
g64
S'environ_items'
p2605
sg66
g55
sbsg2032
g45
sg51
g52
sg48
g45
sbsg2252
g2240
sg72
Nsg73
g54
sbsg74
Nsg81
I00
sg76
(dp2606
sg83
Nsg80
Nsg90
Nsg66
S'func_motion_correct_A'
p2607
sg78
g2476
sg82
I00
sg84
Nsg85
I00
sg86
g2607
sg87
Nsg88
(lp2608
sg91
Nsb(dp2609
sg5
(g25
g7
Ntp2610
Rp2611
(dp2612
g29
(dp2613
sg31
g5
(g2528
g7
Ntp2614
Rp2615
(dp2616
g36
g37
(g2532
tp2617
Rp2618
(dp2619
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2031
g45
sg2239
g2240
sg53
g54
sg55
g5
(g56
g57
(dp2620
tp2621
Rp2622
(dp2623
g64
S'environ_items'
p2624
sg66
g55
sbsg67
g45
sg2541
g2542
sbsg2252
g2240
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_get_mean_RPI'
p2625
sg76
(dp2626
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2625
sg87
Nsg88
(lp2627
sg90
Nsg91
Nsb(dp2628
sg5
(g25
g7
Ntp2629
Rp2630
(dp2631
g29
(dp2632
sg31
g5
(g97
g7
Ntp2633
Rp2634
(dp2635
g36
g37
(g101
tp2636
Rp2637
(dp2638
g42
I00
sg51
g52
sg46
S'-Tmin -bin'
p2639
sg105
S'char'
p2640
sg48
g45
sg49
g45
sg106
g45
sg53
g54
sg55
g5
(g56
g57
(dp2641
g59
g60
stp2642
Rp2643
(dp2644
g64
S'environ_items'
p2645
sg66
g55
sbsg67
g45
sg68
g60
sg112
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mask_normalize'
p2646
sg76
(dp2647
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2646
sg87
Nsg88
(lp2648
sg90
Nsg91
Nsb(dp2649
sg5
(g25
g7
Ntp2650
Rp2651
(dp2652
g29
(dp2653
sg31
g5
(g2528
g7
Ntp2654
Rp2655
(dp2656
g36
g37
(g2532
tp2657
Rp2658
(dp2659
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2031
g45
sg2239
g2240
sg53
g54
sg55
g5
(g56
g57
(dp2660
tp2661
Rp2662
(dp2663
g64
S'environ_items'
p2664
sg66
g55
sbsg67
g45
sg2541
g2542
sbsg2252
g2240
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mean_skullstrip'
p2665
sg76
(dp2666
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2665
sg87
Nsg88
(lp2667
sg90
Nsg91
Nsb(dp2668
sg5
(g25
g7
Ntp2669
Rp2670
(dp2671
g29
(dp2672
sg31
g5
(g2262
g7
Ntp2673
Rp2674
(dp2675
g36
g37
(g2266
tp2676
Rp2677
(dp2678
g42
I00
sg51
g52
sg48
g45
sg49
g45
sg2239
g2240
sg2270
g45
sg2271
g45
sg53
g54
sg2272
g45
sg67
g45
sg55
g5
(g56
g57
(dp2679
tp2680
Rp2681
(dp2682
g64
S'environ_items'
p2683
sg66
g55
sbsg2278
g2279
sbsg2252
g2240
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_reorient'
p2684
sg76
(dp2685
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2684
sg87
Nsg88
(lp2686
sg90
Nsg91
Nsb(dp2687
sg5
(g25
g7
Ntp2688
Rp2689
(dp2690
g29
(dp2691
sg31
g5
(g97
g7
Ntp2692
Rp2693
(dp2694
g36
g37
(g101
tp2695
Rp2696
(dp2697
g42
I00
sg51
g52
sg46
S'-ing 10000'
p2698
sg105
S'float'
p2699
sg48
g45
sg49
g45
sg106
g45
sg53
g54
sg55
g5
(g56
g57
(dp2700
g59
g60
stp2701
Rp2702
(dp2703
g64
S'environ_items'
p2704
sg66
g55
sbsg67
g45
sg68
g60
sg112
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_normalize'
p2705
sg76
(dp2706
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2705
sg87
Nsg88
(lp2707
sg90
Nsg91
Nsb(dp2708
sg5
(g25
g7
Ntp2709
Rp2710
(dp2711
g29
(dp2712
sg31
g5
(g2228
g7
Ntp2713
Rp2714
(dp2715
g36
g37
(g2232
tp2716
Rp2717
(dp2718
g2236
g45
sg42
I00
sg51
g52
sg48
g45
sg2237
S'a*b'
p2719
sg49
g45
sg2239
g2240
sg2241
g45
sg2242
g45
sg2243
g45
sg55
g5
(g56
g57
(dp2720
tp2721
Rp2722
(dp2723
g64
S'environ_items'
p2724
sg66
g55
sbsg2249
g45
sg2250
g45
sg2251
g45
sg53
g54
sbsg2252
g2240
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_edge_detect'
p2725
sg76
(dp2726
sg78
g2476
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2725
sg87
Nsg88
(lp2727
sg90
Nsg91
Nsb(dp2728
ssg247
(dp2729
sg249
(dp2730
g2460
(dp2731
g2670
(dp2732
g253
(lp2733
(g48
g67
tp2734
asssg2480
(dp2735
g2505
(dp2736
g253
(lp2737
(g48
g2031
tp2738
assg2710
(dp2739
g253
(lp2740
(g48
g2241
tp2741
asssg2505
(dp2742
sg2525
(dp2743
g2505
(dp2744
g253
(lp2745
(g48
g2514
tp2746
assg2591
(dp2747
g253
(lp2748
(g48
g2561
tp2749
asssg2548
(dp2750
g2525
(dp2751
g253
(lp2752
(g48
g67
tp2753
asssg2576
(dp2754
g2460
(dp2755
g253
(lp2756
(g2585
g67
tp2757
asssg2591
(dp2758
g2480
(dp2759
g253
(lp2760
(g48
g67
tp2761
assg2505
(dp2762
g253
(lp2763
(g48
g2033
tp2764
a(g2564
g1914
tp2765
a(g2559
g1913
tp2766
a(g2032
g2032
tp2767
assg2710
(dp2768
g253
(lp2769
(g48
g2243
tp2770
asssg2611
(dp2771
g2548
(dp2772
g253
(lp2773
(g48
g2561
tp2774
asssg2630
(dp2775
g2505
(dp2776
g253
(lp2777
(g48
g2515
tp2778
asssg2651
(dp2779
g2505
(dp2780
g253
(lp2781
(g48
g2518
tp2782
asssg2670
(dp2783
g2611
(dp2784
g253
(lp2785
(g48
g67
tp2786
assg2591
(dp2787
g253
(lp2788
(g48
g67
tp2789
assg2505
(dp2790
g253
(lp2791
(g48
g2294
tp2792
assg2548
(dp2793
g253
(lp2794
(g48
g67
tp2795
asssg2689
(dp2796
g2630
(dp2797
g253
(lp2798
(g48
g67
tp2799
assg2505
(dp2800
g253
(lp2801
(g48
g2516
tp2802
asssg2710
(dp2803
g2651
(dp2804
g253
(lp2805
(g48
g67
tp2806
assg2505
(dp2807
g253
(lp2808
(g48
g2296
tp2809
assg2689
(dp2810
g253
(lp2811
(g48
g67
tp2812
assssg295
g2730
sg296
(dp2813
g2460
(dp2814
g2576
g2755
ssg2480
(dp2815
g2591
g2759
ssg2505
(dp2816
g2480
g2736
sg2710
g2807
sg2651
g2780
sg2670
g2790
sg2591
g2762
sg2630
g2776
sg2689
g2800
sg2525
g2744
ssg2525
(dp2817
g2548
g2751
ssg2548
(dp2818
g2670
g2793
sg2611
g2772
ssg2576
(dp2819
sg2591
(dp2820
g2670
g2787
sg2525
g2747
ssg2611
(dp2821
g2670
g2784
ssg2630
(dp2822
g2689
g2797
ssg2651
(dp2823
g2710
g2804
ssg2670
(dp2824
g2460
g2732
ssg2689
(dp2825
g2710
g2810
ssg2710
(dp2826
g2480
g2739
sg2591
g2768
sssg304
g2730
sbsg66
g2476
sg78
g1067
sg86
g2476
sg87
g306
((lp2827
(lp2828
g309
ag306
((lp2829
(lp2830
g312
ag309
aa(lp2831
g314
ag315
aa(lp2832
g317
ag318
aa(lp2833
g320
ag321
aa(lp2834
g323
ag324
aa(lp2835
g326
ag327
aa(lp2836
g329
ag330
aa(lp2837
g332
ag333
aatp2838
Rp2839
aa(lp2840
g337
ag306
((lp2841
(lp2842
g312
ag337
aa(lp2843
g341
ag342
aa(lp2844
g344
ag345
aa(lp2845
g347
ag348
aa(lp2846
g350
ag351
aa(lp2847
g353
ag354
aa(lp2848
g356
ag357
aa(lp2849
g359
ag360
aa(lp2850
g362
ag363
aa(lp2851
g365
ag366
aa(lp2852
g368
ag369
aa(lp2853
g371
ag372
aa(lp2854
g374
ag375
aa(lp2855
g377
ag378
aa(lp2856
g380
ag381
aa(lp2857
g383
ag384
aa(lp2858
g386
ag387
aa(lp2859
g389
ag390
aa(lp2860
g392
ag393
aatp2861
Rp2862
aa(lp2863
g397
ag306
((lp2864
(lp2865
g312
ag397
aa(lp2866
g401
ag402
aatp2867
Rp2868
aatp2869
Rp2870
sg91
NsbS'outputspec.example_func'
p2871
tp2872
sg1913
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g25
g7
Ntp2880
Rp2881
(dp2882
g29
(dp2883
sg31
g5
(g121
g7
Ntp2884
Rp2885
(dp2886
g36
g37
(g125
tp2887
Rp2888
(dp2889
g51
g52
sS'movement_file'
p2890
g45
sbsg136
(lp2891
g2890
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp2892
sg78
S'fristons_parameter_model_0'
p2893
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp2894
sg90
Nsg91
Nsb(dp2895
sg5
(g25
g7
Ntp2896
Rp2897
(dp2898
g29
(dp2899
sg31
g5
(g121
g7
Ntp2900
Rp2901
(dp2902
g36
g37
(g125
tp2903
Rp2904
(dp2905
g51
g52
sg2890
g45
sbsg136
(lp2906
g2890
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp2907
sg78
g2893
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp2908
sg90
Nsg91
Nsb(dp2909
sg5
(g25
g7
Ntp2910
Rp2911
(dp2912
g29
(dp2913
sg31
g5
(g1403
g7
Ntp2914
Rp2915
(dp2916
g1407
(lp2917
g67
asg36
g37
(g1413
tp2918
Rp2919
(dp2920
g42
I00
sg51
g52
sg1419
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2921
sg67
g45
sbsg1421
(dp2922
g48
Nssg1423
(lp2923
g48
asg1425
Nsbsg74
Nsg66
S'calc_friston'
p2924
sg76
(dp2925
sg78
g2893
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g2924
sg87
Nsg88
(lp2926
sg90
Nsg91
Nsb(dp2927
ssg247
(dp2928
sg249
(dp2929
g2881
(dp2930
sg2897
(dp2931
g2911
(dp2932
g253
(lp2933
(g2890
g67
tp2934
asssg2911
(dp2935
g2881
(dp2936
g253
(lp2937
(g48
g2890
tp2938
assssg295
g2929
sg296
(dp2939
g2881
(dp2940
g2911
g2936
ssg2897
(dp2941
sg2911
(dp2942
g2897
g2932
sssg304
g2929
sbsg66
g2893
sg78
g1067
sg86
g2893
sg87
g306
((lp2943
(lp2944
g309
ag306
((lp2945
(lp2946
g312
ag309
aa(lp2947
g314
ag315
aa(lp2948
g317
ag318
aa(lp2949
g320
ag321
aa(lp2950
g323
ag324
aa(lp2951
g326
ag327
aa(lp2952
g329
ag330
aa(lp2953
g332
ag333
aatp2954
Rp2955
aa(lp2956
g337
ag306
((lp2957
(lp2958
g312
ag337
aa(lp2959
g341
ag342
aa(lp2960
g344
ag345
aa(lp2961
g347
ag348
aa(lp2962
g350
ag351
aa(lp2963
g353
ag354
aa(lp2964
g356
ag357
aa(lp2965
g359
ag360
aa(lp2966
g362
ag363
aa(lp2967
g365
ag366
aa(lp2968
g368
ag369
aa(lp2969
g371
ag372
aa(lp2970
g374
ag375
aa(lp2971
g377
ag378
aa(lp2972
g380
ag381
aa(lp2973
g383
ag384
aa(lp2974
g386
ag387
aa(lp2975
g389
ag390
aa(lp2976
g392
ag393
aatp2977
Rp2978
aa(lp2979
g397
ag306
((lp2980
(lp2981
g312
ag397
aa(lp2982
g401
ag402
aatp2983
Rp2984
aatp2985
Rp2986
sg91
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g25
g7
Ntp2997
Rp2998
(dp2999
g29
(dp3000
sg31
g5
(g121
g7
Ntp3001
Rp3002
(dp3003
g36
g37
(g125
tp3004
Rp3005
(dp3006
g51
g52
sg1476
g45
sg1477
g45
sg1478
g45
sg1479
g45
sbsg136
(lp3007
g1477
ag1478
ag1476
ag1479
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp3008
sg78
S'montage_anat_0'
p3009
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp3010
sg90
Nsg91
Nsb(dp3011
sg5
(g25
g7
Ntp3012
Rp3013
(dp3014
g29
(dp3015
sg31
g5
(g1403
g7
Ntp3016
Rp3017
(dp3018
g1407
(lp3019
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp3020
Rp3021
(dp3022
g42
I00
sg1411
S't1_edge_on_mean_func_in_t1_a.png'
p3023
sg1409
g45
sg1412
g1418
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3024
sg1410
g45
sg51
g52
sbsg1421
(dp3025
g1411
Nssg1423
(lp3026
g1411
asg1425
Nsbsg74
Nsg66
g1426
sg76
(dp3027
sg78
g3009
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1426
sg87
Nsg88
(lp3028
sg90
Nsg91
Nsb(dp3029
sg5
(g25
g7
Ntp3030
Rp3031
(dp3032
g29
(dp3033
sg31
g5
(g1403
g7
Ntp3034
Rp3035
(dp3036
g1407
(lp3037
g1454
asg36
g37
(g1413
tp3038
Rp3039
(dp3040
g42
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3041
sg1454
g45
sg51
g52
sbsg1421
(dp3042
g1460
Nssg1423
(lp3043
g1460
asg1425
Nsbsg74
Nsg66
g1516
sg76
(dp3044
sg78
g3009
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp3045
sg90
Nsg91
Nsb(dp3046
sg5
(g25
g7
Ntp3047
Rp3048
(dp3049
g29
(dp3050
sg31
g5
(g1403
g7
Ntp3051
Rp3052
(dp3053
g1407
(lp3054
g1454
asg36
g37
(g1413
tp3055
Rp3056
(dp3057
g42
I00
sg1419
g3041
sg1454
g45
sg51
g52
sbsg1421
(dp3058
g1460
Nssg1423
(lp3059
g1460
asg1425
Nsbsg74
Nsg81
I00
sg76
(dp3060
sg83
Nsg80
Nsg90
Nsg66
g1463
sg78
g3009
sg82
I00
sg84
Nsg85
I00
sg86
g1463
sg87
Nsg88
(lp3061
sg91
Nsb(dp3062
sg5
(g25
g7
Ntp3063
Rp3064
(dp3065
g29
(dp3066
sg31
g5
(g1403
g7
Ntp3067
Rp3068
(dp3069
g1407
(lp3070
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp3071
Rp3072
(dp3073
g42
I00
sg1411
S't1_edge_on_mean_func_in_t1_s.png'
p3074
sg1409
g45
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3075
sg1410
g45
sg51
g52
sbsg1421
(dp3076
g1411
Nssg1423
(lp3077
g1411
asg1425
Nsbsg74
Nsg66
g1499
sg76
(dp3078
sg78
g3009
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp3079
sg90
Nsg91
Nsb(dp3080
sg5
(g25
g7
Ntp3081
Rp3082
(dp3083
g29
(dp3084
sg31
g5
(g121
g7
Ntp3085
Rp3086
(dp3087
g36
g37
(g125
tp3088
Rp3089
(dp3090
g51
g52
sg1410
g45
sg1409
g45
sbsg136
(lp3091
g1410
ag1409
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp3092
sg78
g3009
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp3093
sg90
Nsg91
Nsb(dp3094
ssg247
(dp3095
sg249
(dp3096
g2998
(dp3097
sg3013
(dp3098
g2998
(dp3099
g253
(lp3100
(g1411
g1477
tp3101
asssg3031
(dp3102
g3013
(dp3103
g253
(lp3104
(g1460
g1410
tp3105
assg2998
(dp3106
g253
(lp3107
(g1460
g1476
tp3108
assg3064
(dp3109
g253
(lp3110
(g1460
g1410
tp3111
asssg3048
(dp3112
g3013
(dp3113
g253
(lp3114
(g1460
g1409
tp3115
assg2998
(dp3116
g253
(lp3117
(g1460
g1479
tp3118
assg3064
(dp3119
g253
(lp3120
(g1460
g1409
tp3121
asssg3064
(dp3122
g2998
(dp3123
g253
(lp3124
(g1411
g1478
tp3125
asssg3082
(dp3126
g3031
(dp3127
g253
(lp3128
(g1410
g1454
tp3129
assg3048
(dp3130
g253
(lp3131
(g1409
g1454
tp3132
assssg295
g3096
sg296
(dp3133
g2998
(dp3134
g3031
g3106
sg3064
g3123
sg3048
g3116
sg3013
g3099
ssg3013
(dp3135
g3031
g3103
sg3048
g3113
ssg3031
(dp3136
g3082
g3127
ssg3048
(dp3137
g3082
g3130
ssg3064
(dp3138
g3031
g3109
sg3048
g3119
ssg3082
(dp3139
ssg304
g3096
sbsg66
g3009
sg78
g1067
sg86
g3009
sg87
g306
((lp3140
(lp3141
g309
ag306
((lp3142
(lp3143
g312
ag309
aa(lp3144
g314
ag315
aa(lp3145
g317
ag318
aa(lp3146
g320
ag321
aa(lp3147
g323
ag324
aa(lp3148
g326
ag327
aa(lp3149
g329
ag330
aa(lp3150
g332
ag333
aatp3151
Rp3152
aa(lp3153
g337
ag306
((lp3154
(lp3155
g312
ag337
aa(lp3156
g341
ag342
aa(lp3157
g344
ag345
aa(lp3158
g347
ag348
aa(lp3159
g350
ag351
aa(lp3160
g353
ag354
aa(lp3161
g356
ag357
aa(lp3162
g359
ag360
aa(lp3163
g362
ag363
aa(lp3164
g365
ag366
aa(lp3165
g368
ag369
aa(lp3166
g371
ag372
aa(lp3167
g374
ag375
aa(lp3168
g377
ag378
aa(lp3169
g380
ag381
aa(lp3170
g383
ag384
aa(lp3171
g386
ag387
aa(lp3172
g389
ag390
aa(lp3173
g392
ag393
aatp3174
Rp3175
aa(lp3176
g397
ag306
((lp3177
(lp3178
g312
ag397
aa(lp3179
g401
ag402
aatp3180
Rp3181
aatp3182
Rp3183
sg91
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg1914
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g25
g7
Ntp3201
Rp3202
(dp3203
g29
(dp3204
sg31
g5
(g1403
g7
Ntp3205
Rp3206
(dp3207
g1407
(lp3208
g1454
asg36
g37
(g1413
tp3209
Rp3210
(dp3211
g42
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3212
sg1454
g45
sg51
g52
sbsg1421
(dp3213
g1460
Nssg1423
(lp3214
g1460
asg1425
Nsbsg74
Nsg81
I00
sg76
(dp3215
sg83
Nsg80
Nsg90
Nsg66
S'resample_o_gm'
p3216
sg78
S'montage_csf_gm_wm_0'
p3217
sg82
I00
sg84
Nsg85
I00
sg86
g3216
sg87
Nsg88
(lp3218
sg91
Nsb(dp3219
sg5
(g25
g7
Ntp3220
Rp3221
(dp3222
g29
(dp3223
sg31
g5
(g1403
g7
Ntp3224
Rp3225
(dp3226
g1407
(lp3227
S'overlay_csf'
p3228
aS'overlay_wm'
p3229
aS'overlay_gm'
p3230
ag1410
ag1411
asg36
g37
(g1413
tp3231
Rp3232
(dp3233
g42
I00
sg1411
S'montage_csf_gm_wm_a.png'
p3234
sg3230
g45
sg1419
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3235
sg3228
g45
sg3229
g45
sg1410
g45
sg51
g52
sbsg1421
(dp3236
g1411
Nssg1423
(lp3237
g1411
asg1425
Nsbsg74
Nsg66
g1426
sg76
(dp3238
sg78
g3217
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1426
sg87
Nsg88
(lp3239
sg90
Nsg91
Nsb(dp3240
sg5
(g25
g7
Ntp3241
Rp3242
(dp3243
g29
(dp3244
sg31
g5
(g1403
g7
Ntp3245
Rp3246
(dp3247
g1407
(lp3248
g1454
asg36
g37
(g1413
tp3249
Rp3250
(dp3251
g42
I00
sg1419
g3212
sg1454
g45
sg51
g52
sbsg1421
(dp3252
g1460
Nssg1423
(lp3253
g1460
asg1425
Nsbsg74
Nsg81
I00
sg76
(dp3254
sg83
Nsg80
Nsg90
Nsg66
S'resample_o_wm'
p3255
sg78
g3217
sg82
I00
sg84
Nsg85
I00
sg86
g3255
sg87
Nsg88
(lp3256
sg91
Nsb(dp3257
sg5
(g25
g7
Ntp3258
Rp3259
(dp3260
g29
(dp3261
sg31
g5
(g121
g7
Ntp3262
Rp3263
(dp3264
g36
g37
(g125
tp3265
Rp3266
(dp3267
g51
g52
sS'resampled_overlay_csf'
p3268
g45
sS'resampled_overlay_gm'
p3269
g45
sg1477
g45
sg1478
g45
sg1476
g45
sS'resampled_overlay_wm'
p3270
g45
sbsg136
(lp3271
g1477
ag1478
ag1476
ag3268
ag3270
ag3269
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp3272
sg78
g3217
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp3273
sg90
Nsg91
Nsb(dp3274
sg5
(g25
g7
Ntp3275
Rp3276
(dp3277
g29
(dp3278
sg31
g5
(g1403
g7
Ntp3279
Rp3280
(dp3281
g1407
(lp3282
g1454
asg36
g37
(g1413
tp3283
Rp3284
(dp3285
g42
I00
sg1419
g3212
sg1454
g45
sg51
g52
sbsg1421
(dp3286
g1460
Nssg1423
(lp3287
g1460
asg1425
Nsbsg74
Nsg66
g1516
sg76
(dp3288
sg78
g3217
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp3289
sg90
Nsg91
Nsb(dp3290
sg5
(g25
g7
Ntp3291
Rp3292
(dp3293
g29
(dp3294
sg31
g5
(g1403
g7
Ntp3295
Rp3296
(dp3297
g1407
(lp3298
g1454
asg36
g37
(g1413
tp3299
Rp3300
(dp3301
g42
I00
sg1419
g3212
sg1454
g45
sg51
g52
sbsg1421
(dp3302
g1460
Nssg1423
(lp3303
g1460
asg1425
Nsbsg74
Nsg81
I00
sg76
(dp3304
sg83
Nsg80
Nsg90
Nsg66
S'resample_o_csf'
p3305
sg78
g3217
sg82
I00
sg84
Nsg85
I00
sg86
g3305
sg87
Nsg88
(lp3306
sg91
Nsb(dp3307
sg5
(g25
g7
Ntp3308
Rp3309
(dp3310
g29
(dp3311
sg31
g5
(g121
g7
Ntp3312
Rp3313
(dp3314
g36
g37
(g125
tp3315
Rp3316
(dp3317
g51
g52
sg3230
g45
sg1410
g45
sg3228
g45
sg3229
g45
sbsg136
(lp3318
g1410
ag3228
ag3229
ag3230
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp3319
sg78
g3217
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp3320
sg90
Nsg91
Nsb(dp3321
sg5
(g25
g7
Ntp3322
Rp3323
(dp3324
g29
(dp3325
sg31
g5
(g1403
g7
Ntp3326
Rp3327
(dp3328
g1407
(lp3329
g3228
ag3229
ag3230
ag1410
ag1411
asg36
g37
(g1413
tp3330
Rp3331
(dp3332
g42
I00
sg1411
S'montage_csf_gm_wm_s.png'
p3333
sg3230
g45
sg1419
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3334
sg3228
g45
sg3229
g45
sg1410
g45
sg51
g52
sbsg1421
(dp3335
g1411
Nssg1423
(lp3336
g1411
asg1425
Nsbsg74
Nsg66
g1499
sg76
(dp3337
sg78
g3217
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp3338
sg90
Nsg91
Nsb(dp3339
ssg247
(dp3340
sg249
(dp3341
g3202
(dp3342
g3259
(dp3343
g253
(lp3344
(g1460
g3269
tp3345
assg3221
(dp3346
g253
(lp3347
(g1460
g3230
tp3348
assg3323
(dp3349
g253
(lp3350
(g1460
g3230
tp3351
asssg3221
(dp3352
g3259
(dp3353
g253
(lp3354
(g1411
g1477
tp3355
asssg3242
(dp3356
g3259
(dp3357
g253
(lp3358
(g1460
g3270
tp3359
assg3221
(dp3360
g253
(lp3361
(g1460
g3229
tp3362
assg3323
(dp3363
g253
(lp3364
(g1460
g3229
tp3365
asssg3259
(dp3366
sg3276
(dp3367
g3259
(dp3368
g253
(lp3369
(g1460
g1476
tp3370
assg3221
(dp3371
g253
(lp3372
(g1460
g1410
tp3373
assg3323
(dp3374
g253
(lp3375
(g1460
g1410
tp3376
asssg3292
(dp3377
g3259
(dp3378
g253
(lp3379
(g1460
g3268
tp3380
assg3221
(dp3381
g253
(lp3382
(g1460
g3228
tp3383
assg3323
(dp3384
g253
(lp3385
(g1460
g3228
tp3386
asssg3309
(dp3387
g3202
(dp3388
g253
(lp3389
(g3230
g1454
tp3390
assg3276
(dp3391
g253
(lp3392
(g1410
g1454
tp3393
assg3242
(dp3394
g253
(lp3395
(g3229
g1454
tp3396
assg3292
(dp3397
g253
(lp3398
(g3228
g1454
tp3399
asssg3323
(dp3400
g3259
(dp3401
g253
(lp3402
(g1411
g1478
tp3403
assssg295
g3341
sg296
(dp3404
g3202
(dp3405
g3309
g3388
ssg3221
(dp3406
g3202
g3346
sg3276
g3371
sg3242
g3360
sg3292
g3381
ssg3242
(dp3407
g3309
g3394
ssg3259
(dp3408
g3202
g3343
sg3242
g3357
sg3221
g3353
sg3276
g3368
sg3292
g3378
sg3323
g3401
ssg3276
(dp3409
g3309
g3391
ssg3292
(dp3410
g3309
g3397
ssg3309
(dp3411
sg3323
(dp3412
g3202
g3349
sg3276
g3374
sg3242
g3363
sg3292
g3384
sssg304
g3341
sbsg66
g3217
sg78
g1067
sg86
g3217
sg87
g306
((lp3413
(lp3414
g309
ag306
((lp3415
(lp3416
g312
ag309
aa(lp3417
g314
ag315
aa(lp3418
g317
ag318
aa(lp3419
g320
ag321
aa(lp3420
g323
ag324
aa(lp3421
g326
ag327
aa(lp3422
g329
ag330
aa(lp3423
g332
ag333
aatp3424
Rp3425
aa(lp3426
g337
ag306
((lp3427
(lp3428
g312
ag337
aa(lp3429
g341
ag342
aa(lp3430
g344
ag345
aa(lp3431
g347
ag348
aa(lp3432
g350
ag351
aa(lp3433
g353
ag354
aa(lp3434
g356
ag357
aa(lp3435
g359
ag360
aa(lp3436
g362
ag363
aa(lp3437
g365
ag366
aa(lp3438
g368
ag369
aa(lp3439
g371
ag372
aa(lp3440
g374
ag375
aa(lp3441
g377
ag378
aa(lp3442
g380
ag381
aa(lp3443
g383
ag384
aa(lp3444
g386
ag387
aa(lp3445
g389
ag390
aa(lp3446
g392
ag393
aatp3447
Rp3448
aa(lp3449
g397
ag306
((lp3450
(lp3451
g312
ag397
aa(lp3452
g401
ag402
aatp3453
Rp3454
aatp3455
Rp3456
sg91
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g25
g7
Ntp3466
Rp3467
(dp3468
g29
(dp3469
sg31
g5
(g121
g7
Ntp3470
Rp3471
(dp3472
g36
g37
(g125
tp3473
Rp3474
(dp3475
g51
g52
sS'linear_reg_matrix'
p3476
g45
sS'bbr_schedule'
p3477
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3478
sS'anat_wm_segmentation'
p3479
g45
sS'anat_skull'
p3480
g45
sg2585
g45
sbsg136
(lp3481
g2585
ag3480
ag3476
ag3479
ag3477
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp3482
sg78
S'func_to_anat_bbreg_0'
p3483
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp3484
sg90
Nsg91
Nsb(dp3485
sg5
(g25
g7
Ntp3486
Rp3487
(dp3488
g29
(dp3489
sg31
g5
(g166
g7
Ntp3490
Rp3491
(dp3492
g36
g37
(g170
tp3493
Rp3494
(dp3495
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g45
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g45
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
g45
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
I6
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp3496
g59
g60
stp3497
Rp3498
(dp3499
g64
S'environ_items'
p3500
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'bbreg_func_to_anat'
p3501
sg76
(dp3502
sg78
g3483
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3501
sg87
Nsg88
(lp3503
sg90
Nsg91
Nsb(dp3504
sg5
(g25
g7
Ntp3505
Rp3506
(dp3507
g29
(dp3508
sg31
g5
(g121
g7
Ntp3509
Rp3510
(dp3511
g36
g37
(g125
tp3512
Rp3513
(dp3514
S'func_to_anat_linear_xfm'
p3515
g45
sg51
g52
sS'anat_func'
p3516
g45
sbsg136
(lp3517
g3515
ag3516
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp3518
sg78
g3483
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp3519
sg90
Nsg91
Nsb(dp3520
sg5
(g25
g7
Ntp3521
Rp3522
(dp3523
g29
(dp3524
sg31
g5
(g97
g7
Ntp3525
Rp3526
(dp3527
g36
g37
(g101
tp3528
Rp3529
(dp3530
g42
I00
sg51
g52
sg46
S'-thr 0.5 -bin'
p3531
sg105
g45
sg48
g45
sg49
g45
sg106
g45
sg53
g54
sg55
g5
(g56
g57
(dp3532
g59
g60
stp3533
Rp3534
(dp3535
g64
S'environ_items'
p3536
sg66
g55
sbsg67
g45
sg68
g60
sg112
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'wm_bb_mask'
p3537
sg76
(dp3538
sg78
g3483
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3537
sg87
Nsg88
(lp3539
sg90
Nsg91
Nsb(dp3540
ssg247
(dp3541
sg249
(dp3542
g3467
(dp3543
g3522
(dp3544
g253
(lp3545
(g3479
g67
tp3546
assg3487
(dp3547
g253
(lp3548
(g3477
g197
tp3549
a(g2585
g67
tp3550
a(g3480
g177
tp3551
a(g3476
g175
tp3552
asssg3487
(dp3553
g3506
(dp3554
g253
(lp3555
(g209
g3515
tp3556
a(g48
g3516
tp3557
asssg3506
(dp3558
sg3522
(dp3559
g3487
(dp3560
g253
(lp3561
((g48
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3562
(ttp3563
g49
tp3564
assssg295
g3542
sg296
(dp3565
g3467
(dp3566
sg3487
(dp3567
g3467
g3547
sg3522
g3560
ssg3506
(dp3568
g3487
g3554
ssg3522
(dp3569
g3467
g3544
sssg304
g3542
sbsg66
g3483
sg78
g1067
sg86
g3483
sg87
g306
((lp3570
(lp3571
g309
ag306
((lp3572
(lp3573
g312
ag309
aa(lp3574
g314
ag315
aa(lp3575
g317
ag318
aa(lp3576
g320
ag321
aa(lp3577
g323
ag324
aa(lp3578
g326
ag327
aa(lp3579
g329
ag330
aa(lp3580
g332
ag333
aatp3581
Rp3582
aa(lp3583
g337
ag306
((lp3584
(lp3585
g312
ag337
aa(lp3586
g341
ag342
aa(lp3587
g344
ag345
aa(lp3588
g347
ag348
aa(lp3589
g350
ag351
aa(lp3590
g353
ag354
aa(lp3591
g356
ag357
aa(lp3592
g359
ag360
aa(lp3593
g362
ag363
aa(lp3594
g365
ag366
aa(lp3595
g368
ag369
aa(lp3596
g371
ag372
aa(lp3597
g374
ag375
aa(lp3598
g377
ag378
aa(lp3599
g380
ag381
aa(lp3600
g383
ag384
aa(lp3601
g386
ag387
aa(lp3602
g389
ag390
aa(lp3603
g392
ag393
aatp3604
Rp3605
aa(lp3606
g397
ag306
((lp3607
(lp3608
g312
ag397
aa(lp3609
g401
ag402
aatp3610
Rp3611
aatp3612
Rp3613
sg91
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g25
g7
Ntp3620
Rp3621
(dp3622
g29
(dp3623
sg31
g5
(g1403
g7
Ntp3624
Rp3625
(dp3626
g1407
(lp3627
S'measure_file'
p3628
asg36
g37
(g1413
tp3629
Rp3630
(dp3631
g42
I00
sg51
g52
sg1419
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g45
sbsg1421
(dp3633
S'snr_storefl'
p3634
Nssg1423
(lp3635
g3634
asg1425
Nsbsg74
Nsg66
S'snr_val0'
p3636
sg76
(dp3637
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3636
sg87
Nsg88
(lp3638
sg90
Nsg91
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g25
g7
Ntp3648
Rp3649
(dp3650
g29
(dp3651
sg31
g5
(g1403
g7
Ntp3652
Rp3653
(dp3654
g1407
(lp3655
g3628
ag1863
asg36
g37
(g1413
tp3656
Rp3657
(dp3658
g42
I00
sg51
g52
sg1419
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g45
sg1863
S'snr'
p3660
sbsg1421
(dp3661
g1870
Nssg1423
(lp3662
g1870
asg1425
Nsbsg74
Nsg81
I00
sg76
(dp3663
sg83
Nsg80
Nsg90
Nsg66
S'hist_snr_0'
p3664
sg78
g1067
sg82
I00
sg84
Nsg85
I00
sg86
g3664
sg87
Nsg88
(lp3665
sg91
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g25
g7
Ntp3678
Rp3679
(dp3680
g29
(dp3681
sg31
g5
(g1403
g7
Ntp3682
Rp3683
(dp3684
g1407
(lp3685
S'scan'
p3686
aS'rest_dict'
p3687
asg36
g37
(g1413
tp3688
Rp3689
(dp3690
g42
I00
sg3687
(dp3691
S'rest_1_rest'
p3692
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-19/KKI2009-19-fMRI.nii'
p3693
ssg1419
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3694
sg51
g52
sg3686
g45
sbsg1421
(dp3695
g2066
Nssg1423
(lp3696
g2066
asg1425
Nsbsg74
Nsg66
S'selectrest'
p3697
sg76
(dp3698
sg78
S'func_gather_0'
p3699
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3697
sg87
Nsg88
(lp3700
sg90
Nsg91
Nsb(dp3701
sg5
(g25
g7
Ntp3702
Rp3703
(dp3704
g29
(dp3705
sg31
g5
(g121
g7
Ntp3706
Rp3707
(dp3708
g36
g37
(g125
tp3709
Rp3710
(dp3711
g51
g52
sg3686
g45
sS'subject'
p3712
S'11_987690887'
p3713
sbsg136
(lp3714
g3712
ag3686
asg138
I01
sbsg74
Nsg66
S'inputnode'
p3715
sg76
(dp3716
sg78
g3699
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(lp3717
(g3686
(lp3718
g3692
atp3719
asg85
I00
sg86
g3715
sg87
Nsg88
(lp3720
sg90
Nsg91
Nsb(dp3721
sg5
(g25
g7
Ntp3722
Rp3723
(dp3724
g29
(dp3725
sg31
g5
(g121
g7
Ntp3726
Rp3727
(dp3728
g36
g37
(g125
tp3729
Rp3730
(dp3731
g51
g52
sg3686
g45
sg2066
g45
sg3712
g45
sbsg136
(lp3732
g3712
ag2066
ag3686
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp3733
sg78
g3699
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp3734
sg90
Nsg91
Nsb(dp3735
ssg247
(dp3736
sg249
(dp3737
g3679
(dp3738
g3723
(dp3739
g253
(lp3740
(g2066
g2066
tp3741
asssg3703
(dp3742
g3679
(dp3743
g253
(lp3744
(g3686
g3686
tp3745
assg3723
(dp3746
g253
(lp3747
(g3712
g3712
tp3748
a(g3686
g3686
tp3749
asssg3723
(dp3750
ssg295
g3737
sg296
(dp3751
g3679
(dp3752
g3703
g3743
ssg3703
(dp3753
sg3723
(dp3754
g3679
g3739
sg3703
g3746
sssg304
g3737
sbsg66
g3699
sg78
g1067
sg86
g3699
sg87
g306
((lp3755
(lp3756
g309
ag306
((lp3757
(lp3758
g312
ag309
aa(lp3759
g314
ag315
aa(lp3760
g317
ag318
aa(lp3761
g320
ag321
aa(lp3762
g323
ag324
aa(lp3763
g326
ag327
aa(lp3764
g329
ag330
aa(lp3765
g332
ag333
aatp3766
Rp3767
aa(lp3768
g337
ag306
((lp3769
(lp3770
g312
ag337
aa(lp3771
g341
ag342
aa(lp3772
g344
ag345
aa(lp3773
g347
ag348
aa(lp3774
g350
ag351
aa(lp3775
g353
ag354
aa(lp3776
g356
ag357
aa(lp3777
g359
ag360
aa(lp3778
g362
ag363
aa(lp3779
g365
ag366
aa(lp3780
g368
ag369
aa(lp3781
g371
ag372
aa(lp3782
g374
ag375
aa(lp3783
g377
ag378
aa(lp3784
g380
ag381
aa(lp3785
g383
ag384
aa(lp3786
g386
ag387
aa(lp3787
g389
ag390
aa(lp3788
g392
ag393
aatp3789
Rp3790
aa(lp3791
g397
ag306
((lp3792
(lp3793
g312
ag397
aa(lp3794
g401
ag402
aatp3795
Rp3796
aatp3797
Rp3798
sg91
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g25
g7
Ntp3808
Rp3809
(dp3810
g29
(dp3811
sg31
g5
(g1250
g7
Ntp3812
Rp3813
(dp3814
g36
g37
(g1254
tp3815
Rp3816
(dp3817
g42
I00
sg1258
g45
sg67
g45
sg1259
g45
sg48
g45
sg206
g45
sg49
g45
sg180
g45
sg1181
g45
sg1188
g1820
sg53
g54
sg55
g5
(g56
g57
(dp3818
g59
g60
stp3819
Rp3820
(dp3821
g64
S'environ_items'
p3822
sg66
g55
sbsg1265
g45
sg1266
g45
sg68
g60
sg1267
g45
sg1268
g45
sg51
g52
sg1269
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mni_fsl_warp_0'
p3823
sg76
(dp3824
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3823
sg87
Nsg88
(lp3825
sg90
Nsg91
Nsbg48
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g25
g7
Ntp3835
Rp3836
(dp3837
g29
(dp3838
sg31
g5
(g1403
g7
Ntp3839
Rp3840
(dp3841
g1407
(lp3842
S'data_file'
p3843
aS'template'
p3844
ag68
asg36
g37
(g1413
tp3845
Rp3846
(dp3847
g42
I00
sg51
g52
sg3843
g45
sg1419
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3848
sg3844
g45
sg68
g45
sbsg1421
(dp3849
g48
Nssg1423
(lp3850
g48
asg1425
Nsbsg74
Nsg66
S'timeseries_voxel'
p3851
sg76
(dp3852
sg78
S'voxel_timeseries_0'
p3853
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3851
sg87
Nsg88
(lp3854
sg90
Nsg91
Nsb(dp3855
sg5
(g25
g7
Ntp3856
Rp3857
(dp3858
g29
(dp3859
sg31
g5
(g121
g7
Ntp3860
Rp3861
(dp3862
g36
g37
(g125
tp3863
Rp3864
(dp3865
g51
g52
sg68
(lp3866
I01
aI01
asg2066
g45
sbsg136
(lp3867
g2066
ag68
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp3868
sg78
g3853
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp3869
sg90
Nsg91
Nsb(dp3870
sg5
(g25
g7
Ntp3871
Rp3872
(dp3873
g29
(dp3874
sg31
g5
(g121
g7
Ntp3875
Rp3876
(dp3877
g36
g37
(g125
tp3878
Rp3879
(dp3880
g51
g52
sS'mask_outputs'
p3881
g45
sbsg136
(lp3882
g3881
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp3883
sg78
g3853
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp3884
sg90
Nsg91
Nsb(dp3885
sg5
(g25
g7
Ntp3886
Rp3887
(dp3888
g29
(dp3889
sg31
g5
(g121
g7
Ntp3890
Rp3891
(dp3892
g36
g37
(g125
tp3893
Rp3894
(dp3895
g51
g52
sg2031
g45
sbsg136
(lp3896
g2031
asg138
I01
sbsg74
Nsg66
S'input_mask'
p3897
sg76
(dp3898
sg78
g3853
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g3897
sg87
Nsg88
(lp3899
sg90
Nsg91
Nsb(dp3900
ssg247
(dp3901
sg249
(dp3902
g3836
(dp3903
g3872
(dp3904
g253
(lp3905
(g48
g3881
tp3906
asssg3857
(dp3907
g3836
(dp3908
g253
(lp3909
(g2066
g3843
tp3910
a(g68
g68
tp3911
asssg3872
(dp3912
sg3887
(dp3913
g3836
(dp3914
g253
(lp3915
(g2031
g3844
tp3916
assssg295
g3902
sg296
(dp3917
g3836
(dp3918
g3857
g3908
sg3887
g3914
ssg3857
(dp3919
sg3872
(dp3920
g3836
g3904
ssg3887
(dp3921
ssg304
g3902
sbsg66
g3853
sg78
g1067
sg86
g3853
sg87
g306
((lp3922
(lp3923
g309
ag306
((lp3924
(lp3925
g312
ag309
aa(lp3926
g314
ag315
aa(lp3927
g317
ag318
aa(lp3928
g320
ag321
aa(lp3929
g323
ag324
aa(lp3930
g326
ag327
aa(lp3931
g329
ag330
aa(lp3932
g332
ag333
aatp3933
Rp3934
aa(lp3935
g337
ag306
((lp3936
(lp3937
g312
ag337
aa(lp3938
g341
ag342
aa(lp3939
g344
ag345
aa(lp3940
g347
ag348
aa(lp3941
g350
ag351
aa(lp3942
g353
ag354
aa(lp3943
g356
ag357
aa(lp3944
g359
ag360
aa(lp3945
g362
ag363
aa(lp3946
g365
ag366
aa(lp3947
g368
ag369
aa(lp3948
g371
ag372
aa(lp3949
g374
ag375
aa(lp3950
g377
ag378
aa(lp3951
g380
ag381
aa(lp3952
g383
ag384
aa(lp3953
g386
ag387
aa(lp3954
g389
ag390
aa(lp3955
g392
ag393
aatp3956
Rp3957
aa(lp3958
g397
ag306
((lp3959
(lp3960
g312
ag397
aa(lp3961
g401
ag402
aatp3962
Rp3963
aatp3964
Rp3965
sg91
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g25
g7
Ntp3986
Rp3987
(dp3988
g29
(dp3989
sg31
g5
(g1403
g7
Ntp3990
Rp3991
(dp3992
g1407
(lp3993
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp3994
Rp3995
(dp3996
g42
I00
sg1411
S'mni_anat_a.png'
p3997
sg1409
g45
sg1412
g1418
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3998
sg1410
g45
sg51
g52
sbsg1421
(dp3999
g1411
Nssg1423
(lp4000
g1411
asg1425
Nsbsg74
Nsg66
g1426
sg76
(dp4001
sg78
S'montage_mni_anat_0'
p4002
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1426
sg87
Nsg88
(lp4003
sg90
Nsg91
Nsb(dp4004
sg5
(g25
g7
Ntp4005
Rp4006
(dp4007
g29
(dp4008
sg31
g5
(g121
g7
Ntp4009
Rp4010
(dp4011
g36
g37
(g125
tp4012
Rp4013
(dp4014
g51
g52
sg1476
g45
sg1477
g45
sg1478
g45
sg1479
g45
sbsg136
(lp4015
g1477
ag1478
ag1476
ag1479
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp4016
sg78
g4002
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp4017
sg90
Nsg91
Nsb(dp4018
sg5
(g25
g7
Ntp4019
Rp4020
(dp4021
g29
(dp4022
sg31
g5
(g1403
g7
Ntp4023
Rp4024
(dp4025
g1407
(lp4026
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp4027
Rp4028
(dp4029
g42
I00
sg1411
S'mni_anat_s.png'
p4030
sg1409
g45
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4031
sg1410
g45
sg51
g52
sbsg1421
(dp4032
g1411
Nssg1423
(lp4033
g1411
asg1425
Nsbsg74
Nsg66
g1499
sg76
(dp4034
sg78
g4002
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp4035
sg90
Nsg91
Nsb(dp4036
sg5
(g25
g7
Ntp4037
Rp4038
(dp4039
g29
(dp4040
sg31
g5
(g121
g7
Ntp4041
Rp4042
(dp4043
g36
g37
(g125
tp4044
Rp4045
(dp4046
g51
g52
sg1410
g45
sg1409
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p4047
sbsg136
(lp4048
g1410
ag1409
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp4049
sg78
g4002
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp4050
sg90
Nsg91
Nsb(dp4051
sg5
(g25
g7
Ntp4052
Rp4053
(dp4054
g29
(dp4055
sg31
g5
(g1403
g7
Ntp4056
Rp4057
(dp4058
g1407
(lp4059
g1454
asg36
g37
(g1413
tp4060
Rp4061
(dp4062
g42
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4063
sg1454
g45
sg51
g52
sbsg1421
(dp4064
g1460
Nssg1423
(lp4065
g1460
asg1425
Nsbsg74
Nsg81
I00
sg76
(dp4066
sg83
Nsg80
Nsg90
Nsg66
g1463
sg78
g4002
sg82
I00
sg84
Nsg85
I00
sg86
g1463
sg87
Nsg88
(lp4067
sg91
Nsb(dp4068
sg5
(g25
g7
Ntp4069
Rp4070
(dp4071
g29
(dp4072
sg31
g5
(g1403
g7
Ntp4073
Rp4074
(dp4075
g1407
(lp4076
g1454
asg36
g37
(g1413
tp4077
Rp4078
(dp4079
g42
I00
sg1419
g4063
sg1454
g45
sg51
g52
sbsg1421
(dp4080
g1460
Nssg1423
(lp4081
g1460
asg1425
Nsbsg74
Nsg66
g1516
sg76
(dp4082
sg78
g4002
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp4083
sg90
Nsg91
Nsb(dp4084
ssg247
(dp4085
sg249
(dp4086
g3987
(dp4087
g4006
(dp4088
g253
(lp4089
(g1411
g1477
tp4090
asssg4006
(dp4091
sg4020
(dp4092
g4006
(dp4093
g253
(lp4094
(g1411
g1478
tp4095
asssg4038
(dp4096
g4053
(dp4097
g253
(lp4098
(g1409
g1454
tp4099
assg4070
(dp4100
g253
(lp4101
(g1410
g1454
tp4102
asssg4053
(dp4103
g3987
(dp4104
g253
(lp4105
(g1460
g1409
tp4106
assg4006
(dp4107
g253
(lp4108
(g1460
g1479
tp4109
assg4020
(dp4110
g253
(lp4111
(g1460
g1409
tp4112
asssg4070
(dp4113
g3987
(dp4114
g253
(lp4115
(g1460
g1410
tp4116
assg4006
(dp4117
g253
(lp4118
(g1460
g1476
tp4119
assg4020
(dp4120
g253
(lp4121
(g1460
g1410
tp4122
assssg295
g4086
sg296
(dp4123
g3987
(dp4124
g4053
g4104
sg4070
g4114
ssg4006
(dp4125
g4053
g4107
sg4070
g4117
sg4020
g4093
sg3987
g4088
ssg4020
(dp4126
g4053
g4110
sg4070
g4120
ssg4038
(dp4127
sg4053
(dp4128
g4038
g4097
ssg4070
(dp4129
g4038
g4100
sssg304
g4086
sbsg66
g4002
sg78
g1067
sg86
g4002
sg87
g306
((lp4130
(lp4131
g309
ag306
((lp4132
(lp4133
g312
ag309
aa(lp4134
g314
ag315
aa(lp4135
g317
ag318
aa(lp4136
g320
ag321
aa(lp4137
g323
ag324
aa(lp4138
g326
ag327
aa(lp4139
g329
ag330
aa(lp4140
g332
ag333
aatp4141
Rp4142
aa(lp4143
g337
ag306
((lp4144
(lp4145
g312
ag337
aa(lp4146
g341
ag342
aa(lp4147
g344
ag345
aa(lp4148
g347
ag348
aa(lp4149
g350
ag351
aa(lp4150
g353
ag354
aa(lp4151
g356
ag357
aa(lp4152
g359
ag360
aa(lp4153
g362
ag363
aa(lp4154
g365
ag366
aa(lp4155
g368
ag369
aa(lp4156
g371
ag372
aa(lp4157
g374
ag375
aa(lp4158
g377
ag378
aa(lp4159
g380
ag381
aa(lp4160
g383
ag384
aa(lp4161
g386
ag387
aa(lp4162
g389
ag390
aa(lp4163
g392
ag393
aatp4164
Rp4165
aa(lp4166
g397
ag306
((lp4167
(lp4168
g312
ag397
aa(lp4169
g401
ag402
aatp4170
Rp4171
aatp4172
Rp4173
sg91
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg2033
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g25
g7
Ntp4188
Rp4189
(dp4190
g29
(dp4191
sg31
g5
(g1250
g7
Ntp4192
Rp4193
(dp4194
g36
g37
(g1254
tp4195
Rp4196
(dp4197
g42
I00
sg1258
g45
sg67
g45
sg1259
g45
sg48
g45
sg206
g45
sg49
g45
sg180
S'nn'
p4198
sg1181
g45
sg1188
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg53
g54
sg55
g5
(g56
g57
(dp4200
g59
g60
stp4201
Rp4202
(dp4203
g64
S'environ_items'
p4204
sg66
g55
sbsg1265
g45
sg1266
g45
sg68
g60
sg1267
g45
sg1268
g45
sg51
g52
sg1269
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_mni_fsl_warp_mask_0'
p4205
sg76
(dp4206
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4205
sg87
Nsg88
(lp4207
sg90
Nsg91
Nsbg48
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g25
g7
Ntp4217
Rp4218
(dp4219
g29
(dp4220
sg31
g5
(g121
g7
Ntp4221
Rp4222
(dp4223
g36
g37
(g125
tp4224
Rp4225
(dp4226
g51
g52
sg1476
g45
sg1477
g45
sg1478
g45
sg1479
g45
sbsg136
(lp4227
g1477
ag1478
ag1476
ag1479
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp4228
sg78
S'montage_skull_0'
p4229
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp4230
sg90
Nsg91
Nsb(dp4231
sg5
(g25
g7
Ntp4232
Rp4233
(dp4234
g29
(dp4235
sg31
g5
(g1403
g7
Ntp4236
Rp4237
(dp4238
g1407
(lp4239
g1454
asg36
g37
(g1413
tp4240
Rp4241
(dp4242
g42
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4243
sg1454
g45
sg51
g52
sbsg1421
(dp4244
g1460
Nssg1423
(lp4245
g1460
asg1425
Nsbsg74
Nsg66
g1516
sg76
(dp4246
sg78
g4229
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1516
sg87
Nsg88
(lp4247
sg90
Nsg91
Nsb(dp4248
sg5
(g25
g7
Ntp4249
Rp4250
(dp4251
g29
(dp4252
sg31
g5
(g1403
g7
Ntp4253
Rp4254
(dp4255
g1407
(lp4256
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp4257
Rp4258
(dp4259
g42
I00
sg1411
S'skull_vis_s.png'
p4260
sg1409
g45
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4261
sg1410
g45
sg51
g52
sbsg1421
(dp4262
g1411
Nssg1423
(lp4263
g1411
asg1425
Nsbsg74
Nsg66
g1499
sg76
(dp4264
sg78
g4229
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1499
sg87
Nsg88
(lp4265
sg90
Nsg91
Nsb(dp4266
sg5
(g25
g7
Ntp4267
Rp4268
(dp4269
g29
(dp4270
sg31
g5
(g121
g7
Ntp4271
Rp4272
(dp4273
g36
g37
(g125
tp4274
Rp4275
(dp4276
g51
g52
sg1410
g45
sg1409
g45
sbsg136
(lp4277
g1410
ag1409
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp4278
sg78
g4229
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp4279
sg90
Nsg91
Nsb(dp4280
sg5
(g25
g7
Ntp4281
Rp4282
(dp4283
g29
(dp4284
sg31
g5
(g1403
g7
Ntp4285
Rp4286
(dp4287
g1407
(lp4288
g1454
asg36
g37
(g1413
tp4289
Rp4290
(dp4291
g42
I00
sg1419
g4243
sg1454
g45
sg51
g52
sbsg1421
(dp4292
g1460
Nssg1423
(lp4293
g1460
asg1425
Nsbsg74
Nsg81
I00
sg76
(dp4294
sg83
Nsg80
Nsg90
Nsg66
g1463
sg78
g4229
sg82
I00
sg84
Nsg85
I00
sg86
g1463
sg87
Nsg88
(lp4295
sg91
Nsb(dp4296
sg5
(g25
g7
Ntp4297
Rp4298
(dp4299
g29
(dp4300
sg31
g5
(g1403
g7
Ntp4301
Rp4302
(dp4303
g1407
(lp4304
g1409
ag1410
ag1411
ag1412
asg36
g37
(g1413
tp4305
Rp4306
(dp4307
g42
I00
sg1411
S'skull_vis_a.png'
p4308
sg1409
g45
sg1412
g1418
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4309
sg1410
g45
sg51
g52
sbsg1421
(dp4310
g1411
Nssg1423
(lp4311
g1411
asg1425
Nsbsg74
Nsg66
g1426
sg76
(dp4312
sg78
g4229
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g1426
sg87
Nsg88
(lp4313
sg90
Nsg91
Nsb(dp4314
ssg247
(dp4315
sg249
(dp4316
g4218
(dp4317
sg4233
(dp4318
g4250
(dp4319
g253
(lp4320
(g1460
g1410
tp4321
assg4298
(dp4322
g253
(lp4323
(g1460
g1410
tp4324
assg4218
(dp4325
g253
(lp4326
(g1460
g1476
tp4327
asssg4250
(dp4328
g4218
(dp4329
g253
(lp4330
(g1411
g1478
tp4331
asssg4268
(dp4332
g4233
(dp4333
g253
(lp4334
(g1410
g1454
tp4335
assg4282
(dp4336
g253
(lp4337
(g1409
g1454
tp4338
asssg4282
(dp4339
g4250
(dp4340
g253
(lp4341
(g1460
g1409
tp4342
assg4298
(dp4343
g253
(lp4344
(g1460
g1409
tp4345
assg4218
(dp4346
g253
(lp4347
(g1460
g1479
tp4348
asssg4298
(dp4349
g4218
(dp4350
g253
(lp4351
(g1411
g1477
tp4352
assssg295
g4316
sg296
(dp4353
g4218
(dp4354
g4250
g4329
sg4298
g4350
sg4233
g4325
sg4282
g4346
ssg4233
(dp4355
g4268
g4333
ssg4250
(dp4356
g4233
g4319
sg4282
g4340
ssg4268
(dp4357
sg4282
(dp4358
g4268
g4336
ssg4298
(dp4359
g4233
g4322
sg4282
g4343
sssg304
g4316
sbsg66
g4229
sg78
g1067
sg86
g4229
sg87
g306
((lp4360
(lp4361
g309
ag306
((lp4362
(lp4363
g312
ag309
aa(lp4364
g314
ag315
aa(lp4365
g317
ag318
aa(lp4366
g320
ag321
aa(lp4367
g323
ag324
aa(lp4368
g326
ag327
aa(lp4369
g329
ag330
aa(lp4370
g332
ag333
aatp4371
Rp4372
aa(lp4373
g337
ag306
((lp4374
(lp4375
g312
ag337
aa(lp4376
g341
ag342
aa(lp4377
g344
ag345
aa(lp4378
g347
ag348
aa(lp4379
g350
ag351
aa(lp4380
g353
ag354
aa(lp4381
g356
ag357
aa(lp4382
g359
ag360
aa(lp4383
g362
ag363
aa(lp4384
g365
ag366
aa(lp4385
g368
ag369
aa(lp4386
g371
ag372
aa(lp4387
g374
ag375
aa(lp4388
g377
ag378
aa(lp4389
g380
ag381
aa(lp4390
g383
ag384
aa(lp4391
g386
ag387
aa(lp4392
g389
ag390
aa(lp4393
g392
ag393
aatp4394
Rp4395
aa(lp4396
g397
ag306
((lp4397
(lp4398
g312
ag397
aa(lp4399
g401
ag402
aatp4400
Rp4401
aatp4402
Rp4403
sg91
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2516
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2517
(g5
(g25
g7
Ntp4413
Rp4414
(dp4415
g29
(dp4416
sg31
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g36
g37
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g42
I00
sg51
g52
sS'tpattern'
p4425
g45
sg48
g45
sS'tr'
p4426
g45
sg49
g45
sg180
g45
sg2239
g2240
sS'tzero'
p4427
g45
sS'ignore'
p4428
g45
sS'rltplus'
p4429
g45
sg53
g54
sS'tslice'
p4430
g45
sg67
g45
sS'rlt'
p4431
g45
sg55
g5
(g56
g57
(dp4432
tp4433
Rp4434
(dp4435
g64
S'environ_items'
p4436
sg66
g55
sbsbsg2252
g2240
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_slice_timing_correction_0'
p4437
sg76
(dp4438
sg78
g1067
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4437
sg87
Nsg88
(lp4439
sg90
Nsg91
Nsbg48
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g25
g7
Ntp4449
Rp4450
(dp4451
g29
(dp4452
sg31
g5
(g121
g7
Ntp4453
Rp4454
(dp4455
g36
g37
(g125
tp4456
Rp4457
(dp4458
g51
g52
sS'roi'
p4459
g45
sbsg136
(lp4460
g4459
asg138
I01
sbsg74
Nsg66
S'input_roi'
p4461
sg76
(dp4462
sg78
S'roi_timeseries_0'
p4463
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4461
sg87
Nsg88
(lp4464
sg90
Nsg91
Nsb(dp4465
sg5
(g25
g7
Ntp4466
Rp4467
(dp4468
g29
(dp4469
sg31
g5
(g121
g7
Ntp4470
Rp4471
(dp4472
g36
g37
(g125
tp4473
Rp4474
(dp4475
g51
g52
sS'roi_outputs'
p4476
g45
sbsg136
(lp4477
g4476
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp4478
sg78
g4463
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp4479
sg90
Nsg91
Nsb(dp4480
sg5
(g25
g7
Ntp4481
Rp4482
(dp4483
g29
(dp4484
sg31
g5
(g121
g7
Ntp4485
Rp4486
(dp4487
g36
g37
(g125
tp4488
Rp4489
(dp4490
g51
g52
sg68
(lp4491
I01
aI01
asg2066
g45
sbsg136
(lp4492
g2066
ag68
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp4493
sg78
g4463
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp4494
sg90
Nsg91
Nsb(dp4495
sg5
(g25
g7
Ntp4496
Rp4497
(dp4498
g29
(dp4499
sg31
g5
(g1403
g7
Ntp4500
Rp4501
(dp4502
g1407
(lp4503
g3843
ag3844
ag68
asg36
g37
(g1413
tp4504
Rp4505
(dp4506
g42
I00
sg51
g52
sg3843
g45
sg1419
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4507
sg3844
g45
sg68
g45
sbsg1421
(dp4508
g48
Nssg1423
(lp4509
g48
asg1425
Nsbsg74
Nsg66
S'timeseries_roi'
p4510
sg76
(dp4511
sg78
g4463
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4510
sg87
Nsg88
(lp4512
sg90
Nsg91
Nsb(dp4513
ssg247
(dp4514
sg249
(dp4515
g4450
(dp4516
g4497
(dp4517
g253
(lp4518
(g4459
g3844
tp4519
asssg4467
(dp4520
sg4482
(dp4521
g4497
(dp4522
g253
(lp4523
(g2066
g3843
tp4524
a(g68
g68
tp4525
asssg4497
(dp4526
g4467
(dp4527
g253
(lp4528
(g48
g4476
tp4529
assssg295
g4515
sg296
(dp4530
g4450
(dp4531
sg4467
(dp4532
g4497
g4527
ssg4482
(dp4533
sg4497
(dp4534
g4450
g4517
sg4482
g4522
sssg304
g4515
sbsg66
g4463
sg78
g1067
sg86
g4463
sg87
g306
((lp4535
(lp4536
g309
ag306
((lp4537
(lp4538
g312
ag309
aa(lp4539
g314
ag315
aa(lp4540
g317
ag318
aa(lp4541
g320
ag321
aa(lp4542
g323
ag324
aa(lp4543
g326
ag327
aa(lp4544
g329
ag330
aa(lp4545
g332
ag333
aatp4546
Rp4547
aa(lp4548
g337
ag306
((lp4549
(lp4550
g312
ag337
aa(lp4551
g341
ag342
aa(lp4552
g344
ag345
aa(lp4553
g347
ag348
aa(lp4554
g350
ag351
aa(lp4555
g353
ag354
aa(lp4556
g356
ag357
aa(lp4557
g359
ag360
aa(lp4558
g362
ag363
aa(lp4559
g365
ag366
aa(lp4560
g368
ag369
aa(lp4561
g371
ag372
aa(lp4562
g374
ag375
aa(lp4563
g377
ag378
aa(lp4564
g380
ag381
aa(lp4565
g383
ag384
aa(lp4566
g386
ag387
aa(lp4567
g389
ag390
aa(lp4568
g392
ag393
aatp4569
Rp4570
aa(lp4571
g397
ag306
((lp4572
(lp4573
g312
ag397
aa(lp4574
g401
ag402
aatp4575
Rp4576
aatp4577
Rp4578
sg91
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g25
g7
Ntp4589
Rp4590
(dp4591
g29
(dp4592
sg31
g5
(g166
g7
Ntp4593
Rp4594
(dp4595
g36
g37
(g170
tp4596
Rp4597
(dp4598
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g181
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
S'-applyisoxfm 2'
p4599
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
g45
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp4600
g59
g60
stp4601
Rp4602
(dp4603
g64
S'environ_items'
p4604
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'csf_anat_to_2mm_flirt_applyxfm'
p4605
sg76
(dp4606
sg78
S'nuisance_0'
p4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4605
sg87
Nsg88
(lp4608
sg90
Nsg91
Nsb(dp4609
sg5
(g25
g7
Ntp4610
Rp4611
(dp4612
g29
(dp4613
sg31
g5
(g166
g7
Ntp4614
Rp4615
(dp4616
g36
g37
(g170
tp4617
Rp4618
(dp4619
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g181
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g4599
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
g45
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp4620
g59
g60
stp4621
Rp4622
(dp4623
g64
S'environ_items'
p4624
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'gm_anat_to_2mm_flirt_applyxfm'
p4625
sg76
(dp4626
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4625
sg87
Nsg88
(lp4627
sg90
Nsg91
Nsb(dp4628
sg5
(g25
g7
Ntp4629
Rp4630
(dp4631
g29
(dp4632
sg31
g5
(g121
g7
Ntp4633
Rp4634
(dp4635
g36
g37
(g125
tp4636
Rp4637
(dp4638
S'motion_components'
p4639
g45
sS'anat_to_mni_initial_xfm'
p4640
g45
sS'lat_ventricles_mask'
p4641
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4642
sg429
g45
sS'anat_to_mni_rigid_xfm'
p4643
g45
sS'compcor_ncomponents'
p4644
g45
sS'anat_to_mni_affine_xfm'
p4645
g45
sS'selector'
p4646
g45
sg428
g45
sS'template_brain'
p4647
g45
sg3515
g45
sS'mni_to_anat_linear_xfm'
p4648
g45
sg430
g45
sg51
g52
sg3712
g45
sbsg136
(lp4649
g3712
ag428
ag430
ag429
ag4648
ag4640
ag4643
ag4645
ag3515
ag4641
ag4639
ag4646
ag4644
ag4647
asg138
I01
sbsg74
Nsg66
g139
sg76
(dp4650
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g139
sg87
Nsg88
(lp4651
sg90
Nsg91
Nsb(dp4652
sg5
(g25
g7
Ntp4653
Rp4654
(dp4655
g29
(dp4656
sg31
g5
(g166
g7
Ntp4657
Rp4658
(dp4659
g36
g37
(g170
tp4660
Rp4661
(dp4662
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g45
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g4599
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
g45
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp4663
g59
g60
stp4664
Rp4665
(dp4666
g64
S'environ_items'
p4667
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'func_to_2mm_flirt_applyxfm'
p4668
sg76
(dp4669
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4668
sg87
Nsg88
(lp4670
sg90
Nsg91
Nsb(dp4671
sg5
(g25
g7
Ntp4672
Rp4673
(dp4674
g29
(dp4675
sg31
g5
(g1403
g7
Ntp4676
Rp4677
(dp4678
g1407
(lp4679
g3843
aS'ventricles_mask_file'
p4680
aS'wm_seg_file'
p4681
aS'csf_seg_file'
p4682
aS'gm_seg_file'
p4683
ag736
ag754
ag509
asg36
g37
(g1413
tp4684
Rp4685
(dp4686
g42
I00
sg51
g52
sg736
g45
sg754
g45
sg3843
g45
sg1419
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4687
sg4683
g45
sg4680
g45
sg509
g45
sg4682
g45
sg4681
g45
sbsg1421
(dp4688
S'file_gm'
p4689
NsS'file_wm'
p4690
NsS'file_csf'
p4691
Nssg1423
(lp4692
g4690
ag4691
ag4689
asg1425
Nsbsg74
Nsg66
S'tissue_masks'
p4693
sg76
(dp4694
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4693
sg87
Nsg88
(lp4695
sg90
Nsg91
Nsb(dp4696
sg5
(g25
g7
Ntp4697
Rp4698
(dp4699
g29
(dp4700
sg31
g5
(g166
g7
Ntp4701
Rp4702
(dp4703
g36
g37
(g170
tp4704
Rp4705
(dp4706
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g181
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g4599
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
g45
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp4707
g59
g60
stp4708
Rp4709
(dp4710
g64
S'environ_items'
p4711
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'wm_anat_to_2mm_flirt_applyxfm'
p4712
sg76
(dp4713
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4712
sg87
Nsg88
(lp4714
sg90
Nsg91
Nsb(dp4715
sg5
(g25
g7
Ntp4716
Rp4717
(dp4718
g29
(dp4719
sg31
g5
(g166
g7
Ntp4720
Rp4721
(dp4722
g36
g37
(g170
tp4723
Rp4724
(dp4725
g174
g45
sg51
g52
sg175
g45
sg176
g45
sg177
g45
sg178
g45
sg179
g45
sg180
g181
sg182
g45
sg183
g45
sg184
g45
sg185
g45
sg186
g45
sg187
g45
sg188
g45
sg189
g45
sg190
g45
sg191
g45
sg67
g45
sg192
g45
sg193
g45
sg194
g45
sg195
g45
sg42
I00
sg196
g45
sg197
g45
sg49
g4599
sg198
g45
sg199
g45
sg53
g54
sg200
g45
sg201
g45
sg202
g45
sg203
g45
sg204
g45
sg48
g45
sg205
g45
sg206
g45
sg207
g45
sg208
g45
sg209
g45
sg210
g45
sg211
g45
sg212
g45
sg213
g45
sg55
g5
(g56
g57
(dp4726
g59
g60
stp4727
Rp4728
(dp4729
g64
S'environ_items'
p4730
sg66
g55
sbsg219
g45
sg220
g45
sg68
g60
sg221
g45
sg222
g45
sg223
g45
sbsg71
g60
sg72
Nsg73
g54
sbsg74
Nsg66
S'ho_mni_to_2mm_flirt_applyxfm'
p4731
sg76
(dp4732
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g4731
sg87
Nsg88
(lp4733
sg90
Nsg91
Nsb(dp4734
sg5
(g25
g7
Ntp4735
Rp4736
(dp4737
g29
(dp4738
sg31
g5
(g121
g7
Ntp4739
Rp4740
(dp4741
g36
g37
(g125
tp4742
Rp4743
(dp4744
g51
g52
sS'regressors'
p4745
g45
sg3712
g45
sbsg136
(lp4746
g3712
ag4745
asg138
I01
sbsg74
Nsg66
g158
sg76
(dp4747
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
Nsg85
I00
sg86
g158
sg87
Nsg88
(lp4748
sg90
Nsg91
Nsb(dp4749
sg5
(g25
g7
Ntp4750
Rp4751
(dp4752
g29
(dp4753
sg31
g5
(g1403
g7
Ntp4754
Rp4755
(dp4756
g1407
(lp4757
g3712
ag4646
aS'wm_sig_file'
p4758
aS'csf_sig_file'
p4759
aS'gm_sig_file'
p4760
aS'motion_file'
p4761
ag4644
asg36
g37
(g1413
tp4762
Rp4763
(dp4764
g42
I00
sg51
g52
sg4761
g45
sg4644
g45
sg1419
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4765
sg4759
g45
sg4758
g45
sg4760
g45
sg4646
g45
sg3712
g45
sbsg1421
(dp4766
S'regressors_file'
p4767
NsS'residual_file'
p4768
Nssg1423
(lp4769
g4768
ag4767
asg1425
Nsbsg74
Nsg66
S'residuals'
p4770
sg76
(dp4771
sg78
g4607
sg80
Nsg81
I00
sg82
I00
sg83
Nsg84
(lp4772
(g4646
(lp4773
(dp4774
S'global'
p4775
I0
sS'linear'
p4776
I1
sS'wm'
p4777
I0
sS'pc1'
p4778
I0
sS'motion'
p4779
I0
sS'quadratic'
p4780
I1
sS'gm'
p4781
I0
sS'compcor'
p4782
I1
sS'csf'
p4783
I1
satp4784
a(g4644
(lp4785
I5
atp4786
asg85
I00
sg86
g4770
sg87
Nsg88
(lp4787
sg90
Nsg91
Nsb(dp4788
ssg247
(dp4789
sg249
(dp4790
g4590
(dp4791
g4673
(dp4792
g253
(lp4793
(g48
g4682
tp4794
asssg4611
(dp4795
g4673
(dp4796
g253
(lp4797
(g48
g4683
tp4798
asssg4630
(dp4799
g4590
(dp4800
g253
(lp4801
(g430
g67
tp4802
a(g430
g177
tp4803
assg4751
(dp4804
g253
(lp4805
(g3712
g3712
tp4806
a(g4639
g4761
tp4807
a(g4646
g4646
tp4808
a(g4644
g4644
tp4809
assg4654
(dp4810
g253
(lp4811
(g3712
g67
tp4812
a(g430
g177
tp4813
a(g3515
g175
tp4814
assg4698
(dp4815
g253
(lp4816
(g428
g67
tp4817
a(g428
g177
tp4818
assg4717
(dp4819
g253
(lp4820
(g4648
g175
tp4821
a(g4641
g67
tp4822
a(g430
g177
tp4823
assg4611
(dp4824
g253
(lp4825
(g429
g67
tp4826
a(g429
g177
tp4827
asssg4654
(dp4828
g4673
(dp4829
g253
(lp4830
(g48
g3843
tp4831
asssg4673
(dp4832
g4751
(dp4833
g253
(lp4834
(g4690
g4758
tp4835
a(g4691
g4759
tp4836
a(g4689
g4760
tp4837
asssg4698
(dp4838
g4673
(dp4839
g253
(lp4840
(g48
g4681
tp4841
asssg4717
(dp4842
g4673
(dp4843
g253
(lp4844
(g48
g4680
tp4845
asssg4736
(dp4846
sg4751
(dp4847
g4736
(dp4848
g253
(lp4849
(g4768
g3712
tp4850
a(g4767
g4745
tp4851
assssg295
g4790
sg296
(dp4852
g4590
(dp4853
g4630
g4800
ssg4611
(dp4854
g4630
g4824
ssg4630
(dp4855
sg4654
(dp4856
g4630
g4810
ssg4673
(dp4857
g4717
g4843
sg4698
g4839
sg4611
g4796
sg4654
g4829
sg4590
g4792
ssg4698
(dp4858
g4630
g4815
ssg4717
(dp4859
g4630
g4819
ssg4736
(dp4860
g4751
g4848
ssg4751
(dp4861
g4673
g4833
sg4630
g4804
sssg304
g4790
sbsg66
g4607
sg78
g1067
sg86
g4607
sg87
g306
((lp4862
(lp4863
g309
ag306
((lp4864
(lp4865
g312
ag309
aa(lp4866
g314
ag315
aa(lp4867
g317
ag318
aa(lp4868
g320
ag321
aa(lp4869
g323
ag324
aa(lp4870
g326
ag327
aa(lp4871
g329
ag330
aa(lp4872
g332
ag333
aatp4873
Rp4874
aa(lp4875
g337
ag306
((lp4876
(lp4877
g312
ag337
aa(lp4878
g341
ag342
aa(lp4879
g344
ag345
aa(lp4880
g347
ag348
aa(lp4881
g350
ag351
aa(lp4882
g353
ag354
aa(lp4883
g356
ag357
aa(lp4884
g359
ag360
aa(lp4885
g362
ag363
aa(lp4886
g365
ag366
aa(lp4887
g368
ag369
aa(lp4888
g371
ag372
aa(lp4889
g374
ag375
aa(lp4890
g377
ag378
aa(lp4891
g380
ag381
aa(lp4892
g383
ag384
aa(lp4893
g386
ag387
aa(lp4894
g389
ag390
aa(lp4895
g392
ag393
aatp4896
Rp4897
aa(lp4898
g397
ag306
((lp4899
(lp4900
g312
ag397
aa(lp4901
g401
ag402
aatp4902
Rp4903
aatp4904
Rp4905
sg91
NsbS'outputspec.subject'
p4906
tp4907
sg1939
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg1940
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Completed'
p4921
sS'strat_0'
p4922
(lp4923
g2255
ag1144
ag305
ag4437
ag2476
ag2893
aS'func_to_anat_FLIRT_0'
p4924
ag3483
ag1900
ag4607
ag3823
ag4463
ag3853
asg1911
g3713
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1430307725.320133
s.