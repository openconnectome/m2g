(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(cnipype.pipeline.engine
Node
p18
g7
Ntp19
Rp20
(dp21
S'input_source'
p22
(dp23
sS'_interface'
p24
g5
(cnipype.interfaces.utility
IdentityInterface
p25
g7
Ntp26
Rp27
(dp28
S'inputs'
p29
ctraits.traits
__newobj__
p30
(cnipype.interfaces.base
DynamicTraitedSpec
p31
tp32
Rp33
(dp34
S'__traits_version__'
p35
S'4.5.0'
p36
sS'csf_threshold'
p37
(lp38
F0.96
asbsS'_fields'
p39
(lp40
g37
asS'_mandatory_inputs'
p41
I01
sbsS'_result'
p42
NsS'name'
p43
g37
sS'plugin_args'
p44
(dp45
sS'_hierarchy'
p46
S'seg_preproc_0'
p47
sS'itersource'
p48
NsS'run_without_submitting'
p49
I00
sS'synchronize'
p50
I00
sS'parameterization'
p51
NsS'iterables'
p52
(g37
(lp53
F0.96
atp54
sS'_got_inputs'
p55
I00
sS'_id'
p56
g37
sS'config'
p57
NsS'needed_outputs'
p58
(lp59
sS'overwrite'
p60
NsS'base_dir'
p61
Nsb(dp62
sg5
(g18
g7
Ntp63
Rp64
(dp65
g22
(dp66
sg24
g5
(g25
g7
Ntp67
Rp68
(dp69
g29
g30
(g31
tp70
Rp71
(dp72
g35
g36
sS'gm_threshold'
p73
(lp74
F0.7
asbsg39
(lp75
g73
asg41
I01
sbsg42
Nsg43
g73
sg44
(dp76
sg46
g47
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
(g73
(lp77
F0.7
atp78
sg55
I00
sg56
g73
sg57
Nsg58
(lp79
sg60
Nsg61
Nsb(dp80
sg5
(g18
g7
Ntp81
Rp82
(dp83
g22
(dp84
sg24
g5
(cnipype.interfaces.fsl.preprocess
FAST
p85
g7
Ntp86
Rp87
(dp88
g29
g30
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p89
tp90
Rp91
(dp92
S'number_classes'
p93
ctraits.trait_base
_Undefined
p94
(tRp95
sS'out_basename'
p96
S'segment'
p97
sS'hyper'
p98
g95
sS'verbose'
p99
g95
sS'init_seg_smooth'
p100
g95
sS'init_transform'
p101
g95
sS'no_pve'
p102
g95
sS'output_biascorrected'
p103
g95
sS'mixel_smooth'
p104
g95
sS'segments'
p105
I01
sS'iters_afterbias'
p106
g95
sS'bias_lowpass'
p107
g95
sS'other_priors'
p108
g95
sg35
g36
sS'ignore_exception'
p109
I00
sS'img_type'
p110
I1
sS'args'
p111
g95
sS'probability_maps'
p112
I01
sS'manual_seg'
p113
g95
sS'terminal_output'
p114
S'stream'
p115
sS'output_biasfield'
p116
g95
sS'no_bias'
p117
g95
sS'use_priors'
p118
g95
sS'in_files'
p119
g95
sS'segment_iters'
p120
g95
sS'environ'
p121
g5
(ctraits.trait_handlers
TraitDictObject
p122
c__builtin__
dict
p123
(dp124
S'FSLOUTPUTTYPE'
p125
S'NIFTI_GZ'
p126
stp127
Rp128
(dp129
S'name_items'
p130
S'environ_items'
p131
sg43
g121
sbsS'output_type'
p132
g126
sS'bias_iters'
p133
g95
sbsS'_output_type'
p134
g126
sS'_environ'
p135
NsS'_terminal_output'
p136
g115
sbsg42
Nsg43
g97
sg44
(dp137
sg46
g47
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g97
sg57
Nsg58
(lp138
sg60
Nsg61
Nsb(dp139
sg5
(g6
g7
Ntp140
Rp141
(dp142
g11
g5
(g12
g7
Ntp143
Rp144
(dp145
g16
(dp146
g5
(g18
g7
Ntp147
Rp148
(dp149
g22
(dp150
sg24
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p151
g7
Ntp152
Rp153
(dp154
g29
g30
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p155
tp156
Rp157
(dp158
g109
I00
sS'nan2zeros'
p159
g95
sS'op_string'
p160
S'-mas %s '
p161
sS'out_file'
p162
g95
sg111
g95
sS'internal_datatype'
p163
g95
sg35
g36
sg114
g115
sg121
g5
(g122
g123
(dp164
g125
g126
stp165
Rp166
(dp167
g130
S'environ_items'
p168
sg43
g121
sbsS'in_file'
p169
g95
sg132
g126
sS'output_datatype'
p170
g95
sS'operand_files'
p171
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'overlap_CSF_map_with_prior'
p172
sg44
(dp173
sg46
S'CSF'
p174
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g172
sg57
Nsg58
(lp175
sg60
Nsg61
Nsb(dp176
sg5
(g18
g7
Ntp177
Rp178
(dp179
g22
(dp180
sg24
g5
(g151
g7
Ntp181
Rp182
(dp183
g29
g30
(g155
tp184
Rp185
(dp186
g109
I00
sg159
g95
sg160
g161
sg162
g95
sg111
g95
sg163
g95
sg35
g36
sg114
g115
sg121
g5
(g122
g123
(dp187
g125
g126
stp188
Rp189
(dp190
g130
S'environ_items'
p191
sg43
g121
sbsg169
g95
sg132
g126
sg170
g95
sg171
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'CSF_mask'
p192
sg44
(dp193
sg46
g174
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g192
sg57
Nsg58
(lp194
sg60
Nsg61
Nsb(dp195
sg5
(g18
g7
Ntp196
Rp197
(dp198
g22
(dp199
sg24
g5
(g25
g7
Ntp200
Rp201
(dp202
g29
g30
(g31
tp203
Rp204
(dp205
g35
g36
sS'segment_combo'
p206
g95
sS'segment_mask'
p207
g95
sS'tissueprior_mni2t1'
p208
g95
sS'segment_bin'
p209
g95
sbsg39
(lp210
g208
ag206
ag209
ag207
asg41
I01
sbsg42
Nsg43
S'outputspec'
p211
sg44
(dp212
sg46
g174
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp213
sg60
Nsg61
Nsb(dp214
sg5
(g18
g7
Ntp215
Rp216
(dp217
g22
(dp218
sg24
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p219
g7
Ntp220
Rp221
(dp222
g29
g30
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p223
tp224
Rp225
(dp226
S'rigid2D'
p227
g95
sg35
g36
sS'in_matrix_file'
p228
g95
sg99
g95
sS'reference'
p229
g95
sS'padding_size'
p230
g95
sS'sinc_window'
p231
g95
sS'interp'
p232
S'nearestneighbour'
p233
sS'wmnorms'
p234
g95
sS'coarse_search'
p235
g95
sS'no_resample'
p236
g95
sS'sinc_width'
p237
g95
sS'in_weight'
p238
g95
sS'fieldmap'
p239
g95
sS'echospacing'
p240
g95
sS'ref_weight'
p241
g95
sS'apply_isoxfm'
p242
g95
sS'fieldmapmask'
p243
g95
sg169
g95
sS'bbrtype'
p244
g95
sS'no_clamp'
p245
g95
sS'force_scaling'
p246
g95
sS'pedir'
p247
g95
sg109
I00
sS'display_init'
p248
g95
sS'schedule'
p249
g95
sg111
g95
sS'uses_qform'
p250
g95
sS'wmcoords'
p251
g95
sg114
g115
sS'fine_search'
p252
g95
sS'angle_rep'
p253
g95
sS'no_search'
p254
g95
sS'apply_xfm'
p255
I01
sS'wm_seg'
p256
g95
sg162
g95
sS'bbrslope'
p257
g95
sS'datatype'
p258
g95
sS'save_log'
p259
g95
sS'dof'
p260
g95
sS'out_matrix_file'
p261
g95
sS'no_resample_blur'
p262
g95
sS'min_sampling'
p263
g95
sS'cost_func'
p264
g95
sS'cost'
p265
g95
sg121
g5
(g122
g123
(dp266
g125
g126
stp267
Rp268
(dp269
g130
S'environ_items'
p270
sg43
g121
sbsS'searchr_x'
p271
g95
sS'out_log'
p272
g95
sg132
g126
sS'searchr_z'
p273
g95
sS'bins'
p274
g95
sS'searchr_y'
p275
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'CSF_prior_mni_to_t1'
p276
sg44
(dp277
sg46
g174
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g276
sg57
Nsg58
(lp278
sg60
Nsg61
Nsb(dp279
sg5
(g18
g7
Ntp280
Rp281
(dp282
g22
(dp283
sg24
g5
(g25
g7
Ntp284
Rp285
(dp286
g29
g30
(g31
tp287
Rp288
(dp289
S'standard2highres_rig'
p290
g95
sg35
g36
sS'standard2highres_init'
p291
g95
sS'tissue_prior'
p292
g95
sS'standard2highres_mat'
p293
g95
sS'brain'
p294
g95
sS'probability_map'
p295
g95
sS'threshold'
p296
g95
sbsg39
(lp297
g292
ag296
ag294
ag295
ag291
ag293
ag290
asg41
I01
sbsg42
Nsg43
S'inputspec'
p298
sg44
(dp299
sg46
g174
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp300
sg60
Nsg61
Nsb(dp301
sg5
(g18
g7
Ntp302
Rp303
(dp304
g22
(dp305
sg24
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p306
g7
Ntp307
Rp308
(dp309
g29
g30
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p310
tp311
Rp312
(dp313
g109
I00
sg35
g36
sg160
g95
sS'out_data_type'
p314
g95
sg162
g95
sg111
g95
sS'in_file2'
p315
g95
sg114
g115
sg121
g5
(g122
g123
(dp316
g125
g126
stp317
Rp318
(dp319
g130
S'environ_items'
p320
sg43
g121
sbsg169
g95
sg132
g126
sS'suffix'
p321
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'binarize_threshold_CSF'
p322
sg44
(dp323
sg46
g174
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g322
sg57
Nsg58
(lp324
sg60
Nsg61
Nsb(dp325
ssS'graph'
p326
(dp327
sS'succ'
p328
(dp329
g148
(dp330
g303
(dp331
S'connect'
p332
(lp333
(g162
g169
tp334
assg197
(dp335
g332
(lp336
(g162
g206
tp337
asssg178
(dp338
g197
(dp339
g332
(lp340
(g162
g207
tp341
asssg197
(dp342
sg216
(dp343
g197
(dp344
g332
(lp345
(g162
g208
tp346
assg148
(dp347
g332
(lp348
(g162
g171
tp349
assg178
(dp350
g332
(lp351
(g162
g171
tp352
asssg281
(dp353
g216
(dp354
g332
(lp355
(g292
g169
tp356
a(g294
g229
tp357
a(g293
g228
tp358
assg148
(dp359
g332
(lp360
(g295
g169
tp361
assg303
(dp362
g332
(lp363
((g296
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p364
(ttp365
g160
tp366
asssg303
(dp367
g197
(dp368
g332
(lp369
(g162
g209
tp370
assg178
(dp371
g332
(lp372
(g162
g169
tp373
assssS'edge'
p374
g329
sS'pred'
p375
(dp376
g148
(dp377
g281
g359
sg216
g347
ssg178
(dp378
g303
g371
sg216
g350
ssg197
(dp379
g216
g344
sg178
g339
sg148
g335
sg303
g368
ssg216
(dp380
g281
g354
ssg281
(dp381
sg303
(dp382
g281
g362
sg148
g331
sssS'adj'
p383
g329
sbsg43
g174
sg46
g47
sg56
g174
sg57
ccollections
OrderedDict
p384
((lp385
(lp386
S'logging'
p387
ag384
((lp388
(lp389
S'__name__'
p390
ag387
aa(lp391
S'workflow_level'
p392
aS'INFO'
p393
aa(lp394
S'filemanip_level'
p395
aS'INFO'
p396
aa(lp397
S'interface_level'
p398
aS'INFO'
p399
aa(lp400
S'log_to_file'
p401
aS'True'
p402
aa(lp403
S'log_directory'
p404
aS'/mnt/ssd1/data/outputs/CPAC/CPAC_test1/outputs/logs/6_1241099874'
p405
aa(lp406
S'log_size'
p407
aS'16384000'
p408
aa(lp409
S'log_rotate'
p410
aS'4'
p411
aatp412
Rp413
aa(lp414
S'execution'
p415
ag384
((lp416
(lp417
g390
ag415
aa(lp418
S'create_report'
p419
aS'true'
p420
aa(lp421
S'crashdump_dir'
p422
aS'/home/eric/Documents/m2g/packages/functional/CPAC_pipes'
p423
aa(lp424
S'display_variable'
p425
aS':1'
p426
aa(lp427
S'hash_method'
p428
aS'timestamp'
p429
aa(lp430
S'job_finished_timeout'
p431
aS'5'
p432
aa(lp433
S'keep_inputs'
p434
aS'false'
p435
aa(lp436
S'local_hash_check'
p437
aS'true'
p438
aa(lp439
S'matplotlib_backend'
p440
aS'Agg'
p441
aa(lp442
S'plugin'
p443
aS'Linear'
p444
aa(lp445
S'remove_node_directories'
p446
aS'false'
p447
aa(lp448
S'remove_unnecessary_outputs'
p449
aS'true'
p450
aa(lp451
S'single_thread_matlab'
p452
aS'true'
p453
aa(lp454
S'stop_on_first_crash'
p455
aS'false'
p456
aa(lp457
S'stop_on_first_rerun'
p458
aS'false'
p459
aa(lp460
S'use_relative_paths'
p461
aS'false'
p462
aa(lp463
S'stop_on_unknown_version'
p464
aS'false'
p465
aa(lp466
S'write_provenance'
p467
aS'false'
p468
aa(lp469
S'parameterize_dirs'
p470
aS'true'
p471
aatp472
Rp473
aa(lp474
S'check'
p475
ag384
((lp476
(lp477
g390
ag475
aa(lp478
S'interval'
p479
aS'1209600'
p480
aatp481
Rp482
aatp483
Rp484
sg61
Nsb(dp485
sg5
(g18
g7
Ntp486
Rp487
(dp488
g22
(dp489
sg24
g5
(g25
g7
Ntp490
Rp491
(dp492
g29
g30
(g31
tp493
Rp494
(dp495
g35
g36
sS'wm_threshold'
p496
(lp497
F0.96
asbsg39
(lp498
g496
asg41
I01
sbsg42
Nsg43
g496
sg44
(dp499
sg46
g47
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
(g496
(lp500
F0.96
atp501
sg55
I00
sg56
g496
sg57
Nsg58
(lp502
sg60
Nsg61
Nsb(dp503
sg5
(g6
g7
Ntp504
Rp505
(dp506
g11
g5
(g12
g7
Ntp507
Rp508
(dp509
g16
(dp510
g5
(g18
g7
Ntp511
Rp512
(dp513
g22
(dp514
sg24
g5
(g151
g7
Ntp515
Rp516
(dp517
g29
g30
(g155
tp518
Rp519
(dp520
g109
I00
sg159
g95
sg160
g161
sg162
g95
sg111
g95
sg163
g95
sg35
g36
sg114
g115
sg121
g5
(g122
g123
(dp521
g125
g126
stp522
Rp523
(dp524
g130
S'environ_items'
p525
sg43
g121
sbsg169
g95
sg132
g126
sg170
g95
sg171
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'WM_mask'
p526
sg44
(dp527
sg46
S'WM'
p528
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g526
sg57
Nsg58
(lp529
sg60
Nsg61
Nsb(dp530
sg5
(g18
g7
Ntp531
Rp532
(dp533
g22
(dp534
sg24
g5
(g151
g7
Ntp535
Rp536
(dp537
g29
g30
(g155
tp538
Rp539
(dp540
g109
I00
sg159
g95
sg160
g161
sg162
g95
sg111
g95
sg163
g95
sg35
g36
sg114
g115
sg121
g5
(g122
g123
(dp541
g125
g126
stp542
Rp543
(dp544
g130
S'environ_items'
p545
sg43
g121
sbsg169
g95
sg132
g126
sg170
g95
sg171
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'overlap_WM_map_with_prior'
p546
sg44
(dp547
sg46
g528
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g546
sg57
Nsg58
(lp548
sg60
Nsg61
Nsb(dp549
sg5
(g18
g7
Ntp550
Rp551
(dp552
g22
(dp553
sg24
g5
(g306
g7
Ntp554
Rp555
(dp556
g29
g30
(g310
tp557
Rp558
(dp559
g109
I00
sg35
g36
sg160
g95
sg314
g95
sg162
g95
sg111
g95
sg315
g95
sg114
g115
sg121
g5
(g122
g123
(dp560
g125
g126
stp561
Rp562
(dp563
g130
S'environ_items'
p564
sg43
g121
sbsg169
g95
sg132
g126
sg321
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'binarize_threshold_WM'
p565
sg44
(dp566
sg46
g528
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g565
sg57
Nsg58
(lp567
sg60
Nsg61
Nsb(dp568
sg5
(g18
g7
Ntp569
Rp570
(dp571
g22
(dp572
sg24
g5
(g219
g7
Ntp573
Rp574
(dp575
g29
g30
(g223
tp576
Rp577
(dp578
g227
g95
sg35
g36
sg228
g95
sg99
g95
sg229
g95
sg230
g95
sg231
g95
sg232
g233
sg234
g95
sg235
g95
sg236
g95
sg237
g95
sg238
g95
sg239
g95
sg240
g95
sg241
g95
sg242
g95
sg243
g95
sg169
g95
sg244
g95
sg245
g95
sg246
g95
sg247
g95
sg109
I00
sg248
g95
sg249
g95
sg111
g95
sg250
g95
sg251
g95
sg114
g115
sg252
g95
sg253
g95
sg254
g95
sg255
I01
sg256
g95
sg162
g95
sg257
g95
sg258
g95
sg259
g95
sg260
g95
sg261
g95
sg262
g95
sg263
g95
sg264
g95
sg265
g95
sg121
g5
(g122
g123
(dp579
g125
g126
stp580
Rp581
(dp582
g130
S'environ_items'
p583
sg43
g121
sbsg271
g95
sg272
g95
sg132
g126
sg273
g95
sg274
g95
sg275
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'WM_prior_mni_to_t1'
p584
sg44
(dp585
sg46
g528
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g584
sg57
Nsg58
(lp586
sg60
Nsg61
Nsb(dp587
sg5
(g18
g7
Ntp588
Rp589
(dp590
g22
(dp591
sg24
g5
(g25
g7
Ntp592
Rp593
(dp594
g29
g30
(g31
tp595
Rp596
(dp597
g35
g36
sg206
g95
sg207
g95
sg208
g95
sg209
g95
sbsg39
(lp598
g208
ag206
ag209
ag207
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp599
sg46
g528
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp600
sg60
Nsg61
Nsb(dp601
sg5
(g18
g7
Ntp602
Rp603
(dp604
g22
(dp605
sg24
g5
(g25
g7
Ntp606
Rp607
(dp608
g29
g30
(g31
tp609
Rp610
(dp611
g290
g95
sg35
g36
sg291
g95
sg292
g95
sg293
g95
sg294
g95
sg295
g95
sg296
g95
sbsg39
(lp612
g292
ag296
ag294
ag295
ag291
ag293
ag290
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp613
sg46
g528
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp614
sg60
Nsg61
Nsb(dp615
ssg326
(dp616
sg328
(dp617
g512
(dp618
g589
(dp619
g332
(lp620
(g162
g207
tp621
asssg532
(dp622
g589
(dp623
g332
(lp624
(g162
g206
tp625
assg551
(dp626
g332
(lp627
(g162
g169
tp628
asssg551
(dp629
g512
(dp630
g332
(lp631
(g162
g169
tp632
assg589
(dp633
g332
(lp634
(g162
g209
tp635
asssg570
(dp636
g589
(dp637
g332
(lp638
(g162
g208
tp639
assg532
(dp640
g332
(lp641
(g162
g171
tp642
assg512
(dp643
g332
(lp644
(g162
g171
tp645
asssg589
(dp646
sg603
(dp647
g570
(dp648
g332
(lp649
(g292
g169
tp650
a(g294
g229
tp651
a(g293
g228
tp652
assg551
(dp653
g332
(lp654
((g296
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p655
(ttp656
g160
tp657
assg532
(dp658
g332
(lp659
(g295
g169
tp660
assssg374
g617
sg375
(dp661
g512
(dp662
g570
g643
sg551
g630
ssg532
(dp663
g570
g640
sg603
g658
ssg551
(dp664
g532
g626
sg603
g653
ssg570
(dp665
g603
g648
ssg589
(dp666
g570
g637
sg512
g619
sg551
g633
sg532
g623
ssg603
(dp667
ssg383
g617
sbsg43
g528
sg46
g47
sg56
g528
sg57
g384
((lp668
(lp669
g387
ag384
((lp670
(lp671
g390
ag387
aa(lp672
g392
ag393
aa(lp673
g395
ag396
aa(lp674
g398
ag399
aa(lp675
g401
ag402
aa(lp676
g404
ag405
aa(lp677
g407
ag408
aa(lp678
g410
ag411
aatp679
Rp680
aa(lp681
g415
ag384
((lp682
(lp683
g390
ag415
aa(lp684
g419
ag420
aa(lp685
g422
ag423
aa(lp686
g425
ag426
aa(lp687
g428
ag429
aa(lp688
g431
ag432
aa(lp689
g434
ag435
aa(lp690
g437
ag438
aa(lp691
g440
ag441
aa(lp692
g443
ag444
aa(lp693
g446
ag447
aa(lp694
g449
ag450
aa(lp695
g452
ag453
aa(lp696
g455
ag456
aa(lp697
g458
ag459
aa(lp698
g461
ag462
aa(lp699
g464
ag465
aa(lp700
g467
ag468
aa(lp701
g470
ag471
aatp702
Rp703
aa(lp704
g475
ag384
((lp705
(lp706
g390
ag475
aa(lp707
g479
ag480
aatp708
Rp709
aatp710
Rp711
sg61
Nsb(dp712
sg5
(g6
g7
Ntp713
Rp714
(dp715
g11
g5
(g12
g7
Ntp716
Rp717
(dp718
g16
(dp719
g5
(g18
g7
Ntp720
Rp721
(dp722
g22
(dp723
sg24
g5
(g151
g7
Ntp724
Rp725
(dp726
g29
g30
(g155
tp727
Rp728
(dp729
g109
I00
sg159
g95
sg160
g161
sg162
g95
sg111
g95
sg163
g95
sg35
g36
sg114
g115
sg121
g5
(g122
g123
(dp730
g125
g126
stp731
Rp732
(dp733
g130
S'environ_items'
p734
sg43
g121
sbsg169
g95
sg132
g126
sg170
g95
sg171
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'GM_mask'
p735
sg44
(dp736
sg46
S'GM'
p737
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g735
sg57
Nsg58
(lp738
sg60
Nsg61
Nsb(dp739
sg5
(g18
g7
Ntp740
Rp741
(dp742
g22
(dp743
sg24
g5
(g219
g7
Ntp744
Rp745
(dp746
g29
g30
(g223
tp747
Rp748
(dp749
g227
g95
sg35
g36
sg228
g95
sg99
g95
sg229
g95
sg230
g95
sg231
g95
sg232
g233
sg234
g95
sg235
g95
sg236
g95
sg237
g95
sg238
g95
sg239
g95
sg240
g95
sg241
g95
sg242
g95
sg243
g95
sg169
g95
sg244
g95
sg245
g95
sg246
g95
sg247
g95
sg109
I00
sg248
g95
sg249
g95
sg111
g95
sg250
g95
sg251
g95
sg114
g115
sg252
g95
sg253
g95
sg254
g95
sg255
I01
sg256
g95
sg162
g95
sg257
g95
sg258
g95
sg259
g95
sg260
g95
sg261
g95
sg262
g95
sg263
g95
sg264
g95
sg265
g95
sg121
g5
(g122
g123
(dp750
g125
g126
stp751
Rp752
(dp753
g130
S'environ_items'
p754
sg43
g121
sbsg271
g95
sg272
g95
sg132
g126
sg273
g95
sg274
g95
sg275
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'GM_prior_mni_to_t1'
p755
sg44
(dp756
sg46
g737
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g755
sg57
Nsg58
(lp757
sg60
Nsg61
Nsb(dp758
sg5
(g18
g7
Ntp759
Rp760
(dp761
g22
(dp762
sg24
g5
(g25
g7
Ntp763
Rp764
(dp765
g29
g30
(g31
tp766
Rp767
(dp768
g290
g95
sg35
g36
sg291
g95
sg292
g95
sg293
g95
sg294
g95
sg295
g95
sg296
g95
sbsg39
(lp769
g292
ag296
ag294
ag295
ag291
ag293
ag290
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp770
sg46
g737
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp771
sg60
Nsg61
Nsb(dp772
sg5
(g18
g7
Ntp773
Rp774
(dp775
g22
(dp776
sg24
g5
(g306
g7
Ntp777
Rp778
(dp779
g29
g30
(g310
tp780
Rp781
(dp782
g109
I00
sg35
g36
sg160
g95
sg314
g95
sg162
g95
sg111
g95
sg315
g95
sg114
g115
sg121
g5
(g122
g123
(dp783
g125
g126
stp784
Rp785
(dp786
g130
S'environ_items'
p787
sg43
g121
sbsg169
g95
sg132
g126
sg321
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'binarize_threshold_GM'
p788
sg44
(dp789
sg46
g737
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g788
sg57
Nsg58
(lp790
sg60
Nsg61
Nsb(dp791
sg5
(g18
g7
Ntp792
Rp793
(dp794
g22
(dp795
sg24
g5
(g151
g7
Ntp796
Rp797
(dp798
g29
g30
(g155
tp799
Rp800
(dp801
g109
I00
sg159
g95
sg160
g161
sg162
g95
sg111
g95
sg163
g95
sg35
g36
sg114
g115
sg121
g5
(g122
g123
(dp802
g125
g126
stp803
Rp804
(dp805
g130
S'environ_items'
p806
sg43
g121
sbsg169
g95
sg132
g126
sg170
g95
sg171
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'overlap_GM_map_with_prior'
p807
sg44
(dp808
sg46
g737
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g807
sg57
Nsg58
(lp809
sg60
Nsg61
Nsb(dp810
sg5
(g18
g7
Ntp811
Rp812
(dp813
g22
(dp814
sg24
g5
(g25
g7
Ntp815
Rp816
(dp817
g29
g30
(g31
tp818
Rp819
(dp820
g35
g36
sg206
g95
sg207
g95
sg208
g95
sg209
g95
sbsg39
(lp821
g208
ag206
ag209
ag207
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp822
sg46
g737
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp823
sg60
Nsg61
Nsb(dp824
ssg326
(dp825
sg328
(dp826
g721
(dp827
g812
(dp828
g332
(lp829
(g162
g207
tp830
asssg741
(dp831
g793
(dp832
g332
(lp833
(g162
g171
tp834
assg812
(dp835
g332
(lp836
(g162
g208
tp837
assg721
(dp838
g332
(lp839
(g162
g171
tp840
asssg760
(dp841
g741
(dp842
g332
(lp843
(g292
g169
tp844
a(g294
g229
tp845
a(g293
g228
tp846
assg774
(dp847
g332
(lp848
((g296
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p849
(ttp850
g160
tp851
assg793
(dp852
g332
(lp853
(g295
g169
tp854
asssg774
(dp855
g721
(dp856
g332
(lp857
(g162
g169
tp858
assg812
(dp859
g332
(lp860
(g162
g209
tp861
asssg793
(dp862
g774
(dp863
g332
(lp864
(g162
g169
tp865
assg812
(dp866
g332
(lp867
(g162
g206
tp868
asssg812
(dp869
ssg374
g826
sg375
(dp870
g721
(dp871
g741
g838
sg774
g856
ssg741
(dp872
g760
g842
ssg760
(dp873
sg774
(dp874
g793
g863
sg760
g847
ssg793
(dp875
g760
g852
sg741
g832
ssg812
(dp876
g741
g835
sg721
g828
sg774
g859
sg793
g866
sssg383
g826
sbsg43
g737
sg46
g47
sg56
g737
sg57
g384
((lp877
(lp878
g387
ag384
((lp879
(lp880
g390
ag387
aa(lp881
g392
ag393
aa(lp882
g395
ag396
aa(lp883
g398
ag399
aa(lp884
g401
ag402
aa(lp885
g404
ag405
aa(lp886
g407
ag408
aa(lp887
g410
ag411
aatp888
Rp889
aa(lp890
g415
ag384
((lp891
(lp892
g390
ag415
aa(lp893
g419
ag420
aa(lp894
g422
ag423
aa(lp895
g425
ag426
aa(lp896
g428
ag429
aa(lp897
g431
ag432
aa(lp898
g434
ag435
aa(lp899
g437
ag438
aa(lp900
g440
ag441
aa(lp901
g443
ag444
aa(lp902
g446
ag447
aa(lp903
g449
ag450
aa(lp904
g452
ag453
aa(lp905
g455
ag456
aa(lp906
g458
ag459
aa(lp907
g461
ag462
aa(lp908
g464
ag465
aa(lp909
g467
ag468
aa(lp910
g470
ag471
aatp911
Rp912
aa(lp913
g475
ag384
((lp914
(lp915
g390
ag475
aa(lp916
g479
ag480
aatp917
Rp918
aatp919
Rp920
sg61
Nsb(dp921
sg5
(g18
g7
Ntp922
Rp923
(dp924
g22
(dp925
sg24
g5
(g25
g7
Ntp926
Rp927
(dp928
g29
g30
(g31
tp929
Rp930
(dp931
g290
g95
sg35
g36
sg291
g95
sg294
g95
sS'PRIOR_GRAY'
p932
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p933
sg293
g95
sS'PRIOR_CSF'
p934
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p935
sS'PRIOR_WHITE'
p936
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p937
sbsg39
(lp938
g294
ag291
ag293
ag290
ag934
ag932
ag936
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp939
sg46
g47
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp940
sg60
Nsg61
Nsb(dp941
sg5
(g18
g7
Ntp942
Rp943
(dp944
g22
(dp945
sg24
g5
(g25
g7
Ntp946
Rp947
(dp948
g29
g30
(g31
tp949
Rp950
(dp951
S'partial_volume_files'
p952
g95
sg35
g36
sS'gm_combo'
p953
g95
sS'mixeltype'
p954
g95
sS'csf_mni2t1'
p955
g95
sS'wm_bin'
p956
g95
sS'csf_bin'
p957
g95
sg112
g95
sS'wm_mni2t1'
p958
g95
sS'csf_combo'
p959
g95
sS'wm_combo'
p960
g95
sS'wm_mask'
p961
g95
sS'gm_mask'
p962
g95
sS'csf_mask'
p963
g95
sS'gm_bin'
p964
g95
sS'partial_volume_map'
p965
g95
sS'gm_mni2t1'
p966
g95
sbsg39
(lp967
g955
ag959
ag957
ag963
ag966
ag953
ag964
ag962
ag958
ag960
ag956
ag112
ag954
ag965
ag952
ag961
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp968
sg46
g47
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp969
sg60
Nsg61
Nsb(dp970
ssg326
(dp971
sg328
(dp972
g20
(dp973
g141
(dp974
g332
(lp975
(g37
S'inputspec.threshold'
p976
tp977
asssg64
(dp978
g714
(dp979
g332
(lp980
(g73
g976
tp981
asssg82
(dp982
g505
(dp983
g332
(lp984
((g112
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p985
(ttp986
S'inputspec.probability_map'
p987
tp988
assg714
(dp989
g332
(lp990
((g112
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p991
(ttp992
g987
tp993
assg943
(dp994
g332
(lp995
(g112
g112
tp996
a(g954
g954
tp997
a(g952
g952
tp998
a(g965
g965
tp999
assg141
(dp1000
g332
(lp1001
((g112
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1002
(ttp1003
g987
tp1004
asssg141
(dp1005
g943
(dp1006
g332
(lp1007
(S'outputspec.tissueprior_mni2t1'
p1008
g955
tp1009
a(S'outputspec.segment_combo'
p1010
g959
tp1011
a(S'outputspec.segment_bin'
p1012
g957
tp1013
a(S'outputspec.segment_mask'
p1014
g963
tp1015
asssg487
(dp1016
g505
(dp1017
g332
(lp1018
(g496
g976
tp1019
asssg505
(dp1020
g943
(dp1021
g332
(lp1022
(g1008
g958
tp1023
a(g1010
g960
tp1024
a(g1012
g956
tp1025
a(g1014
g961
tp1026
asssg714
(dp1027
g943
(dp1028
g332
(lp1029
(g1008
g966
tp1030
a(g1010
g953
tp1031
a(g1012
g964
tp1032
a(g1014
g962
tp1033
asssg923
(dp1034
g82
(dp1035
g332
(lp1036
(g294
g119
tp1037
assg714
(dp1038
g332
(lp1039
(g294
S'inputspec.brain'
p1040
tp1041
a(g932
S'inputspec.tissue_prior'
p1042
tp1043
a(g293
S'inputspec.standard2highres_mat'
p1044
tp1045
assg141
(dp1046
g332
(lp1047
(g294
g1040
tp1048
a(g934
g1042
tp1049
a(g293
g1044
tp1050
assg505
(dp1051
g332
(lp1052
(g294
g1040
tp1053
a(g936
g1042
tp1054
a(g293
g1044
tp1055
asssg943
(dp1056
ssg374
g972
sg375
(dp1057
g20
(dp1058
sg64
(dp1059
sg82
(dp1060
g923
g1035
ssg141
(dp1061
g82
g1000
sg923
g1046
sg20
g974
ssg487
(dp1062
sg505
(dp1063
g82
g983
sg923
g1051
sg487
g1017
ssg714
(dp1064
g82
g989
sg923
g1038
sg64
g979
ssg923
(dp1065
sg943
(dp1066
g82
g994
sg714
g1028
sg141
g1006
sg505
g1021
sssg383
g972
sbsg43
g47
sg46
S'resting_preproc_6_1241099874'
p1067
sg56
g47
sg57
g384
((lp1068
(lp1069
g387
ag384
((lp1070
(lp1071
g390
ag387
aa(lp1072
g392
ag393
aa(lp1073
g395
ag396
aa(lp1074
g398
ag399
aa(lp1075
g401
ag402
aa(lp1076
g404
ag405
aa(lp1077
g407
ag408
aa(lp1078
g410
ag411
aatp1079
Rp1080
aa(lp1081
g415
ag384
((lp1082
(lp1083
g390
ag415
aa(lp1084
g419
ag420
aa(lp1085
g422
ag423
aa(lp1086
g425
ag426
aa(lp1087
g428
ag429
aa(lp1088
g431
ag432
aa(lp1089
g434
ag435
aa(lp1090
g437
ag438
aa(lp1091
g440
ag441
aa(lp1092
g443
ag444
aa(lp1093
g446
ag447
aa(lp1094
g449
ag450
aa(lp1095
g452
ag453
aa(lp1096
g455
ag456
aa(lp1097
g458
ag459
aa(lp1098
g461
ag462
aa(lp1099
g464
ag465
aa(lp1100
g467
ag468
aa(lp1101
g470
ag471
aatp1102
Rp1103
aa(lp1104
g475
ag384
((lp1105
(lp1106
g390
ag475
aa(lp1107
g479
ag480
aatp1108
Rp1109
aatp1110
Rp1111
sg61
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g18
g7
Ntp1122
Rp1123
(dp1124
g22
(dp1125
sg24
g5
(g25
g7
Ntp1126
Rp1127
(dp1128
g29
g30
(g31
tp1129
Rp1130
(dp1131
g35
g36
sS'output_brain'
p1132
g95
sS'nonlinear_xfm'
p1133
g95
sS'invlinear_xfm'
p1134
g95
sS'linear_xfm'
p1135
g95
sbsg39
(lp1136
g1132
ag1135
ag1134
ag1133
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp1137
sg46
S'anat_mni_fnirt_register_0'
p1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp1139
sg60
Nsg61
Nsb(dp1140
sg5
(g18
g7
Ntp1141
Rp1142
(dp1143
g22
(dp1144
sg24
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1145
g7
Ntp1146
Rp1147
(dp1148
g29
g30
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1149
tp1150
Rp1151
(dp1152
g109
I00
sS'supersample'
p1153
g95
sg169
g95
sS'superlevel'
p1154
g95
sg162
g95
sg258
g95
sg111
g95
sg232
g95
sS'field_file'
p1155
g95
sS'ref_file'
p1156
g95
sg114
g115
sg121
g5
(g122
g123
(dp1157
g125
g126
stp1158
Rp1159
(dp1160
g130
S'environ_items'
p1161
sg43
g121
sbsS'premat'
p1162
g95
sS'mask_file'
p1163
g95
sg132
g126
sS'relwarp'
p1164
g95
sS'abswarp'
p1165
g95
sg35
g36
sS'postmat'
p1166
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'brain_warp'
p1167
sg44
(dp1168
sg46
g1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1167
sg57
Nsg58
(lp1169
sg60
Nsg61
Nsb(dp1170
sg5
(g18
g7
Ntp1171
Rp1172
(dp1173
g22
(dp1174
sg24
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1175
g7
Ntp1176
Rp1177
(dp1178
g29
g30
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1179
tp1180
Rp1181
(dp1182
g109
I00
sg35
g36
sg162
g95
sg111
g95
sg315
g95
sS'fix_scale_skew'
p1183
g95
sS'invert_xfm'
p1184
I01
sg114
g115
sS'concat_xfm'
p1185
g95
sg169
g95
sg132
g126
sg121
g5
(g122
g123
(dp1186
g125
g126
stp1187
Rp1188
(dp1189
g130
S'environ_items'
p1190
sg43
g121
sbsbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'inv_linear_reg0_xfm'
p1191
sg44
(dp1192
sg46
g1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1191
sg57
Nsg58
(lp1193
sg60
Nsg61
Nsb(dp1194
sg5
(g18
g7
Ntp1195
Rp1196
(dp1197
g22
(dp1198
sg24
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1199
g7
Ntp1200
Rp1201
(dp1202
g29
g30
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1203
tp1204
Rp1205
(dp1206
g35
g36
sS'derive_from_ref'
p1207
g95
sS'in_intensitymap_file'
p1208
g95
sS'modulatedref_file'
p1209
g95
sS'refmask_val'
p1210
g95
sS'hessian_precision'
p1211
g95
sS'in_fwhm'
p1212
g95
sS'skip_implicit_in_masking'
p1213
g95
sS'inmask_file'
p1214
g95
sS'refmask_file'
p1215
g95
sS'inwarp_file'
p1216
g95
sS'skip_lambda_ssq'
p1217
g95
sS'intensity_mapping_model'
p1218
g95
sS'affine_file'
p1219
g95
sS'apply_inmask'
p1220
g95
sS'spline_order'
p1221
g95
sS'apply_refmask'
p1222
g95
sS'subsampling_scheme'
p1223
g95
sg169
g95
sS'warped_file'
p1224
g95
sS'skip_refmask'
p1225
g95
sg109
I00
sS'ref_fwhm'
p1226
g95
sS'inmask_val'
p1227
g95
sS'config_file'
p1228
g95
sg1155
g95
sg111
g95
sS'apply_intensity_mapping'
p1229
g95
sS'regularization_lambda'
p1230
g95
sg114
g115
sS'regularization_model'
p1231
g95
sS'jacobian_range'
p1232
g95
sS'out_intensitymap_file'
p1233
g95
sS'skip_implicit_ref_masking'
p1234
g95
sg1156
g95
sS'skip_inmask'
p1235
g95
sS'fieldcoeff_file'
p1236
I01
sS'warp_resolution'
p1237
g95
sS'jacobian_file'
p1238
I01
sg121
g5
(g122
g123
(dp1239
g125
g126
stp1240
Rp1241
(dp1242
g130
S'environ_items'
p1243
sg43
g121
sbsS'bias_regularization_lambda'
p1244
g95
sg132
g126
sS'skip_intensity_mapping'
p1245
g95
sS'log_file'
p1246
g95
sS'biasfield_resolution'
p1247
g95
sS'intensity_mapping_order'
p1248
g95
sS'max_nonlin_iter'
p1249
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'nonlinear_reg_1'
p1250
sg44
(dp1251
sg46
g1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1250
sg57
Nsg58
(lp1252
sg60
Nsg61
Nsb(dp1253
sg5
(g18
g7
Ntp1254
Rp1255
(dp1256
g22
(dp1257
sg24
g5
(g219
g7
Ntp1258
Rp1259
(dp1260
g29
g30
(g223
tp1261
Rp1262
(dp1263
g227
g95
sg35
g36
sg228
g95
sg99
g95
sg229
g95
sg230
g95
sg231
g95
sg232
g95
sg234
g95
sg235
g95
sg236
g95
sg237
g95
sg238
g95
sg239
g95
sg240
g95
sg241
g95
sg242
g95
sg243
g95
sg169
g95
sg244
g95
sg245
g95
sg246
g95
sg247
g95
sg109
I00
sg248
g95
sg249
g95
sg111
g95
sg250
g95
sg251
g95
sg114
g115
sg252
g95
sg253
g95
sg254
g95
sg255
g95
sg256
g95
sg162
g95
sg257
g95
sg258
g95
sg259
g95
sg260
g95
sg261
g95
sg262
g95
sg263
g95
sg264
g95
sg265
S'corratio'
p1264
sg121
g5
(g122
g123
(dp1265
g125
g126
stp1266
Rp1267
(dp1268
g130
S'environ_items'
p1269
sg43
g121
sbsg271
g95
sg272
g95
sg132
g126
sg273
g95
sg274
g95
sg275
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'linear_reg_0'
p1270
sg44
(dp1271
sg46
g1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1270
sg57
Nsg58
(lp1272
sg60
Nsg61
Nsb(dp1273
sg5
(g18
g7
Ntp1274
Rp1275
(dp1276
g22
(dp1277
sg24
g5
(g25
g7
Ntp1278
Rp1279
(dp1280
g29
g30
(g31
tp1281
Rp1282
(dp1283
S'fnirt_config'
p1284
S'T1_2_MNI152_2mm'
p1285
sg35
g36
sS'input_brain'
p1286
g95
sS'reference_skull'
p1287
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1288
sS'reference_brain'
p1289
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1290
sS'input_skull'
p1291
g95
sbsg39
(lp1292
g1286
ag1291
ag1289
ag1287
ag1284
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp1293
sg46
g1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp1294
sg60
Nsg61
Nsb(dp1295
ssg326
(dp1296
sg328
(dp1297
g1123
(dp1298
sg1142
(dp1299
g1123
(dp1300
g332
(lp1301
(g162
g1132
tp1302
asssg1172
(dp1303
g1123
(dp1304
g332
(lp1305
(g162
g1134
tp1306
asssg1196
(dp1307
g1142
(dp1308
g332
(lp1309
(g1236
g1155
tp1310
assg1123
(dp1311
g332
(lp1312
(g1236
g1133
tp1313
asssg1255
(dp1314
g1123
(dp1315
g332
(lp1316
(g261
g1135
tp1317
assg1196
(dp1318
g332
(lp1319
(g261
g1219
tp1320
assg1172
(dp1321
g332
(lp1322
(g261
g169
tp1323
asssg1275
(dp1324
g1142
(dp1325
g332
(lp1326
(g1286
g169
tp1327
a(g1289
g1156
tp1328
assg1255
(dp1329
g332
(lp1330
(g1286
g169
tp1331
a(g1289
g229
tp1332
assg1196
(dp1333
g332
(lp1334
(g1291
g169
tp1335
a(g1287
g1156
tp1336
a(g1284
g1228
tp1337
assssg374
g1297
sg375
(dp1338
g1123
(dp1339
g1142
g1300
sg1255
g1315
sg1196
g1311
sg1172
g1304
ssg1142
(dp1340
g1275
g1325
sg1196
g1308
ssg1172
(dp1341
g1255
g1321
ssg1196
(dp1342
g1275
g1333
sg1255
g1318
ssg1255
(dp1343
g1275
g1329
ssg1275
(dp1344
ssg383
g1297
sbsg43
g1138
sg46
g1067
sg56
g1138
sg57
g384
((lp1345
(lp1346
g387
ag384
((lp1347
(lp1348
g390
ag387
aa(lp1349
g392
ag393
aa(lp1350
g395
ag396
aa(lp1351
g398
ag399
aa(lp1352
g401
ag402
aa(lp1353
g404
ag405
aa(lp1354
g407
ag408
aa(lp1355
g410
ag411
aatp1356
Rp1357
aa(lp1358
g415
ag384
((lp1359
(lp1360
g390
ag415
aa(lp1361
g419
ag420
aa(lp1362
g422
ag423
aa(lp1363
g425
ag426
aa(lp1364
g428
ag429
aa(lp1365
g431
ag432
aa(lp1366
g434
ag435
aa(lp1367
g437
ag438
aa(lp1368
g440
ag441
aa(lp1369
g443
ag444
aa(lp1370
g446
ag447
aa(lp1371
g449
ag450
aa(lp1372
g452
ag453
aa(lp1373
g455
ag456
aa(lp1374
g458
ag459
aa(lp1375
g461
ag462
aa(lp1376
g464
ag465
aa(lp1377
g467
ag468
aa(lp1378
g470
ag471
aatp1379
Rp1380
aa(lp1381
g475
ag384
((lp1382
(lp1383
g390
ag475
aa(lp1384
g479
ag480
aatp1385
Rp1386
aatp1387
Rp1388
sg61
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g18
g7
Ntp1399
Rp1400
(dp1401
g22
(dp1402
sg24
g5
(g25
g7
Ntp1403
Rp1404
(dp1405
g29
g30
(g31
tp1406
Rp1407
(dp1408
g35
g36
sS'underlay'
p1409
g95
sS'overlay'
p1410
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1411
sbsg39
(lp1412
g1409
ag1410
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp1413
sg46
S'montage_mfi_0'
p1414
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp1415
sg60
Nsg61
Nsb(dp1416
sg5
(g18
g7
Ntp1417
Rp1418
(dp1419
g22
(dp1420
sg24
g5
(cnipype.interfaces.utility
Function
p1421
g7
Ntp1422
Rp1423
(dp1424
S'_input_names'
p1425
(lp1426
g1410
ag1409
aS'png_name'
p1427
aS'cbar_name'
p1428
asg29
g30
(cnipype.interfaces.utility
FunctionInputSpec
p1429
tp1430
Rp1431
(dp1432
g109
I00
sg1427
S'MNI_edge_on_mean_func_mni_s.png'
p1433
sg1410
g95
sg1428
S'red'
p1434
sS'function_str'
p1435
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1436
sg1409
g95
sg35
g36
sbsS'_out'
p1437
(dp1438
g1427
NssS'_output_names'
p1439
(lp1440
g1427
asS'imports'
p1441
Nsbsg42
Nsg43
S'montage_s'
p1442
sg44
(dp1443
sg46
g1414
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1442
sg57
Nsg58
(lp1444
sg60
Nsg61
Nsb(dp1445
sg5
(g18
g7
Ntp1446
Rp1447
(dp1448
g22
(dp1449
sg24
g5
(g25
g7
Ntp1450
Rp1451
(dp1452
g29
g30
(g31
tp1453
Rp1454
(dp1455
g35
g36
sS'resampled_underlay'
p1456
g95
sS'axial_png'
p1457
g95
sS'sagittal_png'
p1458
g95
sS'resampled_overlay'
p1459
g95
sbsg39
(lp1460
g1457
ag1458
ag1456
ag1459
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp1461
sg46
g1414
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp1462
sg60
Nsg61
Nsb(dp1463
sg5
(g18
g7
Ntp1464
Rp1465
(dp1466
g22
(dp1467
sg24
g5
(g1421
g7
Ntp1468
Rp1469
(dp1470
g1425
(lp1471
S'file_'
p1472
asg29
g30
(g1429
tp1473
Rp1474
(dp1475
g109
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1476
sg1472
g95
sg35
g36
sbsg1437
(dp1477
S'new_fname'
p1478
Nssg1439
(lp1479
g1478
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp1480
sg51
Nsg48
Nsg60
Nsg43
S'resample_o'
p1481
sg46
g1414
sg50
I00
sg52
Nsg55
I00
sg56
g1481
sg57
Nsg58
(lp1482
sg61
Nsb(dp1483
sg5
(g18
g7
Ntp1484
Rp1485
(dp1486
g22
(dp1487
sg24
g5
(g1421
g7
Ntp1488
Rp1489
(dp1490
g1425
(lp1491
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp1492
Rp1493
(dp1494
g109
I00
sg1427
S'MNI_edge_on_mean_func_mni_a.png'
p1495
sg1410
g95
sg1428
g1434
sg1435
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1496
sg1409
g95
sg35
g36
sbsg1437
(dp1497
g1427
Nssg1439
(lp1498
g1427
asg1441
Nsbsg42
Nsg43
S'montage_a'
p1499
sg44
(dp1500
sg46
g1414
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1499
sg57
Nsg58
(lp1501
sg60
Nsg61
Nsb(dp1502
sg5
(g18
g7
Ntp1503
Rp1504
(dp1505
g22
(dp1506
sg24
g5
(g1421
g7
Ntp1507
Rp1508
(dp1509
g1425
(lp1510
g1472
asg29
g30
(g1429
tp1511
Rp1512
(dp1513
g109
I00
sg1435
g1476
sg1472
g95
sg35
g36
sbsg1437
(dp1514
g1478
Nssg1439
(lp1515
g1478
asg1441
Nsbsg42
Nsg43
S'resample_u'
p1516
sg44
(dp1517
sg46
g1414
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1516
sg57
Nsg58
(lp1518
sg60
Nsg61
Nsb(dp1519
ssg326
(dp1520
sg328
(dp1521
g1400
(dp1522
g1504
(dp1523
g332
(lp1524
(g1409
g1472
tp1525
assg1465
(dp1526
g332
(lp1527
(g1410
g1472
tp1528
asssg1418
(dp1529
g1447
(dp1530
g332
(lp1531
(g1427
g1458
tp1532
asssg1447
(dp1533
sg1465
(dp1534
g1447
(dp1535
g332
(lp1536
(g1478
g1459
tp1537
assg1485
(dp1538
g332
(lp1539
(g1478
g1410
tp1540
assg1418
(dp1541
g332
(lp1542
(g1478
g1410
tp1543
asssg1485
(dp1544
g1447
(dp1545
g332
(lp1546
(g1427
g1457
tp1547
asssg1504
(dp1548
g1447
(dp1549
g332
(lp1550
(g1478
g1456
tp1551
assg1485
(dp1552
g332
(lp1553
(g1478
g1409
tp1554
assg1418
(dp1555
g332
(lp1556
(g1478
g1409
tp1557
assssg374
g1521
sg375
(dp1558
g1400
(dp1559
sg1418
(dp1560
g1504
g1555
sg1465
g1541
ssg1447
(dp1561
g1418
g1530
sg1504
g1549
sg1485
g1545
sg1465
g1535
ssg1465
(dp1562
g1400
g1526
ssg1485
(dp1563
g1504
g1552
sg1465
g1538
ssg1504
(dp1564
g1400
g1523
sssg383
g1521
sbsg43
g1414
sg46
g1067
sg56
g1414
sg57
g384
((lp1565
(lp1566
g387
ag384
((lp1567
(lp1568
g390
ag387
aa(lp1569
g392
ag393
aa(lp1570
g395
ag396
aa(lp1571
g398
ag399
aa(lp1572
g401
ag402
aa(lp1573
g404
ag405
aa(lp1574
g407
ag408
aa(lp1575
g410
ag411
aatp1576
Rp1577
aa(lp1578
g415
ag384
((lp1579
(lp1580
g390
ag415
aa(lp1581
g419
ag420
aa(lp1582
g422
ag423
aa(lp1583
g425
ag426
aa(lp1584
g428
ag429
aa(lp1585
g431
ag432
aa(lp1586
g434
ag435
aa(lp1587
g437
ag438
aa(lp1588
g440
ag441
aa(lp1589
g443
ag444
aa(lp1590
g446
ag447
aa(lp1591
g449
ag450
aa(lp1592
g452
ag453
aa(lp1593
g455
ag456
aa(lp1594
g458
ag459
aa(lp1595
g461
ag462
aa(lp1596
g464
ag465
aa(lp1597
g467
ag468
aa(lp1598
g470
ag471
aatp1599
Rp1600
aa(lp1601
g475
ag384
((lp1602
(lp1603
g390
ag475
aa(lp1604
g479
ag480
aatp1605
Rp1606
aatp1607
Rp1608
sg61
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g18
g7
Ntp1619
Rp1620
(dp1621
g22
(dp1622
sg24
g5
(g1421
g7
Ntp1623
Rp1624
(dp1625
g1425
(lp1626
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp1627
Rp1628
(dp1629
g109
I00
sg1427
S'snr_a.png'
p1630
sg1410
g95
sg1428
S'red_to_blue'
p1631
sg1435
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1632
sg1409
g95
sg35
g36
sbsg1437
(dp1633
g1427
Nssg1439
(lp1634
g1427
asg1441
Nsbsg42
Nsg43
g1499
sg44
(dp1635
sg46
S'montage_snr_0'
p1636
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1499
sg57
Nsg58
(lp1637
sg60
Nsg61
Nsb(dp1638
sg5
(g18
g7
Ntp1639
Rp1640
(dp1641
g22
(dp1642
sg24
g5
(g1421
g7
Ntp1643
Rp1644
(dp1645
g1425
(lp1646
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp1647
Rp1648
(dp1649
g109
I00
sg1427
S'snr_s.png'
p1650
sg1410
g95
sg1428
g1631
sg1435
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1651
sg1409
g95
sg35
g36
sbsg1437
(dp1652
g1427
Nssg1439
(lp1653
g1427
asg1441
Nsbsg42
Nsg43
g1442
sg44
(dp1654
sg46
g1636
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1442
sg57
Nsg58
(lp1655
sg60
Nsg61
Nsb(dp1656
sg5
(g18
g7
Ntp1657
Rp1658
(dp1659
g22
(dp1660
sg24
g5
(g1421
g7
Ntp1661
Rp1662
(dp1663
g1425
(lp1664
g1472
asg29
g30
(g1429
tp1665
Rp1666
(dp1667
g109
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1668
sg1472
g95
sg35
g36
sbsg1437
(dp1669
g1478
Nssg1439
(lp1670
g1478
asg1441
Nsbsg42
Nsg43
g1516
sg44
(dp1671
sg46
g1636
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1516
sg57
Nsg58
(lp1672
sg60
Nsg61
Nsb(dp1673
sg5
(g18
g7
Ntp1674
Rp1675
(dp1676
g22
(dp1677
sg24
g5
(g25
g7
Ntp1678
Rp1679
(dp1680
g29
g30
(g31
tp1681
Rp1682
(dp1683
g35
g36
sg1409
g95
sg1410
g95
sbsg39
(lp1684
g1409
ag1410
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp1685
sg46
g1636
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp1686
sg60
Nsg61
Nsb(dp1687
sg5
(g18
g7
Ntp1688
Rp1689
(dp1690
g22
(dp1691
sg24
g5
(g1421
g7
Ntp1692
Rp1693
(dp1694
g1425
(lp1695
g1472
asg29
g30
(g1429
tp1696
Rp1697
(dp1698
g109
I00
sg1435
g1668
sg1472
g95
sg35
g36
sbsg1437
(dp1699
g1478
Nssg1439
(lp1700
g1478
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp1701
sg51
Nsg48
Nsg60
Nsg43
g1481
sg46
g1636
sg50
I00
sg52
Nsg55
I00
sg56
g1481
sg57
Nsg58
(lp1702
sg61
Nsb(dp1703
sg5
(g18
g7
Ntp1704
Rp1705
(dp1706
g22
(dp1707
sg24
g5
(g25
g7
Ntp1708
Rp1709
(dp1710
g29
g30
(g31
tp1711
Rp1712
(dp1713
g35
g36
sg1456
g95
sg1457
g95
sg1458
g95
sg1459
g95
sbsg39
(lp1714
g1457
ag1458
ag1456
ag1459
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp1715
sg46
g1636
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp1716
sg60
Nsg61
Nsb(dp1717
ssg326
(dp1718
sg328
(dp1719
g1620
(dp1720
g1705
(dp1721
g332
(lp1722
(g1427
g1457
tp1723
asssg1640
(dp1724
g1705
(dp1725
g332
(lp1726
(g1427
g1458
tp1727
asssg1658
(dp1728
g1620
(dp1729
g332
(lp1730
(g1478
g1409
tp1731
assg1705
(dp1732
g332
(lp1733
(g1478
g1456
tp1734
assg1640
(dp1735
g332
(lp1736
(g1478
g1409
tp1737
asssg1675
(dp1738
g1658
(dp1739
g332
(lp1740
(g1409
g1472
tp1741
assg1689
(dp1742
g332
(lp1743
(g1410
g1472
tp1744
asssg1689
(dp1745
g1620
(dp1746
g332
(lp1747
(g1478
g1410
tp1748
assg1705
(dp1749
g332
(lp1750
(g1478
g1459
tp1751
assg1640
(dp1752
g332
(lp1753
(g1478
g1410
tp1754
asssg1705
(dp1755
ssg374
g1719
sg375
(dp1756
g1620
(dp1757
g1658
g1729
sg1689
g1746
ssg1640
(dp1758
g1658
g1735
sg1689
g1752
ssg1658
(dp1759
g1675
g1739
ssg1675
(dp1760
sg1689
(dp1761
g1675
g1742
ssg1705
(dp1762
g1658
g1732
sg1689
g1749
sg1640
g1725
sg1620
g1721
sssg383
g1719
sbsg43
g1636
sg46
g1067
sg56
g1636
sg57
g384
((lp1763
(lp1764
g387
ag384
((lp1765
(lp1766
g390
ag387
aa(lp1767
g392
ag393
aa(lp1768
g395
ag396
aa(lp1769
g398
ag399
aa(lp1770
g401
ag402
aa(lp1771
g404
ag405
aa(lp1772
g407
ag408
aa(lp1773
g410
ag411
aatp1774
Rp1775
aa(lp1776
g415
ag384
((lp1777
(lp1778
g390
ag415
aa(lp1779
g419
ag420
aa(lp1780
g422
ag423
aa(lp1781
g425
ag426
aa(lp1782
g428
ag429
aa(lp1783
g431
ag432
aa(lp1784
g434
ag435
aa(lp1785
g437
ag438
aa(lp1786
g440
ag441
aa(lp1787
g443
ag444
aa(lp1788
g446
ag447
aa(lp1789
g449
ag450
aa(lp1790
g452
ag453
aa(lp1791
g455
ag456
aa(lp1792
g458
ag459
aa(lp1793
g461
ag462
aa(lp1794
g464
ag465
aa(lp1795
g467
ag468
aa(lp1796
g470
ag471
aatp1797
Rp1798
aa(lp1799
g475
ag384
((lp1800
(lp1801
g390
ag475
aa(lp1802
g479
ag480
aatp1803
Rp1804
aatp1805
Rp1806
sg61
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g18
g7
Ntp1810
Rp1811
(dp1812
g22
(dp1813
sg24
g5
(g1145
g7
Ntp1814
Rp1815
(dp1816
g29
g30
(g1149
tp1817
Rp1818
(dp1819
g109
I00
sg1153
g95
sg169
g95
sg1154
g95
sg162
g95
sg258
g95
sg111
g95
sg232
g95
sg1155
g95
sg1156
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg114
g115
sg121
g5
(g122
g123
(dp1821
g125
g126
stp1822
Rp1823
(dp1824
g130
S'environ_items'
p1825
sg43
g121
sbsg1162
g95
sg1163
g95
sg132
g126
sg1164
g95
sg1165
g95
sg35
g36
sg1166
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'mean_func_fsl_warp_0'
p1826
sg44
(dp1827
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1826
sg57
Nsg58
(lp1828
sg60
Nsg61
Nsbg162
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g18
g7
Ntp1831
Rp1832
(dp1833
g22
(dp1834
sg24
g5
(g1421
g7
Ntp1835
Rp1836
(dp1837
g1425
(lp1838
S'motion_parameters'
p1839
asg29
g30
(g1429
tp1840
Rp1841
(dp1842
g109
I00
sg1435
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g95
sg35
g36
sbsg1437
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1439
(lp1847
g1845
ag1846
asg1441
Nsbsg42
Nsg43
S'motion_plt_0'
p1848
sg44
(dp1849
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1848
sg57
Nsg58
(lp1850
sg60
Nsg61
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g18
g7
Ntp1853
Rp1854
(dp1855
g22
(dp1856
sg24
g5
(g1421
g7
Ntp1857
Rp1858
(dp1859
g1425
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg29
g30
(g1429
tp1864
Rp1865
(dp1866
g109
I00
sg35
g36
sg1861
g95
sg1435
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g95
sbsg1437
(dp1869
S'hist_path'
p1870
Nssg1439
(lp1871
g1870
asg1441
Nsbsg42
Nsg43
S'fd_plot_0'
p1872
sg44
(dp1873
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1872
sg57
Nsg58
(lp1874
sg60
Nsg61
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g18
g7
Ntp1884
Rp1885
(dp1886
g22
(dp1887
sg24
g5
(g1421
g7
Ntp1888
Rp1889
(dp1890
g1425
(lp1891
g169
asg29
g30
(g1429
tp1892
Rp1893
(dp1894
g109
I00
sg35
g36
sg1435
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p1895
sg169
g95
sbsg1437
(dp1896
g162
Nssg1439
(lp1897
g162
asg1441
Nsbsg42
Nsg43
S'calculate_FDJ'
p1898
sg44
(dp1899
sg46
S'gen_motion_stats_0'
p1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1898
sg57
Nsg58
(lp1901
sg60
Nsg61
Nsb(dp1902
sg5
(g18
g7
Ntp1903
Rp1904
(dp1905
g22
(dp1906
sg24
g5
(g1421
g7
Ntp1907
Rp1908
(dp1909
g1425
(lp1910
g169
asg29
g30
(g1429
tp1911
Rp1912
(dp1913
g109
I00
sg35
g36
sg1435
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p1914
sg169
g95
sbsg1437
(dp1915
g162
Nssg1439
(lp1916
g162
asg1441
Nsbsg42
Nsg43
S'calculate_FD'
p1917
sg44
(dp1918
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1917
sg57
Nsg58
(lp1919
sg60
Nsg61
Nsb(dp1920
sg5
(g18
g7
Ntp1921
Rp1922
(dp1923
g22
(dp1924
sg24
g5
(g1421
g7
Ntp1925
Rp1926
(dp1927
g1425
(lp1928
g169
ag296
aS'frames_before'
p1929
aS'frames_after'
p1930
asg29
g30
(g1429
tp1931
Rp1932
(dp1933
g109
I00
sg1930
g95
sg1435
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1934
sg169
g95
sg296
g95
sg35
g36
sg1929
g95
sbsg1437
(dp1935
g162
Nssg1439
(lp1936
g162
asg1441
Nsbsg42
Nsg43
S'exclude_frames'
p1937
sg44
(dp1938
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1937
sg57
Nsg58
(lp1939
sg60
Nsg61
Nsb(dp1940
sg5
(g18
g7
Ntp1941
Rp1942
(dp1943
g22
(dp1944
sg24
g5
(g1421
g7
Ntp1945
Rp1946
(dp1947
g1425
(lp1948
S'subject_id'
p1949
aS'scan_id'
p1950
aS'FD_1D'
p1951
aS'FDJ_1D'
p1952
ag296
aS'DVARS'
p1953
asg29
g30
(g1429
tp1954
Rp1955
(dp1956
g109
I00
sg35
g36
sg1950
g95
sg1949
g95
sg1953
g95
sg1435
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1957
sg1952
g95
sg1951
g95
sg296
g95
sbsg1437
(dp1958
g162
Nssg1439
(lp1959
g162
asg1441
Nsbsg42
Nsg43
S'calc_power_parameters'
p1960
sg44
(dp1961
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1960
sg57
Nsg58
(lp1962
sg60
Nsg61
Nsb(dp1963
sg5
(g18
g7
Ntp1964
Rp1965
(dp1966
g22
(dp1967
sg24
g5
(g1421
g7
Ntp1968
Rp1969
(dp1970
g1425
(lp1971
S'rest'
p1972
aS'mask'
p1973
asg29
g30
(g1429
tp1974
Rp1975
(dp1976
g109
I00
sg1973
g95
sg35
g36
sg1435
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p1977
sg1972
g95
sbsg1437
(dp1978
g162
Nssg1439
(lp1979
g162
asg1441
Nsbsg42
Nsg43
S'cal_DVARS'
p1980
sg44
(dp1981
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1980
sg57
Nsg58
(lp1982
sg60
Nsg61
Nsb(dp1983
sg5
(g18
g7
Ntp1984
Rp1985
(dp1986
g22
(dp1987
sg24
g5
(g25
g7
Ntp1988
Rp1989
(dp1990
g29
g30
(g31
tp1991
Rp1992
(dp1993
g35
g36
sS'frames_ex_1D'
p1994
g95
sg1952
g95
sg1951
g95
sS'frames_in_1D'
p1995
g95
sS'motion_params'
p1996
g95
sS'power_params'
p1997
g95
sbsg39
(lp1998
g1951
ag1952
ag1994
ag1995
ag1997
ag1996
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp1999
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp2000
sg60
Nsg61
Nsb(dp2001
sg5
(g18
g7
Ntp2002
Rp2003
(dp2004
g22
(dp2005
sg24
g5
(g1421
g7
Ntp2006
Rp2007
(dp2008
g1425
(lp2009
g169
ag296
aS'exclude_list'
p2010
asg29
g30
(g1429
tp2011
Rp2012
(dp2013
g109
I00
sg2010
g95
sg1435
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p2014
sg169
g95
sg296
g95
sg35
g36
sbsg1437
(dp2015
g162
Nssg1439
(lp2016
g162
asg1441
Nsbsg42
Nsg43
S'include_frames'
p2017
sg44
(dp2018
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2017
sg57
Nsg58
(lp2019
sg60
Nsg61
Nsb(dp2020
sg5
(g18
g7
Ntp2021
Rp2022
(dp2023
g22
(dp2024
sg24
g5
(g25
g7
Ntp2025
Rp2026
(dp2027
g29
g30
(g31
tp2028
Rp2029
(dp2030
g296
(lp2031
F0.2
asg35
g36
sS'remove_frames_before'
p2032
I1
sS'remove_frames_after'
p2033
I2
sbsg39
(lp2034
g296
ag2032
ag2033
asg41
I01
sbsg42
Nsg43
S'scrubbing_input'
p2035
sg44
(dp2036
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
(g296
(lp2037
F0.2
atp2038
sg55
I00
sg56
g2035
sg57
Nsg58
(lp2039
sg60
Nsg61
Nsb(dp2040
sg5
(g18
g7
Ntp2041
Rp2042
(dp2043
g22
(dp2044
sg24
g5
(g25
g7
Ntp2045
Rp2046
(dp2047
g29
g30
(g31
tp2048
Rp2049
(dp2050
S'max_displacement'
p2051
g95
sg35
g36
sg1950
g95
sg1949
g95
sg1973
g95
sS'movement_parameters'
p2052
g95
sS'oned_matrix_save'
p2053
g95
sS'motion_correct'
p2054
g95
sbsg39
(lp2055
g1949
ag1950
ag2052
ag2051
ag2054
ag1973
ag2053
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp2056
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp2057
sg60
Nsg61
Nsb(dp2058
sg5
(g18
g7
Ntp2059
Rp2060
(dp2061
g22
(dp2062
sg24
g5
(g1421
g7
Ntp2063
Rp2064
(dp2065
g1425
(lp2066
g1949
ag1950
ag2052
ag2051
asg29
g30
(g1429
tp2067
Rp2068
(dp2069
g109
I00
sg2051
g95
sg1950
g95
sg1949
g95
sg1435
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p2070
sg2052
g95
sg35
g36
sbsg1437
(dp2071
g162
Nssg1439
(lp2072
g162
asg1441
Nsbsg42
Nsg43
S'calc_motion_parameters'
p2073
sg44
(dp2074
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2073
sg57
Nsg58
(lp2075
sg60
Nsg61
Nsb(dp2076
ssg326
(dp2077
sg328
(dp2078
g1885
(dp2079
g1985
(dp2080
g332
(lp2081
(g162
g1952
tp2082
assg1942
(dp2083
g332
(lp2084
(g162
g1952
tp2085
asssg1904
(dp2086
g2003
(dp2087
g332
(lp2088
(g162
g169
tp2089
assg1942
(dp2090
g332
(lp2091
(g162
g1951
tp2092
assg1985
(dp2093
g332
(lp2094
(g162
g1951
tp2095
assg1922
(dp2096
g332
(lp2097
(g162
g169
tp2098
asssg1922
(dp2099
g2003
(dp2100
g332
(lp2101
(g162
g2010
tp2102
assg1985
(dp2103
g332
(lp2104
(g162
g1994
tp2105
asssg1942
(dp2106
g1985
(dp2107
g332
(lp2108
(g162
g1997
tp2109
asssg1965
(dp2110
g1942
(dp2111
g332
(lp2112
(g162
g1953
tp2113
asssg1985
(dp2114
sg2003
(dp2115
g1985
(dp2116
g332
(lp2117
(g162
g1995
tp2118
asssg2022
(dp2119
g2003
(dp2120
g332
(lp2121
(g296
g296
tp2122
assg1922
(dp2123
g332
(lp2124
(g296
g296
tp2125
a(g2032
g1929
tp2126
a(g2033
g1930
tp2127
assg1942
(dp2128
g332
(lp2129
(g296
g296
tp2130
asssg2042
(dp2131
g1965
(dp2132
g332
(lp2133
(g2054
g1972
tp2134
a(g1973
g1973
tp2135
assg1942
(dp2136
g332
(lp2137
(g1949
g1949
tp2138
a(g1950
g1950
tp2139
assg1885
(dp2140
g332
(lp2141
(g2053
g169
tp2142
assg2060
(dp2143
g332
(lp2144
(g1949
g1949
tp2145
a(g1950
g1950
tp2146
a(g2052
g2052
tp2147
a(g2051
g2051
tp2148
assg1904
(dp2149
g332
(lp2150
(g2052
g169
tp2151
asssg2060
(dp2152
g1985
(dp2153
g332
(lp2154
(g162
g1996
tp2155
assssg374
g2078
sg375
(dp2156
g1885
(dp2157
g2042
g2140
ssg1904
(dp2158
g2042
g2149
ssg1922
(dp2159
g1904
g2096
sg2022
g2123
ssg1942
(dp2160
g1965
g2111
sg2022
g2128
sg1885
g2083
sg2042
g2136
sg1904
g2090
ssg1965
(dp2161
g2042
g2132
ssg1985
(dp2162
g1904
g2093
sg1885
g2080
sg1922
g2103
sg2060
g2153
sg2003
g2116
sg1942
g2107
ssg2003
(dp2163
g1904
g2087
sg1922
g2100
sg2022
g2120
ssg2022
(dp2164
sg2042
(dp2165
sg2060
(dp2166
g2042
g2143
sssg383
g2078
sbsg43
g1900
sg46
g1067
sg56
g1900
sg57
g384
((lp2167
(lp2168
g387
ag384
((lp2169
(lp2170
g390
ag387
aa(lp2171
g392
ag393
aa(lp2172
g395
ag396
aa(lp2173
g398
ag399
aa(lp2174
g401
ag402
aa(lp2175
g404
ag405
aa(lp2176
g407
ag408
aa(lp2177
g410
ag411
aatp2178
Rp2179
aa(lp2180
g415
ag384
((lp2181
(lp2182
g390
ag415
aa(lp2183
g419
ag420
aa(lp2184
g422
ag423
aa(lp2185
g425
ag426
aa(lp2186
g428
ag429
aa(lp2187
g431
ag432
aa(lp2188
g434
ag435
aa(lp2189
g437
ag438
aa(lp2190
g440
ag441
aa(lp2191
g443
ag444
aa(lp2192
g446
ag447
aa(lp2193
g449
ag450
aa(lp2194
g452
ag453
aa(lp2195
g455
ag456
aa(lp2196
g458
ag459
aa(lp2197
g461
ag462
aa(lp2198
g464
ag465
aa(lp2199
g467
ag468
aa(lp2200
g470
ag471
aatp2201
Rp2202
aa(lp2203
g475
ag384
((lp2204
(lp2205
g390
ag475
aa(lp2206
g479
ag480
aatp2207
Rp2208
aatp2209
Rp2210
sg61
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g18
g7
Ntp2224
Rp2225
(dp2226
g22
(dp2227
sg24
g5
(g25
g7
Ntp2228
Rp2229
(dp2230
g29
g30
(g31
tp2231
Rp2232
(dp2233
S'reorient'
p2234
g95
sg294
g95
sS'refit'
p2235
g95
sg35
g36
sS'skullstrip'
p2236
g95
sbsg39
(lp2237
g2235
ag2234
ag2236
ag294
asg41
I01
sbsg42
Nsg49
I00
sg44
(dp2238
sg51
Nsg48
Nsg60
Nsg43
g211
sg46
S'anat_preproc_0'
p2239
sg50
I00
sg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp2240
sg61
Nsb(dp2241
sg5
(g18
g7
Ntp2242
Rp2243
(dp2244
g22
(dp2245
sg24
g5
(cnipype.interfaces.afni.preprocess
Calc
p2246
g7
Ntp2247
Rp2248
(dp2249
g29
g30
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2250
tp2251
Rp2252
(dp2253
S'stop_idx'
p2254
g95
sg109
I00
sg35
g36
sg162
g95
sS'expr'
p2255
S'a*step(b)'
p2256
sg111
g95
sS'outputtype'
p2257
S'NIFTI_GZ'
p2258
sS'in_file_b'
p2259
g95
sS'in_file_c'
p2260
g95
sS'in_file_a'
p2261
g95
sg121
g5
(g122
g123
(dp2262
tp2263
Rp2264
(dp2265
g130
S'environ_items'
p2266
sg43
g121
sbsS'single_idx'
p2267
g95
sS'other'
p2268
g95
sS'start_idx'
p2269
g95
sg114
g115
sbsS'_outputtype'
p2270
g2258
sg135
Nsg136
g115
sbsg42
Nsg49
I00
sg44
(dp2271
sg51
Nsg48
Nsg60
Nsg43
S'anat_brain_only'
p2272
sg46
g2239
sg50
I00
sg52
Nsg55
I00
sg56
g2272
sg57
Nsg58
(lp2273
sg61
Nsb(dp2274
sg5
(g18
g7
Ntp2275
Rp2276
(dp2277
g22
(dp2278
sg24
g5
(cnipype.interfaces.afni.preprocess
Refit
p2279
g7
Ntp2280
Rp2281
(dp2282
g29
g30
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2283
tp2284
Rp2285
(dp2286
g109
I00
sg35
g36
sS'deoblique'
p2287
I01
sg111
g95
sS'yorigin'
p2288
g95
sg114
g115
sg121
g5
(g122
g123
(dp2289
tp2290
Rp2291
(dp2292
g130
S'environ_items'
p2293
sg43
g121
sbsg169
g95
sS'xorigin'
p2294
g95
sS'zorigin'
p2295
g95
sbsg135
Nsg136
g115
sbsg42
Nsg49
I00
sg44
(dp2296
sg51
Nsg48
Nsg60
Nsg43
S'anat_deoblique'
p2297
sg46
g2239
sg50
I00
sg52
Nsg55
I00
sg56
g2297
sg57
Nsg58
(lp2298
sg61
Nsb(dp2299
sg5
(g18
g7
Ntp2300
Rp2301
(dp2302
g22
(dp2303
sg24
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2304
g7
Ntp2305
Rp2306
(dp2307
g29
g30
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2308
tp2309
Rp2310
(dp2311
g109
I00
sg35
g36
sg162
g95
sg111
g95
sg2257
S'AFNI'
p2312
sg114
g115
sg121
g5
(g122
g123
(dp2313
tp2314
Rp2315
(dp2316
g130
S'environ_items'
p2317
sg43
g121
sbsg169
g95
sbsg2270
g2312
sg135
Nsg136
g115
sbsg42
Nsg49
I00
sg44
(dp2318
sg51
Nsg48
Nsg60
Nsg43
S'anat_skullstrip'
p2319
sg46
g2239
sg50
I00
sg52
Nsg55
I00
sg56
g2319
sg57
Nsg58
(lp2320
sg61
Nsb(dp2321
sg5
(g18
g7
Ntp2322
Rp2323
(dp2324
g22
(dp2325
sg24
g5
(cnipype.interfaces.afni.preprocess
Resample
p2326
g7
Ntp2327
Rp2328
(dp2329
g29
g30
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2330
tp2331
Rp2332
(dp2333
g109
I00
sg35
g36
sg162
g95
sg111
g95
sg2257
g2258
sS'resample_mode'
p2334
g95
sS'voxel_size'
p2335
g95
sg114
g115
sS'master'
p2336
g95
sg169
g95
sg121
g5
(g122
g123
(dp2337
tp2338
Rp2339
(dp2340
g130
S'environ_items'
p2341
sg43
g121
sbsS'orientation'
p2342
S'RPI'
p2343
sbsg2270
g2258
sg135
Nsg136
g115
sbsg42
Nsg49
I00
sg44
(dp2344
sg51
Nsg48
Nsg60
Nsg43
S'anat_reorient'
p2345
sg46
g2239
sg50
I00
sg52
Nsg55
I00
sg56
g2345
sg57
Nsg58
(lp2346
sg61
Nsb(dp2347
sg5
(g18
g7
Ntp2348
Rp2349
(dp2350
g22
(dp2351
sg24
g5
(g25
g7
Ntp2352
Rp2353
(dp2354
g29
g30
(g31
tp2355
Rp2356
(dp2357
g35
g36
sS'anat'
p2358
g95
sbsg39
(lp2359
g2358
asg41
I01
sbsg42
Nsg49
I00
sg44
(dp2360
sg51
Nsg48
Nsg60
Nsg43
g298
sg46
g2239
sg50
I00
sg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp2361
sg61
Nsb(dp2362
ssg328
(dp2363
g2225
(dp2364
sg2243
(dp2365
g2225
(dp2366
g332
(lp2367
(g162
g294
tp2368
asssg2276
(dp2369
g2323
(dp2370
g332
(lp2371
(g162
g169
tp2372
assg2225
(dp2373
g332
(lp2374
(g162
g2235
tp2375
asssg2301
(dp2376
g2243
(dp2377
g332
(lp2378
(g162
g2259
tp2379
assg2225
(dp2380
g332
(lp2381
(g162
g2236
tp2382
asssg2323
(dp2383
g2225
(dp2384
g332
(lp2385
(g162
g2234
tp2386
assg2243
(dp2387
g332
(lp2388
(g162
g2261
tp2389
assg2301
(dp2390
g332
(lp2391
(g162
g169
tp2392
asssg2349
(dp2393
g2276
(dp2394
g332
(lp2395
(g2358
g169
tp2396
assssg374
g2363
sg375
(dp2397
g2225
(dp2398
g2323
g2384
sg2301
g2380
sg2276
g2373
sg2243
g2366
ssg2243
(dp2399
g2323
g2387
sg2301
g2377
ssg2276
(dp2400
g2349
g2394
ssg2301
(dp2401
g2323
g2390
ssg2323
(dp2402
g2276
g2370
ssg2349
(dp2403
ssg326
(dp2404
sg383
g2363
sbsg43
g2239
sg46
g1067
sg56
g2239
sg57
g384
((lp2405
(lp2406
g387
ag384
((lp2407
(lp2408
g390
ag387
aa(lp2409
g392
ag393
aa(lp2410
g395
ag396
aa(lp2411
g398
ag399
aa(lp2412
g401
ag402
aa(lp2413
g404
ag405
aa(lp2414
g407
ag408
aa(lp2415
g410
ag411
aatp2416
Rp2417
aa(lp2418
g415
ag384
((lp2419
(lp2420
g390
ag415
aa(lp2421
g419
ag420
aa(lp2422
g422
ag423
aa(lp2423
g425
ag426
aa(lp2424
g428
ag429
aa(lp2425
g431
ag432
aa(lp2426
g434
ag435
aa(lp2427
g437
ag438
aa(lp2428
g440
ag441
aa(lp2429
g443
ag444
aa(lp2430
g446
ag447
aa(lp2431
g449
ag450
aa(lp2432
g452
ag453
aa(lp2433
g455
ag456
aa(lp2434
g458
ag459
aa(lp2435
g461
ag462
aa(lp2436
g464
ag465
aa(lp2437
g467
ag468
aa(lp2438
g470
ag471
aatp2439
Rp2440
aa(lp2441
g475
ag384
((lp2442
(lp2443
g390
ag475
aa(lp2444
g479
ag480
aatp2445
Rp2446
aatp2447
Rp2448
sg61
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g18
g7
Ntp2459
Rp2460
(dp2461
g22
(dp2462
sg24
g5
(g2279
g7
Ntp2463
Rp2464
(dp2465
g29
g30
(g2283
tp2466
Rp2467
(dp2468
g109
I00
sg35
g36
sg2287
I01
sg111
g95
sg2288
g95
sg114
g115
sg121
g5
(g122
g123
(dp2469
tp2470
Rp2471
(dp2472
g130
S'environ_items'
p2473
sg43
g121
sbsg169
g95
sg2294
g95
sg2295
g95
sbsg135
Nsg136
g115
sbsg42
Nsg43
S'func_deoblique'
p2474
sg44
(dp2475
sg46
S'func_preproc_automask_0'
p2476
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2474
sg57
Nsg58
(lp2477
sg60
Nsg61
Nsb(dp2478
sg5
(g18
g7
Ntp2479
Rp2480
(dp2481
g22
(dp2482
sg24
g5
(g25
g7
Ntp2483
Rp2484
(dp2485
g29
g30
(g31
tp2486
Rp2487
(dp2488
g2051
g95
sS'motion_correct_ref'
p2489
g95
sg35
g36
sS'preprocessed_mask'
p2490
g95
sg1973
g95
sg2235
g95
sg2236
g95
sg2234
g95
sS'preprocessed'
p2491
g95
sS'slice_time_corrected'
p2492
g95
sg2052
g95
sS'example_func'
p2493
g95
sg2053
g95
sS'reorient_mean'
p2494
g95
sg2054
g95
sbsg39
(lp2495
g2235
ag2234
ag2494
ag2054
ag2489
ag2052
ag2051
ag1973
ag2236
ag2493
ag2491
ag2490
ag2492
ag2053
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp2496
sg46
g2476
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp2497
sg60
Nsg61
Nsb(dp2498
sg5
(g18
g7
Ntp2499
Rp2500
(dp2501
g22
(dp2502
sg24
g5
(cnipype.interfaces.afni.preprocess
Automask
p2503
g7
Ntp2504
Rp2505
(dp2506
g29
g30
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2507
tp2508
Rp2509
(dp2510
g109
I00
sg35
g36
sg111
g95
sS'erode'
p2511
g95
sg162
g95
sS'dilate'
p2512
g95
sS'clfrac'
p2513
g95
sg2257
g2258
sS'brain_file'
p2514
g95
sg114
g115
sg121
g5
(g122
g123
(dp2515
tp2516
Rp2517
(dp2518
g130
S'environ_items'
p2519
sg43
g121
sbsg169
g95
sbsg2270
g2258
sg135
Nsg136
g115
sbsg42
Nsg43
S'func_get_brain_mask'
p2520
sg44
(dp2521
sg46
g2476
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2520
sg57
Nsg58
(lp2522
sg60
Nsg61
Nsb(dp2523
sg5
(g18
g7
Ntp2524
Rp2525
(dp2526
g22
(dp2527
sg24
g5
(cnipype.interfaces.afni.preprocess
TStat
p2528
g7
Ntp2529
Rp2530
(dp2531
g29
g30
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2532
tp2533
Rp2534
(dp2535
g109
I00
sg35
g36
sg162
g95
sg111
g95
sg1973
g95
sg2257
g2258
sg114
g115
sg121
g5
(g122
g123
(dp2536
tp2537
Rp2538
(dp2539
g130
S'environ_items'
p2540
sg43
g121
sbsg169
g95
sS'options'
p2541
S'-mean'
p2542
sbsg2270
g2258
sg135
Nsg136
g115
sbsg42
Nsg49
I00
sg44
(dp2543
sg51
Nsg48
Nsg60
Nsg43
S'func_get_mean_motion'
p2544
sg46
g2476
sg50
I00
sg52
Nsg55
I00
sg56
g2544
sg57
Nsg58
(lp2545
sg61
Nsb(dp2546
sg5
(g18
g7
Ntp2547
Rp2548
(dp2549
g22
(dp2550
sg24
g5
(g2246
g7
Ntp2551
Rp2552
(dp2553
g29
g30
(g2250
tp2554
Rp2555
(dp2556
g2254
g95
sg109
I00
sg35
g36
sg162
g95
sg2255
S'a*b'
p2557
sg111
g95
sg2257
g2258
sg2259
g95
sg2260
g95
sg2261
g95
sg121
g5
(g122
g123
(dp2558
tp2559
Rp2560
(dp2561
g130
S'environ_items'
p2562
sg43
g121
sbsg2267
g95
sg2268
g95
sg2269
g95
sg114
g115
sbsg2270
g2258
sg135
Nsg136
g115
sbsg42
Nsg43
S'func_edge_detect'
p2563
sg44
(dp2564
sg46
g2476
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2563
sg57
Nsg58
(lp2565
sg60
Nsg61
Nsb(dp2566
sg5
(g18
g7
Ntp2567
Rp2568
(dp2569
g22
(dp2570
sg24
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2571
g7
Ntp2572
Rp2573
(dp2574
g29
g30
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2575
tp2576
Rp2577
(dp2578
S'oned_file'
p2579
g95
sg109
I00
sg99
g95
sS'timeshift'
p2580
g95
sS'basefile'
p2581
g95
sg111
S'-Fourier -twopass'
p2582
sg2257
g2258
sS'zpad'
p2583
I4
sg114
g115
sS'md1d_file'
p2584
g95
sg169
g95
sS'copyorigin'
p2585
g95
sg121
g5
(g122
g123
(dp2586
tp2587
Rp2588
(dp2589
g130
S'environ_items'
p2590
sg43
g121
sbsg2053
g95
sg35
g36
sg162
g95
sbsg2270
g2258
sg135
Nsg136
g115
sbsg42
Nsg43
S'func_motion_correct'
p2591
sg44
(dp2592
sg46
g2476
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2591
sg57
Nsg58
(lp2593
sg60
Nsg61
Nsb(dp2594
sg5
(g18
g7
Ntp2595
Rp2596
(dp2597
g22
(dp2598
sg24
g5
(g2571
g7
Ntp2599
Rp2600
(dp2601
g29
g30
(g2575
tp2602
Rp2603
(dp2604
g2579
g95
sg109
I00
sg99
g95
sg2580
g95
sg2581
g95
sg111
g2582
sg2257
g2258
sg2583
I4
sg114
g115
sg2584
S'max_displacement.1D'
p2605
sg169
g95
sg2585
g95
sg121
g5
(g122
g123
(dp2606
tp2607
Rp2608
(dp2609
g130
S'environ_items'
p2610
sg43
g121
sbsg2053
g95
sg35
g36
sg162
g95
sbsg2270
g2258
sg135
Nsg136
g115
sbsg42
Nsg49
I00
sg44
(dp2611
sg51
Nsg48
Nsg60
Nsg43
S'func_motion_correct_A'
p2612
sg46
g2476
sg50
I00
sg52
Nsg55
I00
sg56
g2612
sg57
Nsg58
(lp2613
sg61
Nsb(dp2614
sg5
(g18
g7
Ntp2615
Rp2616
(dp2617
g22
(dp2618
sg24
g5
(g2528
g7
Ntp2619
Rp2620
(dp2621
g29
g30
(g2532
tp2622
Rp2623
(dp2624
g109
I00
sg35
g36
sg162
g95
sg111
g95
sg1973
g95
sg2257
g2258
sg114
g115
sg121
g5
(g122
g123
(dp2625
tp2626
Rp2627
(dp2628
g130
S'environ_items'
p2629
sg43
g121
sbsg169
g95
sg2541
g2542
sbsg2270
g2258
sg135
Nsg136
g115
sbsg42
Nsg43
S'func_mean_skullstrip'
p2630
sg44
(dp2631
sg46
g2476
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2630
sg57
Nsg58
(lp2632
sg60
Nsg61
Nsb(dp2633
sg5
(g18
g7
Ntp2634
Rp2635
(dp2636
g22
(dp2637
sg24
g5
(g2528
g7
Ntp2638
Rp2639
(dp2640
g29
g30
(g2532
tp2641
Rp2642
(dp2643
g109
I00
sg35
g36
sg162
g95
sg111
g95
sg1973
g95
sg2257
g2258
sg114
g115
sg121
g5
(g122
g123
(dp2644
tp2645
Rp2646
(dp2647
g130
S'environ_items'
p2648
sg43
g121
sbsg169
g95
sg2541
g2542
sbsg2270
g2258
sg135
Nsg136
g115
sbsg42
Nsg43
S'func_get_mean_RPI'
p2649
sg44
(dp2650
sg46
g2476
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2649
sg57
Nsg58
(lp2651
sg60
Nsg61
Nsb(dp2652
sg5
(g18
g7
Ntp2653
Rp2654
(dp2655
g22
(dp2656
sg24
g5
(g306
g7
Ntp2657
Rp2658
(dp2659
g29
g30
(g310
tp2660
Rp2661
(dp2662
g109
I00
sg35
g36
sg160
S'-ing 10000'
p2663
sg314
S'float'
p2664
sg162
g95
sg111
g95
sg315
g95
sg114
g115
sg121
g5
(g122
g123
(dp2665
g125
g126
stp2666
Rp2667
(dp2668
g130
S'environ_items'
p2669
sg43
g121
sbsg169
g95
sg132
g126
sg321
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'func_normalize'
p2670
sg44
(dp2671
sg46
g2476
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2670
sg57
Nsg58
(lp2672
sg60
Nsg61
Nsb(dp2673
sg5
(g18
g7
Ntp2674
Rp2675
(dp2676
g22
(dp2677
sg24
g5
(g306
g7
Ntp2678
Rp2679
(dp2680
g29
g30
(g310
tp2681
Rp2682
(dp2683
g109
I00
sg35
g36
sg160
S'-Tmin -bin'
p2684
sg314
S'char'
p2685
sg162
g95
sg111
g95
sg315
g95
sg114
g115
sg121
g5
(g122
g123
(dp2686
g125
g126
stp2687
Rp2688
(dp2689
g130
S'environ_items'
p2690
sg43
g121
sbsg169
g95
sg132
g126
sg321
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'func_mask_normalize'
p2691
sg44
(dp2692
sg46
g2476
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2691
sg57
Nsg58
(lp2693
sg60
Nsg61
Nsb(dp2694
sg5
(g18
g7
Ntp2695
Rp2696
(dp2697
g22
(dp2698
sg24
g5
(g2326
g7
Ntp2699
Rp2700
(dp2701
g29
g30
(g2330
tp2702
Rp2703
(dp2704
g109
I00
sg35
g36
sg162
g95
sg111
g95
sg2257
g2258
sg2334
g95
sg2335
g95
sg114
g115
sg2336
g95
sg169
g95
sg121
g5
(g122
g123
(dp2705
tp2706
Rp2707
(dp2708
g130
S'environ_items'
p2709
sg43
g121
sbsg2342
g2343
sbsg2270
g2258
sg135
Nsg136
g115
sbsg42
Nsg43
S'func_reorient'
p2710
sg44
(dp2711
sg46
g2476
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2710
sg57
Nsg58
(lp2712
sg60
Nsg61
Nsb(dp2713
sg5
(g18
g7
Ntp2714
Rp2715
(dp2716
g22
(dp2717
sg24
g5
(g25
g7
Ntp2718
Rp2719
(dp2720
g29
g30
(g31
tp2721
Rp2722
(dp2723
g35
g36
sS'func'
p2724
g95
sbsg39
(lp2725
g2724
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp2726
sg46
g2476
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp2727
sg60
Nsg61
Nsb(dp2728
ssg326
(dp2729
sg328
(dp2730
g2460
(dp2731
g2696
(dp2732
g332
(lp2733
(g162
g169
tp2734
asssg2480
(dp2735
sg2500
(dp2736
g2480
(dp2737
g332
(lp2738
(g162
g1973
tp2739
assg2548
(dp2740
g332
(lp2741
(g162
g2259
tp2742
asssg2525
(dp2743
g2480
(dp2744
g332
(lp2745
(g162
g2489
tp2746
assg2596
(dp2747
g332
(lp2748
(g162
g2581
tp2749
asssg2548
(dp2750
g2480
(dp2751
g332
(lp2752
(g162
g2236
tp2753
assg2616
(dp2754
g332
(lp2755
(g162
g169
tp2756
assg2654
(dp2757
g332
(lp2758
(g162
g169
tp2759
asssg2568
(dp2760
g2525
(dp2761
g332
(lp2762
(g162
g169
tp2763
asssg2596
(dp2764
g2480
(dp2765
g332
(lp2766
(g162
g2054
tp2767
a(g2584
g2051
tp2768
a(g2579
g2052
tp2769
a(g2053
g2053
tp2770
assg2500
(dp2771
g332
(lp2772
(g162
g169
tp2773
assg2548
(dp2774
g332
(lp2775
(g162
g2261
tp2776
asssg2616
(dp2777
g2480
(dp2778
g332
(lp2779
(g162
g2493
tp2780
asssg2635
(dp2781
g2568
(dp2782
g332
(lp2783
(g162
g2581
tp2784
asssg2654
(dp2785
g2480
(dp2786
g332
(lp2787
(g162
g2491
tp2788
assg2675
(dp2789
g332
(lp2790
(g162
g169
tp2791
asssg2675
(dp2792
g2480
(dp2793
g332
(lp2794
(g162
g2490
tp2795
asssg2696
(dp2796
g2480
(dp2797
g332
(lp2798
(g162
g2234
tp2799
assg2596
(dp2800
g332
(lp2801
(g162
g169
tp2802
assg2568
(dp2803
g332
(lp2804
(g162
g169
tp2805
assg2635
(dp2806
g332
(lp2807
(g162
g169
tp2808
asssg2715
(dp2809
g2460
(dp2810
g332
(lp2811
(g2724
g169
tp2812
assssg374
g2730
sg375
(dp2813
g2460
(dp2814
g2715
g2810
ssg2480
(dp2815
g2654
g2786
sg2616
g2778
sg2500
g2737
sg2548
g2751
sg2596
g2765
sg2696
g2797
sg2525
g2744
sg2675
g2793
ssg2500
(dp2816
g2596
g2771
ssg2525
(dp2817
g2568
g2761
ssg2548
(dp2818
g2596
g2774
sg2500
g2740
ssg2568
(dp2819
g2635
g2782
sg2696
g2803
ssg2596
(dp2820
g2696
g2800
sg2525
g2747
ssg2616
(dp2821
g2548
g2754
ssg2635
(dp2822
g2696
g2806
ssg2654
(dp2823
g2548
g2757
ssg2675
(dp2824
g2654
g2789
ssg2696
(dp2825
g2460
g2732
ssg2715
(dp2826
ssg383
g2730
sbsg43
g2476
sg46
g1067
sg56
g2476
sg57
g384
((lp2827
(lp2828
g387
ag384
((lp2829
(lp2830
g390
ag387
aa(lp2831
g392
ag393
aa(lp2832
g395
ag396
aa(lp2833
g398
ag399
aa(lp2834
g401
ag402
aa(lp2835
g404
ag405
aa(lp2836
g407
ag408
aa(lp2837
g410
ag411
aatp2838
Rp2839
aa(lp2840
g415
ag384
((lp2841
(lp2842
g390
ag415
aa(lp2843
g419
ag420
aa(lp2844
g422
ag423
aa(lp2845
g425
ag426
aa(lp2846
g428
ag429
aa(lp2847
g431
ag432
aa(lp2848
g434
ag435
aa(lp2849
g437
ag438
aa(lp2850
g440
ag441
aa(lp2851
g443
ag444
aa(lp2852
g446
ag447
aa(lp2853
g449
ag450
aa(lp2854
g452
ag453
aa(lp2855
g455
ag456
aa(lp2856
g458
ag459
aa(lp2857
g461
ag462
aa(lp2858
g464
ag465
aa(lp2859
g467
ag468
aa(lp2860
g470
ag471
aatp2861
Rp2862
aa(lp2863
g475
ag384
((lp2864
(lp2865
g390
ag475
aa(lp2866
g479
ag480
aatp2867
Rp2868
aatp2869
Rp2870
sg61
NsbS'outputspec.example_func'
p2871
tp2872
sg2052
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g18
g7
Ntp2880
Rp2881
(dp2882
g22
(dp2883
sg24
g5
(g25
g7
Ntp2884
Rp2885
(dp2886
g29
g30
(g31
tp2887
Rp2888
(dp2889
g35
g36
sS'movement_file'
p2890
g95
sbsg39
(lp2891
g2890
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp2892
sg46
S'fristons_parameter_model_0'
p2893
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp2894
sg60
Nsg61
Nsb(dp2895
sg5
(g18
g7
Ntp2896
Rp2897
(dp2898
g22
(dp2899
sg24
g5
(g25
g7
Ntp2900
Rp2901
(dp2902
g29
g30
(g31
tp2903
Rp2904
(dp2905
g35
g36
sg2890
g95
sbsg39
(lp2906
g2890
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp2907
sg46
g2893
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp2908
sg60
Nsg61
Nsb(dp2909
sg5
(g18
g7
Ntp2910
Rp2911
(dp2912
g22
(dp2913
sg24
g5
(g1421
g7
Ntp2914
Rp2915
(dp2916
g1425
(lp2917
g169
asg29
g30
(g1429
tp2918
Rp2919
(dp2920
g109
I00
sg35
g36
sg1435
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2921
sg169
g95
sbsg1437
(dp2922
g162
Nssg1439
(lp2923
g162
asg1441
Nsbsg42
Nsg43
S'calc_friston'
p2924
sg44
(dp2925
sg46
g2893
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2924
sg57
Nsg58
(lp2926
sg60
Nsg61
Nsb(dp2927
ssg326
(dp2928
sg328
(dp2929
g2881
(dp2930
g2911
(dp2931
g332
(lp2932
(g2890
g169
tp2933
asssg2897
(dp2934
sg2911
(dp2935
g2897
(dp2936
g332
(lp2937
(g162
g2890
tp2938
assssg374
g2929
sg375
(dp2939
g2881
(dp2940
sg2897
(dp2941
g2911
g2936
ssg2911
(dp2942
g2881
g2931
sssg383
g2929
sbsg43
g2893
sg46
g1067
sg56
g2893
sg57
g384
((lp2943
(lp2944
g387
ag384
((lp2945
(lp2946
g390
ag387
aa(lp2947
g392
ag393
aa(lp2948
g395
ag396
aa(lp2949
g398
ag399
aa(lp2950
g401
ag402
aa(lp2951
g404
ag405
aa(lp2952
g407
ag408
aa(lp2953
g410
ag411
aatp2954
Rp2955
aa(lp2956
g415
ag384
((lp2957
(lp2958
g390
ag415
aa(lp2959
g419
ag420
aa(lp2960
g422
ag423
aa(lp2961
g425
ag426
aa(lp2962
g428
ag429
aa(lp2963
g431
ag432
aa(lp2964
g434
ag435
aa(lp2965
g437
ag438
aa(lp2966
g440
ag441
aa(lp2967
g443
ag444
aa(lp2968
g446
ag447
aa(lp2969
g449
ag450
aa(lp2970
g452
ag453
aa(lp2971
g455
ag456
aa(lp2972
g458
ag459
aa(lp2973
g461
ag462
aa(lp2974
g464
ag465
aa(lp2975
g467
ag468
aa(lp2976
g470
ag471
aatp2977
Rp2978
aa(lp2979
g475
ag384
((lp2980
(lp2981
g390
ag475
aa(lp2982
g479
ag480
aatp2983
Rp2984
aatp2985
Rp2986
sg61
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g18
g7
Ntp2997
Rp2998
(dp2999
g22
(dp3000
sg24
g5
(g25
g7
Ntp3001
Rp3002
(dp3003
g29
g30
(g31
tp3004
Rp3005
(dp3006
g35
g36
sg1456
g95
sg1457
g95
sg1458
g95
sg1459
g95
sbsg39
(lp3007
g1457
ag1458
ag1456
ag1459
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp3008
sg46
S'montage_anat_0'
p3009
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp3010
sg60
Nsg61
Nsb(dp3011
sg5
(g18
g7
Ntp3012
Rp3013
(dp3014
g22
(dp3015
sg24
g5
(g1421
g7
Ntp3016
Rp3017
(dp3018
g1425
(lp3019
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp3020
Rp3021
(dp3022
g109
I00
sg1427
S't1_edge_on_mean_func_in_t1_s.png'
p3023
sg1410
g95
sg1428
g1434
sg1435
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3024
sg1409
g95
sg35
g36
sbsg1437
(dp3025
g1427
Nssg1439
(lp3026
g1427
asg1441
Nsbsg42
Nsg43
g1442
sg44
(dp3027
sg46
g3009
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1442
sg57
Nsg58
(lp3028
sg60
Nsg61
Nsb(dp3029
sg5
(g18
g7
Ntp3030
Rp3031
(dp3032
g22
(dp3033
sg24
g5
(g1421
g7
Ntp3034
Rp3035
(dp3036
g1425
(lp3037
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp3038
Rp3039
(dp3040
g109
I00
sg1427
S't1_edge_on_mean_func_in_t1_a.png'
p3041
sg1410
g95
sg1428
g1434
sg1435
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3042
sg1409
g95
sg35
g36
sbsg1437
(dp3043
g1427
Nssg1439
(lp3044
g1427
asg1441
Nsbsg42
Nsg43
g1499
sg44
(dp3045
sg46
g3009
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1499
sg57
Nsg58
(lp3046
sg60
Nsg61
Nsb(dp3047
sg5
(g18
g7
Ntp3048
Rp3049
(dp3050
g22
(dp3051
sg24
g5
(g1421
g7
Ntp3052
Rp3053
(dp3054
g1425
(lp3055
g1472
asg29
g30
(g1429
tp3056
Rp3057
(dp3058
g109
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3059
sg1472
g95
sg35
g36
sbsg1437
(dp3060
g1478
Nssg1439
(lp3061
g1478
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp3062
sg51
Nsg48
Nsg60
Nsg43
g1481
sg46
g3009
sg50
I00
sg52
Nsg55
I00
sg56
g1481
sg57
Nsg58
(lp3063
sg61
Nsb(dp3064
sg5
(g18
g7
Ntp3065
Rp3066
(dp3067
g22
(dp3068
sg24
g5
(g1421
g7
Ntp3069
Rp3070
(dp3071
g1425
(lp3072
g1472
asg29
g30
(g1429
tp3073
Rp3074
(dp3075
g109
I00
sg1435
g3059
sg1472
g95
sg35
g36
sbsg1437
(dp3076
g1478
Nssg1439
(lp3077
g1478
asg1441
Nsbsg42
Nsg43
g1516
sg44
(dp3078
sg46
g3009
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1516
sg57
Nsg58
(lp3079
sg60
Nsg61
Nsb(dp3080
sg5
(g18
g7
Ntp3081
Rp3082
(dp3083
g22
(dp3084
sg24
g5
(g25
g7
Ntp3085
Rp3086
(dp3087
g29
g30
(g31
tp3088
Rp3089
(dp3090
g35
g36
sg1409
g95
sg1410
g95
sbsg39
(lp3091
g1409
ag1410
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp3092
sg46
g3009
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp3093
sg60
Nsg61
Nsb(dp3094
ssg326
(dp3095
sg328
(dp3096
g2998
(dp3097
sg3013
(dp3098
g2998
(dp3099
g332
(lp3100
(g1427
g1458
tp3101
asssg3031
(dp3102
g2998
(dp3103
g332
(lp3104
(g1427
g1457
tp3105
asssg3049
(dp3106
g3013
(dp3107
g332
(lp3108
(g1478
g1410
tp3109
assg3031
(dp3110
g332
(lp3111
(g1478
g1410
tp3112
assg2998
(dp3113
g332
(lp3114
(g1478
g1459
tp3115
asssg3066
(dp3116
g3013
(dp3117
g332
(lp3118
(g1478
g1409
tp3119
assg3031
(dp3120
g332
(lp3121
(g1478
g1409
tp3122
assg2998
(dp3123
g332
(lp3124
(g1478
g1456
tp3125
asssg3082
(dp3126
g3066
(dp3127
g332
(lp3128
(g1409
g1472
tp3129
assg3049
(dp3130
g332
(lp3131
(g1410
g1472
tp3132
assssg374
g3096
sg375
(dp3133
g2998
(dp3134
g3066
g3123
sg3013
g3099
sg3031
g3103
sg3049
g3113
ssg3013
(dp3135
g3066
g3117
sg3049
g3107
ssg3031
(dp3136
g3066
g3120
sg3049
g3110
ssg3049
(dp3137
g3082
g3130
ssg3066
(dp3138
g3082
g3127
ssg3082
(dp3139
ssg383
g3096
sbsg43
g3009
sg46
g1067
sg56
g3009
sg57
g384
((lp3140
(lp3141
g387
ag384
((lp3142
(lp3143
g390
ag387
aa(lp3144
g392
ag393
aa(lp3145
g395
ag396
aa(lp3146
g398
ag399
aa(lp3147
g401
ag402
aa(lp3148
g404
ag405
aa(lp3149
g407
ag408
aa(lp3150
g410
ag411
aatp3151
Rp3152
aa(lp3153
g415
ag384
((lp3154
(lp3155
g390
ag415
aa(lp3156
g419
ag420
aa(lp3157
g422
ag423
aa(lp3158
g425
ag426
aa(lp3159
g428
ag429
aa(lp3160
g431
ag432
aa(lp3161
g434
ag435
aa(lp3162
g437
ag438
aa(lp3163
g440
ag441
aa(lp3164
g443
ag444
aa(lp3165
g446
ag447
aa(lp3166
g449
ag450
aa(lp3167
g452
ag453
aa(lp3168
g455
ag456
aa(lp3169
g458
ag459
aa(lp3170
g461
ag462
aa(lp3171
g464
ag465
aa(lp3172
g467
ag468
aa(lp3173
g470
ag471
aatp3174
Rp3175
aa(lp3176
g475
ag384
((lp3177
(lp3178
g390
ag475
aa(lp3179
g479
ag480
aatp3180
Rp3181
aatp3182
Rp3183
sg61
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg2051
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g18
g7
Ntp3201
Rp3202
(dp3203
g22
(dp3204
sg24
g5
(g25
g7
Ntp3205
Rp3206
(dp3207
g29
g30
(g31
tp3208
Rp3209
(dp3210
g35
g36
sS'resampled_overlay_csf'
p3211
g95
sS'resampled_overlay_gm'
p3212
g95
sg1457
g95
sg1458
g95
sg1456
g95
sS'resampled_overlay_wm'
p3213
g95
sbsg39
(lp3214
g1457
ag1458
ag1456
ag3211
ag3213
ag3212
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp3215
sg46
S'montage_csf_gm_wm_0'
p3216
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp3217
sg60
Nsg61
Nsb(dp3218
sg5
(g18
g7
Ntp3219
Rp3220
(dp3221
g22
(dp3222
sg24
g5
(g1421
g7
Ntp3223
Rp3224
(dp3225
g1425
(lp3226
g1472
asg29
g30
(g1429
tp3227
Rp3228
(dp3229
g109
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3230
sg1472
g95
sg35
g36
sbsg1437
(dp3231
g1478
Nssg1439
(lp3232
g1478
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp3233
sg51
Nsg48
Nsg60
Nsg43
S'resample_o_gm'
p3234
sg46
g3216
sg50
I00
sg52
Nsg55
I00
sg56
g3234
sg57
Nsg58
(lp3235
sg61
Nsb(dp3236
sg5
(g18
g7
Ntp3237
Rp3238
(dp3239
g22
(dp3240
sg24
g5
(g1421
g7
Ntp3241
Rp3242
(dp3243
g1425
(lp3244
g1472
asg29
g30
(g1429
tp3245
Rp3246
(dp3247
g109
I00
sg1435
g3230
sg1472
g95
sg35
g36
sbsg1437
(dp3248
g1478
Nssg1439
(lp3249
g1478
asg1441
Nsbsg42
Nsg43
g1516
sg44
(dp3250
sg46
g3216
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1516
sg57
Nsg58
(lp3251
sg60
Nsg61
Nsb(dp3252
sg5
(g18
g7
Ntp3253
Rp3254
(dp3255
g22
(dp3256
sg24
g5
(g1421
g7
Ntp3257
Rp3258
(dp3259
g1425
(lp3260
S'overlay_csf'
p3261
aS'overlay_wm'
p3262
aS'overlay_gm'
p3263
ag1409
ag1427
asg29
g30
(g1429
tp3264
Rp3265
(dp3266
g109
I00
sg1427
S'montage_csf_gm_wm_s.png'
p3267
sg3263
g95
sg1435
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3268
sg3261
g95
sg3262
g95
sg1409
g95
sg35
g36
sbsg1437
(dp3269
g1427
Nssg1439
(lp3270
g1427
asg1441
Nsbsg42
Nsg43
g1442
sg44
(dp3271
sg46
g3216
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1442
sg57
Nsg58
(lp3272
sg60
Nsg61
Nsb(dp3273
sg5
(g18
g7
Ntp3274
Rp3275
(dp3276
g22
(dp3277
sg24
g5
(g25
g7
Ntp3278
Rp3279
(dp3280
g29
g30
(g31
tp3281
Rp3282
(dp3283
g35
g36
sg3263
g95
sg1409
g95
sg3261
g95
sg3262
g95
sbsg39
(lp3284
g1409
ag3261
ag3262
ag3263
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp3285
sg46
g3216
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp3286
sg60
Nsg61
Nsb(dp3287
sg5
(g18
g7
Ntp3288
Rp3289
(dp3290
g22
(dp3291
sg24
g5
(g1421
g7
Ntp3292
Rp3293
(dp3294
g1425
(lp3295
g1472
asg29
g30
(g1429
tp3296
Rp3297
(dp3298
g109
I00
sg1435
g3230
sg1472
g95
sg35
g36
sbsg1437
(dp3299
g1478
Nssg1439
(lp3300
g1478
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp3301
sg51
Nsg48
Nsg60
Nsg43
S'resample_o_csf'
p3302
sg46
g3216
sg50
I00
sg52
Nsg55
I00
sg56
g3302
sg57
Nsg58
(lp3303
sg61
Nsb(dp3304
sg5
(g18
g7
Ntp3305
Rp3306
(dp3307
g22
(dp3308
sg24
g5
(g1421
g7
Ntp3309
Rp3310
(dp3311
g1425
(lp3312
g1472
asg29
g30
(g1429
tp3313
Rp3314
(dp3315
g109
I00
sg1435
g3230
sg1472
g95
sg35
g36
sbsg1437
(dp3316
g1478
Nssg1439
(lp3317
g1478
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp3318
sg51
Nsg48
Nsg60
Nsg43
S'resample_o_wm'
p3319
sg46
g3216
sg50
I00
sg52
Nsg55
I00
sg56
g3319
sg57
Nsg58
(lp3320
sg61
Nsb(dp3321
sg5
(g18
g7
Ntp3322
Rp3323
(dp3324
g22
(dp3325
sg24
g5
(g1421
g7
Ntp3326
Rp3327
(dp3328
g1425
(lp3329
g3261
ag3262
ag3263
ag1409
ag1427
asg29
g30
(g1429
tp3330
Rp3331
(dp3332
g109
I00
sg1427
S'montage_csf_gm_wm_a.png'
p3333
sg3263
g95
sg1435
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3334
sg3261
g95
sg3262
g95
sg1409
g95
sg35
g36
sbsg1437
(dp3335
g1427
Nssg1439
(lp3336
g1427
asg1441
Nsbsg42
Nsg43
g1499
sg44
(dp3337
sg46
g3216
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1499
sg57
Nsg58
(lp3338
sg60
Nsg61
Nsb(dp3339
ssg326
(dp3340
sg328
(dp3341
g3202
(dp3342
sg3220
(dp3343
g3323
(dp3344
g332
(lp3345
(g1478
g3263
tp3346
assg3202
(dp3347
g332
(lp3348
(g1478
g3212
tp3349
assg3254
(dp3350
g332
(lp3351
(g1478
g3263
tp3352
asssg3238
(dp3353
g3323
(dp3354
g332
(lp3355
(g1478
g1409
tp3356
assg3202
(dp3357
g332
(lp3358
(g1478
g1456
tp3359
assg3254
(dp3360
g332
(lp3361
(g1478
g1409
tp3362
asssg3254
(dp3363
g3202
(dp3364
g332
(lp3365
(g1427
g1458
tp3366
asssg3275
(dp3367
g3306
(dp3368
g332
(lp3369
(g3262
g1472
tp3370
assg3289
(dp3371
g332
(lp3372
(g3261
g1472
tp3373
assg3238
(dp3374
g332
(lp3375
(g1409
g1472
tp3376
assg3220
(dp3377
g332
(lp3378
(g3263
g1472
tp3379
asssg3289
(dp3380
g3323
(dp3381
g332
(lp3382
(g1478
g3261
tp3383
assg3202
(dp3384
g332
(lp3385
(g1478
g3211
tp3386
assg3254
(dp3387
g332
(lp3388
(g1478
g3261
tp3389
asssg3306
(dp3390
g3323
(dp3391
g332
(lp3392
(g1478
g3262
tp3393
assg3202
(dp3394
g332
(lp3395
(g1478
g3213
tp3396
assg3254
(dp3397
g332
(lp3398
(g1478
g3262
tp3399
asssg3323
(dp3400
g3202
(dp3401
g332
(lp3402
(g1427
g1457
tp3403
assssg374
g3341
sg375
(dp3404
g3202
(dp3405
g3220
g3347
sg3238
g3357
sg3254
g3364
sg3289
g3384
sg3306
g3394
sg3323
g3401
ssg3220
(dp3406
g3275
g3377
ssg3238
(dp3407
g3275
g3374
ssg3254
(dp3408
g3306
g3397
sg3289
g3387
sg3238
g3360
sg3220
g3350
ssg3275
(dp3409
sg3289
(dp3410
g3275
g3371
ssg3306
(dp3411
g3275
g3368
ssg3323
(dp3412
g3306
g3391
sg3289
g3381
sg3238
g3354
sg3220
g3344
sssg383
g3341
sbsg43
g3216
sg46
g1067
sg56
g3216
sg57
g384
((lp3413
(lp3414
g387
ag384
((lp3415
(lp3416
g390
ag387
aa(lp3417
g392
ag393
aa(lp3418
g395
ag396
aa(lp3419
g398
ag399
aa(lp3420
g401
ag402
aa(lp3421
g404
ag405
aa(lp3422
g407
ag408
aa(lp3423
g410
ag411
aatp3424
Rp3425
aa(lp3426
g415
ag384
((lp3427
(lp3428
g390
ag415
aa(lp3429
g419
ag420
aa(lp3430
g422
ag423
aa(lp3431
g425
ag426
aa(lp3432
g428
ag429
aa(lp3433
g431
ag432
aa(lp3434
g434
ag435
aa(lp3435
g437
ag438
aa(lp3436
g440
ag441
aa(lp3437
g443
ag444
aa(lp3438
g446
ag447
aa(lp3439
g449
ag450
aa(lp3440
g452
ag453
aa(lp3441
g455
ag456
aa(lp3442
g458
ag459
aa(lp3443
g461
ag462
aa(lp3444
g464
ag465
aa(lp3445
g467
ag468
aa(lp3446
g470
ag471
aatp3447
Rp3448
aa(lp3449
g475
ag384
((lp3450
(lp3451
g390
ag475
aa(lp3452
g479
ag480
aatp3453
Rp3454
aatp3455
Rp3456
sg61
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g18
g7
Ntp3466
Rp3467
(dp3468
g22
(dp3469
sg24
g5
(g306
g7
Ntp3470
Rp3471
(dp3472
g29
g30
(g310
tp3473
Rp3474
(dp3475
g109
I00
sg35
g36
sg160
S'-thr 0.5 -bin'
p3476
sg314
g95
sg162
g95
sg111
g95
sg315
g95
sg114
g115
sg121
g5
(g122
g123
(dp3477
g125
g126
stp3478
Rp3479
(dp3480
g130
S'environ_items'
p3481
sg43
g121
sbsg169
g95
sg132
g126
sg321
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'wm_bb_mask'
p3482
sg44
(dp3483
sg46
S'func_to_anat_bbreg_0'
p3484
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3482
sg57
Nsg58
(lp3485
sg60
Nsg61
Nsb(dp3486
sg5
(g18
g7
Ntp3487
Rp3488
(dp3489
g22
(dp3490
sg24
g5
(g25
g7
Ntp3491
Rp3492
(dp3493
g29
g30
(g31
tp3494
Rp3495
(dp3496
S'func_to_anat_linear_xfm'
p3497
g95
sg35
g36
sS'anat_func'
p3498
g95
sbsg39
(lp3499
g3497
ag3498
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp3500
sg46
g3484
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp3501
sg60
Nsg61
Nsb(dp3502
sg5
(g18
g7
Ntp3503
Rp3504
(dp3505
g22
(dp3506
sg24
g5
(g25
g7
Ntp3507
Rp3508
(dp3509
g29
g30
(g31
tp3510
Rp3511
(dp3512
g35
g36
sS'linear_reg_matrix'
p3513
g95
sS'bbr_schedule'
p3514
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3515
sS'anat_wm_segmentation'
p3516
g95
sS'anat_skull'
p3517
g95
sg2724
g95
sbsg39
(lp3518
g2724
ag3517
ag3513
ag3516
ag3514
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp3519
sg46
g3484
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp3520
sg60
Nsg61
Nsb(dp3521
sg5
(g18
g7
Ntp3522
Rp3523
(dp3524
g22
(dp3525
sg24
g5
(g219
g7
Ntp3526
Rp3527
(dp3528
g29
g30
(g223
tp3529
Rp3530
(dp3531
g227
g95
sg35
g36
sg228
g95
sg99
g95
sg229
g95
sg230
g95
sg231
g95
sg232
g95
sg234
g95
sg235
g95
sg236
g95
sg237
g95
sg238
g95
sg239
g95
sg240
g95
sg241
g95
sg242
g95
sg243
g95
sg169
g95
sg244
g95
sg245
g95
sg246
g95
sg247
g95
sg109
I00
sg248
g95
sg249
g95
sg111
g95
sg250
g95
sg251
g95
sg114
g115
sg252
g95
sg253
g95
sg254
g95
sg255
g95
sg256
g95
sg162
g95
sg257
g95
sg258
g95
sg259
g95
sg260
I6
sg261
g95
sg262
g95
sg263
g95
sg264
g95
sg265
g95
sg121
g5
(g122
g123
(dp3532
g125
g126
stp3533
Rp3534
(dp3535
g130
S'environ_items'
p3536
sg43
g121
sbsg271
g95
sg272
g95
sg132
g126
sg273
g95
sg274
g95
sg275
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'bbreg_func_to_anat'
p3537
sg44
(dp3538
sg46
g3484
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3537
sg57
Nsg58
(lp3539
sg60
Nsg61
Nsb(dp3540
ssg326
(dp3541
sg328
(dp3542
g3467
(dp3543
g3523
(dp3544
g332
(lp3545
((g162
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3546
(ttp3547
g111
tp3548
asssg3488
(dp3549
sg3504
(dp3550
g3467
(dp3551
g332
(lp3552
(g3516
g169
tp3553
assg3523
(dp3554
g332
(lp3555
(g3514
g249
tp3556
a(g2724
g169
tp3557
a(g3517
g229
tp3558
a(g3513
g228
tp3559
asssg3523
(dp3560
g3488
(dp3561
g332
(lp3562
(g261
g3497
tp3563
a(g162
g3498
tp3564
assssg374
g3542
sg375
(dp3565
g3467
(dp3566
g3504
g3551
ssg3488
(dp3567
g3523
g3561
ssg3504
(dp3568
sg3523
(dp3569
g3467
g3544
sg3504
g3554
sssg383
g3542
sbsg43
g3484
sg46
g1067
sg56
g3484
sg57
g384
((lp3570
(lp3571
g387
ag384
((lp3572
(lp3573
g390
ag387
aa(lp3574
g392
ag393
aa(lp3575
g395
ag396
aa(lp3576
g398
ag399
aa(lp3577
g401
ag402
aa(lp3578
g404
ag405
aa(lp3579
g407
ag408
aa(lp3580
g410
ag411
aatp3581
Rp3582
aa(lp3583
g415
ag384
((lp3584
(lp3585
g390
ag415
aa(lp3586
g419
ag420
aa(lp3587
g422
ag423
aa(lp3588
g425
ag426
aa(lp3589
g428
ag429
aa(lp3590
g431
ag432
aa(lp3591
g434
ag435
aa(lp3592
g437
ag438
aa(lp3593
g440
ag441
aa(lp3594
g443
ag444
aa(lp3595
g446
ag447
aa(lp3596
g449
ag450
aa(lp3597
g452
ag453
aa(lp3598
g455
ag456
aa(lp3599
g458
ag459
aa(lp3600
g461
ag462
aa(lp3601
g464
ag465
aa(lp3602
g467
ag468
aa(lp3603
g470
ag471
aatp3604
Rp3605
aa(lp3606
g475
ag384
((lp3607
(lp3608
g390
ag475
aa(lp3609
g479
ag480
aatp3610
Rp3611
aatp3612
Rp3613
sg61
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g18
g7
Ntp3620
Rp3621
(dp3622
g22
(dp3623
sg24
g5
(g1421
g7
Ntp3624
Rp3625
(dp3626
g1425
(lp3627
S'measure_file'
p3628
asg29
g30
(g1429
tp3629
Rp3630
(dp3631
g109
I00
sg35
g36
sg1435
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g95
sbsg1437
(dp3633
S'snr_storefl'
p3634
Nssg1439
(lp3635
g3634
asg1441
Nsbsg42
Nsg43
S'snr_val0'
p3636
sg44
(dp3637
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3636
sg57
Nsg58
(lp3638
sg60
Nsg61
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g18
g7
Ntp3648
Rp3649
(dp3650
g22
(dp3651
sg24
g5
(g1421
g7
Ntp3652
Rp3653
(dp3654
g1425
(lp3655
g3628
ag1863
asg29
g30
(g1429
tp3656
Rp3657
(dp3658
g109
I00
sg35
g36
sg1435
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g95
sg1863
S'snr'
p3660
sbsg1437
(dp3661
g1870
Nssg1439
(lp3662
g1870
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp3663
sg51
Nsg48
Nsg60
Nsg43
S'hist_snr_0'
p3664
sg46
g1067
sg50
I00
sg52
Nsg55
I00
sg56
g3664
sg57
Nsg58
(lp3665
sg61
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g18
g7
Ntp3678
Rp3679
(dp3680
g22
(dp3681
sg24
g5
(g25
g7
Ntp3682
Rp3683
(dp3684
g29
g30
(g31
tp3685
Rp3686
(dp3687
g35
g36
sS'scan'
p3688
g95
sg1972
g95
sS'subject'
p3689
g95
sbsg39
(lp3690
g3689
ag1972
ag3688
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp3691
sg46
S'func_gather_0'
p3692
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp3693
sg60
Nsg61
Nsb(dp3694
sg5
(g18
g7
Ntp3695
Rp3696
(dp3697
g22
(dp3698
sg24
g5
(g25
g7
Ntp3699
Rp3700
(dp3701
g29
g30
(g31
tp3702
Rp3703
(dp3704
g35
g36
sg3688
g95
sg3689
S'6_1241099874'
p3705
sbsg39
(lp3706
g3689
ag3688
asg41
I01
sbsg42
Nsg43
S'inputnode'
p3707
sg44
(dp3708
sg46
g3692
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
(lp3709
(g3688
(lp3710
S'rest_1_rest'
p3711
atp3712
asg55
I00
sg56
g3707
sg57
Nsg58
(lp3713
sg60
Nsg61
Nsb(dp3714
sg5
(g18
g7
Ntp3715
Rp3716
(dp3717
g22
(dp3718
sg24
g5
(g1421
g7
Ntp3719
Rp3720
(dp3721
g1425
(lp3722
g3688
aS'rest_dict'
p3723
asg29
g30
(g1429
tp3724
Rp3725
(dp3726
g109
I00
sg3723
(dp3727
g3711
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-18/KKI2009-18-fMRI.nii'
p3728
ssg1435
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3729
sg35
g36
sg3688
g95
sbsg1437
(dp3730
g1972
Nssg1439
(lp3731
g1972
asg1441
Nsbsg42
Nsg43
S'selectrest'
p3732
sg44
(dp3733
sg46
g3692
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3732
sg57
Nsg58
(lp3734
sg60
Nsg61
Nsb(dp3735
ssg326
(dp3736
sg328
(dp3737
g3679
(dp3738
sg3696
(dp3739
g3716
(dp3740
g332
(lp3741
(g3688
g3688
tp3742
assg3679
(dp3743
g332
(lp3744
(g3689
g3689
tp3745
a(g3688
g3688
tp3746
asssg3716
(dp3747
g3679
(dp3748
g332
(lp3749
(g1972
g1972
tp3750
assssg374
g3737
sg375
(dp3751
g3679
(dp3752
g3696
g3743
sg3716
g3748
ssg3696
(dp3753
sg3716
(dp3754
g3696
g3740
sssg383
g3737
sbsg43
g3692
sg46
g1067
sg56
g3692
sg57
g384
((lp3755
(lp3756
g387
ag384
((lp3757
(lp3758
g390
ag387
aa(lp3759
g392
ag393
aa(lp3760
g395
ag396
aa(lp3761
g398
ag399
aa(lp3762
g401
ag402
aa(lp3763
g404
ag405
aa(lp3764
g407
ag408
aa(lp3765
g410
ag411
aatp3766
Rp3767
aa(lp3768
g415
ag384
((lp3769
(lp3770
g390
ag415
aa(lp3771
g419
ag420
aa(lp3772
g422
ag423
aa(lp3773
g425
ag426
aa(lp3774
g428
ag429
aa(lp3775
g431
ag432
aa(lp3776
g434
ag435
aa(lp3777
g437
ag438
aa(lp3778
g440
ag441
aa(lp3779
g443
ag444
aa(lp3780
g446
ag447
aa(lp3781
g449
ag450
aa(lp3782
g452
ag453
aa(lp3783
g455
ag456
aa(lp3784
g458
ag459
aa(lp3785
g461
ag462
aa(lp3786
g464
ag465
aa(lp3787
g467
ag468
aa(lp3788
g470
ag471
aatp3789
Rp3790
aa(lp3791
g475
ag384
((lp3792
(lp3793
g390
ag475
aa(lp3794
g479
ag480
aatp3795
Rp3796
aatp3797
Rp3798
sg61
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g18
g7
Ntp3808
Rp3809
(dp3810
g22
(dp3811
sg24
g5
(g1145
g7
Ntp3812
Rp3813
(dp3814
g29
g30
(g1149
tp3815
Rp3816
(dp3817
g109
I00
sg1153
g95
sg169
g95
sg1154
g95
sg162
g95
sg258
g95
sg111
g95
sg232
g95
sg1155
g95
sg1156
g1820
sg114
g115
sg121
g5
(g122
g123
(dp3818
g125
g126
stp3819
Rp3820
(dp3821
g130
S'environ_items'
p3822
sg43
g121
sbsg1162
g95
sg1163
g95
sg132
g126
sg1164
g95
sg1165
g95
sg35
g36
sg1166
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'func_mni_fsl_warp_0'
p3823
sg44
(dp3824
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3823
sg57
Nsg58
(lp3825
sg60
Nsg61
Nsbg162
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g18
g7
Ntp3835
Rp3836
(dp3837
g22
(dp3838
sg24
g5
(g25
g7
Ntp3839
Rp3840
(dp3841
g29
g30
(g31
tp3842
Rp3843
(dp3844
g35
g36
sS'mask_outputs'
p3845
g95
sbsg39
(lp3846
g3845
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp3847
sg46
S'voxel_timeseries_0'
p3848
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp3849
sg60
Nsg61
Nsb(dp3850
sg5
(g18
g7
Ntp3851
Rp3852
(dp3853
g22
(dp3854
sg24
g5
(g25
g7
Ntp3855
Rp3856
(dp3857
g29
g30
(g31
tp3858
Rp3859
(dp3860
g35
g36
sg132
(lp3861
I01
aI01
asg1972
g95
sbsg39
(lp3862
g1972
ag132
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp3863
sg46
g3848
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp3864
sg60
Nsg61
Nsb(dp3865
sg5
(g18
g7
Ntp3866
Rp3867
(dp3868
g22
(dp3869
sg24
g5
(g1421
g7
Ntp3870
Rp3871
(dp3872
g1425
(lp3873
S'data_file'
p3874
aS'template'
p3875
ag132
asg29
g30
(g1429
tp3876
Rp3877
(dp3878
g109
I00
sg35
g36
sg3874
g95
sg1435
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3879
sg3875
g95
sg132
g95
sbsg1437
(dp3880
g162
Nssg1439
(lp3881
g162
asg1441
Nsbsg42
Nsg43
S'timeseries_voxel'
p3882
sg44
(dp3883
sg46
g3848
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3882
sg57
Nsg58
(lp3884
sg60
Nsg61
Nsb(dp3885
sg5
(g18
g7
Ntp3886
Rp3887
(dp3888
g22
(dp3889
sg24
g5
(g25
g7
Ntp3890
Rp3891
(dp3892
g29
g30
(g31
tp3893
Rp3894
(dp3895
g35
g36
sg1973
g95
sbsg39
(lp3896
g1973
asg41
I01
sbsg42
Nsg43
S'input_mask'
p3897
sg44
(dp3898
sg46
g3848
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3897
sg57
Nsg58
(lp3899
sg60
Nsg61
Nsb(dp3900
ssg326
(dp3901
sg328
(dp3902
g3836
(dp3903
sg3852
(dp3904
g3867
(dp3905
g332
(lp3906
(g1972
g3874
tp3907
a(g132
g132
tp3908
asssg3867
(dp3909
g3836
(dp3910
g332
(lp3911
(g162
g3845
tp3912
asssg3887
(dp3913
g3867
(dp3914
g332
(lp3915
(g1973
g3875
tp3916
assssg374
g3902
sg375
(dp3917
g3836
(dp3918
g3867
g3910
ssg3852
(dp3919
sg3867
(dp3920
g3852
g3905
sg3887
g3914
ssg3887
(dp3921
ssg383
g3902
sbsg43
g3848
sg46
g1067
sg56
g3848
sg57
g384
((lp3922
(lp3923
g387
ag384
((lp3924
(lp3925
g390
ag387
aa(lp3926
g392
ag393
aa(lp3927
g395
ag396
aa(lp3928
g398
ag399
aa(lp3929
g401
ag402
aa(lp3930
g404
ag405
aa(lp3931
g407
ag408
aa(lp3932
g410
ag411
aatp3933
Rp3934
aa(lp3935
g415
ag384
((lp3936
(lp3937
g390
ag415
aa(lp3938
g419
ag420
aa(lp3939
g422
ag423
aa(lp3940
g425
ag426
aa(lp3941
g428
ag429
aa(lp3942
g431
ag432
aa(lp3943
g434
ag435
aa(lp3944
g437
ag438
aa(lp3945
g440
ag441
aa(lp3946
g443
ag444
aa(lp3947
g446
ag447
aa(lp3948
g449
ag450
aa(lp3949
g452
ag453
aa(lp3950
g455
ag456
aa(lp3951
g458
ag459
aa(lp3952
g461
ag462
aa(lp3953
g464
ag465
aa(lp3954
g467
ag468
aa(lp3955
g470
ag471
aatp3956
Rp3957
aa(lp3958
g475
ag384
((lp3959
(lp3960
g390
ag475
aa(lp3961
g479
ag480
aatp3962
Rp3963
aatp3964
Rp3965
sg61
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g18
g7
Ntp3986
Rp3987
(dp3988
g22
(dp3989
sg24
g5
(g1421
g7
Ntp3990
Rp3991
(dp3992
g1425
(lp3993
g1472
asg29
g30
(g1429
tp3994
Rp3995
(dp3996
g109
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3997
sg1472
g95
sg35
g36
sbsg1437
(dp3998
g1478
Nssg1439
(lp3999
g1478
asg1441
Nsbsg42
Nsg43
g1516
sg44
(dp4000
sg46
S'montage_mni_anat_0'
p4001
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1516
sg57
Nsg58
(lp4002
sg60
Nsg61
Nsb(dp4003
sg5
(g18
g7
Ntp4004
Rp4005
(dp4006
g22
(dp4007
sg24
g5
(g1421
g7
Ntp4008
Rp4009
(dp4010
g1425
(lp4011
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp4012
Rp4013
(dp4014
g109
I00
sg1427
S'mni_anat_a.png'
p4015
sg1410
g95
sg1428
g1434
sg1435
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4016
sg1409
g95
sg35
g36
sbsg1437
(dp4017
g1427
Nssg1439
(lp4018
g1427
asg1441
Nsbsg42
Nsg43
g1499
sg44
(dp4019
sg46
g4001
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1499
sg57
Nsg58
(lp4020
sg60
Nsg61
Nsb(dp4021
sg5
(g18
g7
Ntp4022
Rp4023
(dp4024
g22
(dp4025
sg24
g5
(g25
g7
Ntp4026
Rp4027
(dp4028
g29
g30
(g31
tp4029
Rp4030
(dp4031
g35
g36
sg1409
g95
sg1410
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p4032
sbsg39
(lp4033
g1409
ag1410
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp4034
sg46
g4001
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp4035
sg60
Nsg61
Nsb(dp4036
sg5
(g18
g7
Ntp4037
Rp4038
(dp4039
g22
(dp4040
sg24
g5
(g1421
g7
Ntp4041
Rp4042
(dp4043
g1425
(lp4044
g1472
asg29
g30
(g1429
tp4045
Rp4046
(dp4047
g109
I00
sg1435
g3997
sg1472
g95
sg35
g36
sbsg1437
(dp4048
g1478
Nssg1439
(lp4049
g1478
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp4050
sg51
Nsg48
Nsg60
Nsg43
g1481
sg46
g4001
sg50
I00
sg52
Nsg55
I00
sg56
g1481
sg57
Nsg58
(lp4051
sg61
Nsb(dp4052
sg5
(g18
g7
Ntp4053
Rp4054
(dp4055
g22
(dp4056
sg24
g5
(g1421
g7
Ntp4057
Rp4058
(dp4059
g1425
(lp4060
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp4061
Rp4062
(dp4063
g109
I00
sg1427
S'mni_anat_s.png'
p4064
sg1410
g95
sg1428
g1434
sg1435
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4065
sg1409
g95
sg35
g36
sbsg1437
(dp4066
g1427
Nssg1439
(lp4067
g1427
asg1441
Nsbsg42
Nsg43
g1442
sg44
(dp4068
sg46
g4001
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1442
sg57
Nsg58
(lp4069
sg60
Nsg61
Nsb(dp4070
sg5
(g18
g7
Ntp4071
Rp4072
(dp4073
g22
(dp4074
sg24
g5
(g25
g7
Ntp4075
Rp4076
(dp4077
g29
g30
(g31
tp4078
Rp4079
(dp4080
g35
g36
sg1456
g95
sg1457
g95
sg1458
g95
sg1459
g95
sbsg39
(lp4081
g1457
ag1458
ag1456
ag1459
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp4082
sg46
g4001
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp4083
sg60
Nsg61
Nsb(dp4084
ssg326
(dp4085
sg328
(dp4086
g3987
(dp4087
g4005
(dp4088
g332
(lp4089
(g1478
g1409
tp4090
assg4072
(dp4091
g332
(lp4092
(g1478
g1456
tp4093
assg4054
(dp4094
g332
(lp4095
(g1478
g1409
tp4096
asssg4005
(dp4097
g4072
(dp4098
g332
(lp4099
(g1427
g1457
tp4100
asssg4023
(dp4101
g3987
(dp4102
g332
(lp4103
(g1409
g1472
tp4104
assg4038
(dp4105
g332
(lp4106
(g1410
g1472
tp4107
asssg4038
(dp4108
g4005
(dp4109
g332
(lp4110
(g1478
g1410
tp4111
assg4072
(dp4112
g332
(lp4113
(g1478
g1459
tp4114
assg4054
(dp4115
g332
(lp4116
(g1478
g1410
tp4117
asssg4054
(dp4118
g4072
(dp4119
g332
(lp4120
(g1427
g1458
tp4121
asssg4072
(dp4122
ssg374
g4086
sg375
(dp4123
g3987
(dp4124
g4023
g4102
ssg4005
(dp4125
g3987
g4088
sg4038
g4109
ssg4023
(dp4126
sg4038
(dp4127
g4023
g4105
ssg4054
(dp4128
g3987
g4094
sg4038
g4115
ssg4072
(dp4129
g3987
g4091
sg4054
g4119
sg4038
g4112
sg4005
g4098
sssg383
g4086
sbsg43
g4001
sg46
g1067
sg56
g4001
sg57
g384
((lp4130
(lp4131
g387
ag384
((lp4132
(lp4133
g390
ag387
aa(lp4134
g392
ag393
aa(lp4135
g395
ag396
aa(lp4136
g398
ag399
aa(lp4137
g401
ag402
aa(lp4138
g404
ag405
aa(lp4139
g407
ag408
aa(lp4140
g410
ag411
aatp4141
Rp4142
aa(lp4143
g415
ag384
((lp4144
(lp4145
g390
ag415
aa(lp4146
g419
ag420
aa(lp4147
g422
ag423
aa(lp4148
g425
ag426
aa(lp4149
g428
ag429
aa(lp4150
g431
ag432
aa(lp4151
g434
ag435
aa(lp4152
g437
ag438
aa(lp4153
g440
ag441
aa(lp4154
g443
ag444
aa(lp4155
g446
ag447
aa(lp4156
g449
ag450
aa(lp4157
g452
ag453
aa(lp4158
g455
ag456
aa(lp4159
g458
ag459
aa(lp4160
g461
ag462
aa(lp4161
g464
ag465
aa(lp4162
g467
ag468
aa(lp4163
g470
ag471
aatp4164
Rp4165
aa(lp4166
g475
ag384
((lp4167
(lp4168
g390
ag475
aa(lp4169
g479
ag480
aatp4170
Rp4171
aatp4172
Rp4173
sg61
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg2054
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g18
g7
Ntp4188
Rp4189
(dp4190
g22
(dp4191
sg24
g5
(g1145
g7
Ntp4192
Rp4193
(dp4194
g29
g30
(g1149
tp4195
Rp4196
(dp4197
g109
I00
sg1153
g95
sg169
g95
sg1154
g95
sg162
g95
sg258
g95
sg111
g95
sg232
S'nn'
p4198
sg1155
g95
sg1156
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg114
g115
sg121
g5
(g122
g123
(dp4200
g125
g126
stp4201
Rp4202
(dp4203
g130
S'environ_items'
p4204
sg43
g121
sbsg1162
g95
sg1163
g95
sg132
g126
sg1164
g95
sg1165
g95
sg35
g36
sg1166
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'func_mni_fsl_warp_mask_0'
p4205
sg44
(dp4206
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4205
sg57
Nsg58
(lp4207
sg60
Nsg61
Nsbg162
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g18
g7
Ntp4217
Rp4218
(dp4219
g22
(dp4220
sg24
g5
(g1421
g7
Ntp4221
Rp4222
(dp4223
g1425
(lp4224
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp4225
Rp4226
(dp4227
g109
I00
sg1427
S'skull_vis_a.png'
p4228
sg1410
g95
sg1428
g1434
sg1435
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4229
sg1409
g95
sg35
g36
sbsg1437
(dp4230
g1427
Nssg1439
(lp4231
g1427
asg1441
Nsbsg42
Nsg43
g1499
sg44
(dp4232
sg46
S'montage_skull_0'
p4233
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1499
sg57
Nsg58
(lp4234
sg60
Nsg61
Nsb(dp4235
sg5
(g18
g7
Ntp4236
Rp4237
(dp4238
g22
(dp4239
sg24
g5
(g25
g7
Ntp4240
Rp4241
(dp4242
g29
g30
(g31
tp4243
Rp4244
(dp4245
g35
g36
sg1409
g95
sg1410
g95
sbsg39
(lp4246
g1409
ag1410
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp4247
sg46
g4233
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp4248
sg60
Nsg61
Nsb(dp4249
sg5
(g18
g7
Ntp4250
Rp4251
(dp4252
g22
(dp4253
sg24
g5
(g1421
g7
Ntp4254
Rp4255
(dp4256
g1425
(lp4257
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp4258
Rp4259
(dp4260
g109
I00
sg1427
S'skull_vis_s.png'
p4261
sg1410
g95
sg1428
g1434
sg1435
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4262
sg1409
g95
sg35
g36
sbsg1437
(dp4263
g1427
Nssg1439
(lp4264
g1427
asg1441
Nsbsg42
Nsg43
g1442
sg44
(dp4265
sg46
g4233
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1442
sg57
Nsg58
(lp4266
sg60
Nsg61
Nsb(dp4267
sg5
(g18
g7
Ntp4268
Rp4269
(dp4270
g22
(dp4271
sg24
g5
(g1421
g7
Ntp4272
Rp4273
(dp4274
g1425
(lp4275
g1472
asg29
g30
(g1429
tp4276
Rp4277
(dp4278
g109
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4279
sg1472
g95
sg35
g36
sbsg1437
(dp4280
g1478
Nssg1439
(lp4281
g1478
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp4282
sg51
Nsg48
Nsg60
Nsg43
g1481
sg46
g4233
sg50
I00
sg52
Nsg55
I00
sg56
g1481
sg57
Nsg58
(lp4283
sg61
Nsb(dp4284
sg5
(g18
g7
Ntp4285
Rp4286
(dp4287
g22
(dp4288
sg24
g5
(g1421
g7
Ntp4289
Rp4290
(dp4291
g1425
(lp4292
g1472
asg29
g30
(g1429
tp4293
Rp4294
(dp4295
g109
I00
sg1435
g4279
sg1472
g95
sg35
g36
sbsg1437
(dp4296
g1478
Nssg1439
(lp4297
g1478
asg1441
Nsbsg42
Nsg43
g1516
sg44
(dp4298
sg46
g4233
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1516
sg57
Nsg58
(lp4299
sg60
Nsg61
Nsb(dp4300
sg5
(g18
g7
Ntp4301
Rp4302
(dp4303
g22
(dp4304
sg24
g5
(g25
g7
Ntp4305
Rp4306
(dp4307
g29
g30
(g31
tp4308
Rp4309
(dp4310
g35
g36
sg1456
g95
sg1457
g95
sg1458
g95
sg1459
g95
sbsg39
(lp4311
g1457
ag1458
ag1456
ag1459
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp4312
sg46
g4233
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp4313
sg60
Nsg61
Nsb(dp4314
ssg326
(dp4315
sg328
(dp4316
g4218
(dp4317
g4302
(dp4318
g332
(lp4319
(g1427
g1457
tp4320
asssg4237
(dp4321
g4286
(dp4322
g332
(lp4323
(g1409
g1472
tp4324
assg4269
(dp4325
g332
(lp4326
(g1410
g1472
tp4327
asssg4251
(dp4328
g4302
(dp4329
g332
(lp4330
(g1427
g1458
tp4331
asssg4269
(dp4332
g4251
(dp4333
g332
(lp4334
(g1478
g1410
tp4335
assg4218
(dp4336
g332
(lp4337
(g1478
g1410
tp4338
assg4302
(dp4339
g332
(lp4340
(g1478
g1459
tp4341
asssg4286
(dp4342
g4251
(dp4343
g332
(lp4344
(g1478
g1409
tp4345
assg4218
(dp4346
g332
(lp4347
(g1478
g1409
tp4348
assg4302
(dp4349
g332
(lp4350
(g1478
g1456
tp4351
asssg4302
(dp4352
ssg374
g4316
sg375
(dp4353
g4218
(dp4354
g4286
g4346
sg4269
g4336
ssg4237
(dp4355
sg4251
(dp4356
g4286
g4343
sg4269
g4333
ssg4269
(dp4357
g4237
g4325
ssg4286
(dp4358
g4237
g4322
ssg4302
(dp4359
g4251
g4329
sg4218
g4318
sg4286
g4349
sg4269
g4339
sssg383
g4316
sbsg43
g4233
sg46
g1067
sg56
g4233
sg57
g384
((lp4360
(lp4361
g387
ag384
((lp4362
(lp4363
g390
ag387
aa(lp4364
g392
ag393
aa(lp4365
g395
ag396
aa(lp4366
g398
ag399
aa(lp4367
g401
ag402
aa(lp4368
g404
ag405
aa(lp4369
g407
ag408
aa(lp4370
g410
ag411
aatp4371
Rp4372
aa(lp4373
g415
ag384
((lp4374
(lp4375
g390
ag415
aa(lp4376
g419
ag420
aa(lp4377
g422
ag423
aa(lp4378
g425
ag426
aa(lp4379
g428
ag429
aa(lp4380
g431
ag432
aa(lp4381
g434
ag435
aa(lp4382
g437
ag438
aa(lp4383
g440
ag441
aa(lp4384
g443
ag444
aa(lp4385
g446
ag447
aa(lp4386
g449
ag450
aa(lp4387
g452
ag453
aa(lp4388
g455
ag456
aa(lp4389
g458
ag459
aa(lp4390
g461
ag462
aa(lp4391
g464
ag465
aa(lp4392
g467
ag468
aa(lp4393
g470
ag471
aatp4394
Rp4395
aa(lp4396
g475
ag384
((lp4397
(lp4398
g390
ag475
aa(lp4399
g479
ag480
aatp4400
Rp4401
aatp4402
Rp4403
sg61
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2491
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2492
(g5
(g18
g7
Ntp4413
Rp4414
(dp4415
g22
(dp4416
sg24
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g29
g30
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g109
I00
sg35
g36
sS'tpattern'
p4425
g95
sg162
g95
sS'tr'
p4426
g95
sg111
g95
sg232
g95
sg2257
g2258
sS'tzero'
p4427
g95
sS'ignore'
p4428
g95
sS'rltplus'
p4429
g95
sg114
g115
sS'tslice'
p4430
g95
sg169
g95
sS'rlt'
p4431
g95
sg121
g5
(g122
g123
(dp4432
tp4433
Rp4434
(dp4435
g130
S'environ_items'
p4436
sg43
g121
sbsbsg2270
g2258
sg135
Nsg136
g115
sbsg42
Nsg43
S'func_slice_timing_correction_0'
p4437
sg44
(dp4438
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4437
sg57
Nsg58
(lp4439
sg60
Nsg61
Nsbg162
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g18
g7
Ntp4449
Rp4450
(dp4451
g22
(dp4452
sg24
g5
(g25
g7
Ntp4453
Rp4454
(dp4455
g29
g30
(g31
tp4456
Rp4457
(dp4458
g35
g36
sg132
(lp4459
I01
aI01
asg1972
g95
sbsg39
(lp4460
g1972
ag132
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp4461
sg46
S'roi_timeseries_0'
p4462
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp4463
sg60
Nsg61
Nsb(dp4464
sg5
(g18
g7
Ntp4465
Rp4466
(dp4467
g22
(dp4468
sg24
g5
(g25
g7
Ntp4469
Rp4470
(dp4471
g29
g30
(g31
tp4472
Rp4473
(dp4474
g35
g36
sS'roi_outputs'
p4475
g95
sbsg39
(lp4476
g4475
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp4477
sg46
g4462
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp4478
sg60
Nsg61
Nsb(dp4479
sg5
(g18
g7
Ntp4480
Rp4481
(dp4482
g22
(dp4483
sg24
g5
(g1421
g7
Ntp4484
Rp4485
(dp4486
g1425
(lp4487
g3874
ag3875
ag132
asg29
g30
(g1429
tp4488
Rp4489
(dp4490
g109
I00
sg35
g36
sg3874
g95
sg1435
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4491
sg3875
g95
sg132
g95
sbsg1437
(dp4492
g162
Nssg1439
(lp4493
g162
asg1441
Nsbsg42
Nsg43
S'timeseries_roi'
p4494
sg44
(dp4495
sg46
g4462
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4494
sg57
Nsg58
(lp4496
sg60
Nsg61
Nsb(dp4497
sg5
(g18
g7
Ntp4498
Rp4499
(dp4500
g22
(dp4501
sg24
g5
(g25
g7
Ntp4502
Rp4503
(dp4504
g29
g30
(g31
tp4505
Rp4506
(dp4507
g35
g36
sS'roi'
p4508
g95
sbsg39
(lp4509
g4508
asg41
I01
sbsg42
Nsg43
S'input_roi'
p4510
sg44
(dp4511
sg46
g4462
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4510
sg57
Nsg58
(lp4512
sg60
Nsg61
Nsb(dp4513
ssg326
(dp4514
sg328
(dp4515
g4450
(dp4516
g4481
(dp4517
g332
(lp4518
(g1972
g3874
tp4519
a(g132
g132
tp4520
asssg4466
(dp4521
sg4481
(dp4522
g4466
(dp4523
g332
(lp4524
(g162
g4475
tp4525
asssg4499
(dp4526
g4481
(dp4527
g332
(lp4528
(g4508
g3875
tp4529
assssg374
g4515
sg375
(dp4530
g4450
(dp4531
sg4466
(dp4532
g4481
g4523
ssg4481
(dp4533
g4450
g4517
sg4499
g4527
ssg4499
(dp4534
ssg383
g4515
sbsg43
g4462
sg46
g1067
sg56
g4462
sg57
g384
((lp4535
(lp4536
g387
ag384
((lp4537
(lp4538
g390
ag387
aa(lp4539
g392
ag393
aa(lp4540
g395
ag396
aa(lp4541
g398
ag399
aa(lp4542
g401
ag402
aa(lp4543
g404
ag405
aa(lp4544
g407
ag408
aa(lp4545
g410
ag411
aatp4546
Rp4547
aa(lp4548
g415
ag384
((lp4549
(lp4550
g390
ag415
aa(lp4551
g419
ag420
aa(lp4552
g422
ag423
aa(lp4553
g425
ag426
aa(lp4554
g428
ag429
aa(lp4555
g431
ag432
aa(lp4556
g434
ag435
aa(lp4557
g437
ag438
aa(lp4558
g440
ag441
aa(lp4559
g443
ag444
aa(lp4560
g446
ag447
aa(lp4561
g449
ag450
aa(lp4562
g452
ag453
aa(lp4563
g455
ag456
aa(lp4564
g458
ag459
aa(lp4565
g461
ag462
aa(lp4566
g464
ag465
aa(lp4567
g467
ag468
aa(lp4568
g470
ag471
aatp4569
Rp4570
aa(lp4571
g475
ag384
((lp4572
(lp4573
g390
ag475
aa(lp4574
g479
ag480
aatp4575
Rp4576
aatp4577
Rp4578
sg61
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g18
g7
Ntp4589
Rp4590
(dp4591
g22
(dp4592
sg24
g5
(g219
g7
Ntp4593
Rp4594
(dp4595
g29
g30
(g223
tp4596
Rp4597
(dp4598
g227
g95
sg35
g36
sg228
g95
sg99
g95
sg229
g95
sg230
g95
sg231
g95
sg232
g233
sg234
g95
sg235
g95
sg236
g95
sg237
g95
sg238
g95
sg239
g95
sg240
g95
sg241
g95
sg242
g95
sg243
g95
sg169
g95
sg244
g95
sg245
g95
sg246
g95
sg247
g95
sg109
I00
sg248
g95
sg249
g95
sg111
S'-applyisoxfm 2'
p4599
sg250
g95
sg251
g95
sg114
g115
sg252
g95
sg253
g95
sg254
g95
sg255
g95
sg256
g95
sg162
g95
sg257
g95
sg258
g95
sg259
g95
sg260
g95
sg261
g95
sg262
g95
sg263
g95
sg264
g95
sg265
g95
sg121
g5
(g122
g123
(dp4600
g125
g126
stp4601
Rp4602
(dp4603
g130
S'environ_items'
p4604
sg43
g121
sbsg271
g95
sg272
g95
sg132
g126
sg273
g95
sg274
g95
sg275
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'ho_mni_to_2mm_flirt_applyxfm'
p4605
sg44
(dp4606
sg46
S'nuisance_0'
p4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4605
sg57
Nsg58
(lp4608
sg60
Nsg61
Nsb(dp4609
sg5
(g18
g7
Ntp4610
Rp4611
(dp4612
g22
(dp4613
sg24
g5
(g219
g7
Ntp4614
Rp4615
(dp4616
g29
g30
(g223
tp4617
Rp4618
(dp4619
g227
g95
sg35
g36
sg228
g95
sg99
g95
sg229
g95
sg230
g95
sg231
g95
sg232
g233
sg234
g95
sg235
g95
sg236
g95
sg237
g95
sg238
g95
sg239
g95
sg240
g95
sg241
g95
sg242
g95
sg243
g95
sg169
g95
sg244
g95
sg245
g95
sg246
g95
sg247
g95
sg109
I00
sg248
g95
sg249
g95
sg111
g4599
sg250
g95
sg251
g95
sg114
g115
sg252
g95
sg253
g95
sg254
g95
sg255
g95
sg256
g95
sg162
g95
sg257
g95
sg258
g95
sg259
g95
sg260
g95
sg261
g95
sg262
g95
sg263
g95
sg264
g95
sg265
g95
sg121
g5
(g122
g123
(dp4620
g125
g126
stp4621
Rp4622
(dp4623
g130
S'environ_items'
p4624
sg43
g121
sbsg271
g95
sg272
g95
sg132
g126
sg273
g95
sg274
g95
sg275
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'gm_anat_to_2mm_flirt_applyxfm'
p4625
sg44
(dp4626
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4625
sg57
Nsg58
(lp4627
sg60
Nsg61
Nsb(dp4628
sg5
(g18
g7
Ntp4629
Rp4630
(dp4631
g22
(dp4632
sg24
g5
(g25
g7
Ntp4633
Rp4634
(dp4635
g29
g30
(g31
tp4636
Rp4637
(dp4638
S'motion_components'
p4639
g95
sS'anat_to_mni_initial_xfm'
p4640
g95
sS'lat_ventricles_mask'
p4641
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4642
sg962
g95
sS'anat_to_mni_rigid_xfm'
p4643
g95
sS'compcor_ncomponents'
p4644
g95
sS'anat_to_mni_affine_xfm'
p4645
g95
sS'selector'
p4646
g95
sg961
g95
sS'template_brain'
p4647
g95
sg3497
g95
sS'mni_to_anat_linear_xfm'
p4648
g95
sg963
g95
sg35
g36
sg3689
g95
sbsg39
(lp4649
g3689
ag961
ag963
ag962
ag4648
ag4640
ag4643
ag4645
ag3497
ag4641
ag4639
ag4646
ag4644
ag4647
asg41
I01
sbsg42
Nsg43
g298
sg44
(dp4650
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp4651
sg60
Nsg61
Nsb(dp4652
sg5
(g18
g7
Ntp4653
Rp4654
(dp4655
g22
(dp4656
sg24
g5
(g219
g7
Ntp4657
Rp4658
(dp4659
g29
g30
(g223
tp4660
Rp4661
(dp4662
g227
g95
sg35
g36
sg228
g95
sg99
g95
sg229
g95
sg230
g95
sg231
g95
sg232
g233
sg234
g95
sg235
g95
sg236
g95
sg237
g95
sg238
g95
sg239
g95
sg240
g95
sg241
g95
sg242
g95
sg243
g95
sg169
g95
sg244
g95
sg245
g95
sg246
g95
sg247
g95
sg109
I00
sg248
g95
sg249
g95
sg111
g4599
sg250
g95
sg251
g95
sg114
g115
sg252
g95
sg253
g95
sg254
g95
sg255
g95
sg256
g95
sg162
g95
sg257
g95
sg258
g95
sg259
g95
sg260
g95
sg261
g95
sg262
g95
sg263
g95
sg264
g95
sg265
g95
sg121
g5
(g122
g123
(dp4663
g125
g126
stp4664
Rp4665
(dp4666
g130
S'environ_items'
p4667
sg43
g121
sbsg271
g95
sg272
g95
sg132
g126
sg273
g95
sg274
g95
sg275
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'csf_anat_to_2mm_flirt_applyxfm'
p4668
sg44
(dp4669
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4668
sg57
Nsg58
(lp4670
sg60
Nsg61
Nsb(dp4671
sg5
(g18
g7
Ntp4672
Rp4673
(dp4674
g22
(dp4675
sg24
g5
(g25
g7
Ntp4676
Rp4677
(dp4678
g29
g30
(g31
tp4679
Rp4680
(dp4681
g35
g36
sS'regressors'
p4682
g95
sg3689
g95
sbsg39
(lp4683
g3689
ag4682
asg41
I01
sbsg42
Nsg43
g211
sg44
(dp4684
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g211
sg57
Nsg58
(lp4685
sg60
Nsg61
Nsb(dp4686
sg5
(g18
g7
Ntp4687
Rp4688
(dp4689
g22
(dp4690
sg24
g5
(g1421
g7
Ntp4691
Rp4692
(dp4693
g1425
(lp4694
g3689
ag4646
aS'wm_sig_file'
p4695
aS'csf_sig_file'
p4696
aS'gm_sig_file'
p4697
aS'motion_file'
p4698
ag4644
asg29
g30
(g1429
tp4699
Rp4700
(dp4701
g109
I00
sg35
g36
sg4698
g95
sg4644
g95
sg1435
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4702
sg4696
g95
sg4695
g95
sg4697
g95
sg4646
g95
sg3689
g95
sbsg1437
(dp4703
S'regressors_file'
p4704
NsS'residual_file'
p4705
Nssg1439
(lp4706
g4705
ag4704
asg1441
Nsbsg42
Nsg43
S'residuals'
p4707
sg44
(dp4708
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
(lp4709
(g4646
(lp4710
(dp4711
S'global'
p4712
I0
sS'linear'
p4713
I1
sS'wm'
p4714
I0
sS'pc1'
p4715
I0
sS'motion'
p4716
I0
sS'quadratic'
p4717
I1
sS'gm'
p4718
I0
sS'compcor'
p4719
I1
sS'csf'
p4720
I1
satp4721
a(g4644
(lp4722
I5
atp4723
asg55
I00
sg56
g4707
sg57
Nsg58
(lp4724
sg60
Nsg61
Nsb(dp4725
sg5
(g18
g7
Ntp4726
Rp4727
(dp4728
g22
(dp4729
sg24
g5
(g1421
g7
Ntp4730
Rp4731
(dp4732
g1425
(lp4733
g3874
aS'ventricles_mask_file'
p4734
aS'wm_seg_file'
p4735
aS'csf_seg_file'
p4736
aS'gm_seg_file'
p4737
ag496
ag37
ag73
asg29
g30
(g1429
tp4738
Rp4739
(dp4740
g109
I00
sg35
g36
sg496
g95
sg37
g95
sg3874
g95
sg1435
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4741
sg4737
g95
sg4734
g95
sg73
g95
sg4736
g95
sg4735
g95
sbsg1437
(dp4742
S'file_gm'
p4743
NsS'file_wm'
p4744
NsS'file_csf'
p4745
Nssg1439
(lp4746
g4744
ag4745
ag4743
asg1441
Nsbsg42
Nsg43
S'tissue_masks'
p4747
sg44
(dp4748
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4747
sg57
Nsg58
(lp4749
sg60
Nsg61
Nsb(dp4750
sg5
(g18
g7
Ntp4751
Rp4752
(dp4753
g22
(dp4754
sg24
g5
(g219
g7
Ntp4755
Rp4756
(dp4757
g29
g30
(g223
tp4758
Rp4759
(dp4760
g227
g95
sg35
g36
sg228
g95
sg99
g95
sg229
g95
sg230
g95
sg231
g95
sg232
g233
sg234
g95
sg235
g95
sg236
g95
sg237
g95
sg238
g95
sg239
g95
sg240
g95
sg241
g95
sg242
g95
sg243
g95
sg169
g95
sg244
g95
sg245
g95
sg246
g95
sg247
g95
sg109
I00
sg248
g95
sg249
g95
sg111
g4599
sg250
g95
sg251
g95
sg114
g115
sg252
g95
sg253
g95
sg254
g95
sg255
g95
sg256
g95
sg162
g95
sg257
g95
sg258
g95
sg259
g95
sg260
g95
sg261
g95
sg262
g95
sg263
g95
sg264
g95
sg265
g95
sg121
g5
(g122
g123
(dp4761
g125
g126
stp4762
Rp4763
(dp4764
g130
S'environ_items'
p4765
sg43
g121
sbsg271
g95
sg272
g95
sg132
g126
sg273
g95
sg274
g95
sg275
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'wm_anat_to_2mm_flirt_applyxfm'
p4766
sg44
(dp4767
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4766
sg57
Nsg58
(lp4768
sg60
Nsg61
Nsb(dp4769
sg5
(g18
g7
Ntp4770
Rp4771
(dp4772
g22
(dp4773
sg24
g5
(g219
g7
Ntp4774
Rp4775
(dp4776
g29
g30
(g223
tp4777
Rp4778
(dp4779
g227
g95
sg35
g36
sg228
g95
sg99
g95
sg229
g95
sg230
g95
sg231
g95
sg232
g95
sg234
g95
sg235
g95
sg236
g95
sg237
g95
sg238
g95
sg239
g95
sg240
g95
sg241
g95
sg242
g95
sg243
g95
sg169
g95
sg244
g95
sg245
g95
sg246
g95
sg247
g95
sg109
I00
sg248
g95
sg249
g95
sg111
g4599
sg250
g95
sg251
g95
sg114
g115
sg252
g95
sg253
g95
sg254
g95
sg255
g95
sg256
g95
sg162
g95
sg257
g95
sg258
g95
sg259
g95
sg260
g95
sg261
g95
sg262
g95
sg263
g95
sg264
g95
sg265
g95
sg121
g5
(g122
g123
(dp4780
g125
g126
stp4781
Rp4782
(dp4783
g130
S'environ_items'
p4784
sg43
g121
sbsg271
g95
sg272
g95
sg132
g126
sg273
g95
sg274
g95
sg275
g95
sbsg134
g126
sg135
Nsg136
g115
sbsg42
Nsg43
S'func_to_2mm_flirt_applyxfm'
p4785
sg44
(dp4786
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4785
sg57
Nsg58
(lp4787
sg60
Nsg61
Nsb(dp4788
ssg326
(dp4789
sg328
(dp4790
g4590
(dp4791
g4727
(dp4792
g332
(lp4793
(g162
g4734
tp4794
asssg4611
(dp4795
g4727
(dp4796
g332
(lp4797
(g162
g4737
tp4798
asssg4630
(dp4799
g4590
(dp4800
g332
(lp4801
(g4648
g228
tp4802
a(g4641
g169
tp4803
a(g963
g229
tp4804
assg4688
(dp4805
g332
(lp4806
(g3689
g3689
tp4807
a(g4639
g4698
tp4808
a(g4646
g4646
tp4809
a(g4644
g4644
tp4810
assg4611
(dp4811
g332
(lp4812
(g962
g169
tp4813
a(g962
g229
tp4814
assg4771
(dp4815
g332
(lp4816
(g3689
g169
tp4817
a(g963
g229
tp4818
a(g3497
g228
tp4819
assg4752
(dp4820
g332
(lp4821
(g961
g169
tp4822
a(g961
g229
tp4823
assg4654
(dp4824
g332
(lp4825
(g963
g169
tp4826
a(g963
g229
tp4827
asssg4654
(dp4828
g4727
(dp4829
g332
(lp4830
(g162
g4736
tp4831
asssg4673
(dp4832
sg4688
(dp4833
g4673
(dp4834
g332
(lp4835
(g4705
g3689
tp4836
a(g4704
g4682
tp4837
asssg4727
(dp4838
g4688
(dp4839
g332
(lp4840
(g4744
g4695
tp4841
a(g4745
g4696
tp4842
a(g4743
g4697
tp4843
asssg4752
(dp4844
g4727
(dp4845
g332
(lp4846
(g162
g4735
tp4847
asssg4771
(dp4848
g4727
(dp4849
g332
(lp4850
(g162
g3874
tp4851
assssg374
g4790
sg375
(dp4852
g4590
(dp4853
g4630
g4800
ssg4611
(dp4854
g4630
g4811
ssg4630
(dp4855
sg4654
(dp4856
g4630
g4824
ssg4673
(dp4857
g4688
g4834
ssg4688
(dp4858
g4727
g4839
sg4630
g4805
ssg4727
(dp4859
g4590
g4792
sg4611
g4796
sg4654
g4829
sg4771
g4849
sg4752
g4845
ssg4752
(dp4860
g4630
g4820
ssg4771
(dp4861
g4630
g4815
sssg383
g4790
sbsg43
g4607
sg46
g1067
sg56
g4607
sg57
g384
((lp4862
(lp4863
g387
ag384
((lp4864
(lp4865
g390
ag387
aa(lp4866
g392
ag393
aa(lp4867
g395
ag396
aa(lp4868
g398
ag399
aa(lp4869
g401
ag402
aa(lp4870
g404
ag405
aa(lp4871
g407
ag408
aa(lp4872
g410
ag411
aatp4873
Rp4874
aa(lp4875
g415
ag384
((lp4876
(lp4877
g390
ag415
aa(lp4878
g419
ag420
aa(lp4879
g422
ag423
aa(lp4880
g425
ag426
aa(lp4881
g428
ag429
aa(lp4882
g431
ag432
aa(lp4883
g434
ag435
aa(lp4884
g437
ag438
aa(lp4885
g440
ag441
aa(lp4886
g443
ag444
aa(lp4887
g446
ag447
aa(lp4888
g449
ag450
aa(lp4889
g452
ag453
aa(lp4890
g455
ag456
aa(lp4891
g458
ag459
aa(lp4892
g461
ag462
aa(lp4893
g464
ag465
aa(lp4894
g467
ag468
aa(lp4895
g470
ag471
aatp4896
Rp4897
aa(lp4898
g475
ag384
((lp4899
(lp4900
g390
ag475
aa(lp4901
g479
ag480
aatp4902
Rp4903
aatp4904
Rp4905
sg61
NsbS'outputspec.subject'
p4906
tp4907
sg1996
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg1997
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Completed'
p4921
sS'strat_0'
p4922
(lp4923
g2239
ag1138
ag47
ag4437
ag2476
ag2893
aS'func_to_anat_FLIRT_0'
p4924
ag3484
ag1900
ag4607
ag3823
ag4462
ag3848
asg1949
g3705
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1430301661.259883
s.