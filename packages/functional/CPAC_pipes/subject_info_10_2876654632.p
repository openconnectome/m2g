(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(g6
g7
Ntp18
Rp19
(dp20
g11
g5
(g12
g7
Ntp21
Rp22
(dp23
g16
(dp24
g5
(cnipype.pipeline.engine
Node
p25
g7
Ntp26
Rp27
(dp28
S'input_source'
p29
(dp30
sS'_interface'
p31
g5
(cnipype.interfaces.utility
IdentityInterface
p32
g7
Ntp33
Rp34
(dp35
S'inputs'
p36
ctraits.traits
__newobj__
p37
(cnipype.interfaces.base
DynamicTraitedSpec
p38
tp39
Rp40
(dp41
S'standard2highres_rig'
p42
ctraits.trait_base
_Undefined
p43
(tRp44
sS'__traits_version__'
p45
S'4.5.0'
p46
sS'standard2highres_init'
p47
g44
sS'tissue_prior'
p48
g44
sS'standard2highres_mat'
p49
g44
sS'brain'
p50
g44
sS'probability_map'
p51
g44
sS'threshold'
p52
g44
sbsS'_fields'
p53
(lp54
g48
ag52
ag50
ag51
ag47
ag49
ag42
asS'_mandatory_inputs'
p55
I01
sbsS'_result'
p56
NsS'name'
p57
S'inputspec'
p58
sS'plugin_args'
p59
(dp60
sS'_hierarchy'
p61
S'WM'
p62
sS'itersource'
p63
NsS'run_without_submitting'
p64
I00
sS'synchronize'
p65
I00
sS'parameterization'
p66
NsS'iterables'
p67
NsS'_got_inputs'
p68
I00
sS'_id'
p69
g58
sS'config'
p70
NsS'needed_outputs'
p71
(lp72
sS'overwrite'
p73
NsS'base_dir'
p74
Nsb(dp75
sg5
(g25
g7
Ntp76
Rp77
(dp78
g29
(dp79
sg31
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p80
g7
Ntp81
Rp82
(dp83
g36
g37
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p84
tp85
Rp86
(dp87
S'ignore_exception'
p88
I00
sg45
g46
sS'op_string'
p89
g44
sS'out_data_type'
p90
g44
sS'out_file'
p91
g44
sS'args'
p92
g44
sS'in_file2'
p93
g44
sS'terminal_output'
p94
S'stream'
p95
sS'environ'
p96
g5
(ctraits.trait_handlers
TraitDictObject
p97
c__builtin__
dict
p98
(dp99
S'FSLOUTPUTTYPE'
p100
S'NIFTI_GZ'
p101
stp102
Rp103
(dp104
S'name_items'
p105
S'environ_items'
p106
sg57
g96
sbsS'in_file'
p107
g44
sS'output_type'
p108
g101
sS'suffix'
p109
g44
sbsS'_output_type'
p110
g101
sS'_environ'
p111
NsS'_terminal_output'
p112
g95
sbsg56
Nsg57
S'binarize_threshold_WM'
p113
sg59
(dp114
sg61
g62
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g113
sg70
Nsg71
(lp115
sg73
Nsg74
Nsb(dp116
sg5
(g25
g7
Ntp117
Rp118
(dp119
g29
(dp120
sg31
g5
(g32
g7
Ntp121
Rp122
(dp123
g36
g37
(g38
tp124
Rp125
(dp126
g45
g46
sS'segment_combo'
p127
g44
sS'segment_mask'
p128
g44
sS'tissueprior_mni2t1'
p129
g44
sS'segment_bin'
p130
g44
sbsg53
(lp131
g129
ag127
ag130
ag128
asg55
I01
sbsg56
Nsg57
S'outputspec'
p132
sg59
(dp133
sg61
g62
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp134
sg73
Nsg74
Nsb(dp135
sg5
(g25
g7
Ntp136
Rp137
(dp138
g29
(dp139
sg31
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p140
g7
Ntp141
Rp142
(dp143
g36
g37
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p144
tp145
Rp146
(dp147
g88
I00
sS'nan2zeros'
p148
g44
sg89
S'-mas %s '
p149
sg91
g44
sg92
g44
sS'internal_datatype'
p150
g44
sg45
g46
sg94
g95
sg96
g5
(g97
g98
(dp151
g100
g101
stp152
Rp153
(dp154
g105
S'environ_items'
p155
sg57
g96
sbsg107
g44
sg108
g101
sS'output_datatype'
p156
g44
sS'operand_files'
p157
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'overlap_WM_map_with_prior'
p158
sg59
(dp159
sg61
g62
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g158
sg70
Nsg71
(lp160
sg73
Nsg74
Nsb(dp161
sg5
(g25
g7
Ntp162
Rp163
(dp164
g29
(dp165
sg31
g5
(g140
g7
Ntp166
Rp167
(dp168
g36
g37
(g144
tp169
Rp170
(dp171
g88
I00
sg148
g44
sg89
g149
sg91
g44
sg92
g44
sg150
g44
sg45
g46
sg94
g95
sg96
g5
(g97
g98
(dp172
g100
g101
stp173
Rp174
(dp175
g105
S'environ_items'
p176
sg57
g96
sbsg107
g44
sg108
g101
sg156
g44
sg157
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'WM_mask'
p177
sg59
(dp178
sg61
g62
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g177
sg70
Nsg71
(lp179
sg73
Nsg74
Nsb(dp180
sg5
(g25
g7
Ntp181
Rp182
(dp183
g29
(dp184
sg31
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p185
g7
Ntp186
Rp187
(dp188
g36
g37
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p189
tp190
Rp191
(dp192
S'rigid2D'
p193
g44
sg45
g46
sS'in_matrix_file'
p194
g44
sS'verbose'
p195
g44
sS'reference'
p196
g44
sS'padding_size'
p197
g44
sS'sinc_window'
p198
g44
sS'interp'
p199
S'nearestneighbour'
p200
sS'wmnorms'
p201
g44
sS'coarse_search'
p202
g44
sS'no_resample'
p203
g44
sS'sinc_width'
p204
g44
sS'in_weight'
p205
g44
sS'fieldmap'
p206
g44
sS'echospacing'
p207
g44
sS'ref_weight'
p208
g44
sS'apply_isoxfm'
p209
g44
sS'fieldmapmask'
p210
g44
sg107
g44
sS'bbrtype'
p211
g44
sS'no_clamp'
p212
g44
sS'force_scaling'
p213
g44
sS'pedir'
p214
g44
sg88
I00
sS'display_init'
p215
g44
sS'schedule'
p216
g44
sg92
g44
sS'uses_qform'
p217
g44
sS'wmcoords'
p218
g44
sg94
g95
sS'fine_search'
p219
g44
sS'angle_rep'
p220
g44
sS'no_search'
p221
g44
sS'apply_xfm'
p222
I01
sS'wm_seg'
p223
g44
sg91
g44
sS'bbrslope'
p224
g44
sS'datatype'
p225
g44
sS'save_log'
p226
g44
sS'dof'
p227
g44
sS'out_matrix_file'
p228
g44
sS'no_resample_blur'
p229
g44
sS'min_sampling'
p230
g44
sS'cost_func'
p231
g44
sS'cost'
p232
g44
sg96
g5
(g97
g98
(dp233
g100
g101
stp234
Rp235
(dp236
g105
S'environ_items'
p237
sg57
g96
sbsS'searchr_x'
p238
g44
sS'out_log'
p239
g44
sg108
g101
sS'searchr_z'
p240
g44
sS'bins'
p241
g44
sS'searchr_y'
p242
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'WM_prior_mni_to_t1'
p243
sg59
(dp244
sg61
g62
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g243
sg70
Nsg71
(lp245
sg73
Nsg74
Nsb(dp246
ssS'graph'
p247
(dp248
sS'succ'
p249
(dp250
g27
(dp251
g137
(dp252
S'connect'
p253
(lp254
(g51
g107
tp255
assg182
(dp256
g253
(lp257
(g48
g107
tp258
a(g50
g196
tp259
a(g49
g194
tp260
assg77
(dp261
g253
(lp262
((g52
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p263
(ttp264
g89
tp265
asssg77
(dp266
g163
(dp267
g253
(lp268
(g91
g107
tp269
assg118
(dp270
g253
(lp271
(g91
g130
tp272
asssg118
(dp273
sg137
(dp274
g118
(dp275
g253
(lp276
(g91
g127
tp277
assg77
(dp278
g253
(lp279
(g91
g107
tp280
asssg163
(dp281
g118
(dp282
g253
(lp283
(g91
g128
tp284
asssg182
(dp285
g137
(dp286
g253
(lp287
(g91
g157
tp288
assg118
(dp289
g253
(lp290
(g91
g129
tp291
assg163
(dp292
g253
(lp293
(g91
g157
tp294
assssS'edge'
p295
g250
sS'pred'
p296
(dp297
g27
(dp298
sg77
(dp299
g137
g278
sg27
g261
ssg118
(dp300
g137
g275
sg163
g282
sg182
g289
sg77
g270
ssg137
(dp301
g27
g252
sg182
g286
ssg163
(dp302
g77
g267
sg182
g292
ssg182
(dp303
g27
g256
sssS'adj'
p304
g250
sbsg57
g62
sg61
S'seg_preproc_0'
p305
sg69
g62
sg70
ccollections
OrderedDict
p306
((lp307
(lp308
S'logging'
p309
ag306
((lp310
(lp311
S'__name__'
p312
ag309
aa(lp313
S'workflow_level'
p314
aS'INFO'
p315
aa(lp316
S'filemanip_level'
p317
aS'INFO'
p318
aa(lp319
S'interface_level'
p320
aS'INFO'
p321
aa(lp322
S'log_to_file'
p323
aS'True'
p324
aa(lp325
S'log_directory'
p326
aS'/mnt/ssd1/data/outputs/CPAC/CPAC_test1/outputs/logs/10_2876654632'
p327
aa(lp328
S'log_size'
p329
aS'16384000'
p330
aa(lp331
S'log_rotate'
p332
aS'4'
p333
aatp334
Rp335
aa(lp336
S'execution'
p337
ag306
((lp338
(lp339
g312
ag337
aa(lp340
S'create_report'
p341
aS'true'
p342
aa(lp343
S'crashdump_dir'
p344
aS'/home/eric/Documents/m2g/packages/functional/CPAC_pipes'
p345
aa(lp346
S'display_variable'
p347
aS':1'
p348
aa(lp349
S'hash_method'
p350
aS'timestamp'
p351
aa(lp352
S'job_finished_timeout'
p353
aS'5'
p354
aa(lp355
S'keep_inputs'
p356
aS'false'
p357
aa(lp358
S'local_hash_check'
p359
aS'true'
p360
aa(lp361
S'matplotlib_backend'
p362
aS'Agg'
p363
aa(lp364
S'plugin'
p365
aS'Linear'
p366
aa(lp367
S'remove_node_directories'
p368
aS'false'
p369
aa(lp370
S'remove_unnecessary_outputs'
p371
aS'true'
p372
aa(lp373
S'single_thread_matlab'
p374
aS'true'
p375
aa(lp376
S'stop_on_first_crash'
p377
aS'false'
p378
aa(lp379
S'stop_on_first_rerun'
p380
aS'false'
p381
aa(lp382
S'use_relative_paths'
p383
aS'false'
p384
aa(lp385
S'stop_on_unknown_version'
p386
aS'false'
p387
aa(lp388
S'write_provenance'
p389
aS'false'
p390
aa(lp391
S'parameterize_dirs'
p392
aS'true'
p393
aatp394
Rp395
aa(lp396
S'check'
p397
ag306
((lp398
(lp399
g312
ag397
aa(lp400
S'interval'
p401
aS'1209600'
p402
aatp403
Rp404
aatp405
Rp406
sg74
Nsb(dp407
sg5
(g25
g7
Ntp408
Rp409
(dp410
g29
(dp411
sg31
g5
(g32
g7
Ntp412
Rp413
(dp414
g36
g37
(g38
tp415
Rp416
(dp417
S'partial_volume_files'
p418
g44
sg45
g46
sS'gm_combo'
p419
g44
sS'mixeltype'
p420
g44
sS'csf_mni2t1'
p421
g44
sS'wm_bin'
p422
g44
sS'csf_bin'
p423
g44
sS'probability_maps'
p424
g44
sS'wm_mni2t1'
p425
g44
sS'csf_combo'
p426
g44
sS'wm_combo'
p427
g44
sS'wm_mask'
p428
g44
sS'gm_mask'
p429
g44
sS'csf_mask'
p430
g44
sS'gm_bin'
p431
g44
sS'partial_volume_map'
p432
g44
sS'gm_mni2t1'
p433
g44
sbsg53
(lp434
g421
ag426
ag423
ag430
ag433
ag419
ag431
ag429
ag425
ag427
ag422
ag424
ag420
ag432
ag418
ag428
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp435
sg61
g305
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp436
sg73
Nsg74
Nsb(dp437
sg5
(g25
g7
Ntp438
Rp439
(dp440
g29
(dp441
sg31
g5
(g32
g7
Ntp442
Rp443
(dp444
g36
g37
(g38
tp445
Rp446
(dp447
g45
g46
sS'csf_threshold'
p448
(lp449
F0.96
asbsg53
(lp450
g448
asg55
I01
sbsg56
Nsg57
g448
sg59
(dp451
sg61
g305
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
(g448
(lp452
F0.96
atp453
sg68
I00
sg69
g448
sg70
Nsg71
(lp454
sg73
Nsg74
Nsb(dp455
sg5
(g25
g7
Ntp456
Rp457
(dp458
g29
(dp459
sg31
g5
(g32
g7
Ntp460
Rp461
(dp462
g36
g37
(g38
tp463
Rp464
(dp465
g42
g44
sg45
g46
sg47
g44
sg50
g44
sS'PRIOR_GRAY'
p466
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p467
sg49
g44
sS'PRIOR_CSF'
p468
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p469
sS'PRIOR_WHITE'
p470
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p471
sbsg53
(lp472
g50
ag47
ag49
ag42
ag468
ag466
ag470
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp473
sg61
g305
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp474
sg73
Nsg74
Nsb(dp475
sg5
(g25
g7
Ntp476
Rp477
(dp478
g29
(dp479
sg31
g5
(g32
g7
Ntp480
Rp481
(dp482
g36
g37
(g38
tp483
Rp484
(dp485
g45
g46
sS'wm_threshold'
p486
(lp487
F0.96
asbsg53
(lp488
g486
asg55
I01
sbsg56
Nsg57
g486
sg59
(dp489
sg61
g305
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
(g486
(lp490
F0.96
atp491
sg68
I00
sg69
g486
sg70
Nsg71
(lp492
sg73
Nsg74
Nsb(dp493
sg5
(g25
g7
Ntp494
Rp495
(dp496
g29
(dp497
sg31
g5
(g32
g7
Ntp498
Rp499
(dp500
g36
g37
(g38
tp501
Rp502
(dp503
g45
g46
sS'gm_threshold'
p504
(lp505
F0.7
asbsg53
(lp506
g504
asg55
I01
sbsg56
Nsg57
g504
sg59
(dp507
sg61
g305
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
(g504
(lp508
F0.7
atp509
sg68
I00
sg69
g504
sg70
Nsg71
(lp510
sg73
Nsg74
Nsb(dp511
sg5
(g6
g7
Ntp512
Rp513
(dp514
g11
g5
(g12
g7
Ntp515
Rp516
(dp517
g16
(dp518
g5
(g25
g7
Ntp519
Rp520
(dp521
g29
(dp522
sg31
g5
(g80
g7
Ntp523
Rp524
(dp525
g36
g37
(g84
tp526
Rp527
(dp528
g88
I00
sg45
g46
sg89
g44
sg90
g44
sg91
g44
sg92
g44
sg93
g44
sg94
g95
sg96
g5
(g97
g98
(dp529
g100
g101
stp530
Rp531
(dp532
g105
S'environ_items'
p533
sg57
g96
sbsg107
g44
sg108
g101
sg109
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'binarize_threshold_GM'
p534
sg59
(dp535
sg61
S'GM'
p536
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g534
sg70
Nsg71
(lp537
sg73
Nsg74
Nsb(dp538
sg5
(g25
g7
Ntp539
Rp540
(dp541
g29
(dp542
sg31
g5
(g185
g7
Ntp543
Rp544
(dp545
g36
g37
(g189
tp546
Rp547
(dp548
g193
g44
sg45
g46
sg194
g44
sg195
g44
sg196
g44
sg197
g44
sg198
g44
sg199
g200
sg201
g44
sg202
g44
sg203
g44
sg204
g44
sg205
g44
sg206
g44
sg207
g44
sg208
g44
sg209
g44
sg210
g44
sg107
g44
sg211
g44
sg212
g44
sg213
g44
sg214
g44
sg88
I00
sg215
g44
sg216
g44
sg92
g44
sg217
g44
sg218
g44
sg94
g95
sg219
g44
sg220
g44
sg221
g44
sg222
I01
sg223
g44
sg91
g44
sg224
g44
sg225
g44
sg226
g44
sg227
g44
sg228
g44
sg229
g44
sg230
g44
sg231
g44
sg232
g44
sg96
g5
(g97
g98
(dp549
g100
g101
stp550
Rp551
(dp552
g105
S'environ_items'
p553
sg57
g96
sbsg238
g44
sg239
g44
sg108
g101
sg240
g44
sg241
g44
sg242
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'GM_prior_mni_to_t1'
p554
sg59
(dp555
sg61
g536
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g554
sg70
Nsg71
(lp556
sg73
Nsg74
Nsb(dp557
sg5
(g25
g7
Ntp558
Rp559
(dp560
g29
(dp561
sg31
g5
(g32
g7
Ntp562
Rp563
(dp564
g36
g37
(g38
tp565
Rp566
(dp567
g45
g46
sg127
g44
sg128
g44
sg129
g44
sg130
g44
sbsg53
(lp568
g129
ag127
ag130
ag128
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp569
sg61
g536
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp570
sg73
Nsg74
Nsb(dp571
sg5
(g25
g7
Ntp572
Rp573
(dp574
g29
(dp575
sg31
g5
(g32
g7
Ntp576
Rp577
(dp578
g36
g37
(g38
tp579
Rp580
(dp581
g42
g44
sg45
g46
sg47
g44
sg48
g44
sg49
g44
sg50
g44
sg51
g44
sg52
g44
sbsg53
(lp582
g48
ag52
ag50
ag51
ag47
ag49
ag42
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp583
sg61
g536
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp584
sg73
Nsg74
Nsb(dp585
sg5
(g25
g7
Ntp586
Rp587
(dp588
g29
(dp589
sg31
g5
(g140
g7
Ntp590
Rp591
(dp592
g36
g37
(g144
tp593
Rp594
(dp595
g88
I00
sg148
g44
sg89
g149
sg91
g44
sg92
g44
sg150
g44
sg45
g46
sg94
g95
sg96
g5
(g97
g98
(dp596
g100
g101
stp597
Rp598
(dp599
g105
S'environ_items'
p600
sg57
g96
sbsg107
g44
sg108
g101
sg156
g44
sg157
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'overlap_GM_map_with_prior'
p601
sg59
(dp602
sg61
g536
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g601
sg70
Nsg71
(lp603
sg73
Nsg74
Nsb(dp604
sg5
(g25
g7
Ntp605
Rp606
(dp607
g29
(dp608
sg31
g5
(g140
g7
Ntp609
Rp610
(dp611
g36
g37
(g144
tp612
Rp613
(dp614
g88
I00
sg148
g44
sg89
g149
sg91
g44
sg92
g44
sg150
g44
sg45
g46
sg94
g95
sg96
g5
(g97
g98
(dp615
g100
g101
stp616
Rp617
(dp618
g105
S'environ_items'
p619
sg57
g96
sbsg107
g44
sg108
g101
sg156
g44
sg157
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'GM_mask'
p620
sg59
(dp621
sg61
g536
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g620
sg70
Nsg71
(lp622
sg73
Nsg74
Nsb(dp623
ssg247
(dp624
sg249
(dp625
g520
(dp626
g559
(dp627
g253
(lp628
(g91
g130
tp629
assg606
(dp630
g253
(lp631
(g91
g107
tp632
asssg540
(dp633
g587
(dp634
g253
(lp635
(g91
g157
tp636
assg606
(dp637
g253
(lp638
(g91
g157
tp639
assg559
(dp640
g253
(lp641
(g91
g129
tp642
asssg559
(dp643
sg573
(dp644
g587
(dp645
g253
(lp646
(g51
g107
tp647
assg540
(dp648
g253
(lp649
(g48
g107
tp650
a(g50
g196
tp651
a(g49
g194
tp652
assg520
(dp653
g253
(lp654
((g52
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p655
(ttp656
g89
tp657
asssg587
(dp658
g520
(dp659
g253
(lp660
(g91
g107
tp661
assg559
(dp662
g253
(lp663
(g91
g127
tp664
asssg606
(dp665
g559
(dp666
g253
(lp667
(g91
g128
tp668
assssg295
g625
sg296
(dp669
g520
(dp670
g587
g659
sg573
g653
ssg540
(dp671
g573
g648
ssg559
(dp672
g606
g666
sg587
g662
sg540
g640
sg520
g627
ssg573
(dp673
sg587
(dp674
g573
g645
sg540
g634
ssg606
(dp675
g520
g630
sg540
g637
sssg304
g625
sbsg57
g536
sg61
g305
sg69
g536
sg70
g306
((lp676
(lp677
g309
ag306
((lp678
(lp679
g312
ag309
aa(lp680
g314
ag315
aa(lp681
g317
ag318
aa(lp682
g320
ag321
aa(lp683
g323
ag324
aa(lp684
g326
ag327
aa(lp685
g329
ag330
aa(lp686
g332
ag333
aatp687
Rp688
aa(lp689
g337
ag306
((lp690
(lp691
g312
ag337
aa(lp692
g341
ag342
aa(lp693
g344
ag345
aa(lp694
g347
ag348
aa(lp695
g350
ag351
aa(lp696
g353
ag354
aa(lp697
g356
ag357
aa(lp698
g359
ag360
aa(lp699
g362
ag363
aa(lp700
g365
ag366
aa(lp701
g368
ag369
aa(lp702
g371
ag372
aa(lp703
g374
ag375
aa(lp704
g377
ag378
aa(lp705
g380
ag381
aa(lp706
g383
ag384
aa(lp707
g386
ag387
aa(lp708
g389
ag390
aa(lp709
g392
ag393
aatp710
Rp711
aa(lp712
g397
ag306
((lp713
(lp714
g312
ag397
aa(lp715
g401
ag402
aatp716
Rp717
aatp718
Rp719
sg74
Nsb(dp720
sg5
(g25
g7
Ntp721
Rp722
(dp723
g29
(dp724
sg31
g5
(cnipype.interfaces.fsl.preprocess
FAST
p725
g7
Ntp726
Rp727
(dp728
g36
g37
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p729
tp730
Rp731
(dp732
S'number_classes'
p733
g44
sS'out_basename'
p734
S'segment'
p735
sS'hyper'
p736
g44
sg195
g44
sS'init_seg_smooth'
p737
g44
sS'init_transform'
p738
g44
sS'no_pve'
p739
g44
sS'output_biascorrected'
p740
g44
sS'mixel_smooth'
p741
g44
sS'segments'
p742
I01
sS'iters_afterbias'
p743
g44
sS'bias_lowpass'
p744
g44
sS'other_priors'
p745
g44
sg45
g46
sg88
I00
sS'img_type'
p746
I1
sg92
g44
sg424
I01
sS'manual_seg'
p747
g44
sg94
g95
sS'output_biasfield'
p748
g44
sS'no_bias'
p749
g44
sS'use_priors'
p750
g44
sS'in_files'
p751
g44
sS'segment_iters'
p752
g44
sg96
g5
(g97
g98
(dp753
g100
g101
stp754
Rp755
(dp756
g105
S'environ_items'
p757
sg57
g96
sbsg108
g101
sS'bias_iters'
p758
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
g735
sg59
(dp759
sg61
g305
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g735
sg70
Nsg71
(lp760
sg73
Nsg74
Nsb(dp761
sg5
(g6
g7
Ntp762
Rp763
(dp764
g11
g5
(g12
g7
Ntp765
Rp766
(dp767
g16
(dp768
g5
(g25
g7
Ntp769
Rp770
(dp771
g29
(dp772
sg31
g5
(g140
g7
Ntp773
Rp774
(dp775
g36
g37
(g144
tp776
Rp777
(dp778
g88
I00
sg148
g44
sg89
g149
sg91
g44
sg92
g44
sg150
g44
sg45
g46
sg94
g95
sg96
g5
(g97
g98
(dp779
g100
g101
stp780
Rp781
(dp782
g105
S'environ_items'
p783
sg57
g96
sbsg107
g44
sg108
g101
sg156
g44
sg157
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'CSF_mask'
p784
sg59
(dp785
sg61
S'CSF'
p786
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g784
sg70
Nsg71
(lp787
sg73
Nsg74
Nsb(dp788
sg5
(g25
g7
Ntp789
Rp790
(dp791
g29
(dp792
sg31
g5
(g185
g7
Ntp793
Rp794
(dp795
g36
g37
(g189
tp796
Rp797
(dp798
g193
g44
sg45
g46
sg194
g44
sg195
g44
sg196
g44
sg197
g44
sg198
g44
sg199
g200
sg201
g44
sg202
g44
sg203
g44
sg204
g44
sg205
g44
sg206
g44
sg207
g44
sg208
g44
sg209
g44
sg210
g44
sg107
g44
sg211
g44
sg212
g44
sg213
g44
sg214
g44
sg88
I00
sg215
g44
sg216
g44
sg92
g44
sg217
g44
sg218
g44
sg94
g95
sg219
g44
sg220
g44
sg221
g44
sg222
I01
sg223
g44
sg91
g44
sg224
g44
sg225
g44
sg226
g44
sg227
g44
sg228
g44
sg229
g44
sg230
g44
sg231
g44
sg232
g44
sg96
g5
(g97
g98
(dp799
g100
g101
stp800
Rp801
(dp802
g105
S'environ_items'
p803
sg57
g96
sbsg238
g44
sg239
g44
sg108
g101
sg240
g44
sg241
g44
sg242
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'CSF_prior_mni_to_t1'
p804
sg59
(dp805
sg61
g786
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g804
sg70
Nsg71
(lp806
sg73
Nsg74
Nsb(dp807
sg5
(g25
g7
Ntp808
Rp809
(dp810
g29
(dp811
sg31
g5
(g32
g7
Ntp812
Rp813
(dp814
g36
g37
(g38
tp815
Rp816
(dp817
g45
g46
sg127
g44
sg128
g44
sg129
g44
sg130
g44
sbsg53
(lp818
g129
ag127
ag130
ag128
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp819
sg61
g786
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp820
sg73
Nsg74
Nsb(dp821
sg5
(g25
g7
Ntp822
Rp823
(dp824
g29
(dp825
sg31
g5
(g80
g7
Ntp826
Rp827
(dp828
g36
g37
(g84
tp829
Rp830
(dp831
g88
I00
sg45
g46
sg89
g44
sg90
g44
sg91
g44
sg92
g44
sg93
g44
sg94
g95
sg96
g5
(g97
g98
(dp832
g100
g101
stp833
Rp834
(dp835
g105
S'environ_items'
p836
sg57
g96
sbsg107
g44
sg108
g101
sg109
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'binarize_threshold_CSF'
p837
sg59
(dp838
sg61
g786
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g837
sg70
Nsg71
(lp839
sg73
Nsg74
Nsb(dp840
sg5
(g25
g7
Ntp841
Rp842
(dp843
g29
(dp844
sg31
g5
(g32
g7
Ntp845
Rp846
(dp847
g36
g37
(g38
tp848
Rp849
(dp850
g42
g44
sg45
g46
sg47
g44
sg48
g44
sg49
g44
sg50
g44
sg51
g44
sg52
g44
sbsg53
(lp851
g48
ag52
ag50
ag51
ag47
ag49
ag42
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp852
sg61
g786
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp853
sg73
Nsg74
Nsb(dp854
sg5
(g25
g7
Ntp855
Rp856
(dp857
g29
(dp858
sg31
g5
(g140
g7
Ntp859
Rp860
(dp861
g36
g37
(g144
tp862
Rp863
(dp864
g88
I00
sg148
g44
sg89
g149
sg91
g44
sg92
g44
sg150
g44
sg45
g46
sg94
g95
sg96
g5
(g97
g98
(dp865
g100
g101
stp866
Rp867
(dp868
g105
S'environ_items'
p869
sg57
g96
sbsg107
g44
sg108
g101
sg156
g44
sg157
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'overlap_CSF_map_with_prior'
p870
sg59
(dp871
sg61
g786
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g870
sg70
Nsg71
(lp872
sg73
Nsg74
Nsb(dp873
ssg247
(dp874
sg249
(dp875
g770
(dp876
g809
(dp877
g253
(lp878
(g91
g128
tp879
asssg790
(dp880
g856
(dp881
g253
(lp882
(g91
g157
tp883
assg809
(dp884
g253
(lp885
(g91
g129
tp886
assg770
(dp887
g253
(lp888
(g91
g157
tp889
asssg809
(dp890
sg823
(dp891
g770
(dp892
g253
(lp893
(g91
g107
tp894
assg809
(dp895
g253
(lp896
(g91
g130
tp897
asssg842
(dp898
g856
(dp899
g253
(lp900
(g51
g107
tp901
assg790
(dp902
g253
(lp903
(g48
g107
tp904
a(g50
g196
tp905
a(g49
g194
tp906
assg823
(dp907
g253
(lp908
((g52
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p909
(ttp910
g89
tp911
asssg856
(dp912
g823
(dp913
g253
(lp914
(g91
g107
tp915
assg809
(dp916
g253
(lp917
(g91
g127
tp918
assssg295
g875
sg296
(dp919
g770
(dp920
g823
g892
sg790
g887
ssg790
(dp921
g842
g902
ssg809
(dp922
g856
g916
sg770
g877
sg790
g884
sg823
g895
ssg823
(dp923
g856
g913
sg842
g907
ssg842
(dp924
sg856
(dp925
g842
g899
sg790
g881
sssg304
g875
sbsg57
g786
sg61
g305
sg69
g786
sg70
g306
((lp926
(lp927
g309
ag306
((lp928
(lp929
g312
ag309
aa(lp930
g314
ag315
aa(lp931
g317
ag318
aa(lp932
g320
ag321
aa(lp933
g323
ag324
aa(lp934
g326
ag327
aa(lp935
g329
ag330
aa(lp936
g332
ag333
aatp937
Rp938
aa(lp939
g337
ag306
((lp940
(lp941
g312
ag337
aa(lp942
g341
ag342
aa(lp943
g344
ag345
aa(lp944
g347
ag348
aa(lp945
g350
ag351
aa(lp946
g353
ag354
aa(lp947
g356
ag357
aa(lp948
g359
ag360
aa(lp949
g362
ag363
aa(lp950
g365
ag366
aa(lp951
g368
ag369
aa(lp952
g371
ag372
aa(lp953
g374
ag375
aa(lp954
g377
ag378
aa(lp955
g380
ag381
aa(lp956
g383
ag384
aa(lp957
g386
ag387
aa(lp958
g389
ag390
aa(lp959
g392
ag393
aatp960
Rp961
aa(lp962
g397
ag306
((lp963
(lp964
g312
ag397
aa(lp965
g401
ag402
aatp966
Rp967
aatp968
Rp969
sg74
Nsb(dp970
ssg247
(dp971
sg249
(dp972
g19
(dp973
g409
(dp974
g253
(lp975
(S'outputspec.tissueprior_mni2t1'
p976
g425
tp977
a(S'outputspec.segment_combo'
p978
g427
tp979
a(S'outputspec.segment_bin'
p980
g422
tp981
a(S'outputspec.segment_mask'
p982
g428
tp983
asssg409
(dp984
sg439
(dp985
g763
(dp986
g253
(lp987
(g448
S'inputspec.threshold'
p988
tp989
asssg457
(dp990
g722
(dp991
g253
(lp992
(g50
g751
tp993
assg763
(dp994
g253
(lp995
(g50
S'inputspec.brain'
p996
tp997
a(g468
S'inputspec.tissue_prior'
p998
tp999
a(g49
S'inputspec.standard2highres_mat'
p1000
tp1001
assg513
(dp1002
g253
(lp1003
(g50
g996
tp1004
a(g466
g998
tp1005
a(g49
g1000
tp1006
assg19
(dp1007
g253
(lp1008
(g50
g996
tp1009
a(g470
g998
tp1010
a(g49
g1000
tp1011
asssg477
(dp1012
g19
(dp1013
g253
(lp1014
(g486
g988
tp1015
asssg495
(dp1016
g513
(dp1017
g253
(lp1018
(g504
g988
tp1019
asssg513
(dp1020
g409
(dp1021
g253
(lp1022
(g976
g433
tp1023
a(g978
g419
tp1024
a(g980
g431
tp1025
a(g982
g429
tp1026
asssg722
(dp1027
g409
(dp1028
g253
(lp1029
(g424
g424
tp1030
a(g420
g420
tp1031
a(g418
g418
tp1032
a(g432
g432
tp1033
assg763
(dp1034
g253
(lp1035
((g424
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1036
(ttp1037
S'inputspec.probability_map'
p1038
tp1039
assg513
(dp1040
g253
(lp1041
((g424
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1042
(ttp1043
g1038
tp1044
assg19
(dp1045
g253
(lp1046
((g424
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1047
(ttp1048
g1038
tp1049
asssg763
(dp1050
g409
(dp1051
g253
(lp1052
(g976
g421
tp1053
a(g978
g426
tp1054
a(g980
g423
tp1055
a(g982
g430
tp1056
assssg295
g972
sg296
(dp1057
g19
(dp1058
g457
g1007
sg477
g1013
sg722
g1045
ssg409
(dp1059
g722
g1028
sg763
g1051
sg513
g1021
sg19
g974
ssg439
(dp1060
sg457
(dp1061
sg477
(dp1062
sg495
(dp1063
sg513
(dp1064
g457
g1002
sg495
g1017
sg722
g1040
ssg722
(dp1065
g457
g991
ssg763
(dp1066
g439
g986
sg457
g994
sg722
g1034
sssg304
g972
sbsg57
g305
sg61
S'resting_preproc_10_2876654632'
p1067
sg69
g305
sg70
g306
((lp1068
(lp1069
g309
ag306
((lp1070
(lp1071
g312
ag309
aa(lp1072
g314
ag315
aa(lp1073
g317
ag318
aa(lp1074
g320
ag321
aa(lp1075
g323
ag324
aa(lp1076
g326
ag327
aa(lp1077
g329
ag330
aa(lp1078
g332
ag333
aatp1079
Rp1080
aa(lp1081
g337
ag306
((lp1082
(lp1083
g312
ag337
aa(lp1084
g341
ag342
aa(lp1085
g344
ag345
aa(lp1086
g347
ag348
aa(lp1087
g350
ag351
aa(lp1088
g353
ag354
aa(lp1089
g356
ag357
aa(lp1090
g359
ag360
aa(lp1091
g362
ag363
aa(lp1092
g365
ag366
aa(lp1093
g368
ag369
aa(lp1094
g371
ag372
aa(lp1095
g374
ag375
aa(lp1096
g377
ag378
aa(lp1097
g380
ag381
aa(lp1098
g383
ag384
aa(lp1099
g386
ag387
aa(lp1100
g389
ag390
aa(lp1101
g392
ag393
aatp1102
Rp1103
aa(lp1104
g397
ag306
((lp1105
(lp1106
g312
ag397
aa(lp1107
g401
ag402
aatp1108
Rp1109
aatp1110
Rp1111
sg74
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g25
g7
Ntp1122
Rp1123
(dp1124
g29
(dp1125
sg31
g5
(g185
g7
Ntp1126
Rp1127
(dp1128
g36
g37
(g189
tp1129
Rp1130
(dp1131
g193
g44
sg45
g46
sg194
g44
sg195
g44
sg196
g44
sg197
g44
sg198
g44
sg199
g44
sg201
g44
sg202
g44
sg203
g44
sg204
g44
sg205
g44
sg206
g44
sg207
g44
sg208
g44
sg209
g44
sg210
g44
sg107
g44
sg211
g44
sg212
g44
sg213
g44
sg214
g44
sg88
I00
sg215
g44
sg216
g44
sg92
g44
sg217
g44
sg218
g44
sg94
g95
sg219
g44
sg220
g44
sg221
g44
sg222
g44
sg223
g44
sg91
g44
sg224
g44
sg225
g44
sg226
g44
sg227
g44
sg228
g44
sg229
g44
sg230
g44
sg231
g44
sg232
S'corratio'
p1132
sg96
g5
(g97
g98
(dp1133
g100
g101
stp1134
Rp1135
(dp1136
g105
S'environ_items'
p1137
sg57
g96
sbsg238
g44
sg239
g44
sg108
g101
sg240
g44
sg241
g44
sg242
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'linear_reg_0'
p1138
sg59
(dp1139
sg61
S'anat_mni_fnirt_register_0'
p1140
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1138
sg70
Nsg71
(lp1141
sg73
Nsg74
Nsb(dp1142
sg5
(g25
g7
Ntp1143
Rp1144
(dp1145
g29
(dp1146
sg31
g5
(g32
g7
Ntp1147
Rp1148
(dp1149
g36
g37
(g38
tp1150
Rp1151
(dp1152
g45
g46
sS'output_brain'
p1153
g44
sS'nonlinear_xfm'
p1154
g44
sS'invlinear_xfm'
p1155
g44
sS'linear_xfm'
p1156
g44
sbsg53
(lp1157
g1153
ag1156
ag1155
ag1154
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp1158
sg61
g1140
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp1159
sg73
Nsg74
Nsb(dp1160
sg5
(g25
g7
Ntp1161
Rp1162
(dp1163
g29
(dp1164
sg31
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1165
g7
Ntp1166
Rp1167
(dp1168
g36
g37
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1169
tp1170
Rp1171
(dp1172
g45
g46
sS'derive_from_ref'
p1173
g44
sS'in_intensitymap_file'
p1174
g44
sS'modulatedref_file'
p1175
g44
sS'refmask_val'
p1176
g44
sS'hessian_precision'
p1177
g44
sS'in_fwhm'
p1178
g44
sS'skip_implicit_in_masking'
p1179
g44
sS'inmask_file'
p1180
g44
sS'refmask_file'
p1181
g44
sS'inwarp_file'
p1182
g44
sS'skip_lambda_ssq'
p1183
g44
sS'intensity_mapping_model'
p1184
g44
sS'affine_file'
p1185
g44
sS'apply_inmask'
p1186
g44
sS'spline_order'
p1187
g44
sS'apply_refmask'
p1188
g44
sS'subsampling_scheme'
p1189
g44
sg107
g44
sS'warped_file'
p1190
g44
sS'skip_refmask'
p1191
g44
sg88
I00
sS'ref_fwhm'
p1192
g44
sS'inmask_val'
p1193
g44
sS'config_file'
p1194
g44
sS'field_file'
p1195
g44
sg92
g44
sS'apply_intensity_mapping'
p1196
g44
sS'regularization_lambda'
p1197
g44
sg94
g95
sS'regularization_model'
p1198
g44
sS'jacobian_range'
p1199
g44
sS'out_intensitymap_file'
p1200
g44
sS'skip_implicit_ref_masking'
p1201
g44
sS'ref_file'
p1202
g44
sS'skip_inmask'
p1203
g44
sS'fieldcoeff_file'
p1204
I01
sS'warp_resolution'
p1205
g44
sS'jacobian_file'
p1206
I01
sg96
g5
(g97
g98
(dp1207
g100
g101
stp1208
Rp1209
(dp1210
g105
S'environ_items'
p1211
sg57
g96
sbsS'bias_regularization_lambda'
p1212
g44
sg108
g101
sS'skip_intensity_mapping'
p1213
g44
sS'log_file'
p1214
g44
sS'biasfield_resolution'
p1215
g44
sS'intensity_mapping_order'
p1216
g44
sS'max_nonlin_iter'
p1217
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'nonlinear_reg_1'
p1218
sg59
(dp1219
sg61
g1140
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1218
sg70
Nsg71
(lp1220
sg73
Nsg74
Nsb(dp1221
sg5
(g25
g7
Ntp1222
Rp1223
(dp1224
g29
(dp1225
sg31
g5
(g32
g7
Ntp1226
Rp1227
(dp1228
g36
g37
(g38
tp1229
Rp1230
(dp1231
S'fnirt_config'
p1232
S'T1_2_MNI152_2mm'
p1233
sg45
g46
sS'input_brain'
p1234
g44
sS'reference_skull'
p1235
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1236
sS'reference_brain'
p1237
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1238
sS'input_skull'
p1239
g44
sbsg53
(lp1240
g1234
ag1239
ag1237
ag1235
ag1232
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp1241
sg61
g1140
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp1242
sg73
Nsg74
Nsb(dp1243
sg5
(g25
g7
Ntp1244
Rp1245
(dp1246
g29
(dp1247
sg31
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1248
g7
Ntp1249
Rp1250
(dp1251
g36
g37
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1252
tp1253
Rp1254
(dp1255
g88
I00
sS'supersample'
p1256
g44
sg107
g44
sS'superlevel'
p1257
g44
sg91
g44
sg225
g44
sg92
g44
sg199
g44
sg1195
g44
sg1202
g44
sg94
g95
sg96
g5
(g97
g98
(dp1258
g100
g101
stp1259
Rp1260
(dp1261
g105
S'environ_items'
p1262
sg57
g96
sbsS'premat'
p1263
g44
sS'mask_file'
p1264
g44
sg108
g101
sS'relwarp'
p1265
g44
sS'abswarp'
p1266
g44
sg45
g46
sS'postmat'
p1267
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'brain_warp'
p1268
sg59
(dp1269
sg61
g1140
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1268
sg70
Nsg71
(lp1270
sg73
Nsg74
Nsb(dp1271
sg5
(g25
g7
Ntp1272
Rp1273
(dp1274
g29
(dp1275
sg31
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1276
g7
Ntp1277
Rp1278
(dp1279
g36
g37
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1280
tp1281
Rp1282
(dp1283
g88
I00
sg45
g46
sg91
g44
sg92
g44
sg93
g44
sS'fix_scale_skew'
p1284
g44
sS'invert_xfm'
p1285
I01
sg94
g95
sS'concat_xfm'
p1286
g44
sg107
g44
sg108
g101
sg96
g5
(g97
g98
(dp1287
g100
g101
stp1288
Rp1289
(dp1290
g105
S'environ_items'
p1291
sg57
g96
sbsbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'inv_linear_reg0_xfm'
p1292
sg59
(dp1293
sg61
g1140
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1292
sg70
Nsg71
(lp1294
sg73
Nsg74
Nsb(dp1295
ssg247
(dp1296
sg249
(dp1297
g1123
(dp1298
g1144
(dp1299
g253
(lp1300
(g228
g1156
tp1301
assg1162
(dp1302
g253
(lp1303
(g228
g1185
tp1304
assg1273
(dp1305
g253
(lp1306
(g228
g107
tp1307
asssg1144
(dp1308
sg1162
(dp1309
g1245
(dp1310
g253
(lp1311
(g1204
g1195
tp1312
assg1144
(dp1313
g253
(lp1314
(g1204
g1154
tp1315
asssg1223
(dp1316
g1245
(dp1317
g253
(lp1318
(g1234
g107
tp1319
a(g1237
g1202
tp1320
assg1123
(dp1321
g253
(lp1322
(g1234
g107
tp1323
a(g1237
g196
tp1324
assg1162
(dp1325
g253
(lp1326
(g1239
g107
tp1327
a(g1235
g1202
tp1328
a(g1232
g1194
tp1329
asssg1245
(dp1330
g1144
(dp1331
g253
(lp1332
(g91
g1153
tp1333
asssg1273
(dp1334
g1144
(dp1335
g253
(lp1336
(g91
g1155
tp1337
assssg295
g1297
sg296
(dp1338
g1123
(dp1339
g1223
g1321
ssg1144
(dp1340
g1245
g1331
sg1123
g1299
sg1162
g1313
sg1273
g1335
ssg1162
(dp1341
g1223
g1325
sg1123
g1302
ssg1223
(dp1342
sg1245
(dp1343
g1223
g1317
sg1162
g1310
ssg1273
(dp1344
g1123
g1305
sssg304
g1297
sbsg57
g1140
sg61
g1067
sg69
g1140
sg70
g306
((lp1345
(lp1346
g309
ag306
((lp1347
(lp1348
g312
ag309
aa(lp1349
g314
ag315
aa(lp1350
g317
ag318
aa(lp1351
g320
ag321
aa(lp1352
g323
ag324
aa(lp1353
g326
ag327
aa(lp1354
g329
ag330
aa(lp1355
g332
ag333
aatp1356
Rp1357
aa(lp1358
g337
ag306
((lp1359
(lp1360
g312
ag337
aa(lp1361
g341
ag342
aa(lp1362
g344
ag345
aa(lp1363
g347
ag348
aa(lp1364
g350
ag351
aa(lp1365
g353
ag354
aa(lp1366
g356
ag357
aa(lp1367
g359
ag360
aa(lp1368
g362
ag363
aa(lp1369
g365
ag366
aa(lp1370
g368
ag369
aa(lp1371
g371
ag372
aa(lp1372
g374
ag375
aa(lp1373
g377
ag378
aa(lp1374
g380
ag381
aa(lp1375
g383
ag384
aa(lp1376
g386
ag387
aa(lp1377
g389
ag390
aa(lp1378
g392
ag393
aatp1379
Rp1380
aa(lp1381
g397
ag306
((lp1382
(lp1383
g312
ag397
aa(lp1384
g401
ag402
aatp1385
Rp1386
aatp1387
Rp1388
sg74
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g25
g7
Ntp1399
Rp1400
(dp1401
g29
(dp1402
sg31
g5
(cnipype.interfaces.utility
Function
p1403
g7
Ntp1404
Rp1405
(dp1406
S'_input_names'
p1407
(lp1408
S'file_'
p1409
asg36
g37
(cnipype.interfaces.utility
FunctionInputSpec
p1410
tp1411
Rp1412
(dp1413
g88
I00
sS'function_str'
p1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1415
sg1409
g44
sg45
g46
sbsS'_out'
p1416
(dp1417
S'new_fname'
p1418
NssS'_output_names'
p1419
(lp1420
g1418
asS'imports'
p1421
Nsbsg56
Nsg64
I00
sg59
(dp1422
sg66
Nsg63
Nsg73
Nsg57
S'resample_o'
p1423
sg61
S'montage_mfi_0'
p1424
sg65
I00
sg67
Nsg68
I00
sg69
g1423
sg70
Nsg71
(lp1425
sg74
Nsb(dp1426
sg5
(g25
g7
Ntp1427
Rp1428
(dp1429
g29
(dp1430
sg31
g5
(g1403
g7
Ntp1431
Rp1432
(dp1433
g1407
(lp1434
S'overlay'
p1435
aS'underlay'
p1436
aS'png_name'
p1437
aS'cbar_name'
p1438
asg36
g37
(g1410
tp1439
Rp1440
(dp1441
g88
I00
sg1437
S'MNI_edge_on_mean_func_mni_a.png'
p1442
sg1435
g44
sg1438
S'red'
p1443
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1444
sg1436
g44
sg45
g46
sbsg1416
(dp1445
g1437
Nssg1419
(lp1446
g1437
asg1421
Nsbsg56
Nsg57
S'montage_a'
p1447
sg59
(dp1448
sg61
g1424
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1447
sg70
Nsg71
(lp1449
sg73
Nsg74
Nsb(dp1450
sg5
(g25
g7
Ntp1451
Rp1452
(dp1453
g29
(dp1454
sg31
g5
(g32
g7
Ntp1455
Rp1456
(dp1457
g36
g37
(g38
tp1458
Rp1459
(dp1460
g45
g46
sS'resampled_underlay'
p1461
g44
sS'axial_png'
p1462
g44
sS'sagittal_png'
p1463
g44
sS'resampled_overlay'
p1464
g44
sbsg53
(lp1465
g1462
ag1463
ag1461
ag1464
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp1466
sg61
g1424
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp1467
sg73
Nsg74
Nsb(dp1468
sg5
(g25
g7
Ntp1469
Rp1470
(dp1471
g29
(dp1472
sg31
g5
(g1403
g7
Ntp1473
Rp1474
(dp1475
g1407
(lp1476
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp1477
Rp1478
(dp1479
g88
I00
sg1437
S'MNI_edge_on_mean_func_mni_s.png'
p1480
sg1435
g44
sg1438
g1443
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1481
sg1436
g44
sg45
g46
sbsg1416
(dp1482
g1437
Nssg1419
(lp1483
g1437
asg1421
Nsbsg56
Nsg57
S'montage_s'
p1484
sg59
(dp1485
sg61
g1424
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1484
sg70
Nsg71
(lp1486
sg73
Nsg74
Nsb(dp1487
sg5
(g25
g7
Ntp1488
Rp1489
(dp1490
g29
(dp1491
sg31
g5
(g1403
g7
Ntp1492
Rp1493
(dp1494
g1407
(lp1495
g1409
asg36
g37
(g1410
tp1496
Rp1497
(dp1498
g88
I00
sg1414
g1415
sg1409
g44
sg45
g46
sbsg1416
(dp1499
g1418
Nssg1419
(lp1500
g1418
asg1421
Nsbsg56
Nsg57
S'resample_u'
p1501
sg59
(dp1502
sg61
g1424
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1501
sg70
Nsg71
(lp1503
sg73
Nsg74
Nsb(dp1504
sg5
(g25
g7
Ntp1505
Rp1506
(dp1507
g29
(dp1508
sg31
g5
(g32
g7
Ntp1509
Rp1510
(dp1511
g36
g37
(g38
tp1512
Rp1513
(dp1514
g45
g46
sg1436
g44
sg1435
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1515
sbsg53
(lp1516
g1436
ag1435
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp1517
sg61
g1424
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp1518
sg73
Nsg74
Nsb(dp1519
ssg247
(dp1520
sg249
(dp1521
g1400
(dp1522
g1428
(dp1523
g253
(lp1524
(g1418
g1435
tp1525
assg1452
(dp1526
g253
(lp1527
(g1418
g1464
tp1528
assg1470
(dp1529
g253
(lp1530
(g1418
g1435
tp1531
asssg1428
(dp1532
g1452
(dp1533
g253
(lp1534
(g1437
g1462
tp1535
asssg1452
(dp1536
sg1470
(dp1537
g1452
(dp1538
g253
(lp1539
(g1437
g1463
tp1540
asssg1489
(dp1541
g1428
(dp1542
g253
(lp1543
(g1418
g1436
tp1544
assg1452
(dp1545
g253
(lp1546
(g1418
g1461
tp1547
assg1470
(dp1548
g253
(lp1549
(g1418
g1436
tp1550
asssg1506
(dp1551
g1400
(dp1552
g253
(lp1553
(g1435
g1409
tp1554
assg1489
(dp1555
g253
(lp1556
(g1436
g1409
tp1557
assssg295
g1521
sg296
(dp1558
g1400
(dp1559
g1506
g1552
ssg1428
(dp1560
g1400
g1523
sg1489
g1542
ssg1452
(dp1561
g1470
g1538
sg1400
g1526
sg1489
g1545
sg1428
g1533
ssg1470
(dp1562
g1400
g1529
sg1489
g1548
ssg1489
(dp1563
g1506
g1555
ssg1506
(dp1564
ssg304
g1521
sbsg57
g1424
sg61
g1067
sg69
g1424
sg70
g306
((lp1565
(lp1566
g309
ag306
((lp1567
(lp1568
g312
ag309
aa(lp1569
g314
ag315
aa(lp1570
g317
ag318
aa(lp1571
g320
ag321
aa(lp1572
g323
ag324
aa(lp1573
g326
ag327
aa(lp1574
g329
ag330
aa(lp1575
g332
ag333
aatp1576
Rp1577
aa(lp1578
g337
ag306
((lp1579
(lp1580
g312
ag337
aa(lp1581
g341
ag342
aa(lp1582
g344
ag345
aa(lp1583
g347
ag348
aa(lp1584
g350
ag351
aa(lp1585
g353
ag354
aa(lp1586
g356
ag357
aa(lp1587
g359
ag360
aa(lp1588
g362
ag363
aa(lp1589
g365
ag366
aa(lp1590
g368
ag369
aa(lp1591
g371
ag372
aa(lp1592
g374
ag375
aa(lp1593
g377
ag378
aa(lp1594
g380
ag381
aa(lp1595
g383
ag384
aa(lp1596
g386
ag387
aa(lp1597
g389
ag390
aa(lp1598
g392
ag393
aatp1599
Rp1600
aa(lp1601
g397
ag306
((lp1602
(lp1603
g312
ag397
aa(lp1604
g401
ag402
aatp1605
Rp1606
aatp1607
Rp1608
sg74
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g25
g7
Ntp1619
Rp1620
(dp1621
g29
(dp1622
sg31
g5
(g32
g7
Ntp1623
Rp1624
(dp1625
g36
g37
(g38
tp1626
Rp1627
(dp1628
g45
g46
sg1461
g44
sg1462
g44
sg1463
g44
sg1464
g44
sbsg53
(lp1629
g1462
ag1463
ag1461
ag1464
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp1630
sg61
S'montage_snr_0'
p1631
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp1632
sg73
Nsg74
Nsb(dp1633
sg5
(g25
g7
Ntp1634
Rp1635
(dp1636
g29
(dp1637
sg31
g5
(g1403
g7
Ntp1638
Rp1639
(dp1640
g1407
(lp1641
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp1642
Rp1643
(dp1644
g88
I00
sg1437
S'snr_a.png'
p1645
sg1435
g44
sg1438
S'red_to_blue'
p1646
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1647
sg1436
g44
sg45
g46
sbsg1416
(dp1648
g1437
Nssg1419
(lp1649
g1437
asg1421
Nsbsg56
Nsg57
g1447
sg59
(dp1650
sg61
g1631
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1447
sg70
Nsg71
(lp1651
sg73
Nsg74
Nsb(dp1652
sg5
(g25
g7
Ntp1653
Rp1654
(dp1655
g29
(dp1656
sg31
g5
(g1403
g7
Ntp1657
Rp1658
(dp1659
g1407
(lp1660
g1409
asg36
g37
(g1410
tp1661
Rp1662
(dp1663
g88
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1664
sg1409
g44
sg45
g46
sbsg1416
(dp1665
g1418
Nssg1419
(lp1666
g1418
asg1421
Nsbsg56
Nsg57
g1501
sg59
(dp1667
sg61
g1631
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1501
sg70
Nsg71
(lp1668
sg73
Nsg74
Nsb(dp1669
sg5
(g25
g7
Ntp1670
Rp1671
(dp1672
g29
(dp1673
sg31
g5
(g1403
g7
Ntp1674
Rp1675
(dp1676
g1407
(lp1677
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp1678
Rp1679
(dp1680
g88
I00
sg1437
S'snr_s.png'
p1681
sg1435
g44
sg1438
g1646
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1682
sg1436
g44
sg45
g46
sbsg1416
(dp1683
g1437
Nssg1419
(lp1684
g1437
asg1421
Nsbsg56
Nsg57
g1484
sg59
(dp1685
sg61
g1631
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1484
sg70
Nsg71
(lp1686
sg73
Nsg74
Nsb(dp1687
sg5
(g25
g7
Ntp1688
Rp1689
(dp1690
g29
(dp1691
sg31
g5
(g32
g7
Ntp1692
Rp1693
(dp1694
g36
g37
(g38
tp1695
Rp1696
(dp1697
g45
g46
sg1436
g44
sg1435
g44
sbsg53
(lp1698
g1436
ag1435
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp1699
sg61
g1631
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp1700
sg73
Nsg74
Nsb(dp1701
sg5
(g25
g7
Ntp1702
Rp1703
(dp1704
g29
(dp1705
sg31
g5
(g1403
g7
Ntp1706
Rp1707
(dp1708
g1407
(lp1709
g1409
asg36
g37
(g1410
tp1710
Rp1711
(dp1712
g88
I00
sg1414
g1664
sg1409
g44
sg45
g46
sbsg1416
(dp1713
g1418
Nssg1419
(lp1714
g1418
asg1421
Nsbsg56
Nsg64
I00
sg59
(dp1715
sg66
Nsg63
Nsg73
Nsg57
g1423
sg61
g1631
sg65
I00
sg67
Nsg68
I00
sg69
g1423
sg70
Nsg71
(lp1716
sg74
Nsb(dp1717
ssg247
(dp1718
sg249
(dp1719
g1620
(dp1720
sg1635
(dp1721
g1620
(dp1722
g253
(lp1723
(g1437
g1462
tp1724
asssg1654
(dp1725
g1635
(dp1726
g253
(lp1727
(g1418
g1436
tp1728
assg1620
(dp1729
g253
(lp1730
(g1418
g1461
tp1731
assg1671
(dp1732
g253
(lp1733
(g1418
g1436
tp1734
asssg1671
(dp1735
g1620
(dp1736
g253
(lp1737
(g1437
g1463
tp1738
asssg1689
(dp1739
g1654
(dp1740
g253
(lp1741
(g1436
g1409
tp1742
assg1703
(dp1743
g253
(lp1744
(g1435
g1409
tp1745
asssg1703
(dp1746
g1635
(dp1747
g253
(lp1748
(g1418
g1435
tp1749
assg1620
(dp1750
g253
(lp1751
(g1418
g1464
tp1752
assg1671
(dp1753
g253
(lp1754
(g1418
g1435
tp1755
assssg295
g1719
sg296
(dp1756
g1620
(dp1757
g1654
g1729
sg1703
g1750
sg1671
g1736
sg1635
g1722
ssg1635
(dp1758
g1654
g1726
sg1703
g1747
ssg1654
(dp1759
g1689
g1740
ssg1671
(dp1760
g1654
g1732
sg1703
g1753
ssg1689
(dp1761
sg1703
(dp1762
g1689
g1743
sssg304
g1719
sbsg57
g1631
sg61
g1067
sg69
g1631
sg70
g306
((lp1763
(lp1764
g309
ag306
((lp1765
(lp1766
g312
ag309
aa(lp1767
g314
ag315
aa(lp1768
g317
ag318
aa(lp1769
g320
ag321
aa(lp1770
g323
ag324
aa(lp1771
g326
ag327
aa(lp1772
g329
ag330
aa(lp1773
g332
ag333
aatp1774
Rp1775
aa(lp1776
g337
ag306
((lp1777
(lp1778
g312
ag337
aa(lp1779
g341
ag342
aa(lp1780
g344
ag345
aa(lp1781
g347
ag348
aa(lp1782
g350
ag351
aa(lp1783
g353
ag354
aa(lp1784
g356
ag357
aa(lp1785
g359
ag360
aa(lp1786
g362
ag363
aa(lp1787
g365
ag366
aa(lp1788
g368
ag369
aa(lp1789
g371
ag372
aa(lp1790
g374
ag375
aa(lp1791
g377
ag378
aa(lp1792
g380
ag381
aa(lp1793
g383
ag384
aa(lp1794
g386
ag387
aa(lp1795
g389
ag390
aa(lp1796
g392
ag393
aatp1797
Rp1798
aa(lp1799
g397
ag306
((lp1800
(lp1801
g312
ag397
aa(lp1802
g401
ag402
aatp1803
Rp1804
aatp1805
Rp1806
sg74
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g25
g7
Ntp1810
Rp1811
(dp1812
g29
(dp1813
sg31
g5
(g1248
g7
Ntp1814
Rp1815
(dp1816
g36
g37
(g1252
tp1817
Rp1818
(dp1819
g88
I00
sg1256
g44
sg107
g44
sg1257
g44
sg91
g44
sg225
g44
sg92
g44
sg199
g44
sg1195
g44
sg1202
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg94
g95
sg96
g5
(g97
g98
(dp1821
g100
g101
stp1822
Rp1823
(dp1824
g105
S'environ_items'
p1825
sg57
g96
sbsg1263
g44
sg1264
g44
sg108
g101
sg1265
g44
sg1266
g44
sg45
g46
sg1267
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'mean_func_fsl_warp_0'
p1826
sg59
(dp1827
sg61
g1067
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1826
sg70
Nsg71
(lp1828
sg73
Nsg74
Nsbg91
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g25
g7
Ntp1831
Rp1832
(dp1833
g29
(dp1834
sg31
g5
(g1403
g7
Ntp1835
Rp1836
(dp1837
g1407
(lp1838
S'motion_parameters'
p1839
asg36
g37
(g1410
tp1840
Rp1841
(dp1842
g88
I00
sg1414
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g44
sg45
g46
sbsg1416
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1419
(lp1847
g1845
ag1846
asg1421
Nsbsg56
Nsg57
S'motion_plt_0'
p1848
sg59
(dp1849
sg61
g1067
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1848
sg70
Nsg71
(lp1850
sg73
Nsg74
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g25
g7
Ntp1853
Rp1854
(dp1855
g29
(dp1856
sg31
g5
(g1403
g7
Ntp1857
Rp1858
(dp1859
g1407
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg36
g37
(g1410
tp1864
Rp1865
(dp1866
g88
I00
sg45
g46
sg1861
g44
sg1414
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g44
sbsg1416
(dp1869
S'hist_path'
p1870
Nssg1419
(lp1871
g1870
asg1421
Nsbsg56
Nsg57
S'fd_plot_0'
p1872
sg59
(dp1873
sg61
g1067
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1872
sg70
Nsg71
(lp1874
sg73
Nsg74
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g25
g7
Ntp1884
Rp1885
(dp1886
g29
(dp1887
sg31
g5
(g32
g7
Ntp1888
Rp1889
(dp1890
g36
g37
(g38
tp1891
Rp1892
(dp1893
g52
(lp1894
F0.2
asg45
g46
sS'remove_frames_before'
p1895
I1
sS'remove_frames_after'
p1896
I2
sbsg53
(lp1897
g52
ag1895
ag1896
asg55
I01
sbsg56
Nsg57
S'scrubbing_input'
p1898
sg59
(dp1899
sg61
S'gen_motion_stats_0'
p1900
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
(g52
(lp1901
F0.2
atp1902
sg68
I00
sg69
g1898
sg70
Nsg71
(lp1903
sg73
Nsg74
Nsb(dp1904
sg5
(g25
g7
Ntp1905
Rp1906
(dp1907
g29
(dp1908
sg31
g5
(g1403
g7
Ntp1909
Rp1910
(dp1911
g1407
(lp1912
g107
asg36
g37
(g1410
tp1913
Rp1914
(dp1915
g88
I00
sg45
g46
sg1414
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p1916
sg107
g44
sbsg1416
(dp1917
g91
Nssg1419
(lp1918
g91
asg1421
Nsbsg56
Nsg57
S'calculate_FD'
p1919
sg59
(dp1920
sg61
g1900
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1919
sg70
Nsg71
(lp1921
sg73
Nsg74
Nsb(dp1922
sg5
(g25
g7
Ntp1923
Rp1924
(dp1925
g29
(dp1926
sg31
g5
(g1403
g7
Ntp1927
Rp1928
(dp1929
g1407
(lp1930
S'subject_id'
p1931
aS'scan_id'
p1932
aS'FD_1D'
p1933
aS'FDJ_1D'
p1934
ag52
aS'DVARS'
p1935
asg36
g37
(g1410
tp1936
Rp1937
(dp1938
g88
I00
sg45
g46
sg1932
g44
sg1931
g44
sg1935
g44
sg1414
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1939
sg1934
g44
sg1933
g44
sg52
g44
sbsg1416
(dp1940
g91
Nssg1419
(lp1941
g91
asg1421
Nsbsg56
Nsg57
S'calc_power_parameters'
p1942
sg59
(dp1943
sg61
g1900
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1942
sg70
Nsg71
(lp1944
sg73
Nsg74
Nsb(dp1945
sg5
(g25
g7
Ntp1946
Rp1947
(dp1948
g29
(dp1949
sg31
g5
(g1403
g7
Ntp1950
Rp1951
(dp1952
g1407
(lp1953
g107
ag52
aS'exclude_list'
p1954
asg36
g37
(g1410
tp1955
Rp1956
(dp1957
g88
I00
sg1954
g44
sg1414
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1958
sg107
g44
sg52
g44
sg45
g46
sbsg1416
(dp1959
g91
Nssg1419
(lp1960
g91
asg1421
Nsbsg56
Nsg57
S'include_frames'
p1961
sg59
(dp1962
sg61
g1900
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1961
sg70
Nsg71
(lp1963
sg73
Nsg74
Nsb(dp1964
sg5
(g25
g7
Ntp1965
Rp1966
(dp1967
g29
(dp1968
sg31
g5
(g32
g7
Ntp1969
Rp1970
(dp1971
g36
g37
(g38
tp1972
Rp1973
(dp1974
S'max_displacement'
p1975
g44
sg45
g46
sg1932
g44
sg1931
g44
sS'mask'
p1976
g44
sS'movement_parameters'
p1977
g44
sS'oned_matrix_save'
p1978
g44
sS'motion_correct'
p1979
g44
sbsg53
(lp1980
g1931
ag1932
ag1977
ag1975
ag1979
ag1976
ag1978
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp1981
sg61
g1900
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp1982
sg73
Nsg74
Nsb(dp1983
sg5
(g25
g7
Ntp1984
Rp1985
(dp1986
g29
(dp1987
sg31
g5
(g1403
g7
Ntp1988
Rp1989
(dp1990
g1407
(lp1991
S'rest'
p1992
ag1976
asg36
g37
(g1410
tp1993
Rp1994
(dp1995
g88
I00
sg1976
g44
sg45
g46
sg1414
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p1996
sg1992
g44
sbsg1416
(dp1997
g91
Nssg1419
(lp1998
g91
asg1421
Nsbsg56
Nsg57
S'cal_DVARS'
p1999
sg59
(dp2000
sg61
g1900
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1999
sg70
Nsg71
(lp2001
sg73
Nsg74
Nsb(dp2002
sg5
(g25
g7
Ntp2003
Rp2004
(dp2005
g29
(dp2006
sg31
g5
(g1403
g7
Ntp2007
Rp2008
(dp2009
g1407
(lp2010
g107
ag52
aS'frames_before'
p2011
aS'frames_after'
p2012
asg36
g37
(g1410
tp2013
Rp2014
(dp2015
g88
I00
sg2012
g44
sg1414
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p2016
sg107
g44
sg52
g44
sg45
g46
sg2011
g44
sbsg1416
(dp2017
g91
Nssg1419
(lp2018
g91
asg1421
Nsbsg56
Nsg57
S'exclude_frames'
p2019
sg59
(dp2020
sg61
g1900
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g2019
sg70
Nsg71
(lp2021
sg73
Nsg74
Nsb(dp2022
sg5
(g25
g7
Ntp2023
Rp2024
(dp2025
g29
(dp2026
sg31
g5
(g1403
g7
Ntp2027
Rp2028
(dp2029
g1407
(lp2030
g107
asg36
g37
(g1410
tp2031
Rp2032
(dp2033
g88
I00
sg45
g46
sg1414
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p2034
sg107
g44
sbsg1416
(dp2035
g91
Nssg1419
(lp2036
g91
asg1421
Nsbsg56
Nsg57
S'calculate_FDJ'
p2037
sg59
(dp2038
sg61
g1900
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g2037
sg70
Nsg71
(lp2039
sg73
Nsg74
Nsb(dp2040
sg5
(g25
g7
Ntp2041
Rp2042
(dp2043
g29
(dp2044
sg31
g5
(g32
g7
Ntp2045
Rp2046
(dp2047
g36
g37
(g38
tp2048
Rp2049
(dp2050
g45
g46
sS'frames_ex_1D'
p2051
g44
sg1934
g44
sg1933
g44
sS'frames_in_1D'
p2052
g44
sS'motion_params'
p2053
g44
sS'power_params'
p2054
g44
sbsg53
(lp2055
g1933
ag1934
ag2051
ag2052
ag2054
ag2053
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp2056
sg61
g1900
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp2057
sg73
Nsg74
Nsb(dp2058
sg5
(g25
g7
Ntp2059
Rp2060
(dp2061
g29
(dp2062
sg31
g5
(g1403
g7
Ntp2063
Rp2064
(dp2065
g1407
(lp2066
g1931
ag1932
ag1977
ag1975
asg36
g37
(g1410
tp2067
Rp2068
(dp2069
g88
I00
sg1975
g44
sg1932
g44
sg1931
g44
sg1414
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p2070
sg1977
g44
sg45
g46
sbsg1416
(dp2071
g91
Nssg1419
(lp2072
g91
asg1421
Nsbsg56
Nsg57
S'calc_motion_parameters'
p2073
sg59
(dp2074
sg61
g1900
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g2073
sg70
Nsg71
(lp2075
sg73
Nsg74
Nsb(dp2076
ssg247
(dp2077
sg249
(dp2078
g1885
(dp2079
g1947
(dp2080
g253
(lp2081
(g52
g52
tp2082
assg2004
(dp2083
g253
(lp2084
(g52
g52
tp2085
a(g1895
g2011
tp2086
a(g1896
g2012
tp2087
assg1924
(dp2088
g253
(lp2089
(g52
g52
tp2090
asssg1906
(dp2091
g1924
(dp2092
g253
(lp2093
(g91
g1933
tp2094
assg2042
(dp2095
g253
(lp2096
(g91
g1933
tp2097
assg2004
(dp2098
g253
(lp2099
(g91
g107
tp2100
assg1947
(dp2101
g253
(lp2102
(g91
g107
tp2103
asssg1924
(dp2104
g2042
(dp2105
g253
(lp2106
(g91
g2054
tp2107
asssg1947
(dp2108
g2042
(dp2109
g253
(lp2110
(g91
g2052
tp2111
asssg1966
(dp2112
g1924
(dp2113
g253
(lp2114
(g1931
g1931
tp2115
a(g1932
g1932
tp2116
assg1985
(dp2117
g253
(lp2118
(g1979
g1992
tp2119
a(g1976
g1976
tp2120
assg2024
(dp2121
g253
(lp2122
(g1978
g107
tp2123
assg2060
(dp2124
g253
(lp2125
(g1931
g1931
tp2126
a(g1932
g1932
tp2127
a(g1977
g1977
tp2128
a(g1975
g1975
tp2129
assg1906
(dp2130
g253
(lp2131
(g1977
g107
tp2132
asssg1985
(dp2133
g1924
(dp2134
g253
(lp2135
(g91
g1935
tp2136
asssg2004
(dp2137
g2042
(dp2138
g253
(lp2139
(g91
g2051
tp2140
assg1947
(dp2141
g253
(lp2142
(g91
g1954
tp2143
asssg2024
(dp2144
g2042
(dp2145
g253
(lp2146
(g91
g1934
tp2147
assg1924
(dp2148
g253
(lp2149
(g91
g1934
tp2150
asssg2042
(dp2151
sg2060
(dp2152
g2042
(dp2153
g253
(lp2154
(g91
g2053
tp2155
assssg295
g2078
sg296
(dp2156
g1885
(dp2157
sg1906
(dp2158
g1966
g2130
ssg1924
(dp2159
g1885
g2088
sg1966
g2113
sg1906
g2092
sg2024
g2148
sg1985
g2134
ssg1947
(dp2160
g1906
g2101
sg2004
g2141
sg1885
g2080
ssg1966
(dp2161
sg1985
(dp2162
g1966
g2117
ssg2004
(dp2163
g1906
g2098
sg1885
g2083
ssg2024
(dp2164
g1966
g2121
ssg2042
(dp2165
g1906
g2095
sg1924
g2105
sg1947
g2109
sg2024
g2145
sg2004
g2138
sg2060
g2153
ssg2060
(dp2166
g1966
g2124
sssg304
g2078
sbsg57
g1900
sg61
g1067
sg69
g1900
sg70
g306
((lp2167
(lp2168
g309
ag306
((lp2169
(lp2170
g312
ag309
aa(lp2171
g314
ag315
aa(lp2172
g317
ag318
aa(lp2173
g320
ag321
aa(lp2174
g323
ag324
aa(lp2175
g326
ag327
aa(lp2176
g329
ag330
aa(lp2177
g332
ag333
aatp2178
Rp2179
aa(lp2180
g337
ag306
((lp2181
(lp2182
g312
ag337
aa(lp2183
g341
ag342
aa(lp2184
g344
ag345
aa(lp2185
g347
ag348
aa(lp2186
g350
ag351
aa(lp2187
g353
ag354
aa(lp2188
g356
ag357
aa(lp2189
g359
ag360
aa(lp2190
g362
ag363
aa(lp2191
g365
ag366
aa(lp2192
g368
ag369
aa(lp2193
g371
ag372
aa(lp2194
g374
ag375
aa(lp2195
g377
ag378
aa(lp2196
g380
ag381
aa(lp2197
g383
ag384
aa(lp2198
g386
ag387
aa(lp2199
g389
ag390
aa(lp2200
g392
ag393
aatp2201
Rp2202
aa(lp2203
g397
ag306
((lp2204
(lp2205
g312
ag397
aa(lp2206
g401
ag402
aatp2207
Rp2208
aatp2209
Rp2210
sg74
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g25
g7
Ntp2224
Rp2225
(dp2226
g29
(dp2227
sg31
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2228
g7
Ntp2229
Rp2230
(dp2231
g36
g37
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2232
tp2233
Rp2234
(dp2235
g88
I00
sg45
g46
sg91
g44
sg92
g44
sS'outputtype'
p2236
S'AFNI'
p2237
sg94
g95
sg96
g5
(g97
g98
(dp2238
tp2239
Rp2240
(dp2241
g105
S'environ_items'
p2242
sg57
g96
sbsg107
g44
sbsS'_outputtype'
p2243
g2237
sg111
Nsg112
g95
sbsg56
Nsg64
I00
sg59
(dp2244
sg66
Nsg63
Nsg73
Nsg57
S'anat_skullstrip'
p2245
sg61
S'anat_preproc_0'
p2246
sg65
I00
sg67
Nsg68
I00
sg69
g2245
sg70
Nsg71
(lp2247
sg74
Nsb(dp2248
sg5
(g25
g7
Ntp2249
Rp2250
(dp2251
g29
(dp2252
sg31
g5
(cnipype.interfaces.afni.preprocess
Refit
p2253
g7
Ntp2254
Rp2255
(dp2256
g36
g37
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2257
tp2258
Rp2259
(dp2260
g88
I00
sg45
g46
sS'deoblique'
p2261
I01
sg92
g44
sS'yorigin'
p2262
g44
sg94
g95
sg96
g5
(g97
g98
(dp2263
tp2264
Rp2265
(dp2266
g105
S'environ_items'
p2267
sg57
g96
sbsg107
g44
sS'xorigin'
p2268
g44
sS'zorigin'
p2269
g44
sbsg111
Nsg112
g95
sbsg56
Nsg64
I00
sg59
(dp2270
sg66
Nsg63
Nsg73
Nsg57
S'anat_deoblique'
p2271
sg61
g2246
sg65
I00
sg67
Nsg68
I00
sg69
g2271
sg70
Nsg71
(lp2272
sg74
Nsb(dp2273
sg5
(g25
g7
Ntp2274
Rp2275
(dp2276
g29
(dp2277
sg31
g5
(g32
g7
Ntp2278
Rp2279
(dp2280
g36
g37
(g38
tp2281
Rp2282
(dp2283
g45
g46
sS'anat'
p2284
g44
sbsg53
(lp2285
g2284
asg55
I01
sbsg56
Nsg64
I00
sg59
(dp2286
sg66
Nsg63
Nsg73
Nsg57
g58
sg61
g2246
sg65
I00
sg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp2287
sg74
Nsb(dp2288
sg5
(g25
g7
Ntp2289
Rp2290
(dp2291
g29
(dp2292
sg31
g5
(cnipype.interfaces.afni.preprocess
Calc
p2293
g7
Ntp2294
Rp2295
(dp2296
g36
g37
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2297
tp2298
Rp2299
(dp2300
S'stop_idx'
p2301
g44
sg88
I00
sg45
g46
sg91
g44
sS'expr'
p2302
S'a*step(b)'
p2303
sg92
g44
sg2236
S'NIFTI_GZ'
p2304
sS'in_file_b'
p2305
g44
sS'in_file_c'
p2306
g44
sS'in_file_a'
p2307
g44
sg96
g5
(g97
g98
(dp2308
tp2309
Rp2310
(dp2311
g105
S'environ_items'
p2312
sg57
g96
sbsS'single_idx'
p2313
g44
sS'other'
p2314
g44
sS'start_idx'
p2315
g44
sg94
g95
sbsg2243
g2304
sg111
Nsg112
g95
sbsg56
Nsg64
I00
sg59
(dp2316
sg66
Nsg63
Nsg73
Nsg57
S'anat_brain_only'
p2317
sg61
g2246
sg65
I00
sg67
Nsg68
I00
sg69
g2317
sg70
Nsg71
(lp2318
sg74
Nsb(dp2319
sg5
(g25
g7
Ntp2320
Rp2321
(dp2322
g29
(dp2323
sg31
g5
(g32
g7
Ntp2324
Rp2325
(dp2326
g36
g37
(g38
tp2327
Rp2328
(dp2329
S'reorient'
p2330
g44
sg50
g44
sS'refit'
p2331
g44
sg45
g46
sS'skullstrip'
p2332
g44
sbsg53
(lp2333
g2331
ag2330
ag2332
ag50
asg55
I01
sbsg56
Nsg64
I00
sg59
(dp2334
sg66
Nsg63
Nsg73
Nsg57
g132
sg61
g2246
sg65
I00
sg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp2335
sg74
Nsb(dp2336
sg5
(g25
g7
Ntp2337
Rp2338
(dp2339
g29
(dp2340
sg31
g5
(cnipype.interfaces.afni.preprocess
Resample
p2341
g7
Ntp2342
Rp2343
(dp2344
g36
g37
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2345
tp2346
Rp2347
(dp2348
g88
I00
sg45
g46
sg91
g44
sg92
g44
sg2236
g2304
sS'resample_mode'
p2349
g44
sS'voxel_size'
p2350
g44
sg94
g95
sS'master'
p2351
g44
sg107
g44
sg96
g5
(g97
g98
(dp2352
tp2353
Rp2354
(dp2355
g105
S'environ_items'
p2356
sg57
g96
sbsS'orientation'
p2357
S'RPI'
p2358
sbsg2243
g2304
sg111
Nsg112
g95
sbsg56
Nsg64
I00
sg59
(dp2359
sg66
Nsg63
Nsg73
Nsg57
S'anat_reorient'
p2360
sg61
g2246
sg65
I00
sg67
Nsg68
I00
sg69
g2360
sg70
Nsg71
(lp2361
sg74
Nsb(dp2362
ssg249
(dp2363
g2225
(dp2364
g2321
(dp2365
g253
(lp2366
(g91
g2332
tp2367
assg2290
(dp2368
g253
(lp2369
(g91
g2305
tp2370
asssg2250
(dp2371
g2321
(dp2372
g253
(lp2373
(g91
g2331
tp2374
assg2338
(dp2375
g253
(lp2376
(g91
g107
tp2377
asssg2275
(dp2378
g2250
(dp2379
g253
(lp2380
(g2284
g107
tp2381
asssg2290
(dp2382
g2321
(dp2383
g253
(lp2384
(g91
g50
tp2385
asssg2321
(dp2386
sg2338
(dp2387
g2290
(dp2388
g253
(lp2389
(g91
g2307
tp2390
assg2225
(dp2391
g253
(lp2392
(g91
g107
tp2393
assg2321
(dp2394
g253
(lp2395
(g91
g2330
tp2396
assssg295
g2363
sg296
(dp2397
g2225
(dp2398
g2338
g2391
ssg2250
(dp2399
g2275
g2379
ssg2275
(dp2400
sg2290
(dp2401
g2225
g2368
sg2338
g2388
ssg2321
(dp2402
g2290
g2383
sg2250
g2372
sg2225
g2365
sg2338
g2394
ssg2338
(dp2403
g2250
g2375
sssg247
(dp2404
sg304
g2363
sbsg57
g2246
sg61
g1067
sg69
g2246
sg70
g306
((lp2405
(lp2406
g309
ag306
((lp2407
(lp2408
g312
ag309
aa(lp2409
g314
ag315
aa(lp2410
g317
ag318
aa(lp2411
g320
ag321
aa(lp2412
g323
ag324
aa(lp2413
g326
ag327
aa(lp2414
g329
ag330
aa(lp2415
g332
ag333
aatp2416
Rp2417
aa(lp2418
g337
ag306
((lp2419
(lp2420
g312
ag337
aa(lp2421
g341
ag342
aa(lp2422
g344
ag345
aa(lp2423
g347
ag348
aa(lp2424
g350
ag351
aa(lp2425
g353
ag354
aa(lp2426
g356
ag357
aa(lp2427
g359
ag360
aa(lp2428
g362
ag363
aa(lp2429
g365
ag366
aa(lp2430
g368
ag369
aa(lp2431
g371
ag372
aa(lp2432
g374
ag375
aa(lp2433
g377
ag378
aa(lp2434
g380
ag381
aa(lp2435
g383
ag384
aa(lp2436
g386
ag387
aa(lp2437
g389
ag390
aa(lp2438
g392
ag393
aatp2439
Rp2440
aa(lp2441
g397
ag306
((lp2442
(lp2443
g312
ag397
aa(lp2444
g401
ag402
aatp2445
Rp2446
aatp2447
Rp2448
sg74
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g25
g7
Ntp2459
Rp2460
(dp2461
g29
(dp2462
sg31
g5
(g80
g7
Ntp2463
Rp2464
(dp2465
g36
g37
(g84
tp2466
Rp2467
(dp2468
g88
I00
sg45
g46
sg89
S'-ing 10000'
p2469
sg90
S'float'
p2470
sg91
g44
sg92
g44
sg93
g44
sg94
g95
sg96
g5
(g97
g98
(dp2471
g100
g101
stp2472
Rp2473
(dp2474
g105
S'environ_items'
p2475
sg57
g96
sbsg107
g44
sg108
g101
sg109
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'func_normalize'
p2476
sg59
(dp2477
sg61
S'func_preproc_automask_0'
p2478
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g2476
sg70
Nsg71
(lp2479
sg73
Nsg74
Nsb(dp2480
sg5
(g25
g7
Ntp2481
Rp2482
(dp2483
g29
(dp2484
sg31
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2485
g7
Ntp2486
Rp2487
(dp2488
g36
g37
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2489
tp2490
Rp2491
(dp2492
S'oned_file'
p2493
g44
sg88
I00
sg195
g44
sS'timeshift'
p2494
g44
sS'basefile'
p2495
g44
sg92
S'-Fourier -twopass'
p2496
sg2236
g2304
sS'zpad'
p2497
I4
sg94
g95
sS'md1d_file'
p2498
S'max_displacement.1D'
p2499
sg107
g44
sS'copyorigin'
p2500
g44
sg96
g5
(g97
g98
(dp2501
tp2502
Rp2503
(dp2504
g105
S'environ_items'
p2505
sg57
g96
sbsg1978
g44
sg45
g46
sg91
g44
sbsg2243
g2304
sg111
Nsg112
g95
sbsg56
Nsg64
I00
sg59
(dp2506
sg66
Nsg63
Nsg73
Nsg57
S'func_motion_correct_A'
p2507
sg61
g2478
sg65
I00
sg67
Nsg68
I00
sg69
g2507
sg70
Nsg71
(lp2508
sg74
Nsb(dp2509
sg5
(g25
g7
Ntp2510
Rp2511
(dp2512
g29
(dp2513
sg31
g5
(g2341
g7
Ntp2514
Rp2515
(dp2516
g36
g37
(g2345
tp2517
Rp2518
(dp2519
g88
I00
sg45
g46
sg91
g44
sg92
g44
sg2236
g2304
sg2349
g44
sg2350
g44
sg94
g95
sg2351
g44
sg107
g44
sg96
g5
(g97
g98
(dp2520
tp2521
Rp2522
(dp2523
g105
S'environ_items'
p2524
sg57
g96
sbsg2357
g2358
sbsg2243
g2304
sg111
Nsg112
g95
sbsg56
Nsg57
S'func_reorient'
p2525
sg59
(dp2526
sg61
g2478
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g2525
sg70
Nsg71
(lp2527
sg73
Nsg74
Nsb(dp2528
sg5
(g25
g7
Ntp2529
Rp2530
(dp2531
g29
(dp2532
sg31
g5
(cnipype.interfaces.afni.preprocess
Automask
p2533
g7
Ntp2534
Rp2535
(dp2536
g36
g37
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2537
tp2538
Rp2539
(dp2540
g88
I00
sg45
g46
sg92
g44
sS'erode'
p2541
g44
sg91
g44
sS'dilate'
p2542
g44
sS'clfrac'
p2543
g44
sg2236
g2304
sS'brain_file'
p2544
g44
sg94
g95
sg96
g5
(g97
g98
(dp2545
tp2546
Rp2547
(dp2548
g105
S'environ_items'
p2549
sg57
g96
sbsg107
g44
sbsg2243
g2304
sg111
Nsg112
g95
sbsg56
Nsg57
S'func_get_brain_mask'
p2550
sg59
(dp2551
sg61
g2478
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g2550
sg70
Nsg71
(lp2552
sg73
Nsg74
Nsb(dp2553
sg5
(g25
g7
Ntp2554
Rp2555
(dp2556
g29
(dp2557
sg31
g5
(cnipype.interfaces.afni.preprocess
TStat
p2558
g7
Ntp2559
Rp2560
(dp2561
g36
g37
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2562
tp2563
Rp2564
(dp2565
g88
I00
sg45
g46
sg91
g44
sg92
g44
sg1976
g44
sg2236
g2304
sg94
g95
sg96
g5
(g97
g98
(dp2566
tp2567
Rp2568
(dp2569
g105
S'environ_items'
p2570
sg57
g96
sbsg107
g44
sS'options'
p2571
S'-mean'
p2572
sbsg2243
g2304
sg111
Nsg112
g95
sbsg56
Nsg57
S'func_mean_skullstrip'
p2573
sg59
(dp2574
sg61
g2478
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g2573
sg70
Nsg71
(lp2575
sg73
Nsg74
Nsb(dp2576
sg5
(g25
g7
Ntp2577
Rp2578
(dp2579
g29
(dp2580
sg31
g5
(g2253
g7
Ntp2581
Rp2582
(dp2583
g36
g37
(g2257
tp2584
Rp2585
(dp2586
g88
I00
sg45
g46
sg2261
I01
sg92
g44
sg2262
g44
sg94
g95
sg96
g5
(g97
g98
(dp2587
tp2588
Rp2589
(dp2590
g105
S'environ_items'
p2591
sg57
g96
sbsg107
g44
sg2268
g44
sg2269
g44
sbsg111
Nsg112
g95
sbsg56
Nsg57
S'func_deoblique'
p2592
sg59
(dp2593
sg61
g2478
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g2592
sg70
Nsg71
(lp2594
sg73
Nsg74
Nsb(dp2595
sg5
(g25
g7
Ntp2596
Rp2597
(dp2598
g29
(dp2599
sg31
g5
(g80
g7
Ntp2600
Rp2601
(dp2602
g36
g37
(g84
tp2603
Rp2604
(dp2605
g88
I00
sg45
g46
sg89
S'-Tmin -bin'
p2606
sg90
S'char'
p2607
sg91
g44
sg92
g44
sg93
g44
sg94
g95
sg96
g5
(g97
g98
(dp2608
g100
g101
stp2609
Rp2610
(dp2611
g105
S'environ_items'
p2612
sg57
g96
sbsg107
g44
sg108
g101
sg109
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'func_mask_normalize'
p2613
sg59
(dp2614
sg61
g2478
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g2613
sg70
Nsg71
(lp2615
sg73
Nsg74
Nsb(dp2616
sg5
(g25
g7
Ntp2617
Rp2618
(dp2619
g29
(dp2620
sg31
g5
(g32
g7
Ntp2621
Rp2622
(dp2623
g36
g37
(g38
tp2624
Rp2625
(dp2626
g45
g46
sS'func'
p2627
g44
sbsg53
(lp2628
g2627
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp2629
sg61
g2478
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp2630
sg73
Nsg74
Nsb(dp2631
sg5
(g25
g7
Ntp2632
Rp2633
(dp2634
g29
(dp2635
sg31
g5
(g32
g7
Ntp2636
Rp2637
(dp2638
g36
g37
(g38
tp2639
Rp2640
(dp2641
g1975
g44
sS'motion_correct_ref'
p2642
g44
sg45
g46
sS'preprocessed_mask'
p2643
g44
sg1976
g44
sg2331
g44
sg2332
g44
sg2330
g44
sS'preprocessed'
p2644
g44
sS'slice_time_corrected'
p2645
g44
sg1977
g44
sS'example_func'
p2646
g44
sg1978
g44
sS'reorient_mean'
p2647
g44
sg1979
g44
sbsg53
(lp2648
g2331
ag2330
ag2647
ag1979
ag2642
ag1977
ag1975
ag1976
ag2332
ag2646
ag2644
ag2643
ag2645
ag1978
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp2649
sg61
g2478
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp2650
sg73
Nsg74
Nsb(dp2651
sg5
(g25
g7
Ntp2652
Rp2653
(dp2654
g29
(dp2655
sg31
g5
(g2558
g7
Ntp2656
Rp2657
(dp2658
g36
g37
(g2562
tp2659
Rp2660
(dp2661
g88
I00
sg45
g46
sg91
g44
sg92
g44
sg1976
g44
sg2236
g2304
sg94
g95
sg96
g5
(g97
g98
(dp2662
tp2663
Rp2664
(dp2665
g105
S'environ_items'
p2666
sg57
g96
sbsg107
g44
sg2571
g2572
sbsg2243
g2304
sg111
Nsg112
g95
sbsg56
Nsg57
S'func_get_mean_RPI'
p2667
sg59
(dp2668
sg61
g2478
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g2667
sg70
Nsg71
(lp2669
sg73
Nsg74
Nsb(dp2670
sg5
(g25
g7
Ntp2671
Rp2672
(dp2673
g29
(dp2674
sg31
g5
(g2293
g7
Ntp2675
Rp2676
(dp2677
g36
g37
(g2297
tp2678
Rp2679
(dp2680
g2301
g44
sg88
I00
sg45
g46
sg91
g44
sg2302
S'a*b'
p2681
sg92
g44
sg2236
g2304
sg2305
g44
sg2306
g44
sg2307
g44
sg96
g5
(g97
g98
(dp2682
tp2683
Rp2684
(dp2685
g105
S'environ_items'
p2686
sg57
g96
sbsg2313
g44
sg2314
g44
sg2315
g44
sg94
g95
sbsg2243
g2304
sg111
Nsg112
g95
sbsg56
Nsg57
S'func_edge_detect'
p2687
sg59
(dp2688
sg61
g2478
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g2687
sg70
Nsg71
(lp2689
sg73
Nsg74
Nsb(dp2690
sg5
(g25
g7
Ntp2691
Rp2692
(dp2693
g29
(dp2694
sg31
g5
(g2558
g7
Ntp2695
Rp2696
(dp2697
g36
g37
(g2562
tp2698
Rp2699
(dp2700
g88
I00
sg45
g46
sg91
g44
sg92
g44
sg1976
g44
sg2236
g2304
sg94
g95
sg96
g5
(g97
g98
(dp2701
tp2702
Rp2703
(dp2704
g105
S'environ_items'
p2705
sg57
g96
sbsg107
g44
sg2571
g2572
sbsg2243
g2304
sg111
Nsg112
g95
sbsg56
Nsg64
I00
sg59
(dp2706
sg66
Nsg63
Nsg73
Nsg57
S'func_get_mean_motion'
p2707
sg61
g2478
sg65
I00
sg67
Nsg68
I00
sg69
g2707
sg70
Nsg71
(lp2708
sg74
Nsb(dp2709
sg5
(g25
g7
Ntp2710
Rp2711
(dp2712
g29
(dp2713
sg31
g5
(g2485
g7
Ntp2714
Rp2715
(dp2716
g36
g37
(g2489
tp2717
Rp2718
(dp2719
g2493
g44
sg88
I00
sg195
g44
sg2494
g44
sg2495
g44
sg92
g2496
sg2236
g2304
sg2497
I4
sg94
g95
sg2498
g44
sg107
g44
sg2500
g44
sg96
g5
(g97
g98
(dp2720
tp2721
Rp2722
(dp2723
g105
S'environ_items'
p2724
sg57
g96
sbsg1978
g44
sg45
g46
sg91
g44
sbsg2243
g2304
sg111
Nsg112
g95
sbsg56
Nsg57
S'func_motion_correct'
p2725
sg59
(dp2726
sg61
g2478
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g2725
sg70
Nsg71
(lp2727
sg73
Nsg74
Nsb(dp2728
ssg247
(dp2729
sg249
(dp2730
g2460
(dp2731
g2633
(dp2732
g253
(lp2733
(g91
g2644
tp2734
assg2597
(dp2735
g253
(lp2736
(g91
g107
tp2737
asssg2482
(dp2738
g2633
(dp2739
g253
(lp2740
(g91
g1979
tp2741
a(g2498
g1975
tp2742
a(g2493
g1977
tp2743
a(g1978
g1978
tp2744
assg2672
(dp2745
g253
(lp2746
(g91
g2307
tp2747
assg2530
(dp2748
g253
(lp2749
(g91
g107
tp2750
asssg2511
(dp2751
g2633
(dp2752
g253
(lp2753
(g91
g2330
tp2754
assg2482
(dp2755
g253
(lp2756
(g91
g107
tp2757
assg2711
(dp2758
g253
(lp2759
(g91
g107
tp2760
assg2653
(dp2761
g253
(lp2762
(g91
g107
tp2763
asssg2530
(dp2764
g2633
(dp2765
g253
(lp2766
(g91
g1976
tp2767
assg2672
(dp2768
g253
(lp2769
(g91
g2305
tp2770
asssg2555
(dp2771
g2633
(dp2772
g253
(lp2773
(g91
g2646
tp2774
asssg2578
(dp2775
g2511
(dp2776
g253
(lp2777
(g91
g107
tp2778
asssg2597
(dp2779
g2633
(dp2780
g253
(lp2781
(g91
g2643
tp2782
asssg2618
(dp2783
g2578
(dp2784
g253
(lp2785
(g2627
g107
tp2786
asssg2633
(dp2787
sg2653
(dp2788
g2711
(dp2789
g253
(lp2790
(g91
g2495
tp2791
asssg2672
(dp2792
g2633
(dp2793
g253
(lp2794
(g91
g2332
tp2795
assg2460
(dp2796
g253
(lp2797
(g91
g107
tp2798
assg2555
(dp2799
g253
(lp2800
(g91
g107
tp2801
asssg2692
(dp2802
g2633
(dp2803
g253
(lp2804
(g91
g2642
tp2805
assg2482
(dp2806
g253
(lp2807
(g91
g2495
tp2808
asssg2711
(dp2809
g2692
(dp2810
g253
(lp2811
(g91
g107
tp2812
assssg295
g2730
sg296
(dp2813
g2460
(dp2814
g2672
g2796
ssg2482
(dp2815
g2511
g2755
sg2692
g2806
ssg2511
(dp2816
g2578
g2776
ssg2530
(dp2817
g2482
g2748
ssg2555
(dp2818
g2672
g2799
ssg2578
(dp2819
g2618
g2784
ssg2597
(dp2820
g2460
g2735
ssg2618
(dp2821
sg2633
(dp2822
g2460
g2732
sg2482
g2739
sg2511
g2752
sg2530
g2765
sg2555
g2772
sg2597
g2780
sg2672
g2793
sg2692
g2803
ssg2653
(dp2823
g2511
g2761
ssg2672
(dp2824
g2530
g2768
sg2482
g2745
ssg2692
(dp2825
g2711
g2810
ssg2711
(dp2826
g2511
g2758
sg2653
g2789
sssg304
g2730
sbsg57
g2478
sg61
g1067
sg69
g2478
sg70
g306
((lp2827
(lp2828
g309
ag306
((lp2829
(lp2830
g312
ag309
aa(lp2831
g314
ag315
aa(lp2832
g317
ag318
aa(lp2833
g320
ag321
aa(lp2834
g323
ag324
aa(lp2835
g326
ag327
aa(lp2836
g329
ag330
aa(lp2837
g332
ag333
aatp2838
Rp2839
aa(lp2840
g337
ag306
((lp2841
(lp2842
g312
ag337
aa(lp2843
g341
ag342
aa(lp2844
g344
ag345
aa(lp2845
g347
ag348
aa(lp2846
g350
ag351
aa(lp2847
g353
ag354
aa(lp2848
g356
ag357
aa(lp2849
g359
ag360
aa(lp2850
g362
ag363
aa(lp2851
g365
ag366
aa(lp2852
g368
ag369
aa(lp2853
g371
ag372
aa(lp2854
g374
ag375
aa(lp2855
g377
ag378
aa(lp2856
g380
ag381
aa(lp2857
g383
ag384
aa(lp2858
g386
ag387
aa(lp2859
g389
ag390
aa(lp2860
g392
ag393
aatp2861
Rp2862
aa(lp2863
g397
ag306
((lp2864
(lp2865
g312
ag397
aa(lp2866
g401
ag402
aatp2867
Rp2868
aatp2869
Rp2870
sg74
NsbS'outputspec.example_func'
p2871
tp2872
sg1977
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g25
g7
Ntp2880
Rp2881
(dp2882
g29
(dp2883
sg31
g5
(g32
g7
Ntp2884
Rp2885
(dp2886
g36
g37
(g38
tp2887
Rp2888
(dp2889
g45
g46
sS'movement_file'
p2890
g44
sbsg53
(lp2891
g2890
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp2892
sg61
S'fristons_parameter_model_0'
p2893
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp2894
sg73
Nsg74
Nsb(dp2895
sg5
(g25
g7
Ntp2896
Rp2897
(dp2898
g29
(dp2899
sg31
g5
(g1403
g7
Ntp2900
Rp2901
(dp2902
g1407
(lp2903
g107
asg36
g37
(g1410
tp2904
Rp2905
(dp2906
g88
I00
sg45
g46
sg1414
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2907
sg107
g44
sbsg1416
(dp2908
g91
Nssg1419
(lp2909
g91
asg1421
Nsbsg56
Nsg57
S'calc_friston'
p2910
sg59
(dp2911
sg61
g2893
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g2910
sg70
Nsg71
(lp2912
sg73
Nsg74
Nsb(dp2913
sg5
(g25
g7
Ntp2914
Rp2915
(dp2916
g29
(dp2917
sg31
g5
(g32
g7
Ntp2918
Rp2919
(dp2920
g36
g37
(g38
tp2921
Rp2922
(dp2923
g45
g46
sg2890
g44
sbsg53
(lp2924
g2890
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp2925
sg61
g2893
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp2926
sg73
Nsg74
Nsb(dp2927
ssg247
(dp2928
sg249
(dp2929
g2881
(dp2930
g2897
(dp2931
g253
(lp2932
(g2890
g107
tp2933
asssg2897
(dp2934
g2915
(dp2935
g253
(lp2936
(g91
g2890
tp2937
asssg2915
(dp2938
ssg295
g2929
sg296
(dp2939
g2881
(dp2940
sg2897
(dp2941
g2881
g2931
ssg2915
(dp2942
g2897
g2935
sssg304
g2929
sbsg57
g2893
sg61
g1067
sg69
g2893
sg70
g306
((lp2943
(lp2944
g309
ag306
((lp2945
(lp2946
g312
ag309
aa(lp2947
g314
ag315
aa(lp2948
g317
ag318
aa(lp2949
g320
ag321
aa(lp2950
g323
ag324
aa(lp2951
g326
ag327
aa(lp2952
g329
ag330
aa(lp2953
g332
ag333
aatp2954
Rp2955
aa(lp2956
g337
ag306
((lp2957
(lp2958
g312
ag337
aa(lp2959
g341
ag342
aa(lp2960
g344
ag345
aa(lp2961
g347
ag348
aa(lp2962
g350
ag351
aa(lp2963
g353
ag354
aa(lp2964
g356
ag357
aa(lp2965
g359
ag360
aa(lp2966
g362
ag363
aa(lp2967
g365
ag366
aa(lp2968
g368
ag369
aa(lp2969
g371
ag372
aa(lp2970
g374
ag375
aa(lp2971
g377
ag378
aa(lp2972
g380
ag381
aa(lp2973
g383
ag384
aa(lp2974
g386
ag387
aa(lp2975
g389
ag390
aa(lp2976
g392
ag393
aatp2977
Rp2978
aa(lp2979
g397
ag306
((lp2980
(lp2981
g312
ag397
aa(lp2982
g401
ag402
aatp2983
Rp2984
aatp2985
Rp2986
sg74
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g25
g7
Ntp2997
Rp2998
(dp2999
g29
(dp3000
sg31
g5
(g1403
g7
Ntp3001
Rp3002
(dp3003
g1407
(lp3004
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp3005
Rp3006
(dp3007
g88
I00
sg1437
S't1_edge_on_mean_func_in_t1_s.png'
p3008
sg1435
g44
sg1438
g1443
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3009
sg1436
g44
sg45
g46
sbsg1416
(dp3010
g1437
Nssg1419
(lp3011
g1437
asg1421
Nsbsg56
Nsg57
g1484
sg59
(dp3012
sg61
S'montage_anat_0'
p3013
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1484
sg70
Nsg71
(lp3014
sg73
Nsg74
Nsb(dp3015
sg5
(g25
g7
Ntp3016
Rp3017
(dp3018
g29
(dp3019
sg31
g5
(g1403
g7
Ntp3020
Rp3021
(dp3022
g1407
(lp3023
g1409
asg36
g37
(g1410
tp3024
Rp3025
(dp3026
g88
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3027
sg1409
g44
sg45
g46
sbsg1416
(dp3028
g1418
Nssg1419
(lp3029
g1418
asg1421
Nsbsg56
Nsg64
I00
sg59
(dp3030
sg66
Nsg63
Nsg73
Nsg57
g1423
sg61
g3013
sg65
I00
sg67
Nsg68
I00
sg69
g1423
sg70
Nsg71
(lp3031
sg74
Nsb(dp3032
sg5
(g25
g7
Ntp3033
Rp3034
(dp3035
g29
(dp3036
sg31
g5
(g1403
g7
Ntp3037
Rp3038
(dp3039
g1407
(lp3040
g1409
asg36
g37
(g1410
tp3041
Rp3042
(dp3043
g88
I00
sg1414
g3027
sg1409
g44
sg45
g46
sbsg1416
(dp3044
g1418
Nssg1419
(lp3045
g1418
asg1421
Nsbsg56
Nsg57
g1501
sg59
(dp3046
sg61
g3013
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1501
sg70
Nsg71
(lp3047
sg73
Nsg74
Nsb(dp3048
sg5
(g25
g7
Ntp3049
Rp3050
(dp3051
g29
(dp3052
sg31
g5
(g32
g7
Ntp3053
Rp3054
(dp3055
g36
g37
(g38
tp3056
Rp3057
(dp3058
g45
g46
sg1436
g44
sg1435
g44
sbsg53
(lp3059
g1436
ag1435
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp3060
sg61
g3013
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp3061
sg73
Nsg74
Nsb(dp3062
sg5
(g25
g7
Ntp3063
Rp3064
(dp3065
g29
(dp3066
sg31
g5
(g32
g7
Ntp3067
Rp3068
(dp3069
g36
g37
(g38
tp3070
Rp3071
(dp3072
g45
g46
sg1461
g44
sg1462
g44
sg1463
g44
sg1464
g44
sbsg53
(lp3073
g1462
ag1463
ag1461
ag1464
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp3074
sg61
g3013
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp3075
sg73
Nsg74
Nsb(dp3076
sg5
(g25
g7
Ntp3077
Rp3078
(dp3079
g29
(dp3080
sg31
g5
(g1403
g7
Ntp3081
Rp3082
(dp3083
g1407
(lp3084
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp3085
Rp3086
(dp3087
g88
I00
sg1437
S't1_edge_on_mean_func_in_t1_a.png'
p3088
sg1435
g44
sg1438
g1443
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3089
sg1436
g44
sg45
g46
sbsg1416
(dp3090
g1437
Nssg1419
(lp3091
g1437
asg1421
Nsbsg56
Nsg57
g1447
sg59
(dp3092
sg61
g3013
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1447
sg70
Nsg71
(lp3093
sg73
Nsg74
Nsb(dp3094
ssg247
(dp3095
sg249
(dp3096
g2998
(dp3097
g3064
(dp3098
g253
(lp3099
(g1437
g1463
tp3100
asssg3017
(dp3101
g2998
(dp3102
g253
(lp3103
(g1418
g1435
tp3104
assg3078
(dp3105
g253
(lp3106
(g1418
g1435
tp3107
assg3064
(dp3108
g253
(lp3109
(g1418
g1464
tp3110
asssg3034
(dp3111
g2998
(dp3112
g253
(lp3113
(g1418
g1436
tp3114
assg3078
(dp3115
g253
(lp3116
(g1418
g1436
tp3117
assg3064
(dp3118
g253
(lp3119
(g1418
g1461
tp3120
asssg3050
(dp3121
g3034
(dp3122
g253
(lp3123
(g1436
g1409
tp3124
assg3017
(dp3125
g253
(lp3126
(g1435
g1409
tp3127
asssg3064
(dp3128
sg3078
(dp3129
g3064
(dp3130
g253
(lp3131
(g1437
g1462
tp3132
assssg295
g3096
sg296
(dp3133
g2998
(dp3134
g3034
g3112
sg3017
g3102
ssg3017
(dp3135
g3050
g3125
ssg3034
(dp3136
g3050
g3122
ssg3050
(dp3137
sg3064
(dp3138
g2998
g3098
sg3034
g3118
sg3017
g3108
sg3078
g3130
ssg3078
(dp3139
g3034
g3115
sg3017
g3105
sssg304
g3096
sbsg57
g3013
sg61
g1067
sg69
g3013
sg70
g306
((lp3140
(lp3141
g309
ag306
((lp3142
(lp3143
g312
ag309
aa(lp3144
g314
ag315
aa(lp3145
g317
ag318
aa(lp3146
g320
ag321
aa(lp3147
g323
ag324
aa(lp3148
g326
ag327
aa(lp3149
g329
ag330
aa(lp3150
g332
ag333
aatp3151
Rp3152
aa(lp3153
g337
ag306
((lp3154
(lp3155
g312
ag337
aa(lp3156
g341
ag342
aa(lp3157
g344
ag345
aa(lp3158
g347
ag348
aa(lp3159
g350
ag351
aa(lp3160
g353
ag354
aa(lp3161
g356
ag357
aa(lp3162
g359
ag360
aa(lp3163
g362
ag363
aa(lp3164
g365
ag366
aa(lp3165
g368
ag369
aa(lp3166
g371
ag372
aa(lp3167
g374
ag375
aa(lp3168
g377
ag378
aa(lp3169
g380
ag381
aa(lp3170
g383
ag384
aa(lp3171
g386
ag387
aa(lp3172
g389
ag390
aa(lp3173
g392
ag393
aatp3174
Rp3175
aa(lp3176
g397
ag306
((lp3177
(lp3178
g312
ag397
aa(lp3179
g401
ag402
aatp3180
Rp3181
aatp3182
Rp3183
sg74
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg1975
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g25
g7
Ntp3201
Rp3202
(dp3203
g29
(dp3204
sg31
g5
(g32
g7
Ntp3205
Rp3206
(dp3207
g36
g37
(g38
tp3208
Rp3209
(dp3210
g45
g46
sS'overlay_gm'
p3211
g44
sg1436
g44
sS'overlay_csf'
p3212
g44
sS'overlay_wm'
p3213
g44
sbsg53
(lp3214
g1436
ag3212
ag3213
ag3211
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp3215
sg61
S'montage_csf_gm_wm_0'
p3216
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp3217
sg73
Nsg74
Nsb(dp3218
sg5
(g25
g7
Ntp3219
Rp3220
(dp3221
g29
(dp3222
sg31
g5
(g1403
g7
Ntp3223
Rp3224
(dp3225
g1407
(lp3226
g3212
ag3213
ag3211
ag1436
ag1437
asg36
g37
(g1410
tp3227
Rp3228
(dp3229
g88
I00
sg1437
S'montage_csf_gm_wm_s.png'
p3230
sg3211
g44
sg1414
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3231
sg3212
g44
sg3213
g44
sg1436
g44
sg45
g46
sbsg1416
(dp3232
g1437
Nssg1419
(lp3233
g1437
asg1421
Nsbsg56
Nsg57
g1484
sg59
(dp3234
sg61
g3216
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1484
sg70
Nsg71
(lp3235
sg73
Nsg74
Nsb(dp3236
sg5
(g25
g7
Ntp3237
Rp3238
(dp3239
g29
(dp3240
sg31
g5
(g32
g7
Ntp3241
Rp3242
(dp3243
g36
g37
(g38
tp3244
Rp3245
(dp3246
g45
g46
sS'resampled_overlay_csf'
p3247
g44
sS'resampled_overlay_gm'
p3248
g44
sg1462
g44
sg1463
g44
sg1461
g44
sS'resampled_overlay_wm'
p3249
g44
sbsg53
(lp3250
g1462
ag1463
ag1461
ag3247
ag3249
ag3248
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp3251
sg61
g3216
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp3252
sg73
Nsg74
Nsb(dp3253
sg5
(g25
g7
Ntp3254
Rp3255
(dp3256
g29
(dp3257
sg31
g5
(g1403
g7
Ntp3258
Rp3259
(dp3260
g1407
(lp3261
g1409
asg36
g37
(g1410
tp3262
Rp3263
(dp3264
g88
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3265
sg1409
g44
sg45
g46
sbsg1416
(dp3266
g1418
Nssg1419
(lp3267
g1418
asg1421
Nsbsg56
Nsg64
I00
sg59
(dp3268
sg66
Nsg63
Nsg73
Nsg57
S'resample_o_wm'
p3269
sg61
g3216
sg65
I00
sg67
Nsg68
I00
sg69
g3269
sg70
Nsg71
(lp3270
sg74
Nsb(dp3271
sg5
(g25
g7
Ntp3272
Rp3273
(dp3274
g29
(dp3275
sg31
g5
(g1403
g7
Ntp3276
Rp3277
(dp3278
g1407
(lp3279
g1409
asg36
g37
(g1410
tp3280
Rp3281
(dp3282
g88
I00
sg1414
g3265
sg1409
g44
sg45
g46
sbsg1416
(dp3283
g1418
Nssg1419
(lp3284
g1418
asg1421
Nsbsg56
Nsg64
I00
sg59
(dp3285
sg66
Nsg63
Nsg73
Nsg57
S'resample_o_gm'
p3286
sg61
g3216
sg65
I00
sg67
Nsg68
I00
sg69
g3286
sg70
Nsg71
(lp3287
sg74
Nsb(dp3288
sg5
(g25
g7
Ntp3289
Rp3290
(dp3291
g29
(dp3292
sg31
g5
(g1403
g7
Ntp3293
Rp3294
(dp3295
g1407
(lp3296
g1409
asg36
g37
(g1410
tp3297
Rp3298
(dp3299
g88
I00
sg1414
g3265
sg1409
g44
sg45
g46
sbsg1416
(dp3300
g1418
Nssg1419
(lp3301
g1418
asg1421
Nsbsg56
Nsg57
g1501
sg59
(dp3302
sg61
g3216
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1501
sg70
Nsg71
(lp3303
sg73
Nsg74
Nsb(dp3304
sg5
(g25
g7
Ntp3305
Rp3306
(dp3307
g29
(dp3308
sg31
g5
(g1403
g7
Ntp3309
Rp3310
(dp3311
g1407
(lp3312
g3212
ag3213
ag3211
ag1436
ag1437
asg36
g37
(g1410
tp3313
Rp3314
(dp3315
g88
I00
sg1437
S'montage_csf_gm_wm_a.png'
p3316
sg3211
g44
sg1414
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3317
sg3212
g44
sg3213
g44
sg1436
g44
sg45
g46
sbsg1416
(dp3318
g1437
Nssg1419
(lp3319
g1437
asg1421
Nsbsg56
Nsg57
g1447
sg59
(dp3320
sg61
g3216
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1447
sg70
Nsg71
(lp3321
sg73
Nsg74
Nsb(dp3322
sg5
(g25
g7
Ntp3323
Rp3324
(dp3325
g29
(dp3326
sg31
g5
(g1403
g7
Ntp3327
Rp3328
(dp3329
g1407
(lp3330
g1409
asg36
g37
(g1410
tp3331
Rp3332
(dp3333
g88
I00
sg1414
g3265
sg1409
g44
sg45
g46
sbsg1416
(dp3334
g1418
Nssg1419
(lp3335
g1418
asg1421
Nsbsg56
Nsg64
I00
sg59
(dp3336
sg66
Nsg63
Nsg73
Nsg57
S'resample_o_csf'
p3337
sg61
g3216
sg65
I00
sg67
Nsg68
I00
sg69
g3337
sg70
Nsg71
(lp3338
sg74
Nsb(dp3339
ssg247
(dp3340
sg249
(dp3341
g3202
(dp3342
g3290
(dp3343
g253
(lp3344
(g1436
g1409
tp3345
assg3273
(dp3346
g253
(lp3347
(g3211
g1409
tp3348
assg3255
(dp3349
g253
(lp3350
(g3213
g1409
tp3351
assg3324
(dp3352
g253
(lp3353
(g3212
g1409
tp3354
asssg3220
(dp3355
g3238
(dp3356
g253
(lp3357
(g1437
g1463
tp3358
asssg3238
(dp3359
sg3255
(dp3360
g3306
(dp3361
g253
(lp3362
(g1418
g3213
tp3363
assg3238
(dp3364
g253
(lp3365
(g1418
g3249
tp3366
assg3220
(dp3367
g253
(lp3368
(g1418
g3213
tp3369
asssg3273
(dp3370
g3306
(dp3371
g253
(lp3372
(g1418
g3211
tp3373
assg3238
(dp3374
g253
(lp3375
(g1418
g3248
tp3376
assg3220
(dp3377
g253
(lp3378
(g1418
g3211
tp3379
asssg3290
(dp3380
g3306
(dp3381
g253
(lp3382
(g1418
g1436
tp3383
assg3238
(dp3384
g253
(lp3385
(g1418
g1461
tp3386
assg3220
(dp3387
g253
(lp3388
(g1418
g1436
tp3389
asssg3306
(dp3390
g3238
(dp3391
g253
(lp3392
(g1437
g1462
tp3393
asssg3324
(dp3394
g3306
(dp3395
g253
(lp3396
(g1418
g3212
tp3397
assg3238
(dp3398
g253
(lp3399
(g1418
g3247
tp3400
assg3220
(dp3401
g253
(lp3402
(g1418
g3212
tp3403
assssg295
g3341
sg296
(dp3404
g3202
(dp3405
sg3220
(dp3406
g3290
g3387
sg3273
g3377
sg3255
g3367
sg3324
g3401
ssg3238
(dp3407
g3255
g3364
sg3220
g3356
sg3273
g3374
sg3324
g3398
sg3290
g3384
sg3306
g3391
ssg3255
(dp3408
g3202
g3349
ssg3273
(dp3409
g3202
g3346
ssg3290
(dp3410
g3202
g3343
ssg3306
(dp3411
g3290
g3381
sg3273
g3371
sg3255
g3361
sg3324
g3395
ssg3324
(dp3412
g3202
g3352
sssg304
g3341
sbsg57
g3216
sg61
g1067
sg69
g3216
sg70
g306
((lp3413
(lp3414
g309
ag306
((lp3415
(lp3416
g312
ag309
aa(lp3417
g314
ag315
aa(lp3418
g317
ag318
aa(lp3419
g320
ag321
aa(lp3420
g323
ag324
aa(lp3421
g326
ag327
aa(lp3422
g329
ag330
aa(lp3423
g332
ag333
aatp3424
Rp3425
aa(lp3426
g337
ag306
((lp3427
(lp3428
g312
ag337
aa(lp3429
g341
ag342
aa(lp3430
g344
ag345
aa(lp3431
g347
ag348
aa(lp3432
g350
ag351
aa(lp3433
g353
ag354
aa(lp3434
g356
ag357
aa(lp3435
g359
ag360
aa(lp3436
g362
ag363
aa(lp3437
g365
ag366
aa(lp3438
g368
ag369
aa(lp3439
g371
ag372
aa(lp3440
g374
ag375
aa(lp3441
g377
ag378
aa(lp3442
g380
ag381
aa(lp3443
g383
ag384
aa(lp3444
g386
ag387
aa(lp3445
g389
ag390
aa(lp3446
g392
ag393
aatp3447
Rp3448
aa(lp3449
g397
ag306
((lp3450
(lp3451
g312
ag397
aa(lp3452
g401
ag402
aatp3453
Rp3454
aatp3455
Rp3456
sg74
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g25
g7
Ntp3466
Rp3467
(dp3468
g29
(dp3469
sg31
g5
(g32
g7
Ntp3470
Rp3471
(dp3472
g36
g37
(g38
tp3473
Rp3474
(dp3475
S'func_to_anat_linear_xfm'
p3476
g44
sg45
g46
sS'anat_func'
p3477
g44
sbsg53
(lp3478
g3476
ag3477
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp3479
sg61
S'func_to_anat_bbreg_0'
p3480
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp3481
sg73
Nsg74
Nsb(dp3482
sg5
(g25
g7
Ntp3483
Rp3484
(dp3485
g29
(dp3486
sg31
g5
(g80
g7
Ntp3487
Rp3488
(dp3489
g36
g37
(g84
tp3490
Rp3491
(dp3492
g88
I00
sg45
g46
sg89
S'-thr 0.5 -bin'
p3493
sg90
g44
sg91
g44
sg92
g44
sg93
g44
sg94
g95
sg96
g5
(g97
g98
(dp3494
g100
g101
stp3495
Rp3496
(dp3497
g105
S'environ_items'
p3498
sg57
g96
sbsg107
g44
sg108
g101
sg109
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'wm_bb_mask'
p3499
sg59
(dp3500
sg61
g3480
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g3499
sg70
Nsg71
(lp3501
sg73
Nsg74
Nsb(dp3502
sg5
(g25
g7
Ntp3503
Rp3504
(dp3505
g29
(dp3506
sg31
g5
(g32
g7
Ntp3507
Rp3508
(dp3509
g36
g37
(g38
tp3510
Rp3511
(dp3512
g45
g46
sS'linear_reg_matrix'
p3513
g44
sS'bbr_schedule'
p3514
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3515
sS'anat_wm_segmentation'
p3516
g44
sS'anat_skull'
p3517
g44
sg2627
g44
sbsg53
(lp3518
g2627
ag3517
ag3513
ag3516
ag3514
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp3519
sg61
g3480
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp3520
sg73
Nsg74
Nsb(dp3521
sg5
(g25
g7
Ntp3522
Rp3523
(dp3524
g29
(dp3525
sg31
g5
(g185
g7
Ntp3526
Rp3527
(dp3528
g36
g37
(g189
tp3529
Rp3530
(dp3531
g193
g44
sg45
g46
sg194
g44
sg195
g44
sg196
g44
sg197
g44
sg198
g44
sg199
g44
sg201
g44
sg202
g44
sg203
g44
sg204
g44
sg205
g44
sg206
g44
sg207
g44
sg208
g44
sg209
g44
sg210
g44
sg107
g44
sg211
g44
sg212
g44
sg213
g44
sg214
g44
sg88
I00
sg215
g44
sg216
g44
sg92
g44
sg217
g44
sg218
g44
sg94
g95
sg219
g44
sg220
g44
sg221
g44
sg222
g44
sg223
g44
sg91
g44
sg224
g44
sg225
g44
sg226
g44
sg227
I6
sg228
g44
sg229
g44
sg230
g44
sg231
g44
sg232
g44
sg96
g5
(g97
g98
(dp3532
g100
g101
stp3533
Rp3534
(dp3535
g105
S'environ_items'
p3536
sg57
g96
sbsg238
g44
sg239
g44
sg108
g101
sg240
g44
sg241
g44
sg242
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'bbreg_func_to_anat'
p3537
sg59
(dp3538
sg61
g3480
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g3537
sg70
Nsg71
(lp3539
sg73
Nsg74
Nsb(dp3540
ssg247
(dp3541
sg249
(dp3542
g3467
(dp3543
sg3484
(dp3544
g3523
(dp3545
g253
(lp3546
((g91
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3547
(ttp3548
g92
tp3549
asssg3504
(dp3550
g3484
(dp3551
g253
(lp3552
(g3516
g107
tp3553
assg3523
(dp3554
g253
(lp3555
(g3514
g216
tp3556
a(g2627
g107
tp3557
a(g3517
g196
tp3558
a(g3513
g194
tp3559
asssg3523
(dp3560
g3467
(dp3561
g253
(lp3562
(g228
g3476
tp3563
a(g91
g3477
tp3564
assssg295
g3542
sg296
(dp3565
g3467
(dp3566
g3523
g3561
ssg3484
(dp3567
g3504
g3551
ssg3504
(dp3568
sg3523
(dp3569
g3484
g3545
sg3504
g3554
sssg304
g3542
sbsg57
g3480
sg61
g1067
sg69
g3480
sg70
g306
((lp3570
(lp3571
g309
ag306
((lp3572
(lp3573
g312
ag309
aa(lp3574
g314
ag315
aa(lp3575
g317
ag318
aa(lp3576
g320
ag321
aa(lp3577
g323
ag324
aa(lp3578
g326
ag327
aa(lp3579
g329
ag330
aa(lp3580
g332
ag333
aatp3581
Rp3582
aa(lp3583
g337
ag306
((lp3584
(lp3585
g312
ag337
aa(lp3586
g341
ag342
aa(lp3587
g344
ag345
aa(lp3588
g347
ag348
aa(lp3589
g350
ag351
aa(lp3590
g353
ag354
aa(lp3591
g356
ag357
aa(lp3592
g359
ag360
aa(lp3593
g362
ag363
aa(lp3594
g365
ag366
aa(lp3595
g368
ag369
aa(lp3596
g371
ag372
aa(lp3597
g374
ag375
aa(lp3598
g377
ag378
aa(lp3599
g380
ag381
aa(lp3600
g383
ag384
aa(lp3601
g386
ag387
aa(lp3602
g389
ag390
aa(lp3603
g392
ag393
aatp3604
Rp3605
aa(lp3606
g397
ag306
((lp3607
(lp3608
g312
ag397
aa(lp3609
g401
ag402
aatp3610
Rp3611
aatp3612
Rp3613
sg74
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g25
g7
Ntp3620
Rp3621
(dp3622
g29
(dp3623
sg31
g5
(g1403
g7
Ntp3624
Rp3625
(dp3626
g1407
(lp3627
S'measure_file'
p3628
asg36
g37
(g1410
tp3629
Rp3630
(dp3631
g88
I00
sg45
g46
sg1414
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g44
sbsg1416
(dp3633
S'snr_storefl'
p3634
Nssg1419
(lp3635
g3634
asg1421
Nsbsg56
Nsg57
S'snr_val0'
p3636
sg59
(dp3637
sg61
g1067
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g3636
sg70
Nsg71
(lp3638
sg73
Nsg74
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g25
g7
Ntp3648
Rp3649
(dp3650
g29
(dp3651
sg31
g5
(g1403
g7
Ntp3652
Rp3653
(dp3654
g1407
(lp3655
g3628
ag1863
asg36
g37
(g1410
tp3656
Rp3657
(dp3658
g88
I00
sg45
g46
sg1414
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g44
sg1863
S'snr'
p3660
sbsg1416
(dp3661
g1870
Nssg1419
(lp3662
g1870
asg1421
Nsbsg56
Nsg64
I00
sg59
(dp3663
sg66
Nsg63
Nsg73
Nsg57
S'hist_snr_0'
p3664
sg61
g1067
sg65
I00
sg67
Nsg68
I00
sg69
g3664
sg70
Nsg71
(lp3665
sg74
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g25
g7
Ntp3678
Rp3679
(dp3680
g29
(dp3681
sg31
g5
(g1403
g7
Ntp3682
Rp3683
(dp3684
g1407
(lp3685
S'scan'
p3686
aS'rest_dict'
p3687
asg36
g37
(g1410
tp3688
Rp3689
(dp3690
g88
I00
sg3687
(dp3691
S'rest_1_rest'
p3692
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-16/KKI2009-16-fMRI.nii'
p3693
ssg1414
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3694
sg45
g46
sg3686
g44
sbsg1416
(dp3695
g1992
Nssg1419
(lp3696
g1992
asg1421
Nsbsg56
Nsg57
S'selectrest'
p3697
sg59
(dp3698
sg61
S'func_gather_0'
p3699
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g3697
sg70
Nsg71
(lp3700
sg73
Nsg74
Nsb(dp3701
sg5
(g25
g7
Ntp3702
Rp3703
(dp3704
g29
(dp3705
sg31
g5
(g32
g7
Ntp3706
Rp3707
(dp3708
g36
g37
(g38
tp3709
Rp3710
(dp3711
g45
g46
sg3686
g44
sS'subject'
p3712
S'10_2876654632'
p3713
sbsg53
(lp3714
g3712
ag3686
asg55
I01
sbsg56
Nsg57
S'inputnode'
p3715
sg59
(dp3716
sg61
g3699
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
(lp3717
(g3686
(lp3718
g3692
atp3719
asg68
I00
sg69
g3715
sg70
Nsg71
(lp3720
sg73
Nsg74
Nsb(dp3721
sg5
(g25
g7
Ntp3722
Rp3723
(dp3724
g29
(dp3725
sg31
g5
(g32
g7
Ntp3726
Rp3727
(dp3728
g36
g37
(g38
tp3729
Rp3730
(dp3731
g45
g46
sg3686
g44
sg1992
g44
sg3712
g44
sbsg53
(lp3732
g3712
ag1992
ag3686
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp3733
sg61
g3699
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp3734
sg73
Nsg74
Nsb(dp3735
ssg247
(dp3736
sg249
(dp3737
g3679
(dp3738
g3723
(dp3739
g253
(lp3740
(g1992
g1992
tp3741
asssg3703
(dp3742
g3679
(dp3743
g253
(lp3744
(g3686
g3686
tp3745
assg3723
(dp3746
g253
(lp3747
(g3712
g3712
tp3748
a(g3686
g3686
tp3749
asssg3723
(dp3750
ssg295
g3737
sg296
(dp3751
g3679
(dp3752
g3703
g3743
ssg3703
(dp3753
sg3723
(dp3754
g3679
g3739
sg3703
g3746
sssg304
g3737
sbsg57
g3699
sg61
g1067
sg69
g3699
sg70
g306
((lp3755
(lp3756
g309
ag306
((lp3757
(lp3758
g312
ag309
aa(lp3759
g314
ag315
aa(lp3760
g317
ag318
aa(lp3761
g320
ag321
aa(lp3762
g323
ag324
aa(lp3763
g326
ag327
aa(lp3764
g329
ag330
aa(lp3765
g332
ag333
aatp3766
Rp3767
aa(lp3768
g337
ag306
((lp3769
(lp3770
g312
ag337
aa(lp3771
g341
ag342
aa(lp3772
g344
ag345
aa(lp3773
g347
ag348
aa(lp3774
g350
ag351
aa(lp3775
g353
ag354
aa(lp3776
g356
ag357
aa(lp3777
g359
ag360
aa(lp3778
g362
ag363
aa(lp3779
g365
ag366
aa(lp3780
g368
ag369
aa(lp3781
g371
ag372
aa(lp3782
g374
ag375
aa(lp3783
g377
ag378
aa(lp3784
g380
ag381
aa(lp3785
g383
ag384
aa(lp3786
g386
ag387
aa(lp3787
g389
ag390
aa(lp3788
g392
ag393
aatp3789
Rp3790
aa(lp3791
g397
ag306
((lp3792
(lp3793
g312
ag397
aa(lp3794
g401
ag402
aatp3795
Rp3796
aatp3797
Rp3798
sg74
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g25
g7
Ntp3808
Rp3809
(dp3810
g29
(dp3811
sg31
g5
(g1248
g7
Ntp3812
Rp3813
(dp3814
g36
g37
(g1252
tp3815
Rp3816
(dp3817
g88
I00
sg1256
g44
sg107
g44
sg1257
g44
sg91
g44
sg225
g44
sg92
g44
sg199
g44
sg1195
g44
sg1202
g1820
sg94
g95
sg96
g5
(g97
g98
(dp3818
g100
g101
stp3819
Rp3820
(dp3821
g105
S'environ_items'
p3822
sg57
g96
sbsg1263
g44
sg1264
g44
sg108
g101
sg1265
g44
sg1266
g44
sg45
g46
sg1267
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'func_mni_fsl_warp_0'
p3823
sg59
(dp3824
sg61
g1067
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g3823
sg70
Nsg71
(lp3825
sg73
Nsg74
Nsbg91
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g25
g7
Ntp3835
Rp3836
(dp3837
g29
(dp3838
sg31
g5
(g32
g7
Ntp3839
Rp3840
(dp3841
g36
g37
(g38
tp3842
Rp3843
(dp3844
g45
g46
sS'mask_outputs'
p3845
g44
sbsg53
(lp3846
g3845
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp3847
sg61
S'voxel_timeseries_0'
p3848
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp3849
sg73
Nsg74
Nsb(dp3850
sg5
(g25
g7
Ntp3851
Rp3852
(dp3853
g29
(dp3854
sg31
g5
(g32
g7
Ntp3855
Rp3856
(dp3857
g36
g37
(g38
tp3858
Rp3859
(dp3860
g45
g46
sg108
(lp3861
I01
aI01
asg1992
g44
sbsg53
(lp3862
g1992
ag108
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp3863
sg61
g3848
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp3864
sg73
Nsg74
Nsb(dp3865
sg5
(g25
g7
Ntp3866
Rp3867
(dp3868
g29
(dp3869
sg31
g5
(g1403
g7
Ntp3870
Rp3871
(dp3872
g1407
(lp3873
S'data_file'
p3874
aS'template'
p3875
ag108
asg36
g37
(g1410
tp3876
Rp3877
(dp3878
g88
I00
sg45
g46
sg3874
g44
sg1414
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3879
sg3875
g44
sg108
g44
sbsg1416
(dp3880
g91
Nssg1419
(lp3881
g91
asg1421
Nsbsg56
Nsg57
S'timeseries_voxel'
p3882
sg59
(dp3883
sg61
g3848
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g3882
sg70
Nsg71
(lp3884
sg73
Nsg74
Nsb(dp3885
sg5
(g25
g7
Ntp3886
Rp3887
(dp3888
g29
(dp3889
sg31
g5
(g32
g7
Ntp3890
Rp3891
(dp3892
g36
g37
(g38
tp3893
Rp3894
(dp3895
g45
g46
sg1976
g44
sbsg53
(lp3896
g1976
asg55
I01
sbsg56
Nsg57
S'input_mask'
p3897
sg59
(dp3898
sg61
g3848
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g3897
sg70
Nsg71
(lp3899
sg73
Nsg74
Nsb(dp3900
ssg247
(dp3901
sg249
(dp3902
g3836
(dp3903
sg3852
(dp3904
g3867
(dp3905
g253
(lp3906
(g1992
g3874
tp3907
a(g108
g108
tp3908
asssg3867
(dp3909
g3836
(dp3910
g253
(lp3911
(g91
g3845
tp3912
asssg3887
(dp3913
g3867
(dp3914
g253
(lp3915
(g1976
g3875
tp3916
assssg295
g3902
sg296
(dp3917
g3836
(dp3918
g3867
g3910
ssg3852
(dp3919
sg3867
(dp3920
g3852
g3905
sg3887
g3914
ssg3887
(dp3921
ssg304
g3902
sbsg57
g3848
sg61
g1067
sg69
g3848
sg70
g306
((lp3922
(lp3923
g309
ag306
((lp3924
(lp3925
g312
ag309
aa(lp3926
g314
ag315
aa(lp3927
g317
ag318
aa(lp3928
g320
ag321
aa(lp3929
g323
ag324
aa(lp3930
g326
ag327
aa(lp3931
g329
ag330
aa(lp3932
g332
ag333
aatp3933
Rp3934
aa(lp3935
g337
ag306
((lp3936
(lp3937
g312
ag337
aa(lp3938
g341
ag342
aa(lp3939
g344
ag345
aa(lp3940
g347
ag348
aa(lp3941
g350
ag351
aa(lp3942
g353
ag354
aa(lp3943
g356
ag357
aa(lp3944
g359
ag360
aa(lp3945
g362
ag363
aa(lp3946
g365
ag366
aa(lp3947
g368
ag369
aa(lp3948
g371
ag372
aa(lp3949
g374
ag375
aa(lp3950
g377
ag378
aa(lp3951
g380
ag381
aa(lp3952
g383
ag384
aa(lp3953
g386
ag387
aa(lp3954
g389
ag390
aa(lp3955
g392
ag393
aatp3956
Rp3957
aa(lp3958
g397
ag306
((lp3959
(lp3960
g312
ag397
aa(lp3961
g401
ag402
aatp3962
Rp3963
aatp3964
Rp3965
sg74
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g25
g7
Ntp3986
Rp3987
(dp3988
g29
(dp3989
sg31
g5
(g32
g7
Ntp3990
Rp3991
(dp3992
g36
g37
(g38
tp3993
Rp3994
(dp3995
g45
g46
sg1461
g44
sg1462
g44
sg1463
g44
sg1464
g44
sbsg53
(lp3996
g1462
ag1463
ag1461
ag1464
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp3997
sg61
S'montage_mni_anat_0'
p3998
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp3999
sg73
Nsg74
Nsb(dp4000
sg5
(g25
g7
Ntp4001
Rp4002
(dp4003
g29
(dp4004
sg31
g5
(g32
g7
Ntp4005
Rp4006
(dp4007
g36
g37
(g38
tp4008
Rp4009
(dp4010
g45
g46
sg1436
g44
sg1435
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p4011
sbsg53
(lp4012
g1436
ag1435
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp4013
sg61
g3998
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp4014
sg73
Nsg74
Nsb(dp4015
sg5
(g25
g7
Ntp4016
Rp4017
(dp4018
g29
(dp4019
sg31
g5
(g1403
g7
Ntp4020
Rp4021
(dp4022
g1407
(lp4023
g1409
asg36
g37
(g1410
tp4024
Rp4025
(dp4026
g88
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4027
sg1409
g44
sg45
g46
sbsg1416
(dp4028
g1418
Nssg1419
(lp4029
g1418
asg1421
Nsbsg56
Nsg57
g1501
sg59
(dp4030
sg61
g3998
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1501
sg70
Nsg71
(lp4031
sg73
Nsg74
Nsb(dp4032
sg5
(g25
g7
Ntp4033
Rp4034
(dp4035
g29
(dp4036
sg31
g5
(g1403
g7
Ntp4037
Rp4038
(dp4039
g1407
(lp4040
g1409
asg36
g37
(g1410
tp4041
Rp4042
(dp4043
g88
I00
sg1414
g4027
sg1409
g44
sg45
g46
sbsg1416
(dp4044
g1418
Nssg1419
(lp4045
g1418
asg1421
Nsbsg56
Nsg64
I00
sg59
(dp4046
sg66
Nsg63
Nsg73
Nsg57
g1423
sg61
g3998
sg65
I00
sg67
Nsg68
I00
sg69
g1423
sg70
Nsg71
(lp4047
sg74
Nsb(dp4048
sg5
(g25
g7
Ntp4049
Rp4050
(dp4051
g29
(dp4052
sg31
g5
(g1403
g7
Ntp4053
Rp4054
(dp4055
g1407
(lp4056
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp4057
Rp4058
(dp4059
g88
I00
sg1437
S'mni_anat_s.png'
p4060
sg1435
g44
sg1438
g1443
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4061
sg1436
g44
sg45
g46
sbsg1416
(dp4062
g1437
Nssg1419
(lp4063
g1437
asg1421
Nsbsg56
Nsg57
g1484
sg59
(dp4064
sg61
g3998
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1484
sg70
Nsg71
(lp4065
sg73
Nsg74
Nsb(dp4066
sg5
(g25
g7
Ntp4067
Rp4068
(dp4069
g29
(dp4070
sg31
g5
(g1403
g7
Ntp4071
Rp4072
(dp4073
g1407
(lp4074
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp4075
Rp4076
(dp4077
g88
I00
sg1437
S'mni_anat_a.png'
p4078
sg1435
g44
sg1438
g1443
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4079
sg1436
g44
sg45
g46
sbsg1416
(dp4080
g1437
Nssg1419
(lp4081
g1437
asg1421
Nsbsg56
Nsg57
g1447
sg59
(dp4082
sg61
g3998
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1447
sg70
Nsg71
(lp4083
sg73
Nsg74
Nsb(dp4084
ssg247
(dp4085
sg249
(dp4086
g3987
(dp4087
sg4002
(dp4088
g4017
(dp4089
g253
(lp4090
(g1436
g1409
tp4091
assg4034
(dp4092
g253
(lp4093
(g1435
g1409
tp4094
asssg4017
(dp4095
g3987
(dp4096
g253
(lp4097
(g1418
g1461
tp4098
assg4068
(dp4099
g253
(lp4100
(g1418
g1436
tp4101
assg4050
(dp4102
g253
(lp4103
(g1418
g1436
tp4104
asssg4034
(dp4105
g3987
(dp4106
g253
(lp4107
(g1418
g1464
tp4108
assg4068
(dp4109
g253
(lp4110
(g1418
g1435
tp4111
assg4050
(dp4112
g253
(lp4113
(g1418
g1435
tp4114
asssg4050
(dp4115
g3987
(dp4116
g253
(lp4117
(g1437
g1463
tp4118
asssg4068
(dp4119
g3987
(dp4120
g253
(lp4121
(g1437
g1462
tp4122
assssg295
g4086
sg296
(dp4123
g3987
(dp4124
g4050
g4116
sg4068
g4120
sg4017
g4096
sg4034
g4106
ssg4002
(dp4125
sg4017
(dp4126
g4002
g4089
ssg4034
(dp4127
g4002
g4092
ssg4050
(dp4128
g4017
g4102
sg4034
g4112
ssg4068
(dp4129
g4017
g4099
sg4034
g4109
sssg304
g4086
sbsg57
g3998
sg61
g1067
sg69
g3998
sg70
g306
((lp4130
(lp4131
g309
ag306
((lp4132
(lp4133
g312
ag309
aa(lp4134
g314
ag315
aa(lp4135
g317
ag318
aa(lp4136
g320
ag321
aa(lp4137
g323
ag324
aa(lp4138
g326
ag327
aa(lp4139
g329
ag330
aa(lp4140
g332
ag333
aatp4141
Rp4142
aa(lp4143
g337
ag306
((lp4144
(lp4145
g312
ag337
aa(lp4146
g341
ag342
aa(lp4147
g344
ag345
aa(lp4148
g347
ag348
aa(lp4149
g350
ag351
aa(lp4150
g353
ag354
aa(lp4151
g356
ag357
aa(lp4152
g359
ag360
aa(lp4153
g362
ag363
aa(lp4154
g365
ag366
aa(lp4155
g368
ag369
aa(lp4156
g371
ag372
aa(lp4157
g374
ag375
aa(lp4158
g377
ag378
aa(lp4159
g380
ag381
aa(lp4160
g383
ag384
aa(lp4161
g386
ag387
aa(lp4162
g389
ag390
aa(lp4163
g392
ag393
aatp4164
Rp4165
aa(lp4166
g397
ag306
((lp4167
(lp4168
g312
ag397
aa(lp4169
g401
ag402
aatp4170
Rp4171
aatp4172
Rp4173
sg74
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg1979
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g25
g7
Ntp4188
Rp4189
(dp4190
g29
(dp4191
sg31
g5
(g1248
g7
Ntp4192
Rp4193
(dp4194
g36
g37
(g1252
tp4195
Rp4196
(dp4197
g88
I00
sg1256
g44
sg107
g44
sg1257
g44
sg91
g44
sg225
g44
sg92
g44
sg199
S'nn'
p4198
sg1195
g44
sg1202
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg94
g95
sg96
g5
(g97
g98
(dp4200
g100
g101
stp4201
Rp4202
(dp4203
g105
S'environ_items'
p4204
sg57
g96
sbsg1263
g44
sg1264
g44
sg108
g101
sg1265
g44
sg1266
g44
sg45
g46
sg1267
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'func_mni_fsl_warp_mask_0'
p4205
sg59
(dp4206
sg61
g1067
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g4205
sg70
Nsg71
(lp4207
sg73
Nsg74
Nsbg91
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g25
g7
Ntp4217
Rp4218
(dp4219
g29
(dp4220
sg31
g5
(g32
g7
Ntp4221
Rp4222
(dp4223
g36
g37
(g38
tp4224
Rp4225
(dp4226
g45
g46
sg1461
g44
sg1462
g44
sg1463
g44
sg1464
g44
sbsg53
(lp4227
g1462
ag1463
ag1461
ag1464
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp4228
sg61
S'montage_skull_0'
p4229
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp4230
sg73
Nsg74
Nsb(dp4231
sg5
(g25
g7
Ntp4232
Rp4233
(dp4234
g29
(dp4235
sg31
g5
(g1403
g7
Ntp4236
Rp4237
(dp4238
g1407
(lp4239
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp4240
Rp4241
(dp4242
g88
I00
sg1437
S'skull_vis_a.png'
p4243
sg1435
g44
sg1438
g1443
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4244
sg1436
g44
sg45
g46
sbsg1416
(dp4245
g1437
Nssg1419
(lp4246
g1437
asg1421
Nsbsg56
Nsg57
g1447
sg59
(dp4247
sg61
g4229
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1447
sg70
Nsg71
(lp4248
sg73
Nsg74
Nsb(dp4249
sg5
(g25
g7
Ntp4250
Rp4251
(dp4252
g29
(dp4253
sg31
g5
(g1403
g7
Ntp4254
Rp4255
(dp4256
g1407
(lp4257
g1409
asg36
g37
(g1410
tp4258
Rp4259
(dp4260
g88
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4261
sg1409
g44
sg45
g46
sbsg1416
(dp4262
g1418
Nssg1419
(lp4263
g1418
asg1421
Nsbsg56
Nsg57
g1501
sg59
(dp4264
sg61
g4229
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1501
sg70
Nsg71
(lp4265
sg73
Nsg74
Nsb(dp4266
sg5
(g25
g7
Ntp4267
Rp4268
(dp4269
g29
(dp4270
sg31
g5
(g1403
g7
Ntp4271
Rp4272
(dp4273
g1407
(lp4274
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp4275
Rp4276
(dp4277
g88
I00
sg1437
S'skull_vis_s.png'
p4278
sg1435
g44
sg1438
g1443
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4279
sg1436
g44
sg45
g46
sbsg1416
(dp4280
g1437
Nssg1419
(lp4281
g1437
asg1421
Nsbsg56
Nsg57
g1484
sg59
(dp4282
sg61
g4229
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g1484
sg70
Nsg71
(lp4283
sg73
Nsg74
Nsb(dp4284
sg5
(g25
g7
Ntp4285
Rp4286
(dp4287
g29
(dp4288
sg31
g5
(g1403
g7
Ntp4289
Rp4290
(dp4291
g1407
(lp4292
g1409
asg36
g37
(g1410
tp4293
Rp4294
(dp4295
g88
I00
sg1414
g4261
sg1409
g44
sg45
g46
sbsg1416
(dp4296
g1418
Nssg1419
(lp4297
g1418
asg1421
Nsbsg56
Nsg64
I00
sg59
(dp4298
sg66
Nsg63
Nsg73
Nsg57
g1423
sg61
g4229
sg65
I00
sg67
Nsg68
I00
sg69
g1423
sg70
Nsg71
(lp4299
sg74
Nsb(dp4300
sg5
(g25
g7
Ntp4301
Rp4302
(dp4303
g29
(dp4304
sg31
g5
(g32
g7
Ntp4305
Rp4306
(dp4307
g36
g37
(g38
tp4308
Rp4309
(dp4310
g45
g46
sg1436
g44
sg1435
g44
sbsg53
(lp4311
g1436
ag1435
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp4312
sg61
g4229
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp4313
sg73
Nsg74
Nsb(dp4314
ssg247
(dp4315
sg249
(dp4316
g4218
(dp4317
sg4233
(dp4318
g4218
(dp4319
g253
(lp4320
(g1437
g1462
tp4321
asssg4251
(dp4322
g4218
(dp4323
g253
(lp4324
(g1418
g1461
tp4325
assg4233
(dp4326
g253
(lp4327
(g1418
g1436
tp4328
assg4268
(dp4329
g253
(lp4330
(g1418
g1436
tp4331
asssg4268
(dp4332
g4218
(dp4333
g253
(lp4334
(g1437
g1463
tp4335
asssg4286
(dp4336
g4218
(dp4337
g253
(lp4338
(g1418
g1464
tp4339
assg4233
(dp4340
g253
(lp4341
(g1418
g1435
tp4342
assg4268
(dp4343
g253
(lp4344
(g1418
g1435
tp4345
asssg4302
(dp4346
g4251
(dp4347
g253
(lp4348
(g1436
g1409
tp4349
assg4286
(dp4350
g253
(lp4351
(g1435
g1409
tp4352
assssg295
g4316
sg296
(dp4353
g4218
(dp4354
g4233
g4319
sg4268
g4333
sg4251
g4323
sg4286
g4337
ssg4233
(dp4355
g4251
g4326
sg4286
g4340
ssg4251
(dp4356
g4302
g4347
ssg4268
(dp4357
g4251
g4329
sg4286
g4343
ssg4286
(dp4358
g4302
g4350
ssg4302
(dp4359
ssg304
g4316
sbsg57
g4229
sg61
g1067
sg69
g4229
sg70
g306
((lp4360
(lp4361
g309
ag306
((lp4362
(lp4363
g312
ag309
aa(lp4364
g314
ag315
aa(lp4365
g317
ag318
aa(lp4366
g320
ag321
aa(lp4367
g323
ag324
aa(lp4368
g326
ag327
aa(lp4369
g329
ag330
aa(lp4370
g332
ag333
aatp4371
Rp4372
aa(lp4373
g337
ag306
((lp4374
(lp4375
g312
ag337
aa(lp4376
g341
ag342
aa(lp4377
g344
ag345
aa(lp4378
g347
ag348
aa(lp4379
g350
ag351
aa(lp4380
g353
ag354
aa(lp4381
g356
ag357
aa(lp4382
g359
ag360
aa(lp4383
g362
ag363
aa(lp4384
g365
ag366
aa(lp4385
g368
ag369
aa(lp4386
g371
ag372
aa(lp4387
g374
ag375
aa(lp4388
g377
ag378
aa(lp4389
g380
ag381
aa(lp4390
g383
ag384
aa(lp4391
g386
ag387
aa(lp4392
g389
ag390
aa(lp4393
g392
ag393
aatp4394
Rp4395
aa(lp4396
g397
ag306
((lp4397
(lp4398
g312
ag397
aa(lp4399
g401
ag402
aatp4400
Rp4401
aatp4402
Rp4403
sg74
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2644
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2645
(g5
(g25
g7
Ntp4413
Rp4414
(dp4415
g29
(dp4416
sg31
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g36
g37
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g88
I00
sg45
g46
sS'tpattern'
p4425
g44
sg91
g44
sS'tr'
p4426
g44
sg92
g44
sg199
g44
sg2236
g2304
sS'tzero'
p4427
g44
sS'ignore'
p4428
g44
sS'rltplus'
p4429
g44
sg94
g95
sS'tslice'
p4430
g44
sg107
g44
sS'rlt'
p4431
g44
sg96
g5
(g97
g98
(dp4432
tp4433
Rp4434
(dp4435
g105
S'environ_items'
p4436
sg57
g96
sbsbsg2243
g2304
sg111
Nsg112
g95
sbsg56
Nsg57
S'func_slice_timing_correction_0'
p4437
sg59
(dp4438
sg61
g1067
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g4437
sg70
Nsg71
(lp4439
sg73
Nsg74
Nsbg91
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g25
g7
Ntp4449
Rp4450
(dp4451
g29
(dp4452
sg31
g5
(g32
g7
Ntp4453
Rp4454
(dp4455
g36
g37
(g38
tp4456
Rp4457
(dp4458
g45
g46
sg108
(lp4459
I01
aI01
asg1992
g44
sbsg53
(lp4460
g1992
ag108
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp4461
sg61
S'roi_timeseries_0'
p4462
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp4463
sg73
Nsg74
Nsb(dp4464
sg5
(g25
g7
Ntp4465
Rp4466
(dp4467
g29
(dp4468
sg31
g5
(g32
g7
Ntp4469
Rp4470
(dp4471
g36
g37
(g38
tp4472
Rp4473
(dp4474
g45
g46
sS'roi_outputs'
p4475
g44
sbsg53
(lp4476
g4475
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp4477
sg61
g4462
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp4478
sg73
Nsg74
Nsb(dp4479
sg5
(g25
g7
Ntp4480
Rp4481
(dp4482
g29
(dp4483
sg31
g5
(g32
g7
Ntp4484
Rp4485
(dp4486
g36
g37
(g38
tp4487
Rp4488
(dp4489
g45
g46
sS'roi'
p4490
g44
sbsg53
(lp4491
g4490
asg55
I01
sbsg56
Nsg57
S'input_roi'
p4492
sg59
(dp4493
sg61
g4462
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g4492
sg70
Nsg71
(lp4494
sg73
Nsg74
Nsb(dp4495
sg5
(g25
g7
Ntp4496
Rp4497
(dp4498
g29
(dp4499
sg31
g5
(g1403
g7
Ntp4500
Rp4501
(dp4502
g1407
(lp4503
g3874
ag3875
ag108
asg36
g37
(g1410
tp4504
Rp4505
(dp4506
g88
I00
sg45
g46
sg3874
g44
sg1414
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4507
sg3875
g44
sg108
g44
sbsg1416
(dp4508
g91
Nssg1419
(lp4509
g91
asg1421
Nsbsg56
Nsg57
S'timeseries_roi'
p4510
sg59
(dp4511
sg61
g4462
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g4510
sg70
Nsg71
(lp4512
sg73
Nsg74
Nsb(dp4513
ssg247
(dp4514
sg249
(dp4515
g4450
(dp4516
g4497
(dp4517
g253
(lp4518
(g1992
g3874
tp4519
a(g108
g108
tp4520
asssg4466
(dp4521
sg4481
(dp4522
g4497
(dp4523
g253
(lp4524
(g4490
g3875
tp4525
asssg4497
(dp4526
g4466
(dp4527
g253
(lp4528
(g91
g4475
tp4529
assssg295
g4515
sg296
(dp4530
g4450
(dp4531
sg4466
(dp4532
g4497
g4527
ssg4481
(dp4533
sg4497
(dp4534
g4450
g4517
sg4481
g4523
sssg304
g4515
sbsg57
g4462
sg61
g1067
sg69
g4462
sg70
g306
((lp4535
(lp4536
g309
ag306
((lp4537
(lp4538
g312
ag309
aa(lp4539
g314
ag315
aa(lp4540
g317
ag318
aa(lp4541
g320
ag321
aa(lp4542
g323
ag324
aa(lp4543
g326
ag327
aa(lp4544
g329
ag330
aa(lp4545
g332
ag333
aatp4546
Rp4547
aa(lp4548
g337
ag306
((lp4549
(lp4550
g312
ag337
aa(lp4551
g341
ag342
aa(lp4552
g344
ag345
aa(lp4553
g347
ag348
aa(lp4554
g350
ag351
aa(lp4555
g353
ag354
aa(lp4556
g356
ag357
aa(lp4557
g359
ag360
aa(lp4558
g362
ag363
aa(lp4559
g365
ag366
aa(lp4560
g368
ag369
aa(lp4561
g371
ag372
aa(lp4562
g374
ag375
aa(lp4563
g377
ag378
aa(lp4564
g380
ag381
aa(lp4565
g383
ag384
aa(lp4566
g386
ag387
aa(lp4567
g389
ag390
aa(lp4568
g392
ag393
aatp4569
Rp4570
aa(lp4571
g397
ag306
((lp4572
(lp4573
g312
ag397
aa(lp4574
g401
ag402
aatp4575
Rp4576
aatp4577
Rp4578
sg74
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g25
g7
Ntp4589
Rp4590
(dp4591
g29
(dp4592
sg31
g5
(g185
g7
Ntp4593
Rp4594
(dp4595
g36
g37
(g189
tp4596
Rp4597
(dp4598
g193
g44
sg45
g46
sg194
g44
sg195
g44
sg196
g44
sg197
g44
sg198
g44
sg199
g44
sg201
g44
sg202
g44
sg203
g44
sg204
g44
sg205
g44
sg206
g44
sg207
g44
sg208
g44
sg209
g44
sg210
g44
sg107
g44
sg211
g44
sg212
g44
sg213
g44
sg214
g44
sg88
I00
sg215
g44
sg216
g44
sg92
S'-applyisoxfm 2'
p4599
sg217
g44
sg218
g44
sg94
g95
sg219
g44
sg220
g44
sg221
g44
sg222
g44
sg223
g44
sg91
g44
sg224
g44
sg225
g44
sg226
g44
sg227
g44
sg228
g44
sg229
g44
sg230
g44
sg231
g44
sg232
g44
sg96
g5
(g97
g98
(dp4600
g100
g101
stp4601
Rp4602
(dp4603
g105
S'environ_items'
p4604
sg57
g96
sbsg238
g44
sg239
g44
sg108
g101
sg240
g44
sg241
g44
sg242
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'func_to_2mm_flirt_applyxfm'
p4605
sg59
(dp4606
sg61
S'nuisance_0'
p4607
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g4605
sg70
Nsg71
(lp4608
sg73
Nsg74
Nsb(dp4609
sg5
(g25
g7
Ntp4610
Rp4611
(dp4612
g29
(dp4613
sg31
g5
(g1403
g7
Ntp4614
Rp4615
(dp4616
g1407
(lp4617
g3874
aS'ventricles_mask_file'
p4618
aS'wm_seg_file'
p4619
aS'csf_seg_file'
p4620
aS'gm_seg_file'
p4621
ag486
ag448
ag504
asg36
g37
(g1410
tp4622
Rp4623
(dp4624
g88
I00
sg45
g46
sg486
g44
sg448
g44
sg3874
g44
sg1414
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4625
sg4621
g44
sg4618
g44
sg504
g44
sg4620
g44
sg4619
g44
sbsg1416
(dp4626
S'file_gm'
p4627
NsS'file_wm'
p4628
NsS'file_csf'
p4629
Nssg1419
(lp4630
g4628
ag4629
ag4627
asg1421
Nsbsg56
Nsg57
S'tissue_masks'
p4631
sg59
(dp4632
sg61
g4607
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g4631
sg70
Nsg71
(lp4633
sg73
Nsg74
Nsb(dp4634
sg5
(g25
g7
Ntp4635
Rp4636
(dp4637
g29
(dp4638
sg31
g5
(g185
g7
Ntp4639
Rp4640
(dp4641
g36
g37
(g189
tp4642
Rp4643
(dp4644
g193
g44
sg45
g46
sg194
g44
sg195
g44
sg196
g44
sg197
g44
sg198
g44
sg199
g200
sg201
g44
sg202
g44
sg203
g44
sg204
g44
sg205
g44
sg206
g44
sg207
g44
sg208
g44
sg209
g44
sg210
g44
sg107
g44
sg211
g44
sg212
g44
sg213
g44
sg214
g44
sg88
I00
sg215
g44
sg216
g44
sg92
g4599
sg217
g44
sg218
g44
sg94
g95
sg219
g44
sg220
g44
sg221
g44
sg222
g44
sg223
g44
sg91
g44
sg224
g44
sg225
g44
sg226
g44
sg227
g44
sg228
g44
sg229
g44
sg230
g44
sg231
g44
sg232
g44
sg96
g5
(g97
g98
(dp4645
g100
g101
stp4646
Rp4647
(dp4648
g105
S'environ_items'
p4649
sg57
g96
sbsg238
g44
sg239
g44
sg108
g101
sg240
g44
sg241
g44
sg242
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'csf_anat_to_2mm_flirt_applyxfm'
p4650
sg59
(dp4651
sg61
g4607
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g4650
sg70
Nsg71
(lp4652
sg73
Nsg74
Nsb(dp4653
sg5
(g25
g7
Ntp4654
Rp4655
(dp4656
g29
(dp4657
sg31
g5
(g32
g7
Ntp4658
Rp4659
(dp4660
g36
g37
(g38
tp4661
Rp4662
(dp4663
g45
g46
sS'regressors'
p4664
g44
sg3712
g44
sbsg53
(lp4665
g3712
ag4664
asg55
I01
sbsg56
Nsg57
g132
sg59
(dp4666
sg61
g4607
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g132
sg70
Nsg71
(lp4667
sg73
Nsg74
Nsb(dp4668
sg5
(g25
g7
Ntp4669
Rp4670
(dp4671
g29
(dp4672
sg31
g5
(g185
g7
Ntp4673
Rp4674
(dp4675
g36
g37
(g189
tp4676
Rp4677
(dp4678
g193
g44
sg45
g46
sg194
g44
sg195
g44
sg196
g44
sg197
g44
sg198
g44
sg199
g200
sg201
g44
sg202
g44
sg203
g44
sg204
g44
sg205
g44
sg206
g44
sg207
g44
sg208
g44
sg209
g44
sg210
g44
sg107
g44
sg211
g44
sg212
g44
sg213
g44
sg214
g44
sg88
I00
sg215
g44
sg216
g44
sg92
g4599
sg217
g44
sg218
g44
sg94
g95
sg219
g44
sg220
g44
sg221
g44
sg222
g44
sg223
g44
sg91
g44
sg224
g44
sg225
g44
sg226
g44
sg227
g44
sg228
g44
sg229
g44
sg230
g44
sg231
g44
sg232
g44
sg96
g5
(g97
g98
(dp4679
g100
g101
stp4680
Rp4681
(dp4682
g105
S'environ_items'
p4683
sg57
g96
sbsg238
g44
sg239
g44
sg108
g101
sg240
g44
sg241
g44
sg242
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'ho_mni_to_2mm_flirt_applyxfm'
p4684
sg59
(dp4685
sg61
g4607
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g4684
sg70
Nsg71
(lp4686
sg73
Nsg74
Nsb(dp4687
sg5
(g25
g7
Ntp4688
Rp4689
(dp4690
g29
(dp4691
sg31
g5
(g185
g7
Ntp4692
Rp4693
(dp4694
g36
g37
(g189
tp4695
Rp4696
(dp4697
g193
g44
sg45
g46
sg194
g44
sg195
g44
sg196
g44
sg197
g44
sg198
g44
sg199
g200
sg201
g44
sg202
g44
sg203
g44
sg204
g44
sg205
g44
sg206
g44
sg207
g44
sg208
g44
sg209
g44
sg210
g44
sg107
g44
sg211
g44
sg212
g44
sg213
g44
sg214
g44
sg88
I00
sg215
g44
sg216
g44
sg92
g4599
sg217
g44
sg218
g44
sg94
g95
sg219
g44
sg220
g44
sg221
g44
sg222
g44
sg223
g44
sg91
g44
sg224
g44
sg225
g44
sg226
g44
sg227
g44
sg228
g44
sg229
g44
sg230
g44
sg231
g44
sg232
g44
sg96
g5
(g97
g98
(dp4698
g100
g101
stp4699
Rp4700
(dp4701
g105
S'environ_items'
p4702
sg57
g96
sbsg238
g44
sg239
g44
sg108
g101
sg240
g44
sg241
g44
sg242
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'wm_anat_to_2mm_flirt_applyxfm'
p4703
sg59
(dp4704
sg61
g4607
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g4703
sg70
Nsg71
(lp4705
sg73
Nsg74
Nsb(dp4706
sg5
(g25
g7
Ntp4707
Rp4708
(dp4709
g29
(dp4710
sg31
g5
(g1403
g7
Ntp4711
Rp4712
(dp4713
g1407
(lp4714
g3712
aS'selector'
p4715
aS'wm_sig_file'
p4716
aS'csf_sig_file'
p4717
aS'gm_sig_file'
p4718
aS'motion_file'
p4719
aS'compcor_ncomponents'
p4720
asg36
g37
(g1410
tp4721
Rp4722
(dp4723
g88
I00
sg45
g46
sg4719
g44
sg4720
g44
sg1414
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4724
sg4717
g44
sg4716
g44
sg4718
g44
sg4715
g44
sg3712
g44
sbsg1416
(dp4725
S'regressors_file'
p4726
NsS'residual_file'
p4727
Nssg1419
(lp4728
g4727
ag4726
asg1421
Nsbsg56
Nsg57
S'residuals'
p4729
sg59
(dp4730
sg61
g4607
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
(lp4731
(g4715
(lp4732
(dp4733
S'global'
p4734
I0
sS'linear'
p4735
I1
sS'wm'
p4736
I0
sS'pc1'
p4737
I0
sS'motion'
p4738
I0
sS'quadratic'
p4739
I1
sS'gm'
p4740
I0
sS'compcor'
p4741
I1
sS'csf'
p4742
I1
satp4743
a(g4720
(lp4744
I5
atp4745
asg68
I00
sg69
g4729
sg70
Nsg71
(lp4746
sg73
Nsg74
Nsb(dp4747
sg5
(g25
g7
Ntp4748
Rp4749
(dp4750
g29
(dp4751
sg31
g5
(g185
g7
Ntp4752
Rp4753
(dp4754
g36
g37
(g189
tp4755
Rp4756
(dp4757
g193
g44
sg45
g46
sg194
g44
sg195
g44
sg196
g44
sg197
g44
sg198
g44
sg199
g200
sg201
g44
sg202
g44
sg203
g44
sg204
g44
sg205
g44
sg206
g44
sg207
g44
sg208
g44
sg209
g44
sg210
g44
sg107
g44
sg211
g44
sg212
g44
sg213
g44
sg214
g44
sg88
I00
sg215
g44
sg216
g44
sg92
g4599
sg217
g44
sg218
g44
sg94
g95
sg219
g44
sg220
g44
sg221
g44
sg222
g44
sg223
g44
sg91
g44
sg224
g44
sg225
g44
sg226
g44
sg227
g44
sg228
g44
sg229
g44
sg230
g44
sg231
g44
sg232
g44
sg96
g5
(g97
g98
(dp4758
g100
g101
stp4759
Rp4760
(dp4761
g105
S'environ_items'
p4762
sg57
g96
sbsg238
g44
sg239
g44
sg108
g101
sg240
g44
sg241
g44
sg242
g44
sbsg110
g101
sg111
Nsg112
g95
sbsg56
Nsg57
S'gm_anat_to_2mm_flirt_applyxfm'
p4763
sg59
(dp4764
sg61
g4607
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g4763
sg70
Nsg71
(lp4765
sg73
Nsg74
Nsb(dp4766
sg5
(g25
g7
Ntp4767
Rp4768
(dp4769
g29
(dp4770
sg31
g5
(g32
g7
Ntp4771
Rp4772
(dp4773
g36
g37
(g38
tp4774
Rp4775
(dp4776
S'motion_components'
p4777
g44
sS'anat_to_mni_initial_xfm'
p4778
g44
sS'lat_ventricles_mask'
p4779
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4780
sg429
g44
sS'anat_to_mni_rigid_xfm'
p4781
g44
sg4720
g44
sS'anat_to_mni_affine_xfm'
p4782
g44
sg4715
g44
sg428
g44
sS'template_brain'
p4783
g44
sg3476
g44
sS'mni_to_anat_linear_xfm'
p4784
g44
sg430
g44
sg45
g46
sg3712
g44
sbsg53
(lp4785
g3712
ag428
ag430
ag429
ag4784
ag4778
ag4781
ag4782
ag3476
ag4779
ag4777
ag4715
ag4720
ag4783
asg55
I01
sbsg56
Nsg57
g58
sg59
(dp4786
sg61
g4607
sg63
Nsg64
I00
sg65
I00
sg66
Nsg67
Nsg68
I00
sg69
g58
sg70
Nsg71
(lp4787
sg73
Nsg74
Nsb(dp4788
ssg247
(dp4789
sg249
(dp4790
g4590
(dp4791
g4611
(dp4792
g253
(lp4793
(g91
g3874
tp4794
asssg4611
(dp4795
g4708
(dp4796
g253
(lp4797
(g4628
g4716
tp4798
a(g4629
g4717
tp4799
a(g4627
g4718
tp4800
asssg4636
(dp4801
g4611
(dp4802
g253
(lp4803
(g91
g4620
tp4804
asssg4655
(dp4805
sg4670
(dp4806
g4611
(dp4807
g253
(lp4808
(g91
g4618
tp4809
asssg4689
(dp4810
g4611
(dp4811
g253
(lp4812
(g91
g4619
tp4813
asssg4708
(dp4814
g4655
(dp4815
g253
(lp4816
(g4727
g3712
tp4817
a(g4726
g4664
tp4818
asssg4749
(dp4819
g4611
(dp4820
g253
(lp4821
(g91
g4621
tp4822
asssg4768
(dp4823
g4590
(dp4824
g253
(lp4825
(g3712
g107
tp4826
a(g430
g196
tp4827
a(g3476
g194
tp4828
assg4636
(dp4829
g253
(lp4830
(g430
g107
tp4831
a(g430
g196
tp4832
assg4670
(dp4833
g253
(lp4834
(g4784
g194
tp4835
a(g4779
g107
tp4836
a(g430
g196
tp4837
assg4689
(dp4838
g253
(lp4839
(g428
g107
tp4840
a(g428
g196
tp4841
assg4749
(dp4842
g253
(lp4843
(g429
g107
tp4844
a(g429
g196
tp4845
assg4708
(dp4846
g253
(lp4847
(g3712
g3712
tp4848
a(g4777
g4719
tp4849
a(g4715
g4715
tp4850
a(g4720
g4720
tp4851
assssg295
g4790
sg296
(dp4852
g4590
(dp4853
g4768
g4824
ssg4611
(dp4854
g4590
g4792
sg4749
g4820
sg4670
g4807
sg4636
g4802
sg4689
g4811
ssg4636
(dp4855
g4768
g4829
ssg4655
(dp4856
g4708
g4815
ssg4670
(dp4857
g4768
g4833
ssg4689
(dp4858
g4768
g4838
ssg4708
(dp4859
g4768
g4846
sg4611
g4796
ssg4749
(dp4860
g4768
g4842
ssg4768
(dp4861
ssg304
g4790
sbsg57
g4607
sg61
g1067
sg69
g4607
sg70
g306
((lp4862
(lp4863
g309
ag306
((lp4864
(lp4865
g312
ag309
aa(lp4866
g314
ag315
aa(lp4867
g317
ag318
aa(lp4868
g320
ag321
aa(lp4869
g323
ag324
aa(lp4870
g326
ag327
aa(lp4871
g329
ag330
aa(lp4872
g332
ag333
aatp4873
Rp4874
aa(lp4875
g337
ag306
((lp4876
(lp4877
g312
ag337
aa(lp4878
g341
ag342
aa(lp4879
g344
ag345
aa(lp4880
g347
ag348
aa(lp4881
g350
ag351
aa(lp4882
g353
ag354
aa(lp4883
g356
ag357
aa(lp4884
g359
ag360
aa(lp4885
g362
ag363
aa(lp4886
g365
ag366
aa(lp4887
g368
ag369
aa(lp4888
g371
ag372
aa(lp4889
g374
ag375
aa(lp4890
g377
ag378
aa(lp4891
g380
ag381
aa(lp4892
g383
ag384
aa(lp4893
g386
ag387
aa(lp4894
g389
ag390
aa(lp4895
g392
ag393
aatp4896
Rp4897
aa(lp4898
g397
ag306
((lp4899
(lp4900
g312
ag397
aa(lp4901
g401
ag402
aatp4902
Rp4903
aatp4904
Rp4905
sg74
NsbS'outputspec.subject'
p4906
tp4907
sg2053
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg2054
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Completed'
p4921
sS'strat_0'
p4922
(lp4923
g2246
ag1140
ag305
ag4437
ag2478
ag2893
aS'func_to_anat_FLIRT_0'
p4924
ag3480
ag1900
ag4607
ag3823
ag4462
ag3848
asg1931
g3713
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1430306470.613993
s.