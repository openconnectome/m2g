(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(cnipype.pipeline.engine
Node
p18
g7
Ntp19
Rp20
(dp21
S'input_source'
p22
(dp23
sS'_interface'
p24
g5
(cnipype.interfaces.fsl.preprocess
FAST
p25
g7
Ntp26
Rp27
(dp28
S'inputs'
p29
ctraits.traits
__newobj__
p30
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p31
tp32
Rp33
(dp34
S'number_classes'
p35
ctraits.trait_base
_Undefined
p36
(tRp37
sS'out_basename'
p38
S'segment'
p39
sS'hyper'
p40
g37
sS'verbose'
p41
g37
sS'init_seg_smooth'
p42
g37
sS'init_transform'
p43
g37
sS'no_pve'
p44
g37
sS'output_biascorrected'
p45
g37
sS'mixel_smooth'
p46
g37
sS'segments'
p47
I01
sS'iters_afterbias'
p48
g37
sS'bias_lowpass'
p49
g37
sS'other_priors'
p50
g37
sS'__traits_version__'
p51
S'4.5.0'
p52
sS'ignore_exception'
p53
I00
sS'img_type'
p54
I1
sS'args'
p55
g37
sS'probability_maps'
p56
I01
sS'manual_seg'
p57
g37
sS'terminal_output'
p58
S'stream'
p59
sS'output_biasfield'
p60
g37
sS'no_bias'
p61
g37
sS'use_priors'
p62
g37
sS'in_files'
p63
g37
sS'segment_iters'
p64
g37
sS'environ'
p65
g5
(ctraits.trait_handlers
TraitDictObject
p66
c__builtin__
dict
p67
(dp68
S'FSLOUTPUTTYPE'
p69
S'NIFTI_GZ'
p70
stp71
Rp72
(dp73
S'name_items'
p74
S'environ_items'
p75
sS'name'
p76
g65
sbsS'output_type'
p77
g70
sS'bias_iters'
p78
g37
sbsS'_output_type'
p79
g70
sS'_environ'
p80
NsS'_terminal_output'
p81
g59
sbsS'_result'
p82
Nsg76
g39
sS'plugin_args'
p83
(dp84
sS'_hierarchy'
p85
S'seg_preproc_0'
p86
sS'itersource'
p87
NsS'run_without_submitting'
p88
I00
sS'synchronize'
p89
I00
sS'parameterization'
p90
NsS'iterables'
p91
NsS'_got_inputs'
p92
I00
sS'_id'
p93
g39
sS'config'
p94
NsS'needed_outputs'
p95
(lp96
sS'overwrite'
p97
NsS'base_dir'
p98
Nsb(dp99
sg5
(g18
g7
Ntp100
Rp101
(dp102
g22
(dp103
sg24
g5
(cnipype.interfaces.utility
IdentityInterface
p104
g7
Ntp105
Rp106
(dp107
g29
g30
(cnipype.interfaces.base
DynamicTraitedSpec
p108
tp109
Rp110
(dp111
g51
g52
sS'csf_threshold'
p112
(lp113
F0.96
asbsS'_fields'
p114
(lp115
g112
asS'_mandatory_inputs'
p116
I01
sbsg82
Nsg76
g112
sg83
(dp117
sg85
g86
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
(g112
(lp118
F0.96
atp119
sg92
I00
sg93
g112
sg94
Nsg95
(lp120
sg97
Nsg98
Nsb(dp121
sg5
(g18
g7
Ntp122
Rp123
(dp124
g22
(dp125
sg24
g5
(g104
g7
Ntp126
Rp127
(dp128
g29
g30
(g108
tp129
Rp130
(dp131
g51
g52
sS'wm_threshold'
p132
(lp133
F0.96
asbsg114
(lp134
g132
asg116
I01
sbsg82
Nsg76
g132
sg83
(dp135
sg85
g86
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
(g132
(lp136
F0.96
atp137
sg92
I00
sg93
g132
sg94
Nsg95
(lp138
sg97
Nsg98
Nsb(dp139
sg5
(g18
g7
Ntp140
Rp141
(dp142
g22
(dp143
sg24
g5
(g104
g7
Ntp144
Rp145
(dp146
g29
g30
(g108
tp147
Rp148
(dp149
S'partial_volume_files'
p150
g37
sg51
g52
sS'gm_combo'
p151
g37
sS'mixeltype'
p152
g37
sS'csf_mni2t1'
p153
g37
sS'wm_bin'
p154
g37
sS'csf_bin'
p155
g37
sg56
g37
sS'wm_mni2t1'
p156
g37
sS'csf_combo'
p157
g37
sS'wm_combo'
p158
g37
sS'wm_mask'
p159
g37
sS'gm_mask'
p160
g37
sS'csf_mask'
p161
g37
sS'gm_bin'
p162
g37
sS'partial_volume_map'
p163
g37
sS'gm_mni2t1'
p164
g37
sbsg114
(lp165
g153
ag157
ag155
ag161
ag164
ag151
ag162
ag160
ag156
ag158
ag154
ag56
ag152
ag163
ag150
ag159
asg116
I01
sbsg82
Nsg76
S'outputspec'
p166
sg83
(dp167
sg85
g86
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp168
sg97
Nsg98
Nsb(dp169
sg5
(g6
g7
Ntp170
Rp171
(dp172
g11
g5
(g12
g7
Ntp173
Rp174
(dp175
g16
(dp176
g5
(g18
g7
Ntp177
Rp178
(dp179
g22
(dp180
sg24
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p181
g7
Ntp182
Rp183
(dp184
g29
g30
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p185
tp186
Rp187
(dp188
g53
I00
sS'nan2zeros'
p189
g37
sS'op_string'
p190
S'-mas %s '
p191
sS'out_file'
p192
g37
sg55
g37
sS'internal_datatype'
p193
g37
sg51
g52
sg58
g59
sg65
g5
(g66
g67
(dp194
g69
g70
stp195
Rp196
(dp197
g74
S'environ_items'
p198
sg76
g65
sbsS'in_file'
p199
g37
sg77
g70
sS'output_datatype'
p200
g37
sS'operand_files'
p201
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'GM_mask'
p202
sg83
(dp203
sg85
S'GM'
p204
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g202
sg94
Nsg95
(lp205
sg97
Nsg98
Nsb(dp206
sg5
(g18
g7
Ntp207
Rp208
(dp209
g22
(dp210
sg24
g5
(g104
g7
Ntp211
Rp212
(dp213
g29
g30
(g108
tp214
Rp215
(dp216
g51
g52
sS'segment_combo'
p217
g37
sS'segment_mask'
p218
g37
sS'tissueprior_mni2t1'
p219
g37
sS'segment_bin'
p220
g37
sbsg114
(lp221
g219
ag217
ag220
ag218
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp222
sg85
g204
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp223
sg97
Nsg98
Nsb(dp224
sg5
(g18
g7
Ntp225
Rp226
(dp227
g22
(dp228
sg24
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p229
g7
Ntp230
Rp231
(dp232
g29
g30
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p233
tp234
Rp235
(dp236
S'rigid2D'
p237
g37
sg51
g52
sS'in_matrix_file'
p238
g37
sg41
g37
sS'reference'
p239
g37
sS'padding_size'
p240
g37
sS'sinc_window'
p241
g37
sS'interp'
p242
S'nearestneighbour'
p243
sS'wmnorms'
p244
g37
sS'coarse_search'
p245
g37
sS'no_resample'
p246
g37
sS'sinc_width'
p247
g37
sS'in_weight'
p248
g37
sS'fieldmap'
p249
g37
sS'echospacing'
p250
g37
sS'ref_weight'
p251
g37
sS'apply_isoxfm'
p252
g37
sS'fieldmapmask'
p253
g37
sg199
g37
sS'bbrtype'
p254
g37
sS'no_clamp'
p255
g37
sS'force_scaling'
p256
g37
sS'pedir'
p257
g37
sg53
I00
sS'display_init'
p258
g37
sS'schedule'
p259
g37
sg55
g37
sS'uses_qform'
p260
g37
sS'wmcoords'
p261
g37
sg58
g59
sS'fine_search'
p262
g37
sS'angle_rep'
p263
g37
sS'no_search'
p264
g37
sS'apply_xfm'
p265
I01
sS'wm_seg'
p266
g37
sg192
g37
sS'bbrslope'
p267
g37
sS'datatype'
p268
g37
sS'save_log'
p269
g37
sS'dof'
p270
g37
sS'out_matrix_file'
p271
g37
sS'no_resample_blur'
p272
g37
sS'min_sampling'
p273
g37
sS'cost_func'
p274
g37
sS'cost'
p275
g37
sg65
g5
(g66
g67
(dp276
g69
g70
stp277
Rp278
(dp279
g74
S'environ_items'
p280
sg76
g65
sbsS'searchr_x'
p281
g37
sS'out_log'
p282
g37
sg77
g70
sS'searchr_z'
p283
g37
sS'bins'
p284
g37
sS'searchr_y'
p285
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'GM_prior_mni_to_t1'
p286
sg83
(dp287
sg85
g204
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g286
sg94
Nsg95
(lp288
sg97
Nsg98
Nsb(dp289
sg5
(g18
g7
Ntp290
Rp291
(dp292
g22
(dp293
sg24
g5
(g104
g7
Ntp294
Rp295
(dp296
g29
g30
(g108
tp297
Rp298
(dp299
S'standard2highres_rig'
p300
g37
sg51
g52
sS'standard2highres_init'
p301
g37
sS'tissue_prior'
p302
g37
sS'standard2highres_mat'
p303
g37
sS'brain'
p304
g37
sS'probability_map'
p305
g37
sS'threshold'
p306
g37
sbsg114
(lp307
g302
ag306
ag304
ag305
ag301
ag303
ag300
asg116
I01
sbsg82
Nsg76
S'inputspec'
p308
sg83
(dp309
sg85
g204
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp310
sg97
Nsg98
Nsb(dp311
sg5
(g18
g7
Ntp312
Rp313
(dp314
g22
(dp315
sg24
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p316
g7
Ntp317
Rp318
(dp319
g29
g30
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p320
tp321
Rp322
(dp323
g53
I00
sg51
g52
sg190
g37
sS'out_data_type'
p324
g37
sg192
g37
sg55
g37
sS'in_file2'
p325
g37
sg58
g59
sg65
g5
(g66
g67
(dp326
g69
g70
stp327
Rp328
(dp329
g74
S'environ_items'
p330
sg76
g65
sbsg199
g37
sg77
g70
sS'suffix'
p331
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'binarize_threshold_GM'
p332
sg83
(dp333
sg85
g204
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g332
sg94
Nsg95
(lp334
sg97
Nsg98
Nsb(dp335
sg5
(g18
g7
Ntp336
Rp337
(dp338
g22
(dp339
sg24
g5
(g181
g7
Ntp340
Rp341
(dp342
g29
g30
(g185
tp343
Rp344
(dp345
g53
I00
sg189
g37
sg190
g191
sg192
g37
sg55
g37
sg193
g37
sg51
g52
sg58
g59
sg65
g5
(g66
g67
(dp346
g69
g70
stp347
Rp348
(dp349
g74
S'environ_items'
p350
sg76
g65
sbsg199
g37
sg77
g70
sg200
g37
sg201
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'overlap_GM_map_with_prior'
p351
sg83
(dp352
sg85
g204
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g351
sg94
Nsg95
(lp353
sg97
Nsg98
Nsb(dp354
ssS'graph'
p355
(dp356
sS'succ'
p357
(dp358
g178
(dp359
g208
(dp360
S'connect'
p361
(lp362
(g192
g218
tp363
asssg208
(dp364
sg226
(dp365
g208
(dp366
g361
(lp367
(g192
g219
tp368
assg337
(dp369
g361
(lp370
(g192
g201
tp371
assg178
(dp372
g361
(lp373
(g192
g201
tp374
asssg291
(dp375
g226
(dp376
g361
(lp377
(g302
g199
tp378
a(g304
g239
tp379
a(g303
g238
tp380
assg337
(dp381
g361
(lp382
(g305
g199
tp383
assg313
(dp384
g361
(lp385
((g306
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p386
(ttp387
g190
tp388
asssg313
(dp389
g208
(dp390
g361
(lp391
(g192
g220
tp392
assg178
(dp393
g361
(lp394
(g192
g199
tp395
asssg337
(dp396
g313
(dp397
g361
(lp398
(g192
g199
tp399
assg208
(dp400
g361
(lp401
(g192
g217
tp402
assssS'edge'
p403
g358
sS'pred'
p404
(dp405
g178
(dp406
g313
g393
sg226
g372
ssg208
(dp407
g226
g366
sg337
g400
sg178
g360
sg313
g390
ssg226
(dp408
g291
g376
ssg291
(dp409
sg313
(dp410
g337
g397
sg291
g384
ssg337
(dp411
g226
g369
sg291
g381
sssS'adj'
p412
g358
sbsg76
g204
sg85
g86
sg93
g204
sg94
ccollections
OrderedDict
p413
((lp414
(lp415
S'logging'
p416
ag413
((lp417
(lp418
S'__name__'
p419
ag416
aa(lp420
S'workflow_level'
p421
aS'INFO'
p422
aa(lp423
S'filemanip_level'
p424
aS'INFO'
p425
aa(lp426
S'interface_level'
p427
aS'INFO'
p428
aa(lp429
S'log_to_file'
p430
aS'True'
p431
aa(lp432
S'log_directory'
p433
aS'/mnt/ssd1/data/outputs/CPAC/CPAC_test1/outputs/logs/14_918487825'
p434
aa(lp435
S'log_size'
p436
aS'16384000'
p437
aa(lp438
S'log_rotate'
p439
aS'4'
p440
aatp441
Rp442
aa(lp443
S'execution'
p444
ag413
((lp445
(lp446
g419
ag444
aa(lp447
S'create_report'
p448
aS'true'
p449
aa(lp450
S'crashdump_dir'
p451
aS'/home/eric/Documents/m2g/packages/functional/CPAC_pipes'
p452
aa(lp453
S'display_variable'
p454
aS':1'
p455
aa(lp456
S'hash_method'
p457
aS'timestamp'
p458
aa(lp459
S'job_finished_timeout'
p460
aS'5'
p461
aa(lp462
S'keep_inputs'
p463
aS'false'
p464
aa(lp465
S'local_hash_check'
p466
aS'true'
p467
aa(lp468
S'matplotlib_backend'
p469
aS'Agg'
p470
aa(lp471
S'plugin'
p472
aS'Linear'
p473
aa(lp474
S'remove_node_directories'
p475
aS'false'
p476
aa(lp477
S'remove_unnecessary_outputs'
p478
aS'true'
p479
aa(lp480
S'single_thread_matlab'
p481
aS'true'
p482
aa(lp483
S'stop_on_first_crash'
p484
aS'false'
p485
aa(lp486
S'stop_on_first_rerun'
p487
aS'false'
p488
aa(lp489
S'use_relative_paths'
p490
aS'false'
p491
aa(lp492
S'stop_on_unknown_version'
p493
aS'false'
p494
aa(lp495
S'write_provenance'
p496
aS'false'
p497
aa(lp498
S'parameterize_dirs'
p499
aS'true'
p500
aatp501
Rp502
aa(lp503
S'check'
p504
ag413
((lp505
(lp506
g419
ag504
aa(lp507
S'interval'
p508
aS'1209600'
p509
aatp510
Rp511
aatp512
Rp513
sg98
Nsb(dp514
sg5
(g6
g7
Ntp515
Rp516
(dp517
g11
g5
(g12
g7
Ntp518
Rp519
(dp520
g16
(dp521
g5
(g18
g7
Ntp522
Rp523
(dp524
g22
(dp525
sg24
g5
(g104
g7
Ntp526
Rp527
(dp528
g29
g30
(g108
tp529
Rp530
(dp531
g300
g37
sg51
g52
sg301
g37
sg302
g37
sg303
g37
sg304
g37
sg305
g37
sg306
g37
sbsg114
(lp532
g302
ag306
ag304
ag305
ag301
ag303
ag300
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp533
sg85
S'WM'
p534
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp535
sg97
Nsg98
Nsb(dp536
sg5
(g18
g7
Ntp537
Rp538
(dp539
g22
(dp540
sg24
g5
(g104
g7
Ntp541
Rp542
(dp543
g29
g30
(g108
tp544
Rp545
(dp546
g51
g52
sg217
g37
sg218
g37
sg219
g37
sg220
g37
sbsg114
(lp547
g219
ag217
ag220
ag218
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp548
sg85
g534
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp549
sg97
Nsg98
Nsb(dp550
sg5
(g18
g7
Ntp551
Rp552
(dp553
g22
(dp554
sg24
g5
(g181
g7
Ntp555
Rp556
(dp557
g29
g30
(g185
tp558
Rp559
(dp560
g53
I00
sg189
g37
sg190
g191
sg192
g37
sg55
g37
sg193
g37
sg51
g52
sg58
g59
sg65
g5
(g66
g67
(dp561
g69
g70
stp562
Rp563
(dp564
g74
S'environ_items'
p565
sg76
g65
sbsg199
g37
sg77
g70
sg200
g37
sg201
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'WM_mask'
p566
sg83
(dp567
sg85
g534
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g566
sg94
Nsg95
(lp568
sg97
Nsg98
Nsb(dp569
sg5
(g18
g7
Ntp570
Rp571
(dp572
g22
(dp573
sg24
g5
(g229
g7
Ntp574
Rp575
(dp576
g29
g30
(g233
tp577
Rp578
(dp579
g237
g37
sg51
g52
sg238
g37
sg41
g37
sg239
g37
sg240
g37
sg241
g37
sg242
g243
sg244
g37
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg199
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg53
I00
sg258
g37
sg259
g37
sg55
g37
sg260
g37
sg261
g37
sg58
g59
sg262
g37
sg263
g37
sg264
g37
sg265
I01
sg266
g37
sg192
g37
sg267
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg65
g5
(g66
g67
(dp580
g69
g70
stp581
Rp582
(dp583
g74
S'environ_items'
p584
sg76
g65
sbsg281
g37
sg282
g37
sg77
g70
sg283
g37
sg284
g37
sg285
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'WM_prior_mni_to_t1'
p585
sg83
(dp586
sg85
g534
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g585
sg94
Nsg95
(lp587
sg97
Nsg98
Nsb(dp588
sg5
(g18
g7
Ntp589
Rp590
(dp591
g22
(dp592
sg24
g5
(g316
g7
Ntp593
Rp594
(dp595
g29
g30
(g320
tp596
Rp597
(dp598
g53
I00
sg51
g52
sg190
g37
sg324
g37
sg192
g37
sg55
g37
sg325
g37
sg58
g59
sg65
g5
(g66
g67
(dp599
g69
g70
stp600
Rp601
(dp602
g74
S'environ_items'
p603
sg76
g65
sbsg199
g37
sg77
g70
sg331
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'binarize_threshold_WM'
p604
sg83
(dp605
sg85
g534
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g604
sg94
Nsg95
(lp606
sg97
Nsg98
Nsb(dp607
sg5
(g18
g7
Ntp608
Rp609
(dp610
g22
(dp611
sg24
g5
(g181
g7
Ntp612
Rp613
(dp614
g29
g30
(g185
tp615
Rp616
(dp617
g53
I00
sg189
g37
sg190
g191
sg192
g37
sg55
g37
sg193
g37
sg51
g52
sg58
g59
sg65
g5
(g66
g67
(dp618
g69
g70
stp619
Rp620
(dp621
g74
S'environ_items'
p622
sg76
g65
sbsg199
g37
sg77
g70
sg200
g37
sg201
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'overlap_WM_map_with_prior'
p623
sg83
(dp624
sg85
g534
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g623
sg94
Nsg95
(lp625
sg97
Nsg98
Nsb(dp626
ssg355
(dp627
sg357
(dp628
g523
(dp629
g590
(dp630
g361
(lp631
((g306
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p632
(ttp633
g190
tp634
assg571
(dp635
g361
(lp636
(g302
g199
tp637
a(g304
g239
tp638
a(g303
g238
tp639
assg609
(dp640
g361
(lp641
(g305
g199
tp642
asssg538
(dp643
sg552
(dp644
g538
(dp645
g361
(lp646
(g192
g218
tp647
asssg571
(dp648
g552
(dp649
g361
(lp650
(g192
g201
tp651
assg609
(dp652
g361
(lp653
(g192
g201
tp654
assg538
(dp655
g361
(lp656
(g192
g219
tp657
asssg590
(dp658
g552
(dp659
g361
(lp660
(g192
g199
tp661
assg538
(dp662
g361
(lp663
(g192
g220
tp664
asssg609
(dp665
g590
(dp666
g361
(lp667
(g192
g199
tp668
assg538
(dp669
g361
(lp670
(g192
g217
tp671
assssg403
g628
sg404
(dp672
g523
(dp673
sg538
(dp674
g590
g662
sg552
g645
sg571
g655
sg609
g669
ssg552
(dp675
g590
g659
sg571
g649
ssg571
(dp676
g523
g635
ssg590
(dp677
g609
g666
sg523
g630
ssg609
(dp678
g523
g640
sg571
g652
sssg412
g628
sbsg76
g534
sg85
g86
sg93
g534
sg94
g413
((lp679
(lp680
g416
ag413
((lp681
(lp682
g419
ag416
aa(lp683
g421
ag422
aa(lp684
g424
ag425
aa(lp685
g427
ag428
aa(lp686
g430
ag431
aa(lp687
g433
ag434
aa(lp688
g436
ag437
aa(lp689
g439
ag440
aatp690
Rp691
aa(lp692
g444
ag413
((lp693
(lp694
g419
ag444
aa(lp695
g448
ag449
aa(lp696
g451
ag452
aa(lp697
g454
ag455
aa(lp698
g457
ag458
aa(lp699
g460
ag461
aa(lp700
g463
ag464
aa(lp701
g466
ag467
aa(lp702
g469
ag470
aa(lp703
g472
ag473
aa(lp704
g475
ag476
aa(lp705
g478
ag479
aa(lp706
g481
ag482
aa(lp707
g484
ag485
aa(lp708
g487
ag488
aa(lp709
g490
ag491
aa(lp710
g493
ag494
aa(lp711
g496
ag497
aa(lp712
g499
ag500
aatp713
Rp714
aa(lp715
g504
ag413
((lp716
(lp717
g419
ag504
aa(lp718
g508
ag509
aatp719
Rp720
aatp721
Rp722
sg98
Nsb(dp723
sg5
(g18
g7
Ntp724
Rp725
(dp726
g22
(dp727
sg24
g5
(g104
g7
Ntp728
Rp729
(dp730
g29
g30
(g108
tp731
Rp732
(dp733
g300
g37
sg51
g52
sg301
g37
sg304
g37
sS'PRIOR_GRAY'
p734
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p735
sg303
g37
sS'PRIOR_CSF'
p736
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p737
sS'PRIOR_WHITE'
p738
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p739
sbsg114
(lp740
g304
ag301
ag303
ag300
ag736
ag734
ag738
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp741
sg85
g86
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp742
sg97
Nsg98
Nsb(dp743
sg5
(g6
g7
Ntp744
Rp745
(dp746
g11
g5
(g12
g7
Ntp747
Rp748
(dp749
g16
(dp750
g5
(g18
g7
Ntp751
Rp752
(dp753
g22
(dp754
sg24
g5
(g181
g7
Ntp755
Rp756
(dp757
g29
g30
(g185
tp758
Rp759
(dp760
g53
I00
sg189
g37
sg190
g191
sg192
g37
sg55
g37
sg193
g37
sg51
g52
sg58
g59
sg65
g5
(g66
g67
(dp761
g69
g70
stp762
Rp763
(dp764
g74
S'environ_items'
p765
sg76
g65
sbsg199
g37
sg77
g70
sg200
g37
sg201
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'overlap_CSF_map_with_prior'
p766
sg83
(dp767
sg85
S'CSF'
p768
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g766
sg94
Nsg95
(lp769
sg97
Nsg98
Nsb(dp770
sg5
(g18
g7
Ntp771
Rp772
(dp773
g22
(dp774
sg24
g5
(g181
g7
Ntp775
Rp776
(dp777
g29
g30
(g185
tp778
Rp779
(dp780
g53
I00
sg189
g37
sg190
g191
sg192
g37
sg55
g37
sg193
g37
sg51
g52
sg58
g59
sg65
g5
(g66
g67
(dp781
g69
g70
stp782
Rp783
(dp784
g74
S'environ_items'
p785
sg76
g65
sbsg199
g37
sg77
g70
sg200
g37
sg201
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'CSF_mask'
p786
sg83
(dp787
sg85
g768
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g786
sg94
Nsg95
(lp788
sg97
Nsg98
Nsb(dp789
sg5
(g18
g7
Ntp790
Rp791
(dp792
g22
(dp793
sg24
g5
(g104
g7
Ntp794
Rp795
(dp796
g29
g30
(g108
tp797
Rp798
(dp799
g51
g52
sg217
g37
sg218
g37
sg219
g37
sg220
g37
sbsg114
(lp800
g219
ag217
ag220
ag218
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp801
sg85
g768
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp802
sg97
Nsg98
Nsb(dp803
sg5
(g18
g7
Ntp804
Rp805
(dp806
g22
(dp807
sg24
g5
(g316
g7
Ntp808
Rp809
(dp810
g29
g30
(g320
tp811
Rp812
(dp813
g53
I00
sg51
g52
sg190
g37
sg324
g37
sg192
g37
sg55
g37
sg325
g37
sg58
g59
sg65
g5
(g66
g67
(dp814
g69
g70
stp815
Rp816
(dp817
g74
S'environ_items'
p818
sg76
g65
sbsg199
g37
sg77
g70
sg331
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'binarize_threshold_CSF'
p819
sg83
(dp820
sg85
g768
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g819
sg94
Nsg95
(lp821
sg97
Nsg98
Nsb(dp822
sg5
(g18
g7
Ntp823
Rp824
(dp825
g22
(dp826
sg24
g5
(g104
g7
Ntp827
Rp828
(dp829
g29
g30
(g108
tp830
Rp831
(dp832
g300
g37
sg51
g52
sg301
g37
sg302
g37
sg303
g37
sg304
g37
sg305
g37
sg306
g37
sbsg114
(lp833
g302
ag306
ag304
ag305
ag301
ag303
ag300
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp834
sg85
g768
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp835
sg97
Nsg98
Nsb(dp836
sg5
(g18
g7
Ntp837
Rp838
(dp839
g22
(dp840
sg24
g5
(g229
g7
Ntp841
Rp842
(dp843
g29
g30
(g233
tp844
Rp845
(dp846
g237
g37
sg51
g52
sg238
g37
sg41
g37
sg239
g37
sg240
g37
sg241
g37
sg242
g243
sg244
g37
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg199
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg53
I00
sg258
g37
sg259
g37
sg55
g37
sg260
g37
sg261
g37
sg58
g59
sg262
g37
sg263
g37
sg264
g37
sg265
I01
sg266
g37
sg192
g37
sg267
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg65
g5
(g66
g67
(dp847
g69
g70
stp848
Rp849
(dp850
g74
S'environ_items'
p851
sg76
g65
sbsg281
g37
sg282
g37
sg77
g70
sg283
g37
sg284
g37
sg285
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'CSF_prior_mni_to_t1'
p852
sg83
(dp853
sg85
g768
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g852
sg94
Nsg95
(lp854
sg97
Nsg98
Nsb(dp855
ssg355
(dp856
sg357
(dp857
g752
(dp858
g805
(dp859
g361
(lp860
(g192
g199
tp861
assg791
(dp862
g361
(lp863
(g192
g217
tp864
asssg772
(dp865
g791
(dp866
g361
(lp867
(g192
g218
tp868
asssg791
(dp869
sg805
(dp870
g791
(dp871
g361
(lp872
(g192
g220
tp873
assg772
(dp874
g361
(lp875
(g192
g199
tp876
asssg824
(dp877
g838
(dp878
g361
(lp879
(g302
g199
tp880
a(g304
g239
tp881
a(g303
g238
tp882
assg752
(dp883
g361
(lp884
(g305
g199
tp885
assg805
(dp886
g361
(lp887
((g306
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p888
(ttp889
g190
tp890
asssg838
(dp891
g791
(dp892
g361
(lp893
(g192
g219
tp894
assg752
(dp895
g361
(lp896
(g192
g201
tp897
assg772
(dp898
g361
(lp899
(g192
g201
tp900
assssg403
g857
sg404
(dp901
g752
(dp902
g824
g883
sg838
g895
ssg772
(dp903
g805
g874
sg838
g898
ssg791
(dp904
g838
g892
sg772
g866
sg752
g862
sg805
g871
ssg805
(dp905
g824
g886
sg752
g859
ssg824
(dp906
sg838
(dp907
g824
g878
sssg412
g857
sbsg76
g768
sg85
g86
sg93
g768
sg94
g413
((lp908
(lp909
g416
ag413
((lp910
(lp911
g419
ag416
aa(lp912
g421
ag422
aa(lp913
g424
ag425
aa(lp914
g427
ag428
aa(lp915
g430
ag431
aa(lp916
g433
ag434
aa(lp917
g436
ag437
aa(lp918
g439
ag440
aatp919
Rp920
aa(lp921
g444
ag413
((lp922
(lp923
g419
ag444
aa(lp924
g448
ag449
aa(lp925
g451
ag452
aa(lp926
g454
ag455
aa(lp927
g457
ag458
aa(lp928
g460
ag461
aa(lp929
g463
ag464
aa(lp930
g466
ag467
aa(lp931
g469
ag470
aa(lp932
g472
ag473
aa(lp933
g475
ag476
aa(lp934
g478
ag479
aa(lp935
g481
ag482
aa(lp936
g484
ag485
aa(lp937
g487
ag488
aa(lp938
g490
ag491
aa(lp939
g493
ag494
aa(lp940
g496
ag497
aa(lp941
g499
ag500
aatp942
Rp943
aa(lp944
g504
ag413
((lp945
(lp946
g419
ag504
aa(lp947
g508
ag509
aatp948
Rp949
aatp950
Rp951
sg98
Nsb(dp952
sg5
(g18
g7
Ntp953
Rp954
(dp955
g22
(dp956
sg24
g5
(g104
g7
Ntp957
Rp958
(dp959
g29
g30
(g108
tp960
Rp961
(dp962
g51
g52
sS'gm_threshold'
p963
(lp964
F0.7
asbsg114
(lp965
g963
asg116
I01
sbsg82
Nsg76
g963
sg83
(dp966
sg85
g86
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
(g963
(lp967
F0.7
atp968
sg92
I00
sg93
g963
sg94
Nsg95
(lp969
sg97
Nsg98
Nsb(dp970
ssg355
(dp971
sg357
(dp972
g20
(dp973
g516
(dp974
g361
(lp975
((g56
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p976
(ttp977
S'inputspec.probability_map'
p978
tp979
assg141
(dp980
g361
(lp981
(g56
g56
tp982
a(g152
g152
tp983
a(g150
g150
tp984
a(g163
g163
tp985
assg171
(dp986
g361
(lp987
((g56
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p988
(ttp989
g978
tp990
assg745
(dp991
g361
(lp992
((g56
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p993
(ttp994
g978
tp995
asssg101
(dp996
g745
(dp997
g361
(lp998
(g112
S'inputspec.threshold'
p999
tp1000
asssg123
(dp1001
g516
(dp1002
g361
(lp1003
(g132
g999
tp1004
asssg141
(dp1005
sg171
(dp1006
g141
(dp1007
g361
(lp1008
(S'outputspec.tissueprior_mni2t1'
p1009
g164
tp1010
a(S'outputspec.segment_combo'
p1011
g151
tp1012
a(S'outputspec.segment_bin'
p1013
g162
tp1014
a(S'outputspec.segment_mask'
p1015
g160
tp1016
asssg516
(dp1017
g141
(dp1018
g361
(lp1019
(g1009
g156
tp1020
a(g1011
g158
tp1021
a(g1013
g154
tp1022
a(g1015
g159
tp1023
asssg725
(dp1024
g20
(dp1025
g361
(lp1026
(g304
g63
tp1027
assg745
(dp1028
g361
(lp1029
(g304
S'inputspec.brain'
p1030
tp1031
a(g736
S'inputspec.tissue_prior'
p1032
tp1033
a(g303
S'inputspec.standard2highres_mat'
p1034
tp1035
assg171
(dp1036
g361
(lp1037
(g304
g1030
tp1038
a(g734
g1032
tp1039
a(g303
g1034
tp1040
assg516
(dp1041
g361
(lp1042
(g304
g1030
tp1043
a(g738
g1032
tp1044
a(g303
g1034
tp1045
asssg745
(dp1046
g141
(dp1047
g361
(lp1048
(g1009
g153
tp1049
a(g1011
g157
tp1050
a(g1013
g155
tp1051
a(g1015
g161
tp1052
asssg954
(dp1053
g171
(dp1054
g361
(lp1055
(g963
g999
tp1056
assssg403
g972
sg404
(dp1057
g20
(dp1058
g725
g1025
ssg101
(dp1059
sg123
(dp1060
sg141
(dp1061
g20
g980
sg745
g1047
sg171
g1007
sg516
g1018
ssg171
(dp1062
g725
g1036
sg954
g1054
sg20
g986
ssg516
(dp1063
g725
g1041
sg123
g1002
sg20
g974
ssg725
(dp1064
sg745
(dp1065
g725
g1028
sg101
g997
sg20
g991
ssg954
(dp1066
ssg412
g972
sbsg76
g86
sg85
S'resting_preproc_14_918487825'
p1067
sg93
g86
sg94
g413
((lp1068
(lp1069
g416
ag413
((lp1070
(lp1071
g419
ag416
aa(lp1072
g421
ag422
aa(lp1073
g424
ag425
aa(lp1074
g427
ag428
aa(lp1075
g430
ag431
aa(lp1076
g433
ag434
aa(lp1077
g436
ag437
aa(lp1078
g439
ag440
aatp1079
Rp1080
aa(lp1081
g444
ag413
((lp1082
(lp1083
g419
ag444
aa(lp1084
g448
ag449
aa(lp1085
g451
ag452
aa(lp1086
g454
ag455
aa(lp1087
g457
ag458
aa(lp1088
g460
ag461
aa(lp1089
g463
ag464
aa(lp1090
g466
ag467
aa(lp1091
g469
ag470
aa(lp1092
g472
ag473
aa(lp1093
g475
ag476
aa(lp1094
g478
ag479
aa(lp1095
g481
ag482
aa(lp1096
g484
ag485
aa(lp1097
g487
ag488
aa(lp1098
g490
ag491
aa(lp1099
g493
ag494
aa(lp1100
g496
ag497
aa(lp1101
g499
ag500
aatp1102
Rp1103
aa(lp1104
g504
ag413
((lp1105
(lp1106
g419
ag504
aa(lp1107
g508
ag509
aatp1108
Rp1109
aatp1110
Rp1111
sg98
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g18
g7
Ntp1122
Rp1123
(dp1124
g22
(dp1125
sg24
g5
(g104
g7
Ntp1126
Rp1127
(dp1128
g29
g30
(g108
tp1129
Rp1130
(dp1131
g51
g52
sS'output_brain'
p1132
g37
sS'nonlinear_xfm'
p1133
g37
sS'invlinear_xfm'
p1134
g37
sS'linear_xfm'
p1135
g37
sbsg114
(lp1136
g1132
ag1135
ag1134
ag1133
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp1137
sg85
S'anat_mni_fnirt_register_0'
p1138
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp1139
sg97
Nsg98
Nsb(dp1140
sg5
(g18
g7
Ntp1141
Rp1142
(dp1143
g22
(dp1144
sg24
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1145
g7
Ntp1146
Rp1147
(dp1148
g29
g30
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1149
tp1150
Rp1151
(dp1152
g53
I00
sS'supersample'
p1153
g37
sg199
g37
sS'superlevel'
p1154
g37
sg192
g37
sg268
g37
sg55
g37
sg242
g37
sS'field_file'
p1155
g37
sS'ref_file'
p1156
g37
sg58
g59
sg65
g5
(g66
g67
(dp1157
g69
g70
stp1158
Rp1159
(dp1160
g74
S'environ_items'
p1161
sg76
g65
sbsS'premat'
p1162
g37
sS'mask_file'
p1163
g37
sg77
g70
sS'relwarp'
p1164
g37
sS'abswarp'
p1165
g37
sg51
g52
sS'postmat'
p1166
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'brain_warp'
p1167
sg83
(dp1168
sg85
g1138
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1167
sg94
Nsg95
(lp1169
sg97
Nsg98
Nsb(dp1170
sg5
(g18
g7
Ntp1171
Rp1172
(dp1173
g22
(dp1174
sg24
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1175
g7
Ntp1176
Rp1177
(dp1178
g29
g30
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1179
tp1180
Rp1181
(dp1182
g53
I00
sg51
g52
sg192
g37
sg55
g37
sg325
g37
sS'fix_scale_skew'
p1183
g37
sS'invert_xfm'
p1184
I01
sg58
g59
sS'concat_xfm'
p1185
g37
sg199
g37
sg77
g70
sg65
g5
(g66
g67
(dp1186
g69
g70
stp1187
Rp1188
(dp1189
g74
S'environ_items'
p1190
sg76
g65
sbsbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'inv_linear_reg0_xfm'
p1191
sg83
(dp1192
sg85
g1138
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1191
sg94
Nsg95
(lp1193
sg97
Nsg98
Nsb(dp1194
sg5
(g18
g7
Ntp1195
Rp1196
(dp1197
g22
(dp1198
sg24
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1199
g7
Ntp1200
Rp1201
(dp1202
g29
g30
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1203
tp1204
Rp1205
(dp1206
g51
g52
sS'derive_from_ref'
p1207
g37
sS'in_intensitymap_file'
p1208
g37
sS'modulatedref_file'
p1209
g37
sS'refmask_val'
p1210
g37
sS'hessian_precision'
p1211
g37
sS'in_fwhm'
p1212
g37
sS'skip_implicit_in_masking'
p1213
g37
sS'inmask_file'
p1214
g37
sS'refmask_file'
p1215
g37
sS'inwarp_file'
p1216
g37
sS'skip_lambda_ssq'
p1217
g37
sS'intensity_mapping_model'
p1218
g37
sS'affine_file'
p1219
g37
sS'apply_inmask'
p1220
g37
sS'spline_order'
p1221
g37
sS'apply_refmask'
p1222
g37
sS'subsampling_scheme'
p1223
g37
sg199
g37
sS'warped_file'
p1224
g37
sS'skip_refmask'
p1225
g37
sg53
I00
sS'ref_fwhm'
p1226
g37
sS'inmask_val'
p1227
g37
sS'config_file'
p1228
g37
sg1155
g37
sg55
g37
sS'apply_intensity_mapping'
p1229
g37
sS'regularization_lambda'
p1230
g37
sg58
g59
sS'regularization_model'
p1231
g37
sS'jacobian_range'
p1232
g37
sS'out_intensitymap_file'
p1233
g37
sS'skip_implicit_ref_masking'
p1234
g37
sg1156
g37
sS'skip_inmask'
p1235
g37
sS'fieldcoeff_file'
p1236
I01
sS'warp_resolution'
p1237
g37
sS'jacobian_file'
p1238
I01
sg65
g5
(g66
g67
(dp1239
g69
g70
stp1240
Rp1241
(dp1242
g74
S'environ_items'
p1243
sg76
g65
sbsS'bias_regularization_lambda'
p1244
g37
sg77
g70
sS'skip_intensity_mapping'
p1245
g37
sS'log_file'
p1246
g37
sS'biasfield_resolution'
p1247
g37
sS'intensity_mapping_order'
p1248
g37
sS'max_nonlin_iter'
p1249
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'nonlinear_reg_1'
p1250
sg83
(dp1251
sg85
g1138
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1250
sg94
Nsg95
(lp1252
sg97
Nsg98
Nsb(dp1253
sg5
(g18
g7
Ntp1254
Rp1255
(dp1256
g22
(dp1257
sg24
g5
(g229
g7
Ntp1258
Rp1259
(dp1260
g29
g30
(g233
tp1261
Rp1262
(dp1263
g237
g37
sg51
g52
sg238
g37
sg41
g37
sg239
g37
sg240
g37
sg241
g37
sg242
g37
sg244
g37
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg199
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg53
I00
sg258
g37
sg259
g37
sg55
g37
sg260
g37
sg261
g37
sg58
g59
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg266
g37
sg192
g37
sg267
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
S'corratio'
p1264
sg65
g5
(g66
g67
(dp1265
g69
g70
stp1266
Rp1267
(dp1268
g74
S'environ_items'
p1269
sg76
g65
sbsg281
g37
sg282
g37
sg77
g70
sg283
g37
sg284
g37
sg285
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'linear_reg_0'
p1270
sg83
(dp1271
sg85
g1138
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1270
sg94
Nsg95
(lp1272
sg97
Nsg98
Nsb(dp1273
sg5
(g18
g7
Ntp1274
Rp1275
(dp1276
g22
(dp1277
sg24
g5
(g104
g7
Ntp1278
Rp1279
(dp1280
g29
g30
(g108
tp1281
Rp1282
(dp1283
S'fnirt_config'
p1284
S'T1_2_MNI152_2mm'
p1285
sg51
g52
sS'input_brain'
p1286
g37
sS'reference_skull'
p1287
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1288
sS'reference_brain'
p1289
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1290
sS'input_skull'
p1291
g37
sbsg114
(lp1292
g1286
ag1291
ag1289
ag1287
ag1284
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp1293
sg85
g1138
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp1294
sg97
Nsg98
Nsb(dp1295
ssg355
(dp1296
sg357
(dp1297
g1123
(dp1298
sg1142
(dp1299
g1123
(dp1300
g361
(lp1301
(g192
g1132
tp1302
asssg1172
(dp1303
g1123
(dp1304
g361
(lp1305
(g192
g1134
tp1306
asssg1196
(dp1307
g1142
(dp1308
g361
(lp1309
(g1236
g1155
tp1310
assg1123
(dp1311
g361
(lp1312
(g1236
g1133
tp1313
asssg1255
(dp1314
g1123
(dp1315
g361
(lp1316
(g271
g1135
tp1317
assg1196
(dp1318
g361
(lp1319
(g271
g1219
tp1320
assg1172
(dp1321
g361
(lp1322
(g271
g199
tp1323
asssg1275
(dp1324
g1142
(dp1325
g361
(lp1326
(g1286
g199
tp1327
a(g1289
g1156
tp1328
assg1255
(dp1329
g361
(lp1330
(g1286
g199
tp1331
a(g1289
g239
tp1332
assg1196
(dp1333
g361
(lp1334
(g1291
g199
tp1335
a(g1287
g1156
tp1336
a(g1284
g1228
tp1337
assssg403
g1297
sg404
(dp1338
g1123
(dp1339
g1142
g1300
sg1255
g1315
sg1196
g1311
sg1172
g1304
ssg1142
(dp1340
g1275
g1325
sg1196
g1308
ssg1172
(dp1341
g1255
g1321
ssg1196
(dp1342
g1275
g1333
sg1255
g1318
ssg1255
(dp1343
g1275
g1329
ssg1275
(dp1344
ssg412
g1297
sbsg76
g1138
sg85
g1067
sg93
g1138
sg94
g413
((lp1345
(lp1346
g416
ag413
((lp1347
(lp1348
g419
ag416
aa(lp1349
g421
ag422
aa(lp1350
g424
ag425
aa(lp1351
g427
ag428
aa(lp1352
g430
ag431
aa(lp1353
g433
ag434
aa(lp1354
g436
ag437
aa(lp1355
g439
ag440
aatp1356
Rp1357
aa(lp1358
g444
ag413
((lp1359
(lp1360
g419
ag444
aa(lp1361
g448
ag449
aa(lp1362
g451
ag452
aa(lp1363
g454
ag455
aa(lp1364
g457
ag458
aa(lp1365
g460
ag461
aa(lp1366
g463
ag464
aa(lp1367
g466
ag467
aa(lp1368
g469
ag470
aa(lp1369
g472
ag473
aa(lp1370
g475
ag476
aa(lp1371
g478
ag479
aa(lp1372
g481
ag482
aa(lp1373
g484
ag485
aa(lp1374
g487
ag488
aa(lp1375
g490
ag491
aa(lp1376
g493
ag494
aa(lp1377
g496
ag497
aa(lp1378
g499
ag500
aatp1379
Rp1380
aa(lp1381
g504
ag413
((lp1382
(lp1383
g419
ag504
aa(lp1384
g508
ag509
aatp1385
Rp1386
aatp1387
Rp1388
sg98
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g18
g7
Ntp1399
Rp1400
(dp1401
g22
(dp1402
sg24
g5
(cnipype.interfaces.utility
Function
p1403
g7
Ntp1404
Rp1405
(dp1406
S'_input_names'
p1407
(lp1408
S'overlay'
p1409
aS'underlay'
p1410
aS'png_name'
p1411
aS'cbar_name'
p1412
asg29
g30
(cnipype.interfaces.utility
FunctionInputSpec
p1413
tp1414
Rp1415
(dp1416
g53
I00
sg1411
S'MNI_edge_on_mean_func_mni_a.png'
p1417
sg1409
g37
sg1412
S'red'
p1418
sS'function_str'
p1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1420
sg1410
g37
sg51
g52
sbsS'_out'
p1421
(dp1422
g1411
NssS'_output_names'
p1423
(lp1424
g1411
asS'imports'
p1425
Nsbsg82
Nsg76
S'montage_a'
p1426
sg83
(dp1427
sg85
S'montage_mfi_0'
p1428
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1426
sg94
Nsg95
(lp1429
sg97
Nsg98
Nsb(dp1430
sg5
(g18
g7
Ntp1431
Rp1432
(dp1433
g22
(dp1434
sg24
g5
(g104
g7
Ntp1435
Rp1436
(dp1437
g29
g30
(g108
tp1438
Rp1439
(dp1440
g51
g52
sg1410
g37
sg1409
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1441
sbsg114
(lp1442
g1410
ag1409
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp1443
sg85
g1428
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp1444
sg97
Nsg98
Nsb(dp1445
sg5
(g18
g7
Ntp1446
Rp1447
(dp1448
g22
(dp1449
sg24
g5
(g104
g7
Ntp1450
Rp1451
(dp1452
g29
g30
(g108
tp1453
Rp1454
(dp1455
g51
g52
sS'resampled_underlay'
p1456
g37
sS'axial_png'
p1457
g37
sS'sagittal_png'
p1458
g37
sS'resampled_overlay'
p1459
g37
sbsg114
(lp1460
g1457
ag1458
ag1456
ag1459
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp1461
sg85
g1428
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp1462
sg97
Nsg98
Nsb(dp1463
sg5
(g18
g7
Ntp1464
Rp1465
(dp1466
g22
(dp1467
sg24
g5
(g1403
g7
Ntp1468
Rp1469
(dp1470
g1407
(lp1471
S'file_'
p1472
asg29
g30
(g1413
tp1473
Rp1474
(dp1475
g53
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1476
sg1472
g37
sg51
g52
sbsg1421
(dp1477
S'new_fname'
p1478
Nssg1423
(lp1479
g1478
asg1425
Nsbsg82
Nsg88
I00
sg83
(dp1480
sg90
Nsg87
Nsg97
Nsg76
S'resample_o'
p1481
sg85
g1428
sg89
I00
sg91
Nsg92
I00
sg93
g1481
sg94
Nsg95
(lp1482
sg98
Nsb(dp1483
sg5
(g18
g7
Ntp1484
Rp1485
(dp1486
g22
(dp1487
sg24
g5
(g1403
g7
Ntp1488
Rp1489
(dp1490
g1407
(lp1491
g1472
asg29
g30
(g1413
tp1492
Rp1493
(dp1494
g53
I00
sg1419
g1476
sg1472
g37
sg51
g52
sbsg1421
(dp1495
g1478
Nssg1423
(lp1496
g1478
asg1425
Nsbsg82
Nsg76
S'resample_u'
p1497
sg83
(dp1498
sg85
g1428
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1497
sg94
Nsg95
(lp1499
sg97
Nsg98
Nsb(dp1500
sg5
(g18
g7
Ntp1501
Rp1502
(dp1503
g22
(dp1504
sg24
g5
(g1403
g7
Ntp1505
Rp1506
(dp1507
g1407
(lp1508
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp1509
Rp1510
(dp1511
g53
I00
sg1411
S'MNI_edge_on_mean_func_mni_s.png'
p1512
sg1409
g37
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1513
sg1410
g37
sg51
g52
sbsg1421
(dp1514
g1411
Nssg1423
(lp1515
g1411
asg1425
Nsbsg82
Nsg76
S'montage_s'
p1516
sg83
(dp1517
sg85
g1428
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1516
sg94
Nsg95
(lp1518
sg97
Nsg98
Nsb(dp1519
ssg355
(dp1520
sg357
(dp1521
g1400
(dp1522
g1447
(dp1523
g361
(lp1524
(g1411
g1457
tp1525
asssg1432
(dp1526
g1485
(dp1527
g361
(lp1528
(g1410
g1472
tp1529
assg1465
(dp1530
g361
(lp1531
(g1409
g1472
tp1532
asssg1447
(dp1533
sg1465
(dp1534
g1447
(dp1535
g361
(lp1536
(g1478
g1459
tp1537
assg1400
(dp1538
g361
(lp1539
(g1478
g1409
tp1540
assg1502
(dp1541
g361
(lp1542
(g1478
g1409
tp1543
asssg1485
(dp1544
g1447
(dp1545
g361
(lp1546
(g1478
g1456
tp1547
assg1400
(dp1548
g361
(lp1549
(g1478
g1410
tp1550
assg1502
(dp1551
g361
(lp1552
(g1478
g1410
tp1553
asssg1502
(dp1554
g1447
(dp1555
g361
(lp1556
(g1411
g1458
tp1557
assssg403
g1521
sg404
(dp1558
g1400
(dp1559
g1485
g1548
sg1465
g1538
ssg1432
(dp1560
sg1447
(dp1561
g1502
g1555
sg1485
g1545
sg1465
g1535
sg1400
g1523
ssg1465
(dp1562
g1432
g1530
ssg1485
(dp1563
g1432
g1527
ssg1502
(dp1564
g1485
g1551
sg1465
g1541
sssg412
g1521
sbsg76
g1428
sg85
g1067
sg93
g1428
sg94
g413
((lp1565
(lp1566
g416
ag413
((lp1567
(lp1568
g419
ag416
aa(lp1569
g421
ag422
aa(lp1570
g424
ag425
aa(lp1571
g427
ag428
aa(lp1572
g430
ag431
aa(lp1573
g433
ag434
aa(lp1574
g436
ag437
aa(lp1575
g439
ag440
aatp1576
Rp1577
aa(lp1578
g444
ag413
((lp1579
(lp1580
g419
ag444
aa(lp1581
g448
ag449
aa(lp1582
g451
ag452
aa(lp1583
g454
ag455
aa(lp1584
g457
ag458
aa(lp1585
g460
ag461
aa(lp1586
g463
ag464
aa(lp1587
g466
ag467
aa(lp1588
g469
ag470
aa(lp1589
g472
ag473
aa(lp1590
g475
ag476
aa(lp1591
g478
ag479
aa(lp1592
g481
ag482
aa(lp1593
g484
ag485
aa(lp1594
g487
ag488
aa(lp1595
g490
ag491
aa(lp1596
g493
ag494
aa(lp1597
g496
ag497
aa(lp1598
g499
ag500
aatp1599
Rp1600
aa(lp1601
g504
ag413
((lp1602
(lp1603
g419
ag504
aa(lp1604
g508
ag509
aatp1605
Rp1606
aatp1607
Rp1608
sg98
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g18
g7
Ntp1619
Rp1620
(dp1621
g22
(dp1622
sg24
g5
(g1403
g7
Ntp1623
Rp1624
(dp1625
g1407
(lp1626
g1472
asg29
g30
(g1413
tp1627
Rp1628
(dp1629
g53
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1630
sg1472
g37
sg51
g52
sbsg1421
(dp1631
g1478
Nssg1423
(lp1632
g1478
asg1425
Nsbsg82
Nsg76
g1497
sg83
(dp1633
sg85
S'montage_snr_0'
p1634
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1497
sg94
Nsg95
(lp1635
sg97
Nsg98
Nsb(dp1636
sg5
(g18
g7
Ntp1637
Rp1638
(dp1639
g22
(dp1640
sg24
g5
(g104
g7
Ntp1641
Rp1642
(dp1643
g29
g30
(g108
tp1644
Rp1645
(dp1646
g51
g52
sg1410
g37
sg1409
g37
sbsg114
(lp1647
g1410
ag1409
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp1648
sg85
g1634
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp1649
sg97
Nsg98
Nsb(dp1650
sg5
(g18
g7
Ntp1651
Rp1652
(dp1653
g22
(dp1654
sg24
g5
(g1403
g7
Ntp1655
Rp1656
(dp1657
g1407
(lp1658
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp1659
Rp1660
(dp1661
g53
I00
sg1411
S'snr_s.png'
p1662
sg1409
g37
sg1412
S'red_to_blue'
p1663
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1664
sg1410
g37
sg51
g52
sbsg1421
(dp1665
g1411
Nssg1423
(lp1666
g1411
asg1425
Nsbsg82
Nsg76
g1516
sg83
(dp1667
sg85
g1634
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1516
sg94
Nsg95
(lp1668
sg97
Nsg98
Nsb(dp1669
sg5
(g18
g7
Ntp1670
Rp1671
(dp1672
g22
(dp1673
sg24
g5
(g1403
g7
Ntp1674
Rp1675
(dp1676
g1407
(lp1677
g1472
asg29
g30
(g1413
tp1678
Rp1679
(dp1680
g53
I00
sg1419
g1630
sg1472
g37
sg51
g52
sbsg1421
(dp1681
g1478
Nssg1423
(lp1682
g1478
asg1425
Nsbsg82
Nsg88
I00
sg83
(dp1683
sg90
Nsg87
Nsg97
Nsg76
g1481
sg85
g1634
sg89
I00
sg91
Nsg92
I00
sg93
g1481
sg94
Nsg95
(lp1684
sg98
Nsb(dp1685
sg5
(g18
g7
Ntp1686
Rp1687
(dp1688
g22
(dp1689
sg24
g5
(g104
g7
Ntp1690
Rp1691
(dp1692
g29
g30
(g108
tp1693
Rp1694
(dp1695
g51
g52
sg1456
g37
sg1457
g37
sg1458
g37
sg1459
g37
sbsg114
(lp1696
g1457
ag1458
ag1456
ag1459
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp1697
sg85
g1634
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp1698
sg97
Nsg98
Nsb(dp1699
sg5
(g18
g7
Ntp1700
Rp1701
(dp1702
g22
(dp1703
sg24
g5
(g1403
g7
Ntp1704
Rp1705
(dp1706
g1407
(lp1707
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp1708
Rp1709
(dp1710
g53
I00
sg1411
S'snr_a.png'
p1711
sg1409
g37
sg1412
g1663
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1712
sg1410
g37
sg51
g52
sbsg1421
(dp1713
g1411
Nssg1423
(lp1714
g1411
asg1425
Nsbsg82
Nsg76
g1426
sg83
(dp1715
sg85
g1634
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1426
sg94
Nsg95
(lp1716
sg97
Nsg98
Nsb(dp1717
ssg355
(dp1718
sg357
(dp1719
g1620
(dp1720
g1687
(dp1721
g361
(lp1722
(g1478
g1456
tp1723
assg1701
(dp1724
g361
(lp1725
(g1478
g1410
tp1726
assg1652
(dp1727
g361
(lp1728
(g1478
g1410
tp1729
asssg1638
(dp1730
g1671
(dp1731
g361
(lp1732
(g1409
g1472
tp1733
assg1620
(dp1734
g361
(lp1735
(g1410
g1472
tp1736
asssg1652
(dp1737
g1687
(dp1738
g361
(lp1739
(g1411
g1458
tp1740
asssg1671
(dp1741
g1687
(dp1742
g361
(lp1743
(g1478
g1459
tp1744
assg1701
(dp1745
g361
(lp1746
(g1478
g1409
tp1747
assg1652
(dp1748
g361
(lp1749
(g1478
g1409
tp1750
asssg1687
(dp1751
sg1701
(dp1752
g1687
(dp1753
g361
(lp1754
(g1411
g1457
tp1755
assssg403
g1719
sg404
(dp1756
g1620
(dp1757
g1638
g1734
ssg1638
(dp1758
sg1652
(dp1759
g1671
g1748
sg1620
g1727
ssg1671
(dp1760
g1638
g1731
ssg1687
(dp1761
g1671
g1742
sg1620
g1721
sg1652
g1738
sg1701
g1753
ssg1701
(dp1762
g1671
g1745
sg1620
g1724
sssg412
g1719
sbsg76
g1634
sg85
g1067
sg93
g1634
sg94
g413
((lp1763
(lp1764
g416
ag413
((lp1765
(lp1766
g419
ag416
aa(lp1767
g421
ag422
aa(lp1768
g424
ag425
aa(lp1769
g427
ag428
aa(lp1770
g430
ag431
aa(lp1771
g433
ag434
aa(lp1772
g436
ag437
aa(lp1773
g439
ag440
aatp1774
Rp1775
aa(lp1776
g444
ag413
((lp1777
(lp1778
g419
ag444
aa(lp1779
g448
ag449
aa(lp1780
g451
ag452
aa(lp1781
g454
ag455
aa(lp1782
g457
ag458
aa(lp1783
g460
ag461
aa(lp1784
g463
ag464
aa(lp1785
g466
ag467
aa(lp1786
g469
ag470
aa(lp1787
g472
ag473
aa(lp1788
g475
ag476
aa(lp1789
g478
ag479
aa(lp1790
g481
ag482
aa(lp1791
g484
ag485
aa(lp1792
g487
ag488
aa(lp1793
g490
ag491
aa(lp1794
g493
ag494
aa(lp1795
g496
ag497
aa(lp1796
g499
ag500
aatp1797
Rp1798
aa(lp1799
g504
ag413
((lp1800
(lp1801
g419
ag504
aa(lp1802
g508
ag509
aatp1803
Rp1804
aatp1805
Rp1806
sg98
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g18
g7
Ntp1810
Rp1811
(dp1812
g22
(dp1813
sg24
g5
(g1145
g7
Ntp1814
Rp1815
(dp1816
g29
g30
(g1149
tp1817
Rp1818
(dp1819
g53
I00
sg1153
g37
sg199
g37
sg1154
g37
sg192
g37
sg268
g37
sg55
g37
sg242
g37
sg1155
g37
sg1156
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg58
g59
sg65
g5
(g66
g67
(dp1821
g69
g70
stp1822
Rp1823
(dp1824
g74
S'environ_items'
p1825
sg76
g65
sbsg1162
g37
sg1163
g37
sg77
g70
sg1164
g37
sg1165
g37
sg51
g52
sg1166
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'mean_func_fsl_warp_0'
p1826
sg83
(dp1827
sg85
g1067
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1826
sg94
Nsg95
(lp1828
sg97
Nsg98
Nsbg192
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g18
g7
Ntp1831
Rp1832
(dp1833
g22
(dp1834
sg24
g5
(g1403
g7
Ntp1835
Rp1836
(dp1837
g1407
(lp1838
S'motion_parameters'
p1839
asg29
g30
(g1413
tp1840
Rp1841
(dp1842
g53
I00
sg1419
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g37
sg51
g52
sbsg1421
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1423
(lp1847
g1845
ag1846
asg1425
Nsbsg82
Nsg76
S'motion_plt_0'
p1848
sg83
(dp1849
sg85
g1067
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1848
sg94
Nsg95
(lp1850
sg97
Nsg98
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g18
g7
Ntp1853
Rp1854
(dp1855
g22
(dp1856
sg24
g5
(g1403
g7
Ntp1857
Rp1858
(dp1859
g1407
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg29
g30
(g1413
tp1864
Rp1865
(dp1866
g53
I00
sg51
g52
sg1861
g37
sg1419
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g37
sbsg1421
(dp1869
S'hist_path'
p1870
Nssg1423
(lp1871
g1870
asg1425
Nsbsg82
Nsg76
S'fd_plot_0'
p1872
sg83
(dp1873
sg85
g1067
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1872
sg94
Nsg95
(lp1874
sg97
Nsg98
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g18
g7
Ntp1884
Rp1885
(dp1886
g22
(dp1887
sg24
g5
(g1403
g7
Ntp1888
Rp1889
(dp1890
g1407
(lp1891
g199
asg29
g30
(g1413
tp1892
Rp1893
(dp1894
g53
I00
sg51
g52
sg1419
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p1895
sg199
g37
sbsg1421
(dp1896
g192
Nssg1423
(lp1897
g192
asg1425
Nsbsg82
Nsg76
S'calculate_FD'
p1898
sg83
(dp1899
sg85
S'gen_motion_stats_0'
p1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1898
sg94
Nsg95
(lp1901
sg97
Nsg98
Nsb(dp1902
sg5
(g18
g7
Ntp1903
Rp1904
(dp1905
g22
(dp1906
sg24
g5
(g104
g7
Ntp1907
Rp1908
(dp1909
g29
g30
(g108
tp1910
Rp1911
(dp1912
g51
g52
sS'frames_ex_1D'
p1913
g37
sS'FDJ_1D'
p1914
g37
sS'FD_1D'
p1915
g37
sS'frames_in_1D'
p1916
g37
sS'motion_params'
p1917
g37
sS'power_params'
p1918
g37
sbsg114
(lp1919
g1915
ag1914
ag1913
ag1916
ag1918
ag1917
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp1920
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp1921
sg97
Nsg98
Nsb(dp1922
sg5
(g18
g7
Ntp1923
Rp1924
(dp1925
g22
(dp1926
sg24
g5
(g104
g7
Ntp1927
Rp1928
(dp1929
g29
g30
(g108
tp1930
Rp1931
(dp1932
g306
(lp1933
F0.2
asg51
g52
sS'remove_frames_before'
p1934
I1
sS'remove_frames_after'
p1935
I2
sbsg114
(lp1936
g306
ag1934
ag1935
asg116
I01
sbsg82
Nsg76
S'scrubbing_input'
p1937
sg83
(dp1938
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
(g306
(lp1939
F0.2
atp1940
sg92
I00
sg93
g1937
sg94
Nsg95
(lp1941
sg97
Nsg98
Nsb(dp1942
sg5
(g18
g7
Ntp1943
Rp1944
(dp1945
g22
(dp1946
sg24
g5
(g104
g7
Ntp1947
Rp1948
(dp1949
g29
g30
(g108
tp1950
Rp1951
(dp1952
S'max_displacement'
p1953
g37
sg51
g52
sS'scan_id'
p1954
g37
sS'subject_id'
p1955
g37
sS'mask'
p1956
g37
sS'movement_parameters'
p1957
g37
sS'oned_matrix_save'
p1958
g37
sS'motion_correct'
p1959
g37
sbsg114
(lp1960
g1955
ag1954
ag1957
ag1953
ag1959
ag1956
ag1958
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp1961
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp1962
sg97
Nsg98
Nsb(dp1963
sg5
(g18
g7
Ntp1964
Rp1965
(dp1966
g22
(dp1967
sg24
g5
(g1403
g7
Ntp1968
Rp1969
(dp1970
g1407
(lp1971
S'rest'
p1972
ag1956
asg29
g30
(g1413
tp1973
Rp1974
(dp1975
g53
I00
sg1956
g37
sg51
g52
sg1419
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p1976
sg1972
g37
sbsg1421
(dp1977
g192
Nssg1423
(lp1978
g192
asg1425
Nsbsg82
Nsg76
S'cal_DVARS'
p1979
sg83
(dp1980
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1979
sg94
Nsg95
(lp1981
sg97
Nsg98
Nsb(dp1982
sg5
(g18
g7
Ntp1983
Rp1984
(dp1985
g22
(dp1986
sg24
g5
(g1403
g7
Ntp1987
Rp1988
(dp1989
g1407
(lp1990
g1955
ag1954
ag1957
ag1953
asg29
g30
(g1413
tp1991
Rp1992
(dp1993
g53
I00
sg1953
g37
sg1954
g37
sg1955
g37
sg1419
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1994
sg1957
g37
sg51
g52
sbsg1421
(dp1995
g192
Nssg1423
(lp1996
g192
asg1425
Nsbsg82
Nsg76
S'calc_motion_parameters'
p1997
sg83
(dp1998
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1997
sg94
Nsg95
(lp1999
sg97
Nsg98
Nsb(dp2000
sg5
(g18
g7
Ntp2001
Rp2002
(dp2003
g22
(dp2004
sg24
g5
(g1403
g7
Ntp2005
Rp2006
(dp2007
g1407
(lp2008
g199
ag306
aS'exclude_list'
p2009
asg29
g30
(g1413
tp2010
Rp2011
(dp2012
g53
I00
sg2009
g37
sg1419
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p2013
sg199
g37
sg306
g37
sg51
g52
sbsg1421
(dp2014
g192
Nssg1423
(lp2015
g192
asg1425
Nsbsg82
Nsg76
S'include_frames'
p2016
sg83
(dp2017
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2016
sg94
Nsg95
(lp2018
sg97
Nsg98
Nsb(dp2019
sg5
(g18
g7
Ntp2020
Rp2021
(dp2022
g22
(dp2023
sg24
g5
(g1403
g7
Ntp2024
Rp2025
(dp2026
g1407
(lp2027
g199
ag306
aS'frames_before'
p2028
aS'frames_after'
p2029
asg29
g30
(g1413
tp2030
Rp2031
(dp2032
g53
I00
sg2029
g37
sg1419
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p2033
sg199
g37
sg306
g37
sg51
g52
sg2028
g37
sbsg1421
(dp2034
g192
Nssg1423
(lp2035
g192
asg1425
Nsbsg82
Nsg76
S'exclude_frames'
p2036
sg83
(dp2037
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2036
sg94
Nsg95
(lp2038
sg97
Nsg98
Nsb(dp2039
sg5
(g18
g7
Ntp2040
Rp2041
(dp2042
g22
(dp2043
sg24
g5
(g1403
g7
Ntp2044
Rp2045
(dp2046
g1407
(lp2047
g1955
ag1954
ag1915
ag1914
ag306
aS'DVARS'
p2048
asg29
g30
(g1413
tp2049
Rp2050
(dp2051
g53
I00
sg51
g52
sg1954
g37
sg1955
g37
sg2048
g37
sg1419
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p2052
sg1914
g37
sg1915
g37
sg306
g37
sbsg1421
(dp2053
g192
Nssg1423
(lp2054
g192
asg1425
Nsbsg82
Nsg76
S'calc_power_parameters'
p2055
sg83
(dp2056
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2055
sg94
Nsg95
(lp2057
sg97
Nsg98
Nsb(dp2058
sg5
(g18
g7
Ntp2059
Rp2060
(dp2061
g22
(dp2062
sg24
g5
(g1403
g7
Ntp2063
Rp2064
(dp2065
g1407
(lp2066
g199
asg29
g30
(g1413
tp2067
Rp2068
(dp2069
g53
I00
sg51
g52
sg1419
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p2070
sg199
g37
sbsg1421
(dp2071
g192
Nssg1423
(lp2072
g192
asg1425
Nsbsg82
Nsg76
S'calculate_FDJ'
p2073
sg83
(dp2074
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2073
sg94
Nsg95
(lp2075
sg97
Nsg98
Nsb(dp2076
ssg355
(dp2077
sg357
(dp2078
g1885
(dp2079
g2041
(dp2080
g361
(lp2081
(g192
g1915
tp2082
assg2021
(dp2083
g361
(lp2084
(g192
g199
tp2085
assg1904
(dp2086
g361
(lp2087
(g192
g1915
tp2088
assg2002
(dp2089
g361
(lp2090
(g192
g199
tp2091
asssg1904
(dp2092
sg1924
(dp2093
g2021
(dp2094
g361
(lp2095
(g306
g306
tp2096
a(g1934
g2028
tp2097
a(g1935
g2029
tp2098
assg2002
(dp2099
g361
(lp2100
(g306
g306
tp2101
assg2041
(dp2102
g361
(lp2103
(g306
g306
tp2104
asssg1944
(dp2105
g2041
(dp2106
g361
(lp2107
(g1955
g1955
tp2108
a(g1954
g1954
tp2109
assg1885
(dp2110
g361
(lp2111
(g1957
g199
tp2112
assg1984
(dp2113
g361
(lp2114
(g1955
g1955
tp2115
a(g1954
g1954
tp2116
a(g1957
g1957
tp2117
a(g1953
g1953
tp2118
assg1965
(dp2119
g361
(lp2120
(g1959
g1972
tp2121
a(g1956
g1956
tp2122
assg2060
(dp2123
g361
(lp2124
(g1958
g199
tp2125
asssg1965
(dp2126
g2041
(dp2127
g361
(lp2128
(g192
g2048
tp2129
asssg1984
(dp2130
g1904
(dp2131
g361
(lp2132
(g192
g1917
tp2133
asssg2002
(dp2134
g1904
(dp2135
g361
(lp2136
(g192
g1916
tp2137
asssg2021
(dp2138
g1904
(dp2139
g361
(lp2140
(g192
g1913
tp2141
assg2002
(dp2142
g361
(lp2143
(g192
g2009
tp2144
asssg2041
(dp2145
g1904
(dp2146
g361
(lp2147
(g192
g1918
tp2148
asssg2060
(dp2149
g2041
(dp2150
g361
(lp2151
(g192
g1914
tp2152
assg1904
(dp2153
g361
(lp2154
(g192
g1914
tp2155
assssg403
g2078
sg404
(dp2156
g1885
(dp2157
g1944
g2110
ssg1904
(dp2158
g1885
g2086
sg2021
g2139
sg1984
g2131
sg2002
g2135
sg2041
g2146
sg2060
g2153
ssg1924
(dp2159
sg1944
(dp2160
sg1965
(dp2161
g1944
g2119
ssg1984
(dp2162
g1944
g2113
ssg2002
(dp2163
g1885
g2089
sg2021
g2142
sg1924
g2099
ssg2021
(dp2164
g1885
g2083
sg1924
g2094
ssg2041
(dp2165
g1944
g2106
sg2060
g2150
sg1965
g2127
sg1924
g2102
sg1885
g2080
ssg2060
(dp2166
g1944
g2123
sssg412
g2078
sbsg76
g1900
sg85
g1067
sg93
g1900
sg94
g413
((lp2167
(lp2168
g416
ag413
((lp2169
(lp2170
g419
ag416
aa(lp2171
g421
ag422
aa(lp2172
g424
ag425
aa(lp2173
g427
ag428
aa(lp2174
g430
ag431
aa(lp2175
g433
ag434
aa(lp2176
g436
ag437
aa(lp2177
g439
ag440
aatp2178
Rp2179
aa(lp2180
g444
ag413
((lp2181
(lp2182
g419
ag444
aa(lp2183
g448
ag449
aa(lp2184
g451
ag452
aa(lp2185
g454
ag455
aa(lp2186
g457
ag458
aa(lp2187
g460
ag461
aa(lp2188
g463
ag464
aa(lp2189
g466
ag467
aa(lp2190
g469
ag470
aa(lp2191
g472
ag473
aa(lp2192
g475
ag476
aa(lp2193
g478
ag479
aa(lp2194
g481
ag482
aa(lp2195
g484
ag485
aa(lp2196
g487
ag488
aa(lp2197
g490
ag491
aa(lp2198
g493
ag494
aa(lp2199
g496
ag497
aa(lp2200
g499
ag500
aatp2201
Rp2202
aa(lp2203
g504
ag413
((lp2204
(lp2205
g419
ag504
aa(lp2206
g508
ag509
aatp2207
Rp2208
aatp2209
Rp2210
sg98
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g18
g7
Ntp2224
Rp2225
(dp2226
g22
(dp2227
sg24
g5
(g104
g7
Ntp2228
Rp2229
(dp2230
g29
g30
(g108
tp2231
Rp2232
(dp2233
g51
g52
sS'anat'
p2234
g37
sbsg114
(lp2235
g2234
asg116
I01
sbsg82
Nsg88
I00
sg83
(dp2236
sg90
Nsg87
Nsg97
Nsg76
g308
sg85
S'anat_preproc_0'
p2237
sg89
I00
sg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp2238
sg98
Nsb(dp2239
sg5
(g18
g7
Ntp2240
Rp2241
(dp2242
g22
(dp2243
sg24
g5
(cnipype.interfaces.afni.preprocess
Refit
p2244
g7
Ntp2245
Rp2246
(dp2247
g29
g30
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2248
tp2249
Rp2250
(dp2251
g53
I00
sg51
g52
sS'deoblique'
p2252
I01
sg55
g37
sS'yorigin'
p2253
g37
sg58
g59
sg65
g5
(g66
g67
(dp2254
tp2255
Rp2256
(dp2257
g74
S'environ_items'
p2258
sg76
g65
sbsg199
g37
sS'xorigin'
p2259
g37
sS'zorigin'
p2260
g37
sbsg80
Nsg81
g59
sbsg82
Nsg88
I00
sg83
(dp2261
sg90
Nsg87
Nsg97
Nsg76
S'anat_deoblique'
p2262
sg85
g2237
sg89
I00
sg91
Nsg92
I00
sg93
g2262
sg94
Nsg95
(lp2263
sg98
Nsb(dp2264
sg5
(g18
g7
Ntp2265
Rp2266
(dp2267
g22
(dp2268
sg24
g5
(cnipype.interfaces.afni.preprocess
Resample
p2269
g7
Ntp2270
Rp2271
(dp2272
g29
g30
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2273
tp2274
Rp2275
(dp2276
g53
I00
sg51
g52
sg192
g37
sg55
g37
sS'outputtype'
p2277
S'NIFTI_GZ'
p2278
sS'resample_mode'
p2279
g37
sS'voxel_size'
p2280
g37
sg58
g59
sS'master'
p2281
g37
sg199
g37
sg65
g5
(g66
g67
(dp2282
tp2283
Rp2284
(dp2285
g74
S'environ_items'
p2286
sg76
g65
sbsS'orientation'
p2287
S'RPI'
p2288
sbsS'_outputtype'
p2289
g2278
sg80
Nsg81
g59
sbsg82
Nsg88
I00
sg83
(dp2290
sg90
Nsg87
Nsg97
Nsg76
S'anat_reorient'
p2291
sg85
g2237
sg89
I00
sg91
Nsg92
I00
sg93
g2291
sg94
Nsg95
(lp2292
sg98
Nsb(dp2293
sg5
(g18
g7
Ntp2294
Rp2295
(dp2296
g22
(dp2297
sg24
g5
(cnipype.interfaces.afni.preprocess
Calc
p2298
g7
Ntp2299
Rp2300
(dp2301
g29
g30
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2302
tp2303
Rp2304
(dp2305
S'stop_idx'
p2306
g37
sg53
I00
sg51
g52
sg192
g37
sS'expr'
p2307
S'a*step(b)'
p2308
sg55
g37
sg2277
g2278
sS'in_file_b'
p2309
g37
sS'in_file_c'
p2310
g37
sS'in_file_a'
p2311
g37
sg65
g5
(g66
g67
(dp2312
tp2313
Rp2314
(dp2315
g74
S'environ_items'
p2316
sg76
g65
sbsS'single_idx'
p2317
g37
sS'other'
p2318
g37
sS'start_idx'
p2319
g37
sg58
g59
sbsg2289
g2278
sg80
Nsg81
g59
sbsg82
Nsg88
I00
sg83
(dp2320
sg90
Nsg87
Nsg97
Nsg76
S'anat_brain_only'
p2321
sg85
g2237
sg89
I00
sg91
Nsg92
I00
sg93
g2321
sg94
Nsg95
(lp2322
sg98
Nsb(dp2323
sg5
(g18
g7
Ntp2324
Rp2325
(dp2326
g22
(dp2327
sg24
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2328
g7
Ntp2329
Rp2330
(dp2331
g29
g30
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2332
tp2333
Rp2334
(dp2335
g53
I00
sg51
g52
sg192
g37
sg55
g37
sg2277
S'AFNI'
p2336
sg58
g59
sg65
g5
(g66
g67
(dp2337
tp2338
Rp2339
(dp2340
g74
S'environ_items'
p2341
sg76
g65
sbsg199
g37
sbsg2289
g2336
sg80
Nsg81
g59
sbsg82
Nsg88
I00
sg83
(dp2342
sg90
Nsg87
Nsg97
Nsg76
S'anat_skullstrip'
p2343
sg85
g2237
sg89
I00
sg91
Nsg92
I00
sg93
g2343
sg94
Nsg95
(lp2344
sg98
Nsb(dp2345
sg5
(g18
g7
Ntp2346
Rp2347
(dp2348
g22
(dp2349
sg24
g5
(g104
g7
Ntp2350
Rp2351
(dp2352
g29
g30
(g108
tp2353
Rp2354
(dp2355
S'reorient'
p2356
g37
sg304
g37
sS'refit'
p2357
g37
sg51
g52
sS'skullstrip'
p2358
g37
sbsg114
(lp2359
g2357
ag2356
ag2358
ag304
asg116
I01
sbsg82
Nsg88
I00
sg83
(dp2360
sg90
Nsg87
Nsg97
Nsg76
g166
sg85
g2237
sg89
I00
sg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp2361
sg98
Nsb(dp2362
ssg357
(dp2363
g2225
(dp2364
g2241
(dp2365
g361
(lp2366
(g2234
g199
tp2367
asssg2241
(dp2368
g2347
(dp2369
g361
(lp2370
(g192
g2357
tp2371
assg2266
(dp2372
g361
(lp2373
(g192
g199
tp2374
asssg2266
(dp2375
g2347
(dp2376
g361
(lp2377
(g192
g2356
tp2378
assg2295
(dp2379
g361
(lp2380
(g192
g2311
tp2381
assg2325
(dp2382
g361
(lp2383
(g192
g199
tp2384
asssg2295
(dp2385
g2347
(dp2386
g361
(lp2387
(g192
g304
tp2388
asssg2325
(dp2389
g2295
(dp2390
g361
(lp2391
(g192
g2309
tp2392
assg2347
(dp2393
g361
(lp2394
(g192
g2358
tp2395
asssg2347
(dp2396
ssg403
g2363
sg404
(dp2397
g2225
(dp2398
sg2241
(dp2399
g2225
g2365
ssg2266
(dp2400
g2241
g2372
ssg2295
(dp2401
g2325
g2390
sg2266
g2379
ssg2325
(dp2402
g2266
g2382
ssg2347
(dp2403
g2241
g2369
sg2325
g2393
sg2295
g2386
sg2266
g2376
sssg355
(dp2404
sg412
g2363
sbsg76
g2237
sg85
g1067
sg93
g2237
sg94
g413
((lp2405
(lp2406
g416
ag413
((lp2407
(lp2408
g419
ag416
aa(lp2409
g421
ag422
aa(lp2410
g424
ag425
aa(lp2411
g427
ag428
aa(lp2412
g430
ag431
aa(lp2413
g433
ag434
aa(lp2414
g436
ag437
aa(lp2415
g439
ag440
aatp2416
Rp2417
aa(lp2418
g444
ag413
((lp2419
(lp2420
g419
ag444
aa(lp2421
g448
ag449
aa(lp2422
g451
ag452
aa(lp2423
g454
ag455
aa(lp2424
g457
ag458
aa(lp2425
g460
ag461
aa(lp2426
g463
ag464
aa(lp2427
g466
ag467
aa(lp2428
g469
ag470
aa(lp2429
g472
ag473
aa(lp2430
g475
ag476
aa(lp2431
g478
ag479
aa(lp2432
g481
ag482
aa(lp2433
g484
ag485
aa(lp2434
g487
ag488
aa(lp2435
g490
ag491
aa(lp2436
g493
ag494
aa(lp2437
g496
ag497
aa(lp2438
g499
ag500
aatp2439
Rp2440
aa(lp2441
g504
ag413
((lp2442
(lp2443
g419
ag504
aa(lp2444
g508
ag509
aatp2445
Rp2446
aatp2447
Rp2448
sg98
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g18
g7
Ntp2459
Rp2460
(dp2461
g22
(dp2462
sg24
g5
(g2269
g7
Ntp2463
Rp2464
(dp2465
g29
g30
(g2273
tp2466
Rp2467
(dp2468
g53
I00
sg51
g52
sg192
g37
sg55
g37
sg2277
g2278
sg2279
g37
sg2280
g37
sg58
g59
sg2281
g37
sg199
g37
sg65
g5
(g66
g67
(dp2469
tp2470
Rp2471
(dp2472
g74
S'environ_items'
p2473
sg76
g65
sbsg2287
g2288
sbsg2289
g2278
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_reorient'
p2474
sg83
(dp2475
sg85
S'func_preproc_automask_0'
p2476
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2474
sg94
Nsg95
(lp2477
sg97
Nsg98
Nsb(dp2478
sg5
(g18
g7
Ntp2479
Rp2480
(dp2481
g22
(dp2482
sg24
g5
(g104
g7
Ntp2483
Rp2484
(dp2485
g29
g30
(g108
tp2486
Rp2487
(dp2488
g1953
g37
sS'motion_correct_ref'
p2489
g37
sg51
g52
sS'preprocessed_mask'
p2490
g37
sg1956
g37
sg2357
g37
sg2358
g37
sg2356
g37
sS'preprocessed'
p2491
g37
sS'slice_time_corrected'
p2492
g37
sg1957
g37
sS'example_func'
p2493
g37
sg1958
g37
sS'reorient_mean'
p2494
g37
sg1959
g37
sbsg114
(lp2495
g2357
ag2356
ag2494
ag1959
ag2489
ag1957
ag1953
ag1956
ag2358
ag2493
ag2491
ag2490
ag2492
ag1958
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp2496
sg85
g2476
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp2497
sg97
Nsg98
Nsb(dp2498
sg5
(g18
g7
Ntp2499
Rp2500
(dp2501
g22
(dp2502
sg24
g5
(cnipype.interfaces.afni.preprocess
Automask
p2503
g7
Ntp2504
Rp2505
(dp2506
g29
g30
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2507
tp2508
Rp2509
(dp2510
g53
I00
sg51
g52
sg55
g37
sS'erode'
p2511
g37
sg192
g37
sS'dilate'
p2512
g37
sS'clfrac'
p2513
g37
sg2277
g2278
sS'brain_file'
p2514
g37
sg58
g59
sg65
g5
(g66
g67
(dp2515
tp2516
Rp2517
(dp2518
g74
S'environ_items'
p2519
sg76
g65
sbsg199
g37
sbsg2289
g2278
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_get_brain_mask'
p2520
sg83
(dp2521
sg85
g2476
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2520
sg94
Nsg95
(lp2522
sg97
Nsg98
Nsb(dp2523
sg5
(g18
g7
Ntp2524
Rp2525
(dp2526
g22
(dp2527
sg24
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2528
g7
Ntp2529
Rp2530
(dp2531
g29
g30
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2532
tp2533
Rp2534
(dp2535
S'oned_file'
p2536
g37
sg53
I00
sg41
g37
sS'timeshift'
p2537
g37
sS'basefile'
p2538
g37
sg55
S'-Fourier -twopass'
p2539
sg2277
g2278
sS'zpad'
p2540
I4
sg58
g59
sS'md1d_file'
p2541
g37
sg199
g37
sS'copyorigin'
p2542
g37
sg65
g5
(g66
g67
(dp2543
tp2544
Rp2545
(dp2546
g74
S'environ_items'
p2547
sg76
g65
sbsg1958
g37
sg51
g52
sg192
g37
sbsg2289
g2278
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_motion_correct'
p2548
sg83
(dp2549
sg85
g2476
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2548
sg94
Nsg95
(lp2550
sg97
Nsg98
Nsb(dp2551
sg5
(g18
g7
Ntp2552
Rp2553
(dp2554
g22
(dp2555
sg24
g5
(cnipype.interfaces.afni.preprocess
TStat
p2556
g7
Ntp2557
Rp2558
(dp2559
g29
g30
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2560
tp2561
Rp2562
(dp2563
g53
I00
sg51
g52
sg192
g37
sg55
g37
sg1956
g37
sg2277
g2278
sg58
g59
sg65
g5
(g66
g67
(dp2564
tp2565
Rp2566
(dp2567
g74
S'environ_items'
p2568
sg76
g65
sbsg199
g37
sS'options'
p2569
S'-mean'
p2570
sbsg2289
g2278
sg80
Nsg81
g59
sbsg82
Nsg88
I00
sg83
(dp2571
sg90
Nsg87
Nsg97
Nsg76
S'func_get_mean_motion'
p2572
sg85
g2476
sg89
I00
sg91
Nsg92
I00
sg93
g2572
sg94
Nsg95
(lp2573
sg98
Nsb(dp2574
sg5
(g18
g7
Ntp2575
Rp2576
(dp2577
g22
(dp2578
sg24
g5
(g2298
g7
Ntp2579
Rp2580
(dp2581
g29
g30
(g2302
tp2582
Rp2583
(dp2584
g2306
g37
sg53
I00
sg51
g52
sg192
g37
sg2307
S'a*b'
p2585
sg55
g37
sg2277
g2278
sg2309
g37
sg2310
g37
sg2311
g37
sg65
g5
(g66
g67
(dp2586
tp2587
Rp2588
(dp2589
g74
S'environ_items'
p2590
sg76
g65
sbsg2317
g37
sg2318
g37
sg2319
g37
sg58
g59
sbsg2289
g2278
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_edge_detect'
p2591
sg83
(dp2592
sg85
g2476
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2591
sg94
Nsg95
(lp2593
sg97
Nsg98
Nsb(dp2594
sg5
(g18
g7
Ntp2595
Rp2596
(dp2597
g22
(dp2598
sg24
g5
(g316
g7
Ntp2599
Rp2600
(dp2601
g29
g30
(g320
tp2602
Rp2603
(dp2604
g53
I00
sg51
g52
sg190
S'-ing 10000'
p2605
sg324
S'float'
p2606
sg192
g37
sg55
g37
sg325
g37
sg58
g59
sg65
g5
(g66
g67
(dp2607
g69
g70
stp2608
Rp2609
(dp2610
g74
S'environ_items'
p2611
sg76
g65
sbsg199
g37
sg77
g70
sg331
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_normalize'
p2612
sg83
(dp2613
sg85
g2476
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2612
sg94
Nsg95
(lp2614
sg97
Nsg98
Nsb(dp2615
sg5
(g18
g7
Ntp2616
Rp2617
(dp2618
g22
(dp2619
sg24
g5
(g2556
g7
Ntp2620
Rp2621
(dp2622
g29
g30
(g2560
tp2623
Rp2624
(dp2625
g53
I00
sg51
g52
sg192
g37
sg55
g37
sg1956
g37
sg2277
g2278
sg58
g59
sg65
g5
(g66
g67
(dp2626
tp2627
Rp2628
(dp2629
g74
S'environ_items'
p2630
sg76
g65
sbsg199
g37
sg2569
g2570
sbsg2289
g2278
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_get_mean_RPI'
p2631
sg83
(dp2632
sg85
g2476
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2631
sg94
Nsg95
(lp2633
sg97
Nsg98
Nsb(dp2634
sg5
(g18
g7
Ntp2635
Rp2636
(dp2637
g22
(dp2638
sg24
g5
(g2556
g7
Ntp2639
Rp2640
(dp2641
g29
g30
(g2560
tp2642
Rp2643
(dp2644
g53
I00
sg51
g52
sg192
g37
sg55
g37
sg1956
g37
sg2277
g2278
sg58
g59
sg65
g5
(g66
g67
(dp2645
tp2646
Rp2647
(dp2648
g74
S'environ_items'
p2649
sg76
g65
sbsg199
g37
sg2569
g2570
sbsg2289
g2278
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_mean_skullstrip'
p2650
sg83
(dp2651
sg85
g2476
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2650
sg94
Nsg95
(lp2652
sg97
Nsg98
Nsb(dp2653
sg5
(g18
g7
Ntp2654
Rp2655
(dp2656
g22
(dp2657
sg24
g5
(g104
g7
Ntp2658
Rp2659
(dp2660
g29
g30
(g108
tp2661
Rp2662
(dp2663
g51
g52
sS'func'
p2664
g37
sbsg114
(lp2665
g2664
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp2666
sg85
g2476
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp2667
sg97
Nsg98
Nsb(dp2668
sg5
(g18
g7
Ntp2669
Rp2670
(dp2671
g22
(dp2672
sg24
g5
(g316
g7
Ntp2673
Rp2674
(dp2675
g29
g30
(g320
tp2676
Rp2677
(dp2678
g53
I00
sg51
g52
sg190
S'-Tmin -bin'
p2679
sg324
S'char'
p2680
sg192
g37
sg55
g37
sg325
g37
sg58
g59
sg65
g5
(g66
g67
(dp2681
g69
g70
stp2682
Rp2683
(dp2684
g74
S'environ_items'
p2685
sg76
g65
sbsg199
g37
sg77
g70
sg331
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_mask_normalize'
p2686
sg83
(dp2687
sg85
g2476
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2686
sg94
Nsg95
(lp2688
sg97
Nsg98
Nsb(dp2689
sg5
(g18
g7
Ntp2690
Rp2691
(dp2692
g22
(dp2693
sg24
g5
(g2528
g7
Ntp2694
Rp2695
(dp2696
g29
g30
(g2532
tp2697
Rp2698
(dp2699
g2536
g37
sg53
I00
sg41
g37
sg2537
g37
sg2538
g37
sg55
g2539
sg2277
g2278
sg2540
I4
sg58
g59
sg2541
S'max_displacement.1D'
p2700
sg199
g37
sg2542
g37
sg65
g5
(g66
g67
(dp2701
tp2702
Rp2703
(dp2704
g74
S'environ_items'
p2705
sg76
g65
sbsg1958
g37
sg51
g52
sg192
g37
sbsg2289
g2278
sg80
Nsg81
g59
sbsg82
Nsg88
I00
sg83
(dp2706
sg90
Nsg87
Nsg97
Nsg76
S'func_motion_correct_A'
p2707
sg85
g2476
sg89
I00
sg91
Nsg92
I00
sg93
g2707
sg94
Nsg95
(lp2708
sg98
Nsb(dp2709
sg5
(g18
g7
Ntp2710
Rp2711
(dp2712
g22
(dp2713
sg24
g5
(g2244
g7
Ntp2714
Rp2715
(dp2716
g29
g30
(g2248
tp2717
Rp2718
(dp2719
g53
I00
sg51
g52
sg2252
I01
sg55
g37
sg2253
g37
sg58
g59
sg65
g5
(g66
g67
(dp2720
tp2721
Rp2722
(dp2723
g74
S'environ_items'
p2724
sg76
g65
sbsg199
g37
sg2259
g37
sg2260
g37
sbsg80
Nsg81
g59
sbsg82
Nsg76
S'func_deoblique'
p2725
sg83
(dp2726
sg85
g2476
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2725
sg94
Nsg95
(lp2727
sg97
Nsg98
Nsb(dp2728
ssg355
(dp2729
sg357
(dp2730
g2460
(dp2731
g2691
(dp2732
g361
(lp2733
(g192
g199
tp2734
assg2525
(dp2735
g361
(lp2736
(g192
g199
tp2737
assg2480
(dp2738
g361
(lp2739
(g192
g2356
tp2740
assg2617
(dp2741
g361
(lp2742
(g192
g199
tp2743
asssg2480
(dp2744
sg2500
(dp2745
g2480
(dp2746
g361
(lp2747
(g192
g1956
tp2748
assg2576
(dp2749
g361
(lp2750
(g192
g2309
tp2751
asssg2525
(dp2752
g2553
(dp2753
g361
(lp2754
(g192
g199
tp2755
asssg2553
(dp2756
g2480
(dp2757
g361
(lp2758
(g192
g2489
tp2759
assg2691
(dp2760
g361
(lp2761
(g192
g2538
tp2762
asssg2576
(dp2763
g2636
(dp2764
g361
(lp2765
(g192
g199
tp2766
assg2480
(dp2767
g361
(lp2768
(g192
g2358
tp2769
assg2596
(dp2770
g361
(lp2771
(g192
g199
tp2772
asssg2596
(dp2773
g2670
(dp2774
g361
(lp2775
(g192
g199
tp2776
assg2480
(dp2777
g361
(lp2778
(g192
g2491
tp2779
asssg2617
(dp2780
g2525
(dp2781
g361
(lp2782
(g192
g2538
tp2783
asssg2636
(dp2784
g2480
(dp2785
g361
(lp2786
(g192
g2493
tp2787
asssg2655
(dp2788
g2711
(dp2789
g361
(lp2790
(g2664
g199
tp2791
asssg2670
(dp2792
g2480
(dp2793
g361
(lp2794
(g192
g2490
tp2795
asssg2691
(dp2796
g2500
(dp2797
g361
(lp2798
(g192
g199
tp2799
assg2480
(dp2800
g361
(lp2801
(g192
g1959
tp2802
a(g2541
g1953
tp2803
a(g2536
g1957
tp2804
a(g1958
g1958
tp2805
assg2576
(dp2806
g361
(lp2807
(g192
g2311
tp2808
asssg2711
(dp2809
g2460
(dp2810
g361
(lp2811
(g192
g199
tp2812
assssg403
g2730
sg404
(dp2813
g2460
(dp2814
g2711
g2810
ssg2480
(dp2815
g2500
g2746
sg2576
g2767
sg2553
g2757
sg2460
g2738
sg2636
g2785
sg2596
g2777
sg2670
g2793
sg2691
g2800
ssg2500
(dp2816
g2691
g2797
ssg2525
(dp2817
g2460
g2735
sg2617
g2781
ssg2553
(dp2818
g2525
g2753
ssg2576
(dp2819
g2500
g2749
sg2691
g2806
ssg2596
(dp2820
g2576
g2770
ssg2617
(dp2821
g2460
g2741
ssg2636
(dp2822
g2576
g2764
ssg2655
(dp2823
sg2670
(dp2824
g2596
g2774
ssg2691
(dp2825
g2460
g2732
sg2553
g2760
ssg2711
(dp2826
g2655
g2789
sssg412
g2730
sbsg76
g2476
sg85
g1067
sg93
g2476
sg94
g413
((lp2827
(lp2828
g416
ag413
((lp2829
(lp2830
g419
ag416
aa(lp2831
g421
ag422
aa(lp2832
g424
ag425
aa(lp2833
g427
ag428
aa(lp2834
g430
ag431
aa(lp2835
g433
ag434
aa(lp2836
g436
ag437
aa(lp2837
g439
ag440
aatp2838
Rp2839
aa(lp2840
g444
ag413
((lp2841
(lp2842
g419
ag444
aa(lp2843
g448
ag449
aa(lp2844
g451
ag452
aa(lp2845
g454
ag455
aa(lp2846
g457
ag458
aa(lp2847
g460
ag461
aa(lp2848
g463
ag464
aa(lp2849
g466
ag467
aa(lp2850
g469
ag470
aa(lp2851
g472
ag473
aa(lp2852
g475
ag476
aa(lp2853
g478
ag479
aa(lp2854
g481
ag482
aa(lp2855
g484
ag485
aa(lp2856
g487
ag488
aa(lp2857
g490
ag491
aa(lp2858
g493
ag494
aa(lp2859
g496
ag497
aa(lp2860
g499
ag500
aatp2861
Rp2862
aa(lp2863
g504
ag413
((lp2864
(lp2865
g419
ag504
aa(lp2866
g508
ag509
aatp2867
Rp2868
aatp2869
Rp2870
sg98
NsbS'outputspec.example_func'
p2871
tp2872
sg1957
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g18
g7
Ntp2880
Rp2881
(dp2882
g22
(dp2883
sg24
g5
(g104
g7
Ntp2884
Rp2885
(dp2886
g29
g30
(g108
tp2887
Rp2888
(dp2889
g51
g52
sS'movement_file'
p2890
g37
sbsg114
(lp2891
g2890
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp2892
sg85
S'fristons_parameter_model_0'
p2893
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp2894
sg97
Nsg98
Nsb(dp2895
sg5
(g18
g7
Ntp2896
Rp2897
(dp2898
g22
(dp2899
sg24
g5
(g1403
g7
Ntp2900
Rp2901
(dp2902
g1407
(lp2903
g199
asg29
g30
(g1413
tp2904
Rp2905
(dp2906
g53
I00
sg51
g52
sg1419
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2907
sg199
g37
sbsg1421
(dp2908
g192
Nssg1423
(lp2909
g192
asg1425
Nsbsg82
Nsg76
S'calc_friston'
p2910
sg83
(dp2911
sg85
g2893
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2910
sg94
Nsg95
(lp2912
sg97
Nsg98
Nsb(dp2913
sg5
(g18
g7
Ntp2914
Rp2915
(dp2916
g22
(dp2917
sg24
g5
(g104
g7
Ntp2918
Rp2919
(dp2920
g29
g30
(g108
tp2921
Rp2922
(dp2923
g51
g52
sg2890
g37
sbsg114
(lp2924
g2890
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp2925
sg85
g2893
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp2926
sg97
Nsg98
Nsb(dp2927
ssg355
(dp2928
sg357
(dp2929
g2881
(dp2930
g2897
(dp2931
g361
(lp2932
(g2890
g199
tp2933
asssg2897
(dp2934
g2915
(dp2935
g361
(lp2936
(g192
g2890
tp2937
asssg2915
(dp2938
ssg403
g2929
sg404
(dp2939
g2881
(dp2940
sg2897
(dp2941
g2881
g2931
ssg2915
(dp2942
g2897
g2935
sssg412
g2929
sbsg76
g2893
sg85
g1067
sg93
g2893
sg94
g413
((lp2943
(lp2944
g416
ag413
((lp2945
(lp2946
g419
ag416
aa(lp2947
g421
ag422
aa(lp2948
g424
ag425
aa(lp2949
g427
ag428
aa(lp2950
g430
ag431
aa(lp2951
g433
ag434
aa(lp2952
g436
ag437
aa(lp2953
g439
ag440
aatp2954
Rp2955
aa(lp2956
g444
ag413
((lp2957
(lp2958
g419
ag444
aa(lp2959
g448
ag449
aa(lp2960
g451
ag452
aa(lp2961
g454
ag455
aa(lp2962
g457
ag458
aa(lp2963
g460
ag461
aa(lp2964
g463
ag464
aa(lp2965
g466
ag467
aa(lp2966
g469
ag470
aa(lp2967
g472
ag473
aa(lp2968
g475
ag476
aa(lp2969
g478
ag479
aa(lp2970
g481
ag482
aa(lp2971
g484
ag485
aa(lp2972
g487
ag488
aa(lp2973
g490
ag491
aa(lp2974
g493
ag494
aa(lp2975
g496
ag497
aa(lp2976
g499
ag500
aatp2977
Rp2978
aa(lp2979
g504
ag413
((lp2980
(lp2981
g419
ag504
aa(lp2982
g508
ag509
aatp2983
Rp2984
aatp2985
Rp2986
sg98
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g18
g7
Ntp2997
Rp2998
(dp2999
g22
(dp3000
sg24
g5
(g104
g7
Ntp3001
Rp3002
(dp3003
g29
g30
(g108
tp3004
Rp3005
(dp3006
g51
g52
sg1456
g37
sg1457
g37
sg1458
g37
sg1459
g37
sbsg114
(lp3007
g1457
ag1458
ag1456
ag1459
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp3008
sg85
S'montage_anat_0'
p3009
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp3010
sg97
Nsg98
Nsb(dp3011
sg5
(g18
g7
Ntp3012
Rp3013
(dp3014
g22
(dp3015
sg24
g5
(g104
g7
Ntp3016
Rp3017
(dp3018
g29
g30
(g108
tp3019
Rp3020
(dp3021
g51
g52
sg1410
g37
sg1409
g37
sbsg114
(lp3022
g1410
ag1409
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp3023
sg85
g3009
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp3024
sg97
Nsg98
Nsb(dp3025
sg5
(g18
g7
Ntp3026
Rp3027
(dp3028
g22
(dp3029
sg24
g5
(g1403
g7
Ntp3030
Rp3031
(dp3032
g1407
(lp3033
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp3034
Rp3035
(dp3036
g53
I00
sg1411
S't1_edge_on_mean_func_in_t1_s.png'
p3037
sg1409
g37
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3038
sg1410
g37
sg51
g52
sbsg1421
(dp3039
g1411
Nssg1423
(lp3040
g1411
asg1425
Nsbsg82
Nsg76
g1516
sg83
(dp3041
sg85
g3009
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1516
sg94
Nsg95
(lp3042
sg97
Nsg98
Nsb(dp3043
sg5
(g18
g7
Ntp3044
Rp3045
(dp3046
g22
(dp3047
sg24
g5
(g1403
g7
Ntp3048
Rp3049
(dp3050
g1407
(lp3051
g1472
asg29
g30
(g1413
tp3052
Rp3053
(dp3054
g53
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3055
sg1472
g37
sg51
g52
sbsg1421
(dp3056
g1478
Nssg1423
(lp3057
g1478
asg1425
Nsbsg82
Nsg88
I00
sg83
(dp3058
sg90
Nsg87
Nsg97
Nsg76
g1481
sg85
g3009
sg89
I00
sg91
Nsg92
I00
sg93
g1481
sg94
Nsg95
(lp3059
sg98
Nsb(dp3060
sg5
(g18
g7
Ntp3061
Rp3062
(dp3063
g22
(dp3064
sg24
g5
(g1403
g7
Ntp3065
Rp3066
(dp3067
g1407
(lp3068
g1472
asg29
g30
(g1413
tp3069
Rp3070
(dp3071
g53
I00
sg1419
g3055
sg1472
g37
sg51
g52
sbsg1421
(dp3072
g1478
Nssg1423
(lp3073
g1478
asg1425
Nsbsg82
Nsg76
g1497
sg83
(dp3074
sg85
g3009
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1497
sg94
Nsg95
(lp3075
sg97
Nsg98
Nsb(dp3076
sg5
(g18
g7
Ntp3077
Rp3078
(dp3079
g22
(dp3080
sg24
g5
(g1403
g7
Ntp3081
Rp3082
(dp3083
g1407
(lp3084
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp3085
Rp3086
(dp3087
g53
I00
sg1411
S't1_edge_on_mean_func_in_t1_a.png'
p3088
sg1409
g37
sg1412
g1418
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3089
sg1410
g37
sg51
g52
sbsg1421
(dp3090
g1411
Nssg1423
(lp3091
g1411
asg1425
Nsbsg82
Nsg76
g1426
sg83
(dp3092
sg85
g3009
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1426
sg94
Nsg95
(lp3093
sg97
Nsg98
Nsb(dp3094
ssg355
(dp3095
sg357
(dp3096
g2998
(dp3097
sg3013
(dp3098
g3062
(dp3099
g361
(lp3100
(g1410
g1472
tp3101
assg3045
(dp3102
g361
(lp3103
(g1409
g1472
tp3104
asssg3027
(dp3105
g2998
(dp3106
g361
(lp3107
(g1411
g1458
tp3108
asssg3045
(dp3109
g3078
(dp3110
g361
(lp3111
(g1478
g1409
tp3112
assg3027
(dp3113
g361
(lp3114
(g1478
g1409
tp3115
assg2998
(dp3116
g361
(lp3117
(g1478
g1459
tp3118
asssg3062
(dp3119
g3078
(dp3120
g361
(lp3121
(g1478
g1410
tp3122
assg3027
(dp3123
g361
(lp3124
(g1478
g1410
tp3125
assg2998
(dp3126
g361
(lp3127
(g1478
g1456
tp3128
asssg3078
(dp3129
g2998
(dp3130
g361
(lp3131
(g1411
g1457
tp3132
assssg403
g3096
sg404
(dp3133
g2998
(dp3134
g3062
g3126
sg3078
g3130
sg3027
g3106
sg3045
g3116
ssg3013
(dp3135
sg3027
(dp3136
g3062
g3123
sg3045
g3113
ssg3045
(dp3137
g3013
g3102
ssg3062
(dp3138
g3013
g3099
ssg3078
(dp3139
g3062
g3120
sg3045
g3110
sssg412
g3096
sbsg76
g3009
sg85
g1067
sg93
g3009
sg94
g413
((lp3140
(lp3141
g416
ag413
((lp3142
(lp3143
g419
ag416
aa(lp3144
g421
ag422
aa(lp3145
g424
ag425
aa(lp3146
g427
ag428
aa(lp3147
g430
ag431
aa(lp3148
g433
ag434
aa(lp3149
g436
ag437
aa(lp3150
g439
ag440
aatp3151
Rp3152
aa(lp3153
g444
ag413
((lp3154
(lp3155
g419
ag444
aa(lp3156
g448
ag449
aa(lp3157
g451
ag452
aa(lp3158
g454
ag455
aa(lp3159
g457
ag458
aa(lp3160
g460
ag461
aa(lp3161
g463
ag464
aa(lp3162
g466
ag467
aa(lp3163
g469
ag470
aa(lp3164
g472
ag473
aa(lp3165
g475
ag476
aa(lp3166
g478
ag479
aa(lp3167
g481
ag482
aa(lp3168
g484
ag485
aa(lp3169
g487
ag488
aa(lp3170
g490
ag491
aa(lp3171
g493
ag494
aa(lp3172
g496
ag497
aa(lp3173
g499
ag500
aatp3174
Rp3175
aa(lp3176
g504
ag413
((lp3177
(lp3178
g419
ag504
aa(lp3179
g508
ag509
aatp3180
Rp3181
aatp3182
Rp3183
sg98
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg1953
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g18
g7
Ntp3201
Rp3202
(dp3203
g22
(dp3204
sg24
g5
(g1403
g7
Ntp3205
Rp3206
(dp3207
g1407
(lp3208
g1472
asg29
g30
(g1413
tp3209
Rp3210
(dp3211
g53
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3212
sg1472
g37
sg51
g52
sbsg1421
(dp3213
g1478
Nssg1423
(lp3214
g1478
asg1425
Nsbsg82
Nsg76
g1497
sg83
(dp3215
sg85
S'montage_csf_gm_wm_0'
p3216
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1497
sg94
Nsg95
(lp3217
sg97
Nsg98
Nsb(dp3218
sg5
(g18
g7
Ntp3219
Rp3220
(dp3221
g22
(dp3222
sg24
g5
(g1403
g7
Ntp3223
Rp3224
(dp3225
g1407
(lp3226
g1472
asg29
g30
(g1413
tp3227
Rp3228
(dp3229
g53
I00
sg1419
g3212
sg1472
g37
sg51
g52
sbsg1421
(dp3230
g1478
Nssg1423
(lp3231
g1478
asg1425
Nsbsg82
Nsg88
I00
sg83
(dp3232
sg90
Nsg87
Nsg97
Nsg76
S'resample_o_gm'
p3233
sg85
g3216
sg89
I00
sg91
Nsg92
I00
sg93
g3233
sg94
Nsg95
(lp3234
sg98
Nsb(dp3235
sg5
(g18
g7
Ntp3236
Rp3237
(dp3238
g22
(dp3239
sg24
g5
(g1403
g7
Ntp3240
Rp3241
(dp3242
g1407
(lp3243
S'overlay_csf'
p3244
aS'overlay_wm'
p3245
aS'overlay_gm'
p3246
ag1410
ag1411
asg29
g30
(g1413
tp3247
Rp3248
(dp3249
g53
I00
sg1411
S'montage_csf_gm_wm_a.png'
p3250
sg3246
g37
sg1419
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3251
sg3244
g37
sg3245
g37
sg1410
g37
sg51
g52
sbsg1421
(dp3252
g1411
Nssg1423
(lp3253
g1411
asg1425
Nsbsg82
Nsg76
g1426
sg83
(dp3254
sg85
g3216
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1426
sg94
Nsg95
(lp3255
sg97
Nsg98
Nsb(dp3256
sg5
(g18
g7
Ntp3257
Rp3258
(dp3259
g22
(dp3260
sg24
g5
(g1403
g7
Ntp3261
Rp3262
(dp3263
g1407
(lp3264
g1472
asg29
g30
(g1413
tp3265
Rp3266
(dp3267
g53
I00
sg1419
g3212
sg1472
g37
sg51
g52
sbsg1421
(dp3268
g1478
Nssg1423
(lp3269
g1478
asg1425
Nsbsg82
Nsg88
I00
sg83
(dp3270
sg90
Nsg87
Nsg97
Nsg76
S'resample_o_wm'
p3271
sg85
g3216
sg89
I00
sg91
Nsg92
I00
sg93
g3271
sg94
Nsg95
(lp3272
sg98
Nsb(dp3273
sg5
(g18
g7
Ntp3274
Rp3275
(dp3276
g22
(dp3277
sg24
g5
(g1403
g7
Ntp3278
Rp3279
(dp3280
g1407
(lp3281
g3244
ag3245
ag3246
ag1410
ag1411
asg29
g30
(g1413
tp3282
Rp3283
(dp3284
g53
I00
sg1411
S'montage_csf_gm_wm_s.png'
p3285
sg3246
g37
sg1419
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3286
sg3244
g37
sg3245
g37
sg1410
g37
sg51
g52
sbsg1421
(dp3287
g1411
Nssg1423
(lp3288
g1411
asg1425
Nsbsg82
Nsg76
g1516
sg83
(dp3289
sg85
g3216
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1516
sg94
Nsg95
(lp3290
sg97
Nsg98
Nsb(dp3291
sg5
(g18
g7
Ntp3292
Rp3293
(dp3294
g22
(dp3295
sg24
g5
(g1403
g7
Ntp3296
Rp3297
(dp3298
g1407
(lp3299
g1472
asg29
g30
(g1413
tp3300
Rp3301
(dp3302
g53
I00
sg1419
g3212
sg1472
g37
sg51
g52
sbsg1421
(dp3303
g1478
Nssg1423
(lp3304
g1478
asg1425
Nsbsg82
Nsg88
I00
sg83
(dp3305
sg90
Nsg87
Nsg97
Nsg76
S'resample_o_csf'
p3306
sg85
g3216
sg89
I00
sg91
Nsg92
I00
sg93
g3306
sg94
Nsg95
(lp3307
sg98
Nsb(dp3308
sg5
(g18
g7
Ntp3309
Rp3310
(dp3311
g22
(dp3312
sg24
g5
(g104
g7
Ntp3313
Rp3314
(dp3315
g29
g30
(g108
tp3316
Rp3317
(dp3318
g51
g52
sS'resampled_overlay_csf'
p3319
g37
sS'resampled_overlay_gm'
p3320
g37
sg1457
g37
sg1458
g37
sg1456
g37
sS'resampled_overlay_wm'
p3321
g37
sbsg114
(lp3322
g1457
ag1458
ag1456
ag3319
ag3321
ag3320
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp3323
sg85
g3216
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp3324
sg97
Nsg98
Nsb(dp3325
sg5
(g18
g7
Ntp3326
Rp3327
(dp3328
g22
(dp3329
sg24
g5
(g104
g7
Ntp3330
Rp3331
(dp3332
g29
g30
(g108
tp3333
Rp3334
(dp3335
g51
g52
sg3246
g37
sg1410
g37
sg3244
g37
sg3245
g37
sbsg114
(lp3336
g1410
ag3244
ag3245
ag3246
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp3337
sg85
g3216
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp3338
sg97
Nsg98
Nsb(dp3339
ssg355
(dp3340
sg357
(dp3341
g3202
(dp3342
g3310
(dp3343
g361
(lp3344
(g1478
g1456
tp3345
assg3237
(dp3346
g361
(lp3347
(g1478
g1410
tp3348
assg3275
(dp3349
g361
(lp3350
(g1478
g1410
tp3351
asssg3220
(dp3352
g3310
(dp3353
g361
(lp3354
(g1478
g3320
tp3355
assg3237
(dp3356
g361
(lp3357
(g1478
g3246
tp3358
assg3275
(dp3359
g361
(lp3360
(g1478
g3246
tp3361
asssg3237
(dp3362
g3310
(dp3363
g361
(lp3364
(g1411
g1457
tp3365
asssg3258
(dp3366
g3310
(dp3367
g361
(lp3368
(g1478
g3321
tp3369
assg3237
(dp3370
g361
(lp3371
(g1478
g3245
tp3372
assg3275
(dp3373
g361
(lp3374
(g1478
g3245
tp3375
asssg3275
(dp3376
g3310
(dp3377
g361
(lp3378
(g1411
g1458
tp3379
asssg3293
(dp3380
g3310
(dp3381
g361
(lp3382
(g1478
g3319
tp3383
assg3237
(dp3384
g361
(lp3385
(g1478
g3244
tp3386
assg3275
(dp3387
g361
(lp3388
(g1478
g3244
tp3389
asssg3310
(dp3390
sg3327
(dp3391
g3258
(dp3392
g361
(lp3393
(g3245
g1472
tp3394
assg3202
(dp3395
g361
(lp3396
(g1410
g1472
tp3397
assg3220
(dp3398
g361
(lp3399
(g3246
g1472
tp3400
assg3293
(dp3401
g361
(lp3402
(g3244
g1472
tp3403
assssg403
g3341
sg404
(dp3404
g3202
(dp3405
g3327
g3395
ssg3220
(dp3406
g3327
g3398
ssg3237
(dp3407
g3258
g3370
sg3202
g3346
sg3220
g3356
sg3293
g3384
ssg3258
(dp3408
g3327
g3392
ssg3275
(dp3409
g3258
g3373
sg3202
g3349
sg3220
g3359
sg3293
g3387
ssg3293
(dp3410
g3327
g3401
ssg3310
(dp3411
g3202
g3343
sg3237
g3363
sg3220
g3353
sg3258
g3367
sg3275
g3377
sg3293
g3381
ssg3327
(dp3412
ssg412
g3341
sbsg76
g3216
sg85
g1067
sg93
g3216
sg94
g413
((lp3413
(lp3414
g416
ag413
((lp3415
(lp3416
g419
ag416
aa(lp3417
g421
ag422
aa(lp3418
g424
ag425
aa(lp3419
g427
ag428
aa(lp3420
g430
ag431
aa(lp3421
g433
ag434
aa(lp3422
g436
ag437
aa(lp3423
g439
ag440
aatp3424
Rp3425
aa(lp3426
g444
ag413
((lp3427
(lp3428
g419
ag444
aa(lp3429
g448
ag449
aa(lp3430
g451
ag452
aa(lp3431
g454
ag455
aa(lp3432
g457
ag458
aa(lp3433
g460
ag461
aa(lp3434
g463
ag464
aa(lp3435
g466
ag467
aa(lp3436
g469
ag470
aa(lp3437
g472
ag473
aa(lp3438
g475
ag476
aa(lp3439
g478
ag479
aa(lp3440
g481
ag482
aa(lp3441
g484
ag485
aa(lp3442
g487
ag488
aa(lp3443
g490
ag491
aa(lp3444
g493
ag494
aa(lp3445
g496
ag497
aa(lp3446
g499
ag500
aatp3447
Rp3448
aa(lp3449
g504
ag413
((lp3450
(lp3451
g419
ag504
aa(lp3452
g508
ag509
aatp3453
Rp3454
aatp3455
Rp3456
sg98
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g18
g7
Ntp3466
Rp3467
(dp3468
g22
(dp3469
sg24
g5
(g104
g7
Ntp3470
Rp3471
(dp3472
g29
g30
(g108
tp3473
Rp3474
(dp3475
g51
g52
sS'linear_reg_matrix'
p3476
g37
sS'bbr_schedule'
p3477
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3478
sS'anat_wm_segmentation'
p3479
g37
sS'anat_skull'
p3480
g37
sg2664
g37
sbsg114
(lp3481
g2664
ag3480
ag3476
ag3479
ag3477
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp3482
sg85
S'func_to_anat_bbreg_0'
p3483
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp3484
sg97
Nsg98
Nsb(dp3485
sg5
(g18
g7
Ntp3486
Rp3487
(dp3488
g22
(dp3489
sg24
g5
(g316
g7
Ntp3490
Rp3491
(dp3492
g29
g30
(g320
tp3493
Rp3494
(dp3495
g53
I00
sg51
g52
sg190
S'-thr 0.5 -bin'
p3496
sg324
g37
sg192
g37
sg55
g37
sg325
g37
sg58
g59
sg65
g5
(g66
g67
(dp3497
g69
g70
stp3498
Rp3499
(dp3500
g74
S'environ_items'
p3501
sg76
g65
sbsg199
g37
sg77
g70
sg331
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'wm_bb_mask'
p3502
sg83
(dp3503
sg85
g3483
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g3502
sg94
Nsg95
(lp3504
sg97
Nsg98
Nsb(dp3505
sg5
(g18
g7
Ntp3506
Rp3507
(dp3508
g22
(dp3509
sg24
g5
(g104
g7
Ntp3510
Rp3511
(dp3512
g29
g30
(g108
tp3513
Rp3514
(dp3515
S'func_to_anat_linear_xfm'
p3516
g37
sg51
g52
sS'anat_func'
p3517
g37
sbsg114
(lp3518
g3516
ag3517
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp3519
sg85
g3483
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp3520
sg97
Nsg98
Nsb(dp3521
sg5
(g18
g7
Ntp3522
Rp3523
(dp3524
g22
(dp3525
sg24
g5
(g229
g7
Ntp3526
Rp3527
(dp3528
g29
g30
(g233
tp3529
Rp3530
(dp3531
g237
g37
sg51
g52
sg238
g37
sg41
g37
sg239
g37
sg240
g37
sg241
g37
sg242
g37
sg244
g37
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg199
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg53
I00
sg258
g37
sg259
g37
sg55
g37
sg260
g37
sg261
g37
sg58
g59
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg266
g37
sg192
g37
sg267
g37
sg268
g37
sg269
g37
sg270
I6
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg65
g5
(g66
g67
(dp3532
g69
g70
stp3533
Rp3534
(dp3535
g74
S'environ_items'
p3536
sg76
g65
sbsg281
g37
sg282
g37
sg77
g70
sg283
g37
sg284
g37
sg285
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'bbreg_func_to_anat'
p3537
sg83
(dp3538
sg85
g3483
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g3537
sg94
Nsg95
(lp3539
sg97
Nsg98
Nsb(dp3540
ssg355
(dp3541
sg357
(dp3542
g3467
(dp3543
g3487
(dp3544
g361
(lp3545
(g3479
g199
tp3546
assg3523
(dp3547
g361
(lp3548
(g3477
g259
tp3549
a(g2664
g199
tp3550
a(g3480
g239
tp3551
a(g3476
g238
tp3552
asssg3487
(dp3553
g3523
(dp3554
g361
(lp3555
((g192
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3556
(ttp3557
g55
tp3558
asssg3507
(dp3559
sg3523
(dp3560
g3507
(dp3561
g361
(lp3562
(g271
g3516
tp3563
a(g192
g3517
tp3564
assssg403
g3542
sg404
(dp3565
g3467
(dp3566
sg3487
(dp3567
g3467
g3544
ssg3507
(dp3568
g3523
g3561
ssg3523
(dp3569
g3467
g3547
sg3487
g3554
sssg412
g3542
sbsg76
g3483
sg85
g1067
sg93
g3483
sg94
g413
((lp3570
(lp3571
g416
ag413
((lp3572
(lp3573
g419
ag416
aa(lp3574
g421
ag422
aa(lp3575
g424
ag425
aa(lp3576
g427
ag428
aa(lp3577
g430
ag431
aa(lp3578
g433
ag434
aa(lp3579
g436
ag437
aa(lp3580
g439
ag440
aatp3581
Rp3582
aa(lp3583
g444
ag413
((lp3584
(lp3585
g419
ag444
aa(lp3586
g448
ag449
aa(lp3587
g451
ag452
aa(lp3588
g454
ag455
aa(lp3589
g457
ag458
aa(lp3590
g460
ag461
aa(lp3591
g463
ag464
aa(lp3592
g466
ag467
aa(lp3593
g469
ag470
aa(lp3594
g472
ag473
aa(lp3595
g475
ag476
aa(lp3596
g478
ag479
aa(lp3597
g481
ag482
aa(lp3598
g484
ag485
aa(lp3599
g487
ag488
aa(lp3600
g490
ag491
aa(lp3601
g493
ag494
aa(lp3602
g496
ag497
aa(lp3603
g499
ag500
aatp3604
Rp3605
aa(lp3606
g504
ag413
((lp3607
(lp3608
g419
ag504
aa(lp3609
g508
ag509
aatp3610
Rp3611
aatp3612
Rp3613
sg98
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g18
g7
Ntp3620
Rp3621
(dp3622
g22
(dp3623
sg24
g5
(g1403
g7
Ntp3624
Rp3625
(dp3626
g1407
(lp3627
S'measure_file'
p3628
asg29
g30
(g1413
tp3629
Rp3630
(dp3631
g53
I00
sg51
g52
sg1419
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g37
sbsg1421
(dp3633
S'snr_storefl'
p3634
Nssg1423
(lp3635
g3634
asg1425
Nsbsg82
Nsg76
S'snr_val0'
p3636
sg83
(dp3637
sg85
g1067
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g3636
sg94
Nsg95
(lp3638
sg97
Nsg98
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g18
g7
Ntp3648
Rp3649
(dp3650
g22
(dp3651
sg24
g5
(g1403
g7
Ntp3652
Rp3653
(dp3654
g1407
(lp3655
g3628
ag1863
asg29
g30
(g1413
tp3656
Rp3657
(dp3658
g53
I00
sg51
g52
sg1419
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g37
sg1863
S'snr'
p3660
sbsg1421
(dp3661
g1870
Nssg1423
(lp3662
g1870
asg1425
Nsbsg82
Nsg88
I00
sg83
(dp3663
sg90
Nsg87
Nsg97
Nsg76
S'hist_snr_0'
p3664
sg85
g1067
sg89
I00
sg91
Nsg92
I00
sg93
g3664
sg94
Nsg95
(lp3665
sg98
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g18
g7
Ntp3678
Rp3679
(dp3680
g22
(dp3681
sg24
g5
(g104
g7
Ntp3682
Rp3683
(dp3684
g29
g30
(g108
tp3685
Rp3686
(dp3687
g51
g52
sS'scan'
p3688
g37
sS'subject'
p3689
S'14_918487825'
p3690
sbsg114
(lp3691
g3689
ag3688
asg116
I01
sbsg82
Nsg76
S'inputnode'
p3692
sg83
(dp3693
sg85
S'func_gather_0'
p3694
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
(lp3695
(g3688
(lp3696
S'rest_1_rest'
p3697
atp3698
asg92
I00
sg93
g3692
sg94
Nsg95
(lp3699
sg97
Nsg98
Nsb(dp3700
sg5
(g18
g7
Ntp3701
Rp3702
(dp3703
g22
(dp3704
sg24
g5
(g1403
g7
Ntp3705
Rp3706
(dp3707
g1407
(lp3708
g3688
aS'rest_dict'
p3709
asg29
g30
(g1413
tp3710
Rp3711
(dp3712
g53
I00
sg3709
(dp3713
g3697
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-37/KKI2009-37-fMRI.nii'
p3714
ssg1419
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3715
sg51
g52
sg3688
g37
sbsg1421
(dp3716
g1972
Nssg1423
(lp3717
g1972
asg1425
Nsbsg82
Nsg76
S'selectrest'
p3718
sg83
(dp3719
sg85
g3694
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g3718
sg94
Nsg95
(lp3720
sg97
Nsg98
Nsb(dp3721
sg5
(g18
g7
Ntp3722
Rp3723
(dp3724
g22
(dp3725
sg24
g5
(g104
g7
Ntp3726
Rp3727
(dp3728
g29
g30
(g108
tp3729
Rp3730
(dp3731
g51
g52
sg3688
g37
sg1972
g37
sg3689
g37
sbsg114
(lp3732
g3689
ag1972
ag3688
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp3733
sg85
g3694
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp3734
sg97
Nsg98
Nsb(dp3735
ssg355
(dp3736
sg357
(dp3737
g3679
(dp3738
g3723
(dp3739
g361
(lp3740
(g3689
g3689
tp3741
a(g3688
g3688
tp3742
assg3702
(dp3743
g361
(lp3744
(g3688
g3688
tp3745
asssg3702
(dp3746
g3723
(dp3747
g361
(lp3748
(g1972
g1972
tp3749
asssg3723
(dp3750
ssg403
g3737
sg404
(dp3751
g3679
(dp3752
sg3702
(dp3753
g3679
g3743
ssg3723
(dp3754
g3679
g3739
sg3702
g3747
sssg412
g3737
sbsg76
g3694
sg85
g1067
sg93
g3694
sg94
g413
((lp3755
(lp3756
g416
ag413
((lp3757
(lp3758
g419
ag416
aa(lp3759
g421
ag422
aa(lp3760
g424
ag425
aa(lp3761
g427
ag428
aa(lp3762
g430
ag431
aa(lp3763
g433
ag434
aa(lp3764
g436
ag437
aa(lp3765
g439
ag440
aatp3766
Rp3767
aa(lp3768
g444
ag413
((lp3769
(lp3770
g419
ag444
aa(lp3771
g448
ag449
aa(lp3772
g451
ag452
aa(lp3773
g454
ag455
aa(lp3774
g457
ag458
aa(lp3775
g460
ag461
aa(lp3776
g463
ag464
aa(lp3777
g466
ag467
aa(lp3778
g469
ag470
aa(lp3779
g472
ag473
aa(lp3780
g475
ag476
aa(lp3781
g478
ag479
aa(lp3782
g481
ag482
aa(lp3783
g484
ag485
aa(lp3784
g487
ag488
aa(lp3785
g490
ag491
aa(lp3786
g493
ag494
aa(lp3787
g496
ag497
aa(lp3788
g499
ag500
aatp3789
Rp3790
aa(lp3791
g504
ag413
((lp3792
(lp3793
g419
ag504
aa(lp3794
g508
ag509
aatp3795
Rp3796
aatp3797
Rp3798
sg98
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g18
g7
Ntp3808
Rp3809
(dp3810
g22
(dp3811
sg24
g5
(g1145
g7
Ntp3812
Rp3813
(dp3814
g29
g30
(g1149
tp3815
Rp3816
(dp3817
g53
I00
sg1153
g37
sg199
g37
sg1154
g37
sg192
g37
sg268
g37
sg55
g37
sg242
g37
sg1155
g37
sg1156
g1820
sg58
g59
sg65
g5
(g66
g67
(dp3818
g69
g70
stp3819
Rp3820
(dp3821
g74
S'environ_items'
p3822
sg76
g65
sbsg1162
g37
sg1163
g37
sg77
g70
sg1164
g37
sg1165
g37
sg51
g52
sg1166
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_mni_fsl_warp_0'
p3823
sg83
(dp3824
sg85
g1067
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g3823
sg94
Nsg95
(lp3825
sg97
Nsg98
Nsbg192
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g18
g7
Ntp3835
Rp3836
(dp3837
g22
(dp3838
sg24
g5
(g1403
g7
Ntp3839
Rp3840
(dp3841
g1407
(lp3842
S'data_file'
p3843
aS'template'
p3844
ag77
asg29
g30
(g1413
tp3845
Rp3846
(dp3847
g53
I00
sg51
g52
sg3843
g37
sg1419
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3848
sg3844
g37
sg77
g37
sbsg1421
(dp3849
g192
Nssg1423
(lp3850
g192
asg1425
Nsbsg82
Nsg76
S'timeseries_voxel'
p3851
sg83
(dp3852
sg85
S'voxel_timeseries_0'
p3853
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g3851
sg94
Nsg95
(lp3854
sg97
Nsg98
Nsb(dp3855
sg5
(g18
g7
Ntp3856
Rp3857
(dp3858
g22
(dp3859
sg24
g5
(g104
g7
Ntp3860
Rp3861
(dp3862
g29
g30
(g108
tp3863
Rp3864
(dp3865
g51
g52
sg77
(lp3866
I01
aI01
asg1972
g37
sbsg114
(lp3867
g1972
ag77
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp3868
sg85
g3853
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp3869
sg97
Nsg98
Nsb(dp3870
sg5
(g18
g7
Ntp3871
Rp3872
(dp3873
g22
(dp3874
sg24
g5
(g104
g7
Ntp3875
Rp3876
(dp3877
g29
g30
(g108
tp3878
Rp3879
(dp3880
g51
g52
sS'mask_outputs'
p3881
g37
sbsg114
(lp3882
g3881
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp3883
sg85
g3853
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp3884
sg97
Nsg98
Nsb(dp3885
sg5
(g18
g7
Ntp3886
Rp3887
(dp3888
g22
(dp3889
sg24
g5
(g104
g7
Ntp3890
Rp3891
(dp3892
g29
g30
(g108
tp3893
Rp3894
(dp3895
g51
g52
sg1956
g37
sbsg114
(lp3896
g1956
asg116
I01
sbsg82
Nsg76
S'input_mask'
p3897
sg83
(dp3898
sg85
g3853
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g3897
sg94
Nsg95
(lp3899
sg97
Nsg98
Nsb(dp3900
ssg355
(dp3901
sg357
(dp3902
g3836
(dp3903
g3872
(dp3904
g361
(lp3905
(g192
g3881
tp3906
asssg3857
(dp3907
g3836
(dp3908
g361
(lp3909
(g1972
g3843
tp3910
a(g77
g77
tp3911
asssg3872
(dp3912
sg3887
(dp3913
g3836
(dp3914
g361
(lp3915
(g1956
g3844
tp3916
assssg403
g3902
sg404
(dp3917
g3836
(dp3918
g3857
g3908
sg3887
g3914
ssg3857
(dp3919
sg3872
(dp3920
g3836
g3904
ssg3887
(dp3921
ssg412
g3902
sbsg76
g3853
sg85
g1067
sg93
g3853
sg94
g413
((lp3922
(lp3923
g416
ag413
((lp3924
(lp3925
g419
ag416
aa(lp3926
g421
ag422
aa(lp3927
g424
ag425
aa(lp3928
g427
ag428
aa(lp3929
g430
ag431
aa(lp3930
g433
ag434
aa(lp3931
g436
ag437
aa(lp3932
g439
ag440
aatp3933
Rp3934
aa(lp3935
g444
ag413
((lp3936
(lp3937
g419
ag444
aa(lp3938
g448
ag449
aa(lp3939
g451
ag452
aa(lp3940
g454
ag455
aa(lp3941
g457
ag458
aa(lp3942
g460
ag461
aa(lp3943
g463
ag464
aa(lp3944
g466
ag467
aa(lp3945
g469
ag470
aa(lp3946
g472
ag473
aa(lp3947
g475
ag476
aa(lp3948
g478
ag479
aa(lp3949
g481
ag482
aa(lp3950
g484
ag485
aa(lp3951
g487
ag488
aa(lp3952
g490
ag491
aa(lp3953
g493
ag494
aa(lp3954
g496
ag497
aa(lp3955
g499
ag500
aatp3956
Rp3957
aa(lp3958
g504
ag413
((lp3959
(lp3960
g419
ag504
aa(lp3961
g508
ag509
aatp3962
Rp3963
aatp3964
Rp3965
sg98
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g18
g7
Ntp3986
Rp3987
(dp3988
g22
(dp3989
sg24
g5
(g1403
g7
Ntp3990
Rp3991
(dp3992
g1407
(lp3993
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp3994
Rp3995
(dp3996
g53
I00
sg1411
S'mni_anat_a.png'
p3997
sg1409
g37
sg1412
g1418
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3998
sg1410
g37
sg51
g52
sbsg1421
(dp3999
g1411
Nssg1423
(lp4000
g1411
asg1425
Nsbsg82
Nsg76
g1426
sg83
(dp4001
sg85
S'montage_mni_anat_0'
p4002
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1426
sg94
Nsg95
(lp4003
sg97
Nsg98
Nsb(dp4004
sg5
(g18
g7
Ntp4005
Rp4006
(dp4007
g22
(dp4008
sg24
g5
(g104
g7
Ntp4009
Rp4010
(dp4011
g29
g30
(g108
tp4012
Rp4013
(dp4014
g51
g52
sg1456
g37
sg1457
g37
sg1458
g37
sg1459
g37
sbsg114
(lp4015
g1457
ag1458
ag1456
ag1459
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp4016
sg85
g4002
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp4017
sg97
Nsg98
Nsb(dp4018
sg5
(g18
g7
Ntp4019
Rp4020
(dp4021
g22
(dp4022
sg24
g5
(g1403
g7
Ntp4023
Rp4024
(dp4025
g1407
(lp4026
g1472
asg29
g30
(g1413
tp4027
Rp4028
(dp4029
g53
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4030
sg1472
g37
sg51
g52
sbsg1421
(dp4031
g1478
Nssg1423
(lp4032
g1478
asg1425
Nsbsg82
Nsg76
g1497
sg83
(dp4033
sg85
g4002
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1497
sg94
Nsg95
(lp4034
sg97
Nsg98
Nsb(dp4035
sg5
(g18
g7
Ntp4036
Rp4037
(dp4038
g22
(dp4039
sg24
g5
(g104
g7
Ntp4040
Rp4041
(dp4042
g29
g30
(g108
tp4043
Rp4044
(dp4045
g51
g52
sg1410
g37
sg1409
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p4046
sbsg114
(lp4047
g1410
ag1409
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp4048
sg85
g4002
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp4049
sg97
Nsg98
Nsb(dp4050
sg5
(g18
g7
Ntp4051
Rp4052
(dp4053
g22
(dp4054
sg24
g5
(g1403
g7
Ntp4055
Rp4056
(dp4057
g1407
(lp4058
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp4059
Rp4060
(dp4061
g53
I00
sg1411
S'mni_anat_s.png'
p4062
sg1409
g37
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4063
sg1410
g37
sg51
g52
sbsg1421
(dp4064
g1411
Nssg1423
(lp4065
g1411
asg1425
Nsbsg82
Nsg76
g1516
sg83
(dp4066
sg85
g4002
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1516
sg94
Nsg95
(lp4067
sg97
Nsg98
Nsb(dp4068
sg5
(g18
g7
Ntp4069
Rp4070
(dp4071
g22
(dp4072
sg24
g5
(g1403
g7
Ntp4073
Rp4074
(dp4075
g1407
(lp4076
g1472
asg29
g30
(g1413
tp4077
Rp4078
(dp4079
g53
I00
sg1419
g4030
sg1472
g37
sg51
g52
sbsg1421
(dp4080
g1478
Nssg1423
(lp4081
g1478
asg1425
Nsbsg82
Nsg88
I00
sg83
(dp4082
sg90
Nsg87
Nsg97
Nsg76
g1481
sg85
g4002
sg89
I00
sg91
Nsg92
I00
sg93
g1481
sg94
Nsg95
(lp4083
sg98
Nsb(dp4084
ssg355
(dp4085
sg357
(dp4086
g3987
(dp4087
g4006
(dp4088
g361
(lp4089
(g1411
g1457
tp4090
asssg4006
(dp4091
sg4020
(dp4092
g3987
(dp4093
g361
(lp4094
(g1478
g1410
tp4095
assg4006
(dp4096
g361
(lp4097
(g1478
g1456
tp4098
assg4052
(dp4099
g361
(lp4100
(g1478
g1410
tp4101
asssg4037
(dp4102
g4070
(dp4103
g361
(lp4104
(g1409
g1472
tp4105
assg4020
(dp4106
g361
(lp4107
(g1410
g1472
tp4108
asssg4052
(dp4109
g4006
(dp4110
g361
(lp4111
(g1411
g1458
tp4112
asssg4070
(dp4113
g3987
(dp4114
g361
(lp4115
(g1478
g1409
tp4116
assg4006
(dp4117
g361
(lp4118
(g1478
g1459
tp4119
assg4052
(dp4120
g361
(lp4121
(g1478
g1409
tp4122
assssg403
g4086
sg404
(dp4123
g3987
(dp4124
g4070
g4114
sg4020
g4093
ssg4006
(dp4125
g4070
g4117
sg4020
g4096
sg4052
g4110
sg3987
g4088
ssg4020
(dp4126
g4037
g4106
ssg4037
(dp4127
sg4052
(dp4128
g4070
g4120
sg4020
g4099
ssg4070
(dp4129
g4037
g4103
sssg412
g4086
sbsg76
g4002
sg85
g1067
sg93
g4002
sg94
g413
((lp4130
(lp4131
g416
ag413
((lp4132
(lp4133
g419
ag416
aa(lp4134
g421
ag422
aa(lp4135
g424
ag425
aa(lp4136
g427
ag428
aa(lp4137
g430
ag431
aa(lp4138
g433
ag434
aa(lp4139
g436
ag437
aa(lp4140
g439
ag440
aatp4141
Rp4142
aa(lp4143
g444
ag413
((lp4144
(lp4145
g419
ag444
aa(lp4146
g448
ag449
aa(lp4147
g451
ag452
aa(lp4148
g454
ag455
aa(lp4149
g457
ag458
aa(lp4150
g460
ag461
aa(lp4151
g463
ag464
aa(lp4152
g466
ag467
aa(lp4153
g469
ag470
aa(lp4154
g472
ag473
aa(lp4155
g475
ag476
aa(lp4156
g478
ag479
aa(lp4157
g481
ag482
aa(lp4158
g484
ag485
aa(lp4159
g487
ag488
aa(lp4160
g490
ag491
aa(lp4161
g493
ag494
aa(lp4162
g496
ag497
aa(lp4163
g499
ag500
aatp4164
Rp4165
aa(lp4166
g504
ag413
((lp4167
(lp4168
g419
ag504
aa(lp4169
g508
ag509
aatp4170
Rp4171
aatp4172
Rp4173
sg98
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg1959
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g18
g7
Ntp4188
Rp4189
(dp4190
g22
(dp4191
sg24
g5
(g1145
g7
Ntp4192
Rp4193
(dp4194
g29
g30
(g1149
tp4195
Rp4196
(dp4197
g53
I00
sg1153
g37
sg199
g37
sg1154
g37
sg192
g37
sg268
g37
sg55
g37
sg242
S'nn'
p4198
sg1155
g37
sg1156
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg58
g59
sg65
g5
(g66
g67
(dp4200
g69
g70
stp4201
Rp4202
(dp4203
g74
S'environ_items'
p4204
sg76
g65
sbsg1162
g37
sg1163
g37
sg77
g70
sg1164
g37
sg1165
g37
sg51
g52
sg1166
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_mni_fsl_warp_mask_0'
p4205
sg83
(dp4206
sg85
g1067
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4205
sg94
Nsg95
(lp4207
sg97
Nsg98
Nsbg192
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g18
g7
Ntp4217
Rp4218
(dp4219
g22
(dp4220
sg24
g5
(g104
g7
Ntp4221
Rp4222
(dp4223
g29
g30
(g108
tp4224
Rp4225
(dp4226
g51
g52
sg1410
g37
sg1409
g37
sbsg114
(lp4227
g1410
ag1409
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp4228
sg85
S'montage_skull_0'
p4229
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp4230
sg97
Nsg98
Nsb(dp4231
sg5
(g18
g7
Ntp4232
Rp4233
(dp4234
g22
(dp4235
sg24
g5
(g1403
g7
Ntp4236
Rp4237
(dp4238
g1407
(lp4239
g1472
asg29
g30
(g1413
tp4240
Rp4241
(dp4242
g53
I00
sg1419
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4243
sg1472
g37
sg51
g52
sbsg1421
(dp4244
g1478
Nssg1423
(lp4245
g1478
asg1425
Nsbsg82
Nsg88
I00
sg83
(dp4246
sg90
Nsg87
Nsg97
Nsg76
g1481
sg85
g4229
sg89
I00
sg91
Nsg92
I00
sg93
g1481
sg94
Nsg95
(lp4247
sg98
Nsb(dp4248
sg5
(g18
g7
Ntp4249
Rp4250
(dp4251
g22
(dp4252
sg24
g5
(g104
g7
Ntp4253
Rp4254
(dp4255
g29
g30
(g108
tp4256
Rp4257
(dp4258
g51
g52
sg1456
g37
sg1457
g37
sg1458
g37
sg1459
g37
sbsg114
(lp4259
g1457
ag1458
ag1456
ag1459
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp4260
sg85
g4229
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp4261
sg97
Nsg98
Nsb(dp4262
sg5
(g18
g7
Ntp4263
Rp4264
(dp4265
g22
(dp4266
sg24
g5
(g1403
g7
Ntp4267
Rp4268
(dp4269
g1407
(lp4270
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp4271
Rp4272
(dp4273
g53
I00
sg1411
S'skull_vis_s.png'
p4274
sg1409
g37
sg1412
g1418
sg1419
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4275
sg1410
g37
sg51
g52
sbsg1421
(dp4276
g1411
Nssg1423
(lp4277
g1411
asg1425
Nsbsg82
Nsg76
g1516
sg83
(dp4278
sg85
g4229
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1516
sg94
Nsg95
(lp4279
sg97
Nsg98
Nsb(dp4280
sg5
(g18
g7
Ntp4281
Rp4282
(dp4283
g22
(dp4284
sg24
g5
(g1403
g7
Ntp4285
Rp4286
(dp4287
g1407
(lp4288
g1409
ag1410
ag1411
ag1412
asg29
g30
(g1413
tp4289
Rp4290
(dp4291
g53
I00
sg1411
S'skull_vis_a.png'
p4292
sg1409
g37
sg1412
g1418
sg1419
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4293
sg1410
g37
sg51
g52
sbsg1421
(dp4294
g1411
Nssg1423
(lp4295
g1411
asg1425
Nsbsg82
Nsg76
g1426
sg83
(dp4296
sg85
g4229
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1426
sg94
Nsg95
(lp4297
sg97
Nsg98
Nsb(dp4298
sg5
(g18
g7
Ntp4299
Rp4300
(dp4301
g22
(dp4302
sg24
g5
(g1403
g7
Ntp4303
Rp4304
(dp4305
g1407
(lp4306
g1472
asg29
g30
(g1413
tp4307
Rp4308
(dp4309
g53
I00
sg1419
g4243
sg1472
g37
sg51
g52
sbsg1421
(dp4310
g1478
Nssg1423
(lp4311
g1478
asg1425
Nsbsg82
Nsg76
g1497
sg83
(dp4312
sg85
g4229
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1497
sg94
Nsg95
(lp4313
sg97
Nsg98
Nsb(dp4314
ssg355
(dp4315
sg357
(dp4316
g4218
(dp4317
g4300
(dp4318
g361
(lp4319
(g1410
g1472
tp4320
assg4233
(dp4321
g361
(lp4322
(g1409
g1472
tp4323
asssg4233
(dp4324
g4282
(dp4325
g361
(lp4326
(g1478
g1409
tp4327
assg4264
(dp4328
g361
(lp4329
(g1478
g1409
tp4330
assg4250
(dp4331
g361
(lp4332
(g1478
g1459
tp4333
asssg4250
(dp4334
sg4264
(dp4335
g4250
(dp4336
g361
(lp4337
(g1411
g1458
tp4338
asssg4282
(dp4339
g4250
(dp4340
g361
(lp4341
(g1411
g1457
tp4342
asssg4300
(dp4343
g4282
(dp4344
g361
(lp4345
(g1478
g1410
tp4346
assg4264
(dp4347
g361
(lp4348
(g1478
g1410
tp4349
assg4250
(dp4350
g361
(lp4351
(g1478
g1456
tp4352
assssg403
g4316
sg404
(dp4353
g4218
(dp4354
sg4233
(dp4355
g4218
g4321
ssg4250
(dp4356
g4282
g4340
sg4300
g4350
sg4264
g4336
sg4233
g4331
ssg4264
(dp4357
g4300
g4347
sg4233
g4328
ssg4282
(dp4358
g4300
g4344
sg4233
g4325
ssg4300
(dp4359
g4218
g4318
sssg412
g4316
sbsg76
g4229
sg85
g1067
sg93
g4229
sg94
g413
((lp4360
(lp4361
g416
ag413
((lp4362
(lp4363
g419
ag416
aa(lp4364
g421
ag422
aa(lp4365
g424
ag425
aa(lp4366
g427
ag428
aa(lp4367
g430
ag431
aa(lp4368
g433
ag434
aa(lp4369
g436
ag437
aa(lp4370
g439
ag440
aatp4371
Rp4372
aa(lp4373
g444
ag413
((lp4374
(lp4375
g419
ag444
aa(lp4376
g448
ag449
aa(lp4377
g451
ag452
aa(lp4378
g454
ag455
aa(lp4379
g457
ag458
aa(lp4380
g460
ag461
aa(lp4381
g463
ag464
aa(lp4382
g466
ag467
aa(lp4383
g469
ag470
aa(lp4384
g472
ag473
aa(lp4385
g475
ag476
aa(lp4386
g478
ag479
aa(lp4387
g481
ag482
aa(lp4388
g484
ag485
aa(lp4389
g487
ag488
aa(lp4390
g490
ag491
aa(lp4391
g493
ag494
aa(lp4392
g496
ag497
aa(lp4393
g499
ag500
aatp4394
Rp4395
aa(lp4396
g504
ag413
((lp4397
(lp4398
g419
ag504
aa(lp4399
g508
ag509
aatp4400
Rp4401
aatp4402
Rp4403
sg98
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2491
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2492
(g5
(g18
g7
Ntp4413
Rp4414
(dp4415
g22
(dp4416
sg24
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g29
g30
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g53
I00
sg51
g52
sS'tpattern'
p4425
g37
sg192
g37
sS'tr'
p4426
g37
sg55
g37
sg242
g37
sg2277
g2278
sS'tzero'
p4427
g37
sS'ignore'
p4428
g37
sS'rltplus'
p4429
g37
sg58
g59
sS'tslice'
p4430
g37
sg199
g37
sS'rlt'
p4431
g37
sg65
g5
(g66
g67
(dp4432
tp4433
Rp4434
(dp4435
g74
S'environ_items'
p4436
sg76
g65
sbsbsg2289
g2278
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_slice_timing_correction_0'
p4437
sg83
(dp4438
sg85
g1067
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4437
sg94
Nsg95
(lp4439
sg97
Nsg98
Nsbg192
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g18
g7
Ntp4449
Rp4450
(dp4451
g22
(dp4452
sg24
g5
(g104
g7
Ntp4453
Rp4454
(dp4455
g29
g30
(g108
tp4456
Rp4457
(dp4458
g51
g52
sS'roi'
p4459
g37
sbsg114
(lp4460
g4459
asg116
I01
sbsg82
Nsg76
S'input_roi'
p4461
sg83
(dp4462
sg85
S'roi_timeseries_0'
p4463
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4461
sg94
Nsg95
(lp4464
sg97
Nsg98
Nsb(dp4465
sg5
(g18
g7
Ntp4466
Rp4467
(dp4468
g22
(dp4469
sg24
g5
(g104
g7
Ntp4470
Rp4471
(dp4472
g29
g30
(g108
tp4473
Rp4474
(dp4475
g51
g52
sS'roi_outputs'
p4476
g37
sbsg114
(lp4477
g4476
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp4478
sg85
g4463
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp4479
sg97
Nsg98
Nsb(dp4480
sg5
(g18
g7
Ntp4481
Rp4482
(dp4483
g22
(dp4484
sg24
g5
(g104
g7
Ntp4485
Rp4486
(dp4487
g29
g30
(g108
tp4488
Rp4489
(dp4490
g51
g52
sg77
(lp4491
I01
aI01
asg1972
g37
sbsg114
(lp4492
g1972
ag77
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp4493
sg85
g4463
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp4494
sg97
Nsg98
Nsb(dp4495
sg5
(g18
g7
Ntp4496
Rp4497
(dp4498
g22
(dp4499
sg24
g5
(g1403
g7
Ntp4500
Rp4501
(dp4502
g1407
(lp4503
g3843
ag3844
ag77
asg29
g30
(g1413
tp4504
Rp4505
(dp4506
g53
I00
sg51
g52
sg3843
g37
sg1419
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4507
sg3844
g37
sg77
g37
sbsg1421
(dp4508
g192
Nssg1423
(lp4509
g192
asg1425
Nsbsg82
Nsg76
S'timeseries_roi'
p4510
sg83
(dp4511
sg85
g4463
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4510
sg94
Nsg95
(lp4512
sg97
Nsg98
Nsb(dp4513
ssg355
(dp4514
sg357
(dp4515
g4450
(dp4516
g4497
(dp4517
g361
(lp4518
(g4459
g3844
tp4519
asssg4467
(dp4520
sg4482
(dp4521
g4497
(dp4522
g361
(lp4523
(g1972
g3843
tp4524
a(g77
g77
tp4525
asssg4497
(dp4526
g4467
(dp4527
g361
(lp4528
(g192
g4476
tp4529
assssg403
g4515
sg404
(dp4530
g4450
(dp4531
sg4467
(dp4532
g4497
g4527
ssg4482
(dp4533
sg4497
(dp4534
g4450
g4517
sg4482
g4522
sssg412
g4515
sbsg76
g4463
sg85
g1067
sg93
g4463
sg94
g413
((lp4535
(lp4536
g416
ag413
((lp4537
(lp4538
g419
ag416
aa(lp4539
g421
ag422
aa(lp4540
g424
ag425
aa(lp4541
g427
ag428
aa(lp4542
g430
ag431
aa(lp4543
g433
ag434
aa(lp4544
g436
ag437
aa(lp4545
g439
ag440
aatp4546
Rp4547
aa(lp4548
g444
ag413
((lp4549
(lp4550
g419
ag444
aa(lp4551
g448
ag449
aa(lp4552
g451
ag452
aa(lp4553
g454
ag455
aa(lp4554
g457
ag458
aa(lp4555
g460
ag461
aa(lp4556
g463
ag464
aa(lp4557
g466
ag467
aa(lp4558
g469
ag470
aa(lp4559
g472
ag473
aa(lp4560
g475
ag476
aa(lp4561
g478
ag479
aa(lp4562
g481
ag482
aa(lp4563
g484
ag485
aa(lp4564
g487
ag488
aa(lp4565
g490
ag491
aa(lp4566
g493
ag494
aa(lp4567
g496
ag497
aa(lp4568
g499
ag500
aatp4569
Rp4570
aa(lp4571
g504
ag413
((lp4572
(lp4573
g419
ag504
aa(lp4574
g508
ag509
aatp4575
Rp4576
aatp4577
Rp4578
sg98
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g18
g7
Ntp4589
Rp4590
(dp4591
g22
(dp4592
sg24
g5
(g229
g7
Ntp4593
Rp4594
(dp4595
g29
g30
(g233
tp4596
Rp4597
(dp4598
g237
g37
sg51
g52
sg238
g37
sg41
g37
sg239
g37
sg240
g37
sg241
g37
sg242
g243
sg244
g37
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg199
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg53
I00
sg258
g37
sg259
g37
sg55
S'-applyisoxfm 2'
p4599
sg260
g37
sg261
g37
sg58
g59
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg266
g37
sg192
g37
sg267
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg65
g5
(g66
g67
(dp4600
g69
g70
stp4601
Rp4602
(dp4603
g74
S'environ_items'
p4604
sg76
g65
sbsg281
g37
sg282
g37
sg77
g70
sg283
g37
sg284
g37
sg285
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'ho_mni_to_2mm_flirt_applyxfm'
p4605
sg83
(dp4606
sg85
S'nuisance_0'
p4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4605
sg94
Nsg95
(lp4608
sg97
Nsg98
Nsb(dp4609
sg5
(g18
g7
Ntp4610
Rp4611
(dp4612
g22
(dp4613
sg24
g5
(g104
g7
Ntp4614
Rp4615
(dp4616
g29
g30
(g108
tp4617
Rp4618
(dp4619
g51
g52
sS'regressors'
p4620
g37
sg3689
g37
sbsg114
(lp4621
g3689
ag4620
asg116
I01
sbsg82
Nsg76
g166
sg83
(dp4622
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g166
sg94
Nsg95
(lp4623
sg97
Nsg98
Nsb(dp4624
sg5
(g18
g7
Ntp4625
Rp4626
(dp4627
g22
(dp4628
sg24
g5
(g229
g7
Ntp4629
Rp4630
(dp4631
g29
g30
(g233
tp4632
Rp4633
(dp4634
g237
g37
sg51
g52
sg238
g37
sg41
g37
sg239
g37
sg240
g37
sg241
g37
sg242
g243
sg244
g37
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg199
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg53
I00
sg258
g37
sg259
g37
sg55
g4599
sg260
g37
sg261
g37
sg58
g59
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg266
g37
sg192
g37
sg267
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg65
g5
(g66
g67
(dp4635
g69
g70
stp4636
Rp4637
(dp4638
g74
S'environ_items'
p4639
sg76
g65
sbsg281
g37
sg282
g37
sg77
g70
sg283
g37
sg284
g37
sg285
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'csf_anat_to_2mm_flirt_applyxfm'
p4640
sg83
(dp4641
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4640
sg94
Nsg95
(lp4642
sg97
Nsg98
Nsb(dp4643
sg5
(g18
g7
Ntp4644
Rp4645
(dp4646
g22
(dp4647
sg24
g5
(g1403
g7
Ntp4648
Rp4649
(dp4650
g1407
(lp4651
g3843
aS'ventricles_mask_file'
p4652
aS'wm_seg_file'
p4653
aS'csf_seg_file'
p4654
aS'gm_seg_file'
p4655
ag132
ag112
ag963
asg29
g30
(g1413
tp4656
Rp4657
(dp4658
g53
I00
sg51
g52
sg132
g37
sg112
g37
sg3843
g37
sg1419
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4659
sg4655
g37
sg4652
g37
sg963
g37
sg4654
g37
sg4653
g37
sbsg1421
(dp4660
S'file_gm'
p4661
NsS'file_wm'
p4662
NsS'file_csf'
p4663
Nssg1423
(lp4664
g4662
ag4663
ag4661
asg1425
Nsbsg82
Nsg76
S'tissue_masks'
p4665
sg83
(dp4666
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4665
sg94
Nsg95
(lp4667
sg97
Nsg98
Nsb(dp4668
sg5
(g18
g7
Ntp4669
Rp4670
(dp4671
g22
(dp4672
sg24
g5
(g229
g7
Ntp4673
Rp4674
(dp4675
g29
g30
(g233
tp4676
Rp4677
(dp4678
g237
g37
sg51
g52
sg238
g37
sg41
g37
sg239
g37
sg240
g37
sg241
g37
sg242
g243
sg244
g37
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg199
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg53
I00
sg258
g37
sg259
g37
sg55
g4599
sg260
g37
sg261
g37
sg58
g59
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg266
g37
sg192
g37
sg267
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg65
g5
(g66
g67
(dp4679
g69
g70
stp4680
Rp4681
(dp4682
g74
S'environ_items'
p4683
sg76
g65
sbsg281
g37
sg282
g37
sg77
g70
sg283
g37
sg284
g37
sg285
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'gm_anat_to_2mm_flirt_applyxfm'
p4684
sg83
(dp4685
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4684
sg94
Nsg95
(lp4686
sg97
Nsg98
Nsb(dp4687
sg5
(g18
g7
Ntp4688
Rp4689
(dp4690
g22
(dp4691
sg24
g5
(g1403
g7
Ntp4692
Rp4693
(dp4694
g1407
(lp4695
g3689
aS'selector'
p4696
aS'wm_sig_file'
p4697
aS'csf_sig_file'
p4698
aS'gm_sig_file'
p4699
aS'motion_file'
p4700
aS'compcor_ncomponents'
p4701
asg29
g30
(g1413
tp4702
Rp4703
(dp4704
g53
I00
sg51
g52
sg4700
g37
sg4701
g37
sg1419
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4705
sg4698
g37
sg4697
g37
sg4699
g37
sg4696
g37
sg3689
g37
sbsg1421
(dp4706
S'regressors_file'
p4707
NsS'residual_file'
p4708
Nssg1423
(lp4709
g4708
ag4707
asg1425
Nsbsg82
Nsg76
S'residuals'
p4710
sg83
(dp4711
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
(lp4712
(g4696
(lp4713
(dp4714
S'global'
p4715
I0
sS'linear'
p4716
I1
sS'wm'
p4717
I0
sS'pc1'
p4718
I0
sS'motion'
p4719
I0
sS'quadratic'
p4720
I1
sS'gm'
p4721
I0
sS'compcor'
p4722
I1
sS'csf'
p4723
I1
satp4724
a(g4701
(lp4725
I5
atp4726
asg92
I00
sg93
g4710
sg94
Nsg95
(lp4727
sg97
Nsg98
Nsb(dp4728
sg5
(g18
g7
Ntp4729
Rp4730
(dp4731
g22
(dp4732
sg24
g5
(g104
g7
Ntp4733
Rp4734
(dp4735
g29
g30
(g108
tp4736
Rp4737
(dp4738
S'motion_components'
p4739
g37
sS'anat_to_mni_initial_xfm'
p4740
g37
sS'lat_ventricles_mask'
p4741
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4742
sg160
g37
sS'anat_to_mni_rigid_xfm'
p4743
g37
sg4701
g37
sS'anat_to_mni_affine_xfm'
p4744
g37
sg4696
g37
sg159
g37
sS'template_brain'
p4745
g37
sg3516
g37
sS'mni_to_anat_linear_xfm'
p4746
g37
sg161
g37
sg51
g52
sg3689
g37
sbsg114
(lp4747
g3689
ag159
ag161
ag160
ag4746
ag4740
ag4743
ag4744
ag3516
ag4741
ag4739
ag4696
ag4701
ag4745
asg116
I01
sbsg82
Nsg76
g308
sg83
(dp4748
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g308
sg94
Nsg95
(lp4749
sg97
Nsg98
Nsb(dp4750
sg5
(g18
g7
Ntp4751
Rp4752
(dp4753
g22
(dp4754
sg24
g5
(g229
g7
Ntp4755
Rp4756
(dp4757
g29
g30
(g233
tp4758
Rp4759
(dp4760
g237
g37
sg51
g52
sg238
g37
sg41
g37
sg239
g37
sg240
g37
sg241
g37
sg242
g243
sg244
g37
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg199
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg53
I00
sg258
g37
sg259
g37
sg55
g4599
sg260
g37
sg261
g37
sg58
g59
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg266
g37
sg192
g37
sg267
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg65
g5
(g66
g67
(dp4761
g69
g70
stp4762
Rp4763
(dp4764
g74
S'environ_items'
p4765
sg76
g65
sbsg281
g37
sg282
g37
sg77
g70
sg283
g37
sg284
g37
sg285
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'wm_anat_to_2mm_flirt_applyxfm'
p4766
sg83
(dp4767
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4766
sg94
Nsg95
(lp4768
sg97
Nsg98
Nsb(dp4769
sg5
(g18
g7
Ntp4770
Rp4771
(dp4772
g22
(dp4773
sg24
g5
(g229
g7
Ntp4774
Rp4775
(dp4776
g29
g30
(g233
tp4777
Rp4778
(dp4779
g237
g37
sg51
g52
sg238
g37
sg41
g37
sg239
g37
sg240
g37
sg241
g37
sg242
g37
sg244
g37
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg199
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg53
I00
sg258
g37
sg259
g37
sg55
g4599
sg260
g37
sg261
g37
sg58
g59
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg266
g37
sg192
g37
sg267
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg65
g5
(g66
g67
(dp4780
g69
g70
stp4781
Rp4782
(dp4783
g74
S'environ_items'
p4784
sg76
g65
sbsg281
g37
sg282
g37
sg77
g70
sg283
g37
sg284
g37
sg285
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_to_2mm_flirt_applyxfm'
p4785
sg83
(dp4786
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4785
sg94
Nsg95
(lp4787
sg97
Nsg98
Nsb(dp4788
ssg355
(dp4789
sg357
(dp4790
g4590
(dp4791
g4645
(dp4792
g361
(lp4793
(g192
g4652
tp4794
asssg4611
(dp4795
sg4626
(dp4796
g4645
(dp4797
g361
(lp4798
(g192
g4654
tp4799
asssg4645
(dp4800
g4689
(dp4801
g361
(lp4802
(g4662
g4697
tp4803
a(g4663
g4698
tp4804
a(g4661
g4699
tp4805
asssg4670
(dp4806
g4645
(dp4807
g361
(lp4808
(g192
g4655
tp4809
asssg4689
(dp4810
g4611
(dp4811
g361
(lp4812
(g4708
g3689
tp4813
a(g4707
g4620
tp4814
asssg4730
(dp4815
g4590
(dp4816
g361
(lp4817
(g4746
g238
tp4818
a(g4741
g199
tp4819
a(g161
g239
tp4820
assg4626
(dp4821
g361
(lp4822
(g161
g199
tp4823
a(g161
g239
tp4824
assg4689
(dp4825
g361
(lp4826
(g3689
g3689
tp4827
a(g4739
g4700
tp4828
a(g4696
g4696
tp4829
a(g4701
g4701
tp4830
assg4670
(dp4831
g361
(lp4832
(g160
g199
tp4833
a(g160
g239
tp4834
assg4771
(dp4835
g361
(lp4836
(g3689
g199
tp4837
a(g161
g239
tp4838
a(g3516
g238
tp4839
assg4752
(dp4840
g361
(lp4841
(g159
g199
tp4842
a(g159
g239
tp4843
asssg4752
(dp4844
g4645
(dp4845
g361
(lp4846
(g192
g4653
tp4847
asssg4771
(dp4848
g4645
(dp4849
g361
(lp4850
(g192
g3843
tp4851
assssg403
g4790
sg404
(dp4852
g4590
(dp4853
g4730
g4816
ssg4611
(dp4854
g4689
g4811
ssg4626
(dp4855
g4730
g4821
ssg4645
(dp4856
g4590
g4792
sg4626
g4797
sg4670
g4807
sg4771
g4849
sg4752
g4845
ssg4670
(dp4857
g4730
g4831
ssg4689
(dp4858
g4645
g4801
sg4730
g4825
ssg4730
(dp4859
sg4752
(dp4860
g4730
g4840
ssg4771
(dp4861
g4730
g4835
sssg412
g4790
sbsg76
g4607
sg85
g1067
sg93
g4607
sg94
g413
((lp4862
(lp4863
g416
ag413
((lp4864
(lp4865
g419
ag416
aa(lp4866
g421
ag422
aa(lp4867
g424
ag425
aa(lp4868
g427
ag428
aa(lp4869
g430
ag431
aa(lp4870
g433
ag434
aa(lp4871
g436
ag437
aa(lp4872
g439
ag440
aatp4873
Rp4874
aa(lp4875
g444
ag413
((lp4876
(lp4877
g419
ag444
aa(lp4878
g448
ag449
aa(lp4879
g451
ag452
aa(lp4880
g454
ag455
aa(lp4881
g457
ag458
aa(lp4882
g460
ag461
aa(lp4883
g463
ag464
aa(lp4884
g466
ag467
aa(lp4885
g469
ag470
aa(lp4886
g472
ag473
aa(lp4887
g475
ag476
aa(lp4888
g478
ag479
aa(lp4889
g481
ag482
aa(lp4890
g484
ag485
aa(lp4891
g487
ag488
aa(lp4892
g490
ag491
aa(lp4893
g493
ag494
aa(lp4894
g496
ag497
aa(lp4895
g499
ag500
aatp4896
Rp4897
aa(lp4898
g504
ag413
((lp4899
(lp4900
g419
ag504
aa(lp4901
g508
ag509
aatp4902
Rp4903
aatp4904
Rp4905
sg98
NsbS'outputspec.subject'
p4906
tp4907
sg1917
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg1918
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Running'
p4921
sS'strat_0'
p4922
(lp4923
g2237
ag1138
ag86
ag4437
ag2476
ag2893
aS'func_to_anat_FLIRT_0'
p4924
ag3483
ag1900
ag4607
ag3823
ag4463
ag3853
asg1955
g3690
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1430311387.576211
s.