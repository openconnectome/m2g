(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(cnipype.pipeline.engine
Node
p18
g7
Ntp19
Rp20
(dp21
S'input_source'
p22
(dp23
sS'_interface'
p24
g5
(cnipype.interfaces.fsl.preprocess
FAST
p25
g7
Ntp26
Rp27
(dp28
S'inputs'
p29
ctraits.traits
__newobj__
p30
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p31
tp32
Rp33
(dp34
S'number_classes'
p35
ctraits.trait_base
_Undefined
p36
(tRp37
sS'out_basename'
p38
S'segment'
p39
sS'hyper'
p40
g37
sS'verbose'
p41
g37
sS'init_seg_smooth'
p42
g37
sS'init_transform'
p43
g37
sS'no_pve'
p44
g37
sS'output_biascorrected'
p45
g37
sS'mixel_smooth'
p46
g37
sS'segments'
p47
I01
sS'iters_afterbias'
p48
g37
sS'bias_lowpass'
p49
g37
sS'other_priors'
p50
g37
sS'__traits_version__'
p51
S'4.5.0'
p52
sS'ignore_exception'
p53
I00
sS'img_type'
p54
I1
sS'args'
p55
g37
sS'probability_maps'
p56
I01
sS'manual_seg'
p57
g37
sS'terminal_output'
p58
S'stream'
p59
sS'output_biasfield'
p60
g37
sS'no_bias'
p61
g37
sS'use_priors'
p62
g37
sS'in_files'
p63
g37
sS'segment_iters'
p64
g37
sS'environ'
p65
g5
(ctraits.trait_handlers
TraitDictObject
p66
c__builtin__
dict
p67
(dp68
S'FSLOUTPUTTYPE'
p69
S'NIFTI_GZ'
p70
stp71
Rp72
(dp73
S'name_items'
p74
S'environ_items'
p75
sS'name'
p76
g65
sbsS'output_type'
p77
g70
sS'bias_iters'
p78
g37
sbsS'_output_type'
p79
g70
sS'_environ'
p80
NsS'_terminal_output'
p81
g59
sbsS'_result'
p82
Nsg76
g39
sS'plugin_args'
p83
(dp84
sS'_hierarchy'
p85
S'seg_preproc_0'
p86
sS'itersource'
p87
NsS'run_without_submitting'
p88
I00
sS'synchronize'
p89
I00
sS'parameterization'
p90
NsS'iterables'
p91
NsS'_got_inputs'
p92
I00
sS'_id'
p93
g39
sS'config'
p94
NsS'needed_outputs'
p95
(lp96
sS'overwrite'
p97
NsS'base_dir'
p98
Nsb(dp99
sg5
(g18
g7
Ntp100
Rp101
(dp102
g22
(dp103
sg24
g5
(cnipype.interfaces.utility
IdentityInterface
p104
g7
Ntp105
Rp106
(dp107
g29
g30
(cnipype.interfaces.base
DynamicTraitedSpec
p108
tp109
Rp110
(dp111
S'standard2highres_rig'
p112
g37
sg51
g52
sS'standard2highres_init'
p113
g37
sS'brain'
p114
g37
sS'PRIOR_GRAY'
p115
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p116
sS'standard2highres_mat'
p117
g37
sS'PRIOR_CSF'
p118
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p119
sS'PRIOR_WHITE'
p120
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p121
sbsS'_fields'
p122
(lp123
g114
ag113
ag117
ag112
ag118
ag115
ag120
asS'_mandatory_inputs'
p124
I01
sbsg82
Nsg76
S'inputspec'
p125
sg83
(dp126
sg85
g86
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp127
sg97
Nsg98
Nsb(dp128
sg5
(g6
g7
Ntp129
Rp130
(dp131
g11
g5
(g12
g7
Ntp132
Rp133
(dp134
g16
(dp135
g5
(g18
g7
Ntp136
Rp137
(dp138
g22
(dp139
sg24
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p140
g7
Ntp141
Rp142
(dp143
g29
g30
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p144
tp145
Rp146
(dp147
g53
I00
sg51
g52
sS'op_string'
p148
g37
sS'out_data_type'
p149
g37
sS'out_file'
p150
g37
sg55
g37
sS'in_file2'
p151
g37
sg58
g59
sg65
g5
(g66
g67
(dp152
g69
g70
stp153
Rp154
(dp155
g74
S'environ_items'
p156
sg76
g65
sbsS'in_file'
p157
g37
sg77
g70
sS'suffix'
p158
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'binarize_threshold_GM'
p159
sg83
(dp160
sg85
S'GM'
p161
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g159
sg94
Nsg95
(lp162
sg97
Nsg98
Nsb(dp163
sg5
(g18
g7
Ntp164
Rp165
(dp166
g22
(dp167
sg24
g5
(g104
g7
Ntp168
Rp169
(dp170
g29
g30
(g108
tp171
Rp172
(dp173
g51
g52
sS'segment_combo'
p174
g37
sS'segment_mask'
p175
g37
sS'tissueprior_mni2t1'
p176
g37
sS'segment_bin'
p177
g37
sbsg122
(lp178
g176
ag174
ag177
ag175
asg124
I01
sbsg82
Nsg76
S'outputspec'
p179
sg83
(dp180
sg85
g161
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp181
sg97
Nsg98
Nsb(dp182
sg5
(g18
g7
Ntp183
Rp184
(dp185
g22
(dp186
sg24
g5
(g104
g7
Ntp187
Rp188
(dp189
g29
g30
(g108
tp190
Rp191
(dp192
g112
g37
sg51
g52
sg113
g37
sS'tissue_prior'
p193
g37
sg117
g37
sg114
g37
sS'probability_map'
p194
g37
sS'threshold'
p195
g37
sbsg122
(lp196
g193
ag195
ag114
ag194
ag113
ag117
ag112
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp197
sg85
g161
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp198
sg97
Nsg98
Nsb(dp199
sg5
(g18
g7
Ntp200
Rp201
(dp202
g22
(dp203
sg24
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p204
g7
Ntp205
Rp206
(dp207
g29
g30
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p208
tp209
Rp210
(dp211
g53
I00
sS'nan2zeros'
p212
g37
sg148
S'-mas %s '
p213
sg150
g37
sg55
g37
sS'internal_datatype'
p214
g37
sg51
g52
sg58
g59
sg65
g5
(g66
g67
(dp215
g69
g70
stp216
Rp217
(dp218
g74
S'environ_items'
p219
sg76
g65
sbsg157
g37
sg77
g70
sS'output_datatype'
p220
g37
sS'operand_files'
p221
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'overlap_GM_map_with_prior'
p222
sg83
(dp223
sg85
g161
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g222
sg94
Nsg95
(lp224
sg97
Nsg98
Nsb(dp225
sg5
(g18
g7
Ntp226
Rp227
(dp228
g22
(dp229
sg24
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p230
g7
Ntp231
Rp232
(dp233
g29
g30
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p234
tp235
Rp236
(dp237
S'rigid2D'
p238
g37
sg51
g52
sS'in_matrix_file'
p239
g37
sg41
g37
sS'reference'
p240
g37
sS'padding_size'
p241
g37
sS'sinc_window'
p242
g37
sS'interp'
p243
S'nearestneighbour'
p244
sS'wmnorms'
p245
g37
sS'coarse_search'
p246
g37
sS'no_resample'
p247
g37
sS'sinc_width'
p248
g37
sS'in_weight'
p249
g37
sS'fieldmap'
p250
g37
sS'echospacing'
p251
g37
sS'ref_weight'
p252
g37
sS'apply_isoxfm'
p253
g37
sS'fieldmapmask'
p254
g37
sg157
g37
sS'bbrtype'
p255
g37
sS'no_clamp'
p256
g37
sS'force_scaling'
p257
g37
sS'pedir'
p258
g37
sg53
I00
sS'display_init'
p259
g37
sS'schedule'
p260
g37
sg55
g37
sS'uses_qform'
p261
g37
sS'wmcoords'
p262
g37
sg58
g59
sS'fine_search'
p263
g37
sS'angle_rep'
p264
g37
sS'no_search'
p265
g37
sS'apply_xfm'
p266
I01
sS'wm_seg'
p267
g37
sg150
g37
sS'bbrslope'
p268
g37
sS'datatype'
p269
g37
sS'save_log'
p270
g37
sS'dof'
p271
g37
sS'out_matrix_file'
p272
g37
sS'no_resample_blur'
p273
g37
sS'min_sampling'
p274
g37
sS'cost_func'
p275
g37
sS'cost'
p276
g37
sg65
g5
(g66
g67
(dp277
g69
g70
stp278
Rp279
(dp280
g74
S'environ_items'
p281
sg76
g65
sbsS'searchr_x'
p282
g37
sS'out_log'
p283
g37
sg77
g70
sS'searchr_z'
p284
g37
sS'bins'
p285
g37
sS'searchr_y'
p286
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'GM_prior_mni_to_t1'
p287
sg83
(dp288
sg85
g161
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g287
sg94
Nsg95
(lp289
sg97
Nsg98
Nsb(dp290
sg5
(g18
g7
Ntp291
Rp292
(dp293
g22
(dp294
sg24
g5
(g204
g7
Ntp295
Rp296
(dp297
g29
g30
(g208
tp298
Rp299
(dp300
g53
I00
sg212
g37
sg148
g213
sg150
g37
sg55
g37
sg214
g37
sg51
g52
sg58
g59
sg65
g5
(g66
g67
(dp301
g69
g70
stp302
Rp303
(dp304
g74
S'environ_items'
p305
sg76
g65
sbsg157
g37
sg77
g70
sg220
g37
sg221
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'GM_mask'
p306
sg83
(dp307
sg85
g161
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g306
sg94
Nsg95
(lp308
sg97
Nsg98
Nsb(dp309
ssS'graph'
p310
(dp311
sS'succ'
p312
(dp313
g137
(dp314
g292
(dp315
S'connect'
p316
(lp317
(g150
g157
tp318
assg165
(dp319
g316
(lp320
(g150
g177
tp321
asssg165
(dp322
sg184
(dp323
g227
(dp324
g316
(lp325
(g193
g157
tp326
a(g114
g240
tp327
a(g117
g239
tp328
assg137
(dp329
g316
(lp330
((g195
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p331
(ttp332
g148
tp333
assg201
(dp334
g316
(lp335
(g194
g157
tp336
asssg201
(dp337
g137
(dp338
g316
(lp339
(g150
g157
tp340
assg165
(dp341
g316
(lp342
(g150
g174
tp343
asssg227
(dp344
g201
(dp345
g316
(lp346
(g150
g221
tp347
assg292
(dp348
g316
(lp349
(g150
g221
tp350
assg165
(dp351
g316
(lp352
(g150
g176
tp353
asssg292
(dp354
g165
(dp355
g316
(lp356
(g150
g175
tp357
assssS'edge'
p358
g313
sS'pred'
p359
(dp360
g137
(dp361
g201
g338
sg184
g329
ssg165
(dp362
g292
g355
sg227
g351
sg137
g319
sg201
g341
ssg184
(dp363
sg201
(dp364
g227
g345
sg184
g334
ssg227
(dp365
g184
g324
ssg292
(dp366
g137
g315
sg227
g348
sssS'adj'
p367
g313
sbsg76
g161
sg85
g86
sg93
g161
sg94
ccollections
OrderedDict
p368
((lp369
(lp370
S'logging'
p371
ag368
((lp372
(lp373
S'__name__'
p374
ag371
aa(lp375
S'workflow_level'
p376
aS'INFO'
p377
aa(lp378
S'filemanip_level'
p379
aS'INFO'
p380
aa(lp381
S'interface_level'
p382
aS'INFO'
p383
aa(lp384
S'log_to_file'
p385
aS'True'
p386
aa(lp387
S'log_directory'
p388
aS'/mnt/ssd1/data/outputs/CPAC/CPAC_test1/outputs/logs/13_1563555606'
p389
aa(lp390
S'log_size'
p391
aS'16384000'
p392
aa(lp393
S'log_rotate'
p394
aS'4'
p395
aatp396
Rp397
aa(lp398
S'execution'
p399
ag368
((lp400
(lp401
g374
ag399
aa(lp402
S'create_report'
p403
aS'true'
p404
aa(lp405
S'crashdump_dir'
p406
aS'/home/eric/Documents/m2g/packages/functional/CPAC_pipes'
p407
aa(lp408
S'display_variable'
p409
aS':1'
p410
aa(lp411
S'hash_method'
p412
aS'timestamp'
p413
aa(lp414
S'job_finished_timeout'
p415
aS'5'
p416
aa(lp417
S'keep_inputs'
p418
aS'false'
p419
aa(lp420
S'local_hash_check'
p421
aS'true'
p422
aa(lp423
S'matplotlib_backend'
p424
aS'Agg'
p425
aa(lp426
S'plugin'
p427
aS'Linear'
p428
aa(lp429
S'remove_node_directories'
p430
aS'false'
p431
aa(lp432
S'remove_unnecessary_outputs'
p433
aS'true'
p434
aa(lp435
S'single_thread_matlab'
p436
aS'true'
p437
aa(lp438
S'stop_on_first_crash'
p439
aS'false'
p440
aa(lp441
S'stop_on_first_rerun'
p442
aS'false'
p443
aa(lp444
S'use_relative_paths'
p445
aS'false'
p446
aa(lp447
S'stop_on_unknown_version'
p448
aS'false'
p449
aa(lp450
S'write_provenance'
p451
aS'false'
p452
aa(lp453
S'parameterize_dirs'
p454
aS'true'
p455
aatp456
Rp457
aa(lp458
S'check'
p459
ag368
((lp460
(lp461
g374
ag459
aa(lp462
S'interval'
p463
aS'1209600'
p464
aatp465
Rp466
aatp467
Rp468
sg98
Nsb(dp469
sg5
(g6
g7
Ntp470
Rp471
(dp472
g11
g5
(g12
g7
Ntp473
Rp474
(dp475
g16
(dp476
g5
(g18
g7
Ntp477
Rp478
(dp479
g22
(dp480
sg24
g5
(g104
g7
Ntp481
Rp482
(dp483
g29
g30
(g108
tp484
Rp485
(dp486
g112
g37
sg51
g52
sg113
g37
sg193
g37
sg117
g37
sg114
g37
sg194
g37
sg195
g37
sbsg122
(lp487
g193
ag195
ag114
ag194
ag113
ag117
ag112
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp488
sg85
S'CSF'
p489
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp490
sg97
Nsg98
Nsb(dp491
sg5
(g18
g7
Ntp492
Rp493
(dp494
g22
(dp495
sg24
g5
(g204
g7
Ntp496
Rp497
(dp498
g29
g30
(g208
tp499
Rp500
(dp501
g53
I00
sg212
g37
sg148
g213
sg150
g37
sg55
g37
sg214
g37
sg51
g52
sg58
g59
sg65
g5
(g66
g67
(dp502
g69
g70
stp503
Rp504
(dp505
g74
S'environ_items'
p506
sg76
g65
sbsg157
g37
sg77
g70
sg220
g37
sg221
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'overlap_CSF_map_with_prior'
p507
sg83
(dp508
sg85
g489
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g507
sg94
Nsg95
(lp509
sg97
Nsg98
Nsb(dp510
sg5
(g18
g7
Ntp511
Rp512
(dp513
g22
(dp514
sg24
g5
(g204
g7
Ntp515
Rp516
(dp517
g29
g30
(g208
tp518
Rp519
(dp520
g53
I00
sg212
g37
sg148
g213
sg150
g37
sg55
g37
sg214
g37
sg51
g52
sg58
g59
sg65
g5
(g66
g67
(dp521
g69
g70
stp522
Rp523
(dp524
g74
S'environ_items'
p525
sg76
g65
sbsg157
g37
sg77
g70
sg220
g37
sg221
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'CSF_mask'
p526
sg83
(dp527
sg85
g489
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g526
sg94
Nsg95
(lp528
sg97
Nsg98
Nsb(dp529
sg5
(g18
g7
Ntp530
Rp531
(dp532
g22
(dp533
sg24
g5
(g230
g7
Ntp534
Rp535
(dp536
g29
g30
(g234
tp537
Rp538
(dp539
g238
g37
sg51
g52
sg239
g37
sg41
g37
sg240
g37
sg241
g37
sg242
g37
sg243
g244
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg254
g37
sg157
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg53
I00
sg259
g37
sg260
g37
sg55
g37
sg261
g37
sg262
g37
sg58
g59
sg263
g37
sg264
g37
sg265
g37
sg266
I01
sg267
g37
sg150
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg276
g37
sg65
g5
(g66
g67
(dp540
g69
g70
stp541
Rp542
(dp543
g74
S'environ_items'
p544
sg76
g65
sbsg282
g37
sg283
g37
sg77
g70
sg284
g37
sg285
g37
sg286
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'CSF_prior_mni_to_t1'
p545
sg83
(dp546
sg85
g489
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g545
sg94
Nsg95
(lp547
sg97
Nsg98
Nsb(dp548
sg5
(g18
g7
Ntp549
Rp550
(dp551
g22
(dp552
sg24
g5
(g140
g7
Ntp553
Rp554
(dp555
g29
g30
(g144
tp556
Rp557
(dp558
g53
I00
sg51
g52
sg148
g37
sg149
g37
sg150
g37
sg55
g37
sg151
g37
sg58
g59
sg65
g5
(g66
g67
(dp559
g69
g70
stp560
Rp561
(dp562
g74
S'environ_items'
p563
sg76
g65
sbsg157
g37
sg77
g70
sg158
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'binarize_threshold_CSF'
p564
sg83
(dp565
sg85
g489
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g564
sg94
Nsg95
(lp566
sg97
Nsg98
Nsb(dp567
sg5
(g18
g7
Ntp568
Rp569
(dp570
g22
(dp571
sg24
g5
(g104
g7
Ntp572
Rp573
(dp574
g29
g30
(g108
tp575
Rp576
(dp577
g51
g52
sg174
g37
sg175
g37
sg176
g37
sg177
g37
sbsg122
(lp578
g176
ag174
ag177
ag175
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp579
sg85
g489
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp580
sg97
Nsg98
Nsb(dp581
ssg310
(dp582
sg312
(dp583
g478
(dp584
g531
(dp585
g316
(lp586
(g193
g157
tp587
a(g114
g240
tp588
a(g117
g239
tp589
assg493
(dp590
g316
(lp591
(g194
g157
tp592
assg550
(dp593
g316
(lp594
((g195
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p595
(ttp596
g148
tp597
asssg493
(dp598
g550
(dp599
g316
(lp600
(g150
g157
tp601
assg569
(dp602
g316
(lp603
(g150
g174
tp604
asssg512
(dp605
g569
(dp606
g316
(lp607
(g150
g175
tp608
asssg531
(dp609
g569
(dp610
g316
(lp611
(g150
g176
tp612
assg493
(dp613
g316
(lp614
(g150
g221
tp615
assg512
(dp616
g316
(lp617
(g150
g221
tp618
asssg550
(dp619
g569
(dp620
g316
(lp621
(g150
g177
tp622
assg512
(dp623
g316
(lp624
(g150
g157
tp625
asssg569
(dp626
ssg358
g583
sg359
(dp627
g478
(dp628
sg493
(dp629
g478
g590
sg531
g613
ssg512
(dp630
g550
g623
sg531
g616
ssg531
(dp631
g478
g585
ssg550
(dp632
g478
g593
sg493
g599
ssg569
(dp633
g531
g610
sg512
g606
sg493
g602
sg550
g620
sssg367
g583
sbsg76
g489
sg85
g86
sg93
g489
sg94
g368
((lp634
(lp635
g371
ag368
((lp636
(lp637
g374
ag371
aa(lp638
g376
ag377
aa(lp639
g379
ag380
aa(lp640
g382
ag383
aa(lp641
g385
ag386
aa(lp642
g388
ag389
aa(lp643
g391
ag392
aa(lp644
g394
ag395
aatp645
Rp646
aa(lp647
g399
ag368
((lp648
(lp649
g374
ag399
aa(lp650
g403
ag404
aa(lp651
g406
ag407
aa(lp652
g409
ag410
aa(lp653
g412
ag413
aa(lp654
g415
ag416
aa(lp655
g418
ag419
aa(lp656
g421
ag422
aa(lp657
g424
ag425
aa(lp658
g427
ag428
aa(lp659
g430
ag431
aa(lp660
g433
ag434
aa(lp661
g436
ag437
aa(lp662
g439
ag440
aa(lp663
g442
ag443
aa(lp664
g445
ag446
aa(lp665
g448
ag449
aa(lp666
g451
ag452
aa(lp667
g454
ag455
aatp668
Rp669
aa(lp670
g459
ag368
((lp671
(lp672
g374
ag459
aa(lp673
g463
ag464
aatp674
Rp675
aatp676
Rp677
sg98
Nsb(dp678
sg5
(g18
g7
Ntp679
Rp680
(dp681
g22
(dp682
sg24
g5
(g104
g7
Ntp683
Rp684
(dp685
g29
g30
(g108
tp686
Rp687
(dp688
g51
g52
sS'wm_threshold'
p689
(lp690
F0.96
asbsg122
(lp691
g689
asg124
I01
sbsg82
Nsg76
g689
sg83
(dp692
sg85
g86
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
(g689
(lp693
F0.96
atp694
sg92
I00
sg93
g689
sg94
Nsg95
(lp695
sg97
Nsg98
Nsb(dp696
sg5
(g18
g7
Ntp697
Rp698
(dp699
g22
(dp700
sg24
g5
(g104
g7
Ntp701
Rp702
(dp703
g29
g30
(g108
tp704
Rp705
(dp706
g51
g52
sS'gm_threshold'
p707
(lp708
F0.7
asbsg122
(lp709
g707
asg124
I01
sbsg82
Nsg76
g707
sg83
(dp710
sg85
g86
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
(g707
(lp711
F0.7
atp712
sg92
I00
sg93
g707
sg94
Nsg95
(lp713
sg97
Nsg98
Nsb(dp714
sg5
(g6
g7
Ntp715
Rp716
(dp717
g11
g5
(g12
g7
Ntp718
Rp719
(dp720
g16
(dp721
g5
(g18
g7
Ntp722
Rp723
(dp724
g22
(dp725
sg24
g5
(g204
g7
Ntp726
Rp727
(dp728
g29
g30
(g208
tp729
Rp730
(dp731
g53
I00
sg212
g37
sg148
g213
sg150
g37
sg55
g37
sg214
g37
sg51
g52
sg58
g59
sg65
g5
(g66
g67
(dp732
g69
g70
stp733
Rp734
(dp735
g74
S'environ_items'
p736
sg76
g65
sbsg157
g37
sg77
g70
sg220
g37
sg221
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'WM_mask'
p737
sg83
(dp738
sg85
S'WM'
p739
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g737
sg94
Nsg95
(lp740
sg97
Nsg98
Nsb(dp741
sg5
(g18
g7
Ntp742
Rp743
(dp744
g22
(dp745
sg24
g5
(g230
g7
Ntp746
Rp747
(dp748
g29
g30
(g234
tp749
Rp750
(dp751
g238
g37
sg51
g52
sg239
g37
sg41
g37
sg240
g37
sg241
g37
sg242
g37
sg243
g244
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg254
g37
sg157
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg53
I00
sg259
g37
sg260
g37
sg55
g37
sg261
g37
sg262
g37
sg58
g59
sg263
g37
sg264
g37
sg265
g37
sg266
I01
sg267
g37
sg150
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg276
g37
sg65
g5
(g66
g67
(dp752
g69
g70
stp753
Rp754
(dp755
g74
S'environ_items'
p756
sg76
g65
sbsg282
g37
sg283
g37
sg77
g70
sg284
g37
sg285
g37
sg286
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'WM_prior_mni_to_t1'
p757
sg83
(dp758
sg85
g739
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g757
sg94
Nsg95
(lp759
sg97
Nsg98
Nsb(dp760
sg5
(g18
g7
Ntp761
Rp762
(dp763
g22
(dp764
sg24
g5
(g104
g7
Ntp765
Rp766
(dp767
g29
g30
(g108
tp768
Rp769
(dp770
g51
g52
sg174
g37
sg175
g37
sg176
g37
sg177
g37
sbsg122
(lp771
g176
ag174
ag177
ag175
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp772
sg85
g739
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp773
sg97
Nsg98
Nsb(dp774
sg5
(g18
g7
Ntp775
Rp776
(dp777
g22
(dp778
sg24
g5
(g140
g7
Ntp779
Rp780
(dp781
g29
g30
(g144
tp782
Rp783
(dp784
g53
I00
sg51
g52
sg148
g37
sg149
g37
sg150
g37
sg55
g37
sg151
g37
sg58
g59
sg65
g5
(g66
g67
(dp785
g69
g70
stp786
Rp787
(dp788
g74
S'environ_items'
p789
sg76
g65
sbsg157
g37
sg77
g70
sg158
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'binarize_threshold_WM'
p790
sg83
(dp791
sg85
g739
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g790
sg94
Nsg95
(lp792
sg97
Nsg98
Nsb(dp793
sg5
(g18
g7
Ntp794
Rp795
(dp796
g22
(dp797
sg24
g5
(g204
g7
Ntp798
Rp799
(dp800
g29
g30
(g208
tp801
Rp802
(dp803
g53
I00
sg212
g37
sg148
g213
sg150
g37
sg55
g37
sg214
g37
sg51
g52
sg58
g59
sg65
g5
(g66
g67
(dp804
g69
g70
stp805
Rp806
(dp807
g74
S'environ_items'
p808
sg76
g65
sbsg157
g37
sg77
g70
sg220
g37
sg221
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'overlap_WM_map_with_prior'
p809
sg83
(dp810
sg85
g739
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g809
sg94
Nsg95
(lp811
sg97
Nsg98
Nsb(dp812
sg5
(g18
g7
Ntp813
Rp814
(dp815
g22
(dp816
sg24
g5
(g104
g7
Ntp817
Rp818
(dp819
g29
g30
(g108
tp820
Rp821
(dp822
g112
g37
sg51
g52
sg113
g37
sg193
g37
sg117
g37
sg114
g37
sg194
g37
sg195
g37
sbsg122
(lp823
g193
ag195
ag114
ag194
ag113
ag117
ag112
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp824
sg85
g739
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp825
sg97
Nsg98
Nsb(dp826
ssg310
(dp827
sg312
(dp828
g723
(dp829
g762
(dp830
g316
(lp831
(g150
g175
tp832
asssg743
(dp833
g795
(dp834
g316
(lp835
(g150
g221
tp836
assg723
(dp837
g316
(lp838
(g150
g221
tp839
assg762
(dp840
g316
(lp841
(g150
g176
tp842
asssg762
(dp843
sg776
(dp844
g762
(dp845
g316
(lp846
(g150
g177
tp847
assg723
(dp848
g316
(lp849
(g150
g157
tp850
asssg795
(dp851
g762
(dp852
g316
(lp853
(g150
g174
tp854
assg776
(dp855
g316
(lp856
(g150
g157
tp857
asssg814
(dp858
g795
(dp859
g316
(lp860
(g194
g157
tp861
assg743
(dp862
g316
(lp863
(g193
g157
tp864
a(g114
g240
tp865
a(g117
g239
tp866
assg776
(dp867
g316
(lp868
((g195
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p869
(ttp870
g148
tp871
assssg358
g828
sg359
(dp872
g723
(dp873
g776
g848
sg743
g837
ssg743
(dp874
g814
g862
ssg762
(dp875
g795
g852
sg723
g830
sg743
g840
sg776
g845
ssg776
(dp876
g795
g855
sg814
g867
ssg795
(dp877
g814
g859
sg743
g834
ssg814
(dp878
ssg367
g828
sbsg76
g739
sg85
g86
sg93
g739
sg94
g368
((lp879
(lp880
g371
ag368
((lp881
(lp882
g374
ag371
aa(lp883
g376
ag377
aa(lp884
g379
ag380
aa(lp885
g382
ag383
aa(lp886
g385
ag386
aa(lp887
g388
ag389
aa(lp888
g391
ag392
aa(lp889
g394
ag395
aatp890
Rp891
aa(lp892
g399
ag368
((lp893
(lp894
g374
ag399
aa(lp895
g403
ag404
aa(lp896
g406
ag407
aa(lp897
g409
ag410
aa(lp898
g412
ag413
aa(lp899
g415
ag416
aa(lp900
g418
ag419
aa(lp901
g421
ag422
aa(lp902
g424
ag425
aa(lp903
g427
ag428
aa(lp904
g430
ag431
aa(lp905
g433
ag434
aa(lp906
g436
ag437
aa(lp907
g439
ag440
aa(lp908
g442
ag443
aa(lp909
g445
ag446
aa(lp910
g448
ag449
aa(lp911
g451
ag452
aa(lp912
g454
ag455
aatp913
Rp914
aa(lp915
g459
ag368
((lp916
(lp917
g374
ag459
aa(lp918
g463
ag464
aatp919
Rp920
aatp921
Rp922
sg98
Nsb(dp923
sg5
(g18
g7
Ntp924
Rp925
(dp926
g22
(dp927
sg24
g5
(g104
g7
Ntp928
Rp929
(dp930
g29
g30
(g108
tp931
Rp932
(dp933
g51
g52
sS'csf_threshold'
p934
(lp935
F0.96
asbsg122
(lp936
g934
asg124
I01
sbsg82
Nsg76
g934
sg83
(dp937
sg85
g86
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
(g934
(lp938
F0.96
atp939
sg92
I00
sg93
g934
sg94
Nsg95
(lp940
sg97
Nsg98
Nsb(dp941
sg5
(g18
g7
Ntp942
Rp943
(dp944
g22
(dp945
sg24
g5
(g104
g7
Ntp946
Rp947
(dp948
g29
g30
(g108
tp949
Rp950
(dp951
S'partial_volume_files'
p952
g37
sg51
g52
sS'gm_combo'
p953
g37
sS'mixeltype'
p954
g37
sS'csf_mni2t1'
p955
g37
sS'wm_bin'
p956
g37
sS'csf_bin'
p957
g37
sg56
g37
sS'wm_mni2t1'
p958
g37
sS'csf_combo'
p959
g37
sS'wm_combo'
p960
g37
sS'wm_mask'
p961
g37
sS'gm_mask'
p962
g37
sS'csf_mask'
p963
g37
sS'gm_bin'
p964
g37
sS'partial_volume_map'
p965
g37
sS'gm_mni2t1'
p966
g37
sbsg122
(lp967
g955
ag959
ag957
ag963
ag966
ag953
ag964
ag962
ag958
ag960
ag956
ag56
ag954
ag965
ag952
ag961
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp968
sg85
g86
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp969
sg97
Nsg98
Nsb(dp970
ssg310
(dp971
sg312
(dp972
g20
(dp973
g130
(dp974
g316
(lp975
((g56
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p976
(ttp977
S'inputspec.probability_map'
p978
tp979
assg471
(dp980
g316
(lp981
((g56
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p982
(ttp983
g978
tp984
assg943
(dp985
g316
(lp986
(g56
g56
tp987
a(g954
g954
tp988
a(g952
g952
tp989
a(g965
g965
tp990
assg716
(dp991
g316
(lp992
((g56
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p993
(ttp994
g978
tp995
asssg101
(dp996
g716
(dp997
g316
(lp998
(g114
S'inputspec.brain'
p999
tp1000
a(g120
S'inputspec.tissue_prior'
p1001
tp1002
a(g117
S'inputspec.standard2highres_mat'
p1003
tp1004
assg20
(dp1005
g316
(lp1006
(g114
g63
tp1007
assg130
(dp1008
g316
(lp1009
(g114
g999
tp1010
a(g115
g1001
tp1011
a(g117
g1003
tp1012
assg471
(dp1013
g316
(lp1014
(g114
g999
tp1015
a(g118
g1001
tp1016
a(g117
g1003
tp1017
asssg130
(dp1018
g943
(dp1019
g316
(lp1020
(S'outputspec.tissueprior_mni2t1'
p1021
g966
tp1022
a(S'outputspec.segment_combo'
p1023
g953
tp1024
a(S'outputspec.segment_bin'
p1025
g964
tp1026
a(S'outputspec.segment_mask'
p1027
g962
tp1028
asssg471
(dp1029
g943
(dp1030
g316
(lp1031
(g1021
g955
tp1032
a(g1023
g959
tp1033
a(g1025
g957
tp1034
a(g1027
g963
tp1035
asssg680
(dp1036
g716
(dp1037
g316
(lp1038
(g689
S'inputspec.threshold'
p1039
tp1040
asssg698
(dp1041
g130
(dp1042
g316
(lp1043
(g707
g1039
tp1044
asssg716
(dp1045
g943
(dp1046
g316
(lp1047
(g1021
g958
tp1048
a(g1023
g960
tp1049
a(g1025
g956
tp1050
a(g1027
g961
tp1051
asssg925
(dp1052
g471
(dp1053
g316
(lp1054
(g934
g1039
tp1055
asssg943
(dp1056
ssg358
g972
sg359
(dp1057
g20
(dp1058
g101
g1005
ssg101
(dp1059
sg130
(dp1060
g20
g974
sg101
g1008
sg698
g1042
ssg471
(dp1061
g20
g980
sg101
g1013
sg925
g1053
ssg680
(dp1062
sg698
(dp1063
sg716
(dp1064
g20
g991
sg101
g997
sg680
g1037
ssg925
(dp1065
sg943
(dp1066
g716
g1046
sg20
g985
sg130
g1019
sg471
g1030
sssg367
g972
sbsg76
g86
sg85
S'resting_preproc_13_1563555606'
p1067
sg93
g86
sg94
g368
((lp1068
(lp1069
g371
ag368
((lp1070
(lp1071
g374
ag371
aa(lp1072
g376
ag377
aa(lp1073
g379
ag380
aa(lp1074
g382
ag383
aa(lp1075
g385
ag386
aa(lp1076
g388
ag389
aa(lp1077
g391
ag392
aa(lp1078
g394
ag395
aatp1079
Rp1080
aa(lp1081
g399
ag368
((lp1082
(lp1083
g374
ag399
aa(lp1084
g403
ag404
aa(lp1085
g406
ag407
aa(lp1086
g409
ag410
aa(lp1087
g412
ag413
aa(lp1088
g415
ag416
aa(lp1089
g418
ag419
aa(lp1090
g421
ag422
aa(lp1091
g424
ag425
aa(lp1092
g427
ag428
aa(lp1093
g430
ag431
aa(lp1094
g433
ag434
aa(lp1095
g436
ag437
aa(lp1096
g439
ag440
aa(lp1097
g442
ag443
aa(lp1098
g445
ag446
aa(lp1099
g448
ag449
aa(lp1100
g451
ag452
aa(lp1101
g454
ag455
aatp1102
Rp1103
aa(lp1104
g459
ag368
((lp1105
(lp1106
g374
ag459
aa(lp1107
g463
ag464
aatp1108
Rp1109
aatp1110
Rp1111
sg98
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g18
g7
Ntp1122
Rp1123
(dp1124
g22
(dp1125
sg24
g5
(g104
g7
Ntp1126
Rp1127
(dp1128
g29
g30
(g108
tp1129
Rp1130
(dp1131
S'fnirt_config'
p1132
S'T1_2_MNI152_2mm'
p1133
sg51
g52
sS'input_brain'
p1134
g37
sS'reference_skull'
p1135
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1136
sS'reference_brain'
p1137
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1138
sS'input_skull'
p1139
g37
sbsg122
(lp1140
g1134
ag1139
ag1137
ag1135
ag1132
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp1141
sg85
S'anat_mni_fnirt_register_0'
p1142
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp1143
sg97
Nsg98
Nsb(dp1144
sg5
(g18
g7
Ntp1145
Rp1146
(dp1147
g22
(dp1148
sg24
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1149
g7
Ntp1150
Rp1151
(dp1152
g29
g30
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1153
tp1154
Rp1155
(dp1156
g53
I00
sS'supersample'
p1157
g37
sg157
g37
sS'superlevel'
p1158
g37
sg150
g37
sg269
g37
sg55
g37
sg243
g37
sS'field_file'
p1159
g37
sS'ref_file'
p1160
g37
sg58
g59
sg65
g5
(g66
g67
(dp1161
g69
g70
stp1162
Rp1163
(dp1164
g74
S'environ_items'
p1165
sg76
g65
sbsS'premat'
p1166
g37
sS'mask_file'
p1167
g37
sg77
g70
sS'relwarp'
p1168
g37
sS'abswarp'
p1169
g37
sg51
g52
sS'postmat'
p1170
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'brain_warp'
p1171
sg83
(dp1172
sg85
g1142
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1171
sg94
Nsg95
(lp1173
sg97
Nsg98
Nsb(dp1174
sg5
(g18
g7
Ntp1175
Rp1176
(dp1177
g22
(dp1178
sg24
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1179
g7
Ntp1180
Rp1181
(dp1182
g29
g30
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1183
tp1184
Rp1185
(dp1186
g53
I00
sg51
g52
sg150
g37
sg55
g37
sg151
g37
sS'fix_scale_skew'
p1187
g37
sS'invert_xfm'
p1188
I01
sg58
g59
sS'concat_xfm'
p1189
g37
sg157
g37
sg77
g70
sg65
g5
(g66
g67
(dp1190
g69
g70
stp1191
Rp1192
(dp1193
g74
S'environ_items'
p1194
sg76
g65
sbsbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'inv_linear_reg0_xfm'
p1195
sg83
(dp1196
sg85
g1142
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1195
sg94
Nsg95
(lp1197
sg97
Nsg98
Nsb(dp1198
sg5
(g18
g7
Ntp1199
Rp1200
(dp1201
g22
(dp1202
sg24
g5
(g230
g7
Ntp1203
Rp1204
(dp1205
g29
g30
(g234
tp1206
Rp1207
(dp1208
g238
g37
sg51
g52
sg239
g37
sg41
g37
sg240
g37
sg241
g37
sg242
g37
sg243
g37
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg254
g37
sg157
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg53
I00
sg259
g37
sg260
g37
sg55
g37
sg261
g37
sg262
g37
sg58
g59
sg263
g37
sg264
g37
sg265
g37
sg266
g37
sg267
g37
sg150
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg276
S'corratio'
p1209
sg65
g5
(g66
g67
(dp1210
g69
g70
stp1211
Rp1212
(dp1213
g74
S'environ_items'
p1214
sg76
g65
sbsg282
g37
sg283
g37
sg77
g70
sg284
g37
sg285
g37
sg286
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'linear_reg_0'
p1215
sg83
(dp1216
sg85
g1142
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1215
sg94
Nsg95
(lp1217
sg97
Nsg98
Nsb(dp1218
sg5
(g18
g7
Ntp1219
Rp1220
(dp1221
g22
(dp1222
sg24
g5
(g104
g7
Ntp1223
Rp1224
(dp1225
g29
g30
(g108
tp1226
Rp1227
(dp1228
g51
g52
sS'output_brain'
p1229
g37
sS'nonlinear_xfm'
p1230
g37
sS'invlinear_xfm'
p1231
g37
sS'linear_xfm'
p1232
g37
sbsg122
(lp1233
g1229
ag1232
ag1231
ag1230
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp1234
sg85
g1142
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp1235
sg97
Nsg98
Nsb(dp1236
sg5
(g18
g7
Ntp1237
Rp1238
(dp1239
g22
(dp1240
sg24
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1241
g7
Ntp1242
Rp1243
(dp1244
g29
g30
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1245
tp1246
Rp1247
(dp1248
g51
g52
sS'derive_from_ref'
p1249
g37
sS'in_intensitymap_file'
p1250
g37
sS'modulatedref_file'
p1251
g37
sS'refmask_val'
p1252
g37
sS'hessian_precision'
p1253
g37
sS'in_fwhm'
p1254
g37
sS'skip_implicit_in_masking'
p1255
g37
sS'inmask_file'
p1256
g37
sS'refmask_file'
p1257
g37
sS'inwarp_file'
p1258
g37
sS'skip_lambda_ssq'
p1259
g37
sS'intensity_mapping_model'
p1260
g37
sS'affine_file'
p1261
g37
sS'apply_inmask'
p1262
g37
sS'spline_order'
p1263
g37
sS'apply_refmask'
p1264
g37
sS'subsampling_scheme'
p1265
g37
sg157
g37
sS'warped_file'
p1266
g37
sS'skip_refmask'
p1267
g37
sg53
I00
sS'ref_fwhm'
p1268
g37
sS'inmask_val'
p1269
g37
sS'config_file'
p1270
g37
sg1159
g37
sg55
g37
sS'apply_intensity_mapping'
p1271
g37
sS'regularization_lambda'
p1272
g37
sg58
g59
sS'regularization_model'
p1273
g37
sS'jacobian_range'
p1274
g37
sS'out_intensitymap_file'
p1275
g37
sS'skip_implicit_ref_masking'
p1276
g37
sg1160
g37
sS'skip_inmask'
p1277
g37
sS'fieldcoeff_file'
p1278
I01
sS'warp_resolution'
p1279
g37
sS'jacobian_file'
p1280
I01
sg65
g5
(g66
g67
(dp1281
g69
g70
stp1282
Rp1283
(dp1284
g74
S'environ_items'
p1285
sg76
g65
sbsS'bias_regularization_lambda'
p1286
g37
sg77
g70
sS'skip_intensity_mapping'
p1287
g37
sS'log_file'
p1288
g37
sS'biasfield_resolution'
p1289
g37
sS'intensity_mapping_order'
p1290
g37
sS'max_nonlin_iter'
p1291
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'nonlinear_reg_1'
p1292
sg83
(dp1293
sg85
g1142
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1292
sg94
Nsg95
(lp1294
sg97
Nsg98
Nsb(dp1295
ssg310
(dp1296
sg312
(dp1297
g1123
(dp1298
g1200
(dp1299
g316
(lp1300
(g1134
g157
tp1301
a(g1137
g240
tp1302
assg1146
(dp1303
g316
(lp1304
(g1134
g157
tp1305
a(g1137
g1160
tp1306
assg1238
(dp1307
g316
(lp1308
(g1139
g157
tp1309
a(g1135
g1160
tp1310
a(g1132
g1270
tp1311
asssg1146
(dp1312
g1220
(dp1313
g316
(lp1314
(g150
g1229
tp1315
asssg1176
(dp1316
g1220
(dp1317
g316
(lp1318
(g150
g1231
tp1319
asssg1200
(dp1320
g1238
(dp1321
g316
(lp1322
(g272
g1261
tp1323
assg1220
(dp1324
g316
(lp1325
(g272
g1232
tp1326
assg1176
(dp1327
g316
(lp1328
(g272
g157
tp1329
asssg1220
(dp1330
sg1238
(dp1331
g1220
(dp1332
g316
(lp1333
(g1278
g1230
tp1334
assg1146
(dp1335
g316
(lp1336
(g1278
g1159
tp1337
assssg358
g1297
sg359
(dp1338
g1123
(dp1339
sg1146
(dp1340
g1123
g1303
sg1238
g1335
ssg1176
(dp1341
g1200
g1327
ssg1200
(dp1342
g1123
g1299
ssg1220
(dp1343
g1238
g1332
sg1200
g1324
sg1146
g1313
sg1176
g1317
ssg1238
(dp1344
g1123
g1307
sg1200
g1321
sssg367
g1297
sbsg76
g1142
sg85
g1067
sg93
g1142
sg94
g368
((lp1345
(lp1346
g371
ag368
((lp1347
(lp1348
g374
ag371
aa(lp1349
g376
ag377
aa(lp1350
g379
ag380
aa(lp1351
g382
ag383
aa(lp1352
g385
ag386
aa(lp1353
g388
ag389
aa(lp1354
g391
ag392
aa(lp1355
g394
ag395
aatp1356
Rp1357
aa(lp1358
g399
ag368
((lp1359
(lp1360
g374
ag399
aa(lp1361
g403
ag404
aa(lp1362
g406
ag407
aa(lp1363
g409
ag410
aa(lp1364
g412
ag413
aa(lp1365
g415
ag416
aa(lp1366
g418
ag419
aa(lp1367
g421
ag422
aa(lp1368
g424
ag425
aa(lp1369
g427
ag428
aa(lp1370
g430
ag431
aa(lp1371
g433
ag434
aa(lp1372
g436
ag437
aa(lp1373
g439
ag440
aa(lp1374
g442
ag443
aa(lp1375
g445
ag446
aa(lp1376
g448
ag449
aa(lp1377
g451
ag452
aa(lp1378
g454
ag455
aatp1379
Rp1380
aa(lp1381
g459
ag368
((lp1382
(lp1383
g374
ag459
aa(lp1384
g463
ag464
aatp1385
Rp1386
aatp1387
Rp1388
sg98
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g18
g7
Ntp1399
Rp1400
(dp1401
g22
(dp1402
sg24
g5
(g104
g7
Ntp1403
Rp1404
(dp1405
g29
g30
(g108
tp1406
Rp1407
(dp1408
g51
g52
sS'underlay'
p1409
g37
sS'overlay'
p1410
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1411
sbsg122
(lp1412
g1409
ag1410
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp1413
sg85
S'montage_mfi_0'
p1414
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp1415
sg97
Nsg98
Nsb(dp1416
sg5
(g18
g7
Ntp1417
Rp1418
(dp1419
g22
(dp1420
sg24
g5
(cnipype.interfaces.utility
Function
p1421
g7
Ntp1422
Rp1423
(dp1424
S'_input_names'
p1425
(lp1426
g1410
ag1409
aS'png_name'
p1427
aS'cbar_name'
p1428
asg29
g30
(cnipype.interfaces.utility
FunctionInputSpec
p1429
tp1430
Rp1431
(dp1432
g53
I00
sg1427
S'MNI_edge_on_mean_func_mni_a.png'
p1433
sg1410
g37
sg1428
S'red'
p1434
sS'function_str'
p1435
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1436
sg1409
g37
sg51
g52
sbsS'_out'
p1437
(dp1438
g1427
NssS'_output_names'
p1439
(lp1440
g1427
asS'imports'
p1441
Nsbsg82
Nsg76
S'montage_a'
p1442
sg83
(dp1443
sg85
g1414
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1442
sg94
Nsg95
(lp1444
sg97
Nsg98
Nsb(dp1445
sg5
(g18
g7
Ntp1446
Rp1447
(dp1448
g22
(dp1449
sg24
g5
(g1421
g7
Ntp1450
Rp1451
(dp1452
g1425
(lp1453
S'file_'
p1454
asg29
g30
(g1429
tp1455
Rp1456
(dp1457
g53
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1458
sg1454
g37
sg51
g52
sbsg1437
(dp1459
S'new_fname'
p1460
Nssg1439
(lp1461
g1460
asg1441
Nsbsg82
Nsg76
S'resample_u'
p1462
sg83
(dp1463
sg85
g1414
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1462
sg94
Nsg95
(lp1464
sg97
Nsg98
Nsb(dp1465
sg5
(g18
g7
Ntp1466
Rp1467
(dp1468
g22
(dp1469
sg24
g5
(g1421
g7
Ntp1470
Rp1471
(dp1472
g1425
(lp1473
g1454
asg29
g30
(g1429
tp1474
Rp1475
(dp1476
g53
I00
sg1435
g1458
sg1454
g37
sg51
g52
sbsg1437
(dp1477
g1460
Nssg1439
(lp1478
g1460
asg1441
Nsbsg82
Nsg88
I00
sg83
(dp1479
sg90
Nsg87
Nsg97
Nsg76
S'resample_o'
p1480
sg85
g1414
sg89
I00
sg91
Nsg92
I00
sg93
g1480
sg94
Nsg95
(lp1481
sg98
Nsb(dp1482
sg5
(g18
g7
Ntp1483
Rp1484
(dp1485
g22
(dp1486
sg24
g5
(g104
g7
Ntp1487
Rp1488
(dp1489
g29
g30
(g108
tp1490
Rp1491
(dp1492
g51
g52
sS'resampled_underlay'
p1493
g37
sS'axial_png'
p1494
g37
sS'sagittal_png'
p1495
g37
sS'resampled_overlay'
p1496
g37
sbsg122
(lp1497
g1494
ag1495
ag1493
ag1496
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp1498
sg85
g1414
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp1499
sg97
Nsg98
Nsb(dp1500
sg5
(g18
g7
Ntp1501
Rp1502
(dp1503
g22
(dp1504
sg24
g5
(g1421
g7
Ntp1505
Rp1506
(dp1507
g1425
(lp1508
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp1509
Rp1510
(dp1511
g53
I00
sg1427
S'MNI_edge_on_mean_func_mni_s.png'
p1512
sg1410
g37
sg1428
g1434
sg1435
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1513
sg1409
g37
sg51
g52
sbsg1437
(dp1514
g1427
Nssg1439
(lp1515
g1427
asg1441
Nsbsg82
Nsg76
S'montage_s'
p1516
sg83
(dp1517
sg85
g1414
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1516
sg94
Nsg95
(lp1518
sg97
Nsg98
Nsb(dp1519
ssg310
(dp1520
sg312
(dp1521
g1400
(dp1522
g1447
(dp1523
g316
(lp1524
(g1409
g1454
tp1525
assg1467
(dp1526
g316
(lp1527
(g1410
g1454
tp1528
asssg1418
(dp1529
g1484
(dp1530
g316
(lp1531
(g1427
g1494
tp1532
asssg1447
(dp1533
g1484
(dp1534
g316
(lp1535
(g1460
g1493
tp1536
assg1418
(dp1537
g316
(lp1538
(g1460
g1409
tp1539
assg1502
(dp1540
g316
(lp1541
(g1460
g1409
tp1542
asssg1467
(dp1543
g1484
(dp1544
g316
(lp1545
(g1460
g1496
tp1546
assg1418
(dp1547
g316
(lp1548
(g1460
g1410
tp1549
assg1502
(dp1550
g316
(lp1551
(g1460
g1410
tp1552
asssg1484
(dp1553
sg1502
(dp1554
g1484
(dp1555
g316
(lp1556
(g1427
g1495
tp1557
assssg358
g1521
sg359
(dp1558
g1400
(dp1559
sg1418
(dp1560
g1447
g1537
sg1467
g1547
ssg1447
(dp1561
g1400
g1523
ssg1467
(dp1562
g1400
g1526
ssg1484
(dp1563
g1502
g1555
sg1447
g1534
sg1467
g1544
sg1418
g1530
ssg1502
(dp1564
g1447
g1540
sg1467
g1550
sssg367
g1521
sbsg76
g1414
sg85
g1067
sg93
g1414
sg94
g368
((lp1565
(lp1566
g371
ag368
((lp1567
(lp1568
g374
ag371
aa(lp1569
g376
ag377
aa(lp1570
g379
ag380
aa(lp1571
g382
ag383
aa(lp1572
g385
ag386
aa(lp1573
g388
ag389
aa(lp1574
g391
ag392
aa(lp1575
g394
ag395
aatp1576
Rp1577
aa(lp1578
g399
ag368
((lp1579
(lp1580
g374
ag399
aa(lp1581
g403
ag404
aa(lp1582
g406
ag407
aa(lp1583
g409
ag410
aa(lp1584
g412
ag413
aa(lp1585
g415
ag416
aa(lp1586
g418
ag419
aa(lp1587
g421
ag422
aa(lp1588
g424
ag425
aa(lp1589
g427
ag428
aa(lp1590
g430
ag431
aa(lp1591
g433
ag434
aa(lp1592
g436
ag437
aa(lp1593
g439
ag440
aa(lp1594
g442
ag443
aa(lp1595
g445
ag446
aa(lp1596
g448
ag449
aa(lp1597
g451
ag452
aa(lp1598
g454
ag455
aatp1599
Rp1600
aa(lp1601
g459
ag368
((lp1602
(lp1603
g374
ag459
aa(lp1604
g463
ag464
aatp1605
Rp1606
aatp1607
Rp1608
sg98
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g18
g7
Ntp1619
Rp1620
(dp1621
g22
(dp1622
sg24
g5
(g104
g7
Ntp1623
Rp1624
(dp1625
g29
g30
(g108
tp1626
Rp1627
(dp1628
g51
g52
sg1409
g37
sg1410
g37
sbsg122
(lp1629
g1409
ag1410
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp1630
sg85
S'montage_snr_0'
p1631
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp1632
sg97
Nsg98
Nsb(dp1633
sg5
(g18
g7
Ntp1634
Rp1635
(dp1636
g22
(dp1637
sg24
g5
(g1421
g7
Ntp1638
Rp1639
(dp1640
g1425
(lp1641
g1454
asg29
g30
(g1429
tp1642
Rp1643
(dp1644
g53
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1645
sg1454
g37
sg51
g52
sbsg1437
(dp1646
g1460
Nssg1439
(lp1647
g1460
asg1441
Nsbsg82
Nsg76
g1462
sg83
(dp1648
sg85
g1631
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1462
sg94
Nsg95
(lp1649
sg97
Nsg98
Nsb(dp1650
sg5
(g18
g7
Ntp1651
Rp1652
(dp1653
g22
(dp1654
sg24
g5
(g1421
g7
Ntp1655
Rp1656
(dp1657
g1425
(lp1658
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp1659
Rp1660
(dp1661
g53
I00
sg1427
S'snr_s.png'
p1662
sg1410
g37
sg1428
S'red_to_blue'
p1663
sg1435
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1664
sg1409
g37
sg51
g52
sbsg1437
(dp1665
g1427
Nssg1439
(lp1666
g1427
asg1441
Nsbsg82
Nsg76
g1516
sg83
(dp1667
sg85
g1631
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1516
sg94
Nsg95
(lp1668
sg97
Nsg98
Nsb(dp1669
sg5
(g18
g7
Ntp1670
Rp1671
(dp1672
g22
(dp1673
sg24
g5
(g1421
g7
Ntp1674
Rp1675
(dp1676
g1425
(lp1677
g1454
asg29
g30
(g1429
tp1678
Rp1679
(dp1680
g53
I00
sg1435
g1645
sg1454
g37
sg51
g52
sbsg1437
(dp1681
g1460
Nssg1439
(lp1682
g1460
asg1441
Nsbsg82
Nsg88
I00
sg83
(dp1683
sg90
Nsg87
Nsg97
Nsg76
g1480
sg85
g1631
sg89
I00
sg91
Nsg92
I00
sg93
g1480
sg94
Nsg95
(lp1684
sg98
Nsb(dp1685
sg5
(g18
g7
Ntp1686
Rp1687
(dp1688
g22
(dp1689
sg24
g5
(g104
g7
Ntp1690
Rp1691
(dp1692
g29
g30
(g108
tp1693
Rp1694
(dp1695
g51
g52
sg1493
g37
sg1494
g37
sg1495
g37
sg1496
g37
sbsg122
(lp1696
g1494
ag1495
ag1493
ag1496
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp1697
sg85
g1631
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp1698
sg97
Nsg98
Nsb(dp1699
sg5
(g18
g7
Ntp1700
Rp1701
(dp1702
g22
(dp1703
sg24
g5
(g1421
g7
Ntp1704
Rp1705
(dp1706
g1425
(lp1707
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp1708
Rp1709
(dp1710
g53
I00
sg1427
S'snr_a.png'
p1711
sg1410
g37
sg1428
g1663
sg1435
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1712
sg1409
g37
sg51
g52
sbsg1437
(dp1713
g1427
Nssg1439
(lp1714
g1427
asg1441
Nsbsg82
Nsg76
g1442
sg83
(dp1715
sg85
g1631
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1442
sg94
Nsg95
(lp1716
sg97
Nsg98
Nsb(dp1717
ssg310
(dp1718
sg312
(dp1719
g1620
(dp1720
g1671
(dp1721
g316
(lp1722
(g1410
g1454
tp1723
assg1635
(dp1724
g316
(lp1725
(g1409
g1454
tp1726
asssg1635
(dp1727
g1687
(dp1728
g316
(lp1729
(g1460
g1493
tp1730
assg1701
(dp1731
g316
(lp1732
(g1460
g1409
tp1733
assg1652
(dp1734
g316
(lp1735
(g1460
g1409
tp1736
asssg1652
(dp1737
g1687
(dp1738
g316
(lp1739
(g1427
g1495
tp1740
asssg1671
(dp1741
g1687
(dp1742
g316
(lp1743
(g1460
g1496
tp1744
assg1701
(dp1745
g316
(lp1746
(g1460
g1410
tp1747
assg1652
(dp1748
g316
(lp1749
(g1460
g1410
tp1750
asssg1687
(dp1751
sg1701
(dp1752
g1687
(dp1753
g316
(lp1754
(g1427
g1494
tp1755
assssg358
g1719
sg359
(dp1756
g1620
(dp1757
sg1635
(dp1758
g1620
g1724
ssg1652
(dp1759
g1671
g1748
sg1635
g1734
ssg1671
(dp1760
g1620
g1721
ssg1687
(dp1761
g1671
g1742
sg1635
g1728
sg1652
g1738
sg1701
g1753
ssg1701
(dp1762
g1671
g1745
sg1635
g1731
sssg367
g1719
sbsg76
g1631
sg85
g1067
sg93
g1631
sg94
g368
((lp1763
(lp1764
g371
ag368
((lp1765
(lp1766
g374
ag371
aa(lp1767
g376
ag377
aa(lp1768
g379
ag380
aa(lp1769
g382
ag383
aa(lp1770
g385
ag386
aa(lp1771
g388
ag389
aa(lp1772
g391
ag392
aa(lp1773
g394
ag395
aatp1774
Rp1775
aa(lp1776
g399
ag368
((lp1777
(lp1778
g374
ag399
aa(lp1779
g403
ag404
aa(lp1780
g406
ag407
aa(lp1781
g409
ag410
aa(lp1782
g412
ag413
aa(lp1783
g415
ag416
aa(lp1784
g418
ag419
aa(lp1785
g421
ag422
aa(lp1786
g424
ag425
aa(lp1787
g427
ag428
aa(lp1788
g430
ag431
aa(lp1789
g433
ag434
aa(lp1790
g436
ag437
aa(lp1791
g439
ag440
aa(lp1792
g442
ag443
aa(lp1793
g445
ag446
aa(lp1794
g448
ag449
aa(lp1795
g451
ag452
aa(lp1796
g454
ag455
aatp1797
Rp1798
aa(lp1799
g459
ag368
((lp1800
(lp1801
g374
ag459
aa(lp1802
g463
ag464
aatp1803
Rp1804
aatp1805
Rp1806
sg98
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g18
g7
Ntp1810
Rp1811
(dp1812
g22
(dp1813
sg24
g5
(g1149
g7
Ntp1814
Rp1815
(dp1816
g29
g30
(g1153
tp1817
Rp1818
(dp1819
g53
I00
sg1157
g37
sg157
g37
sg1158
g37
sg150
g37
sg269
g37
sg55
g37
sg243
g37
sg1159
g37
sg1160
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg58
g59
sg65
g5
(g66
g67
(dp1821
g69
g70
stp1822
Rp1823
(dp1824
g74
S'environ_items'
p1825
sg76
g65
sbsg1166
g37
sg1167
g37
sg77
g70
sg1168
g37
sg1169
g37
sg51
g52
sg1170
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'mean_func_fsl_warp_0'
p1826
sg83
(dp1827
sg85
g1067
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1826
sg94
Nsg95
(lp1828
sg97
Nsg98
Nsbg150
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g18
g7
Ntp1831
Rp1832
(dp1833
g22
(dp1834
sg24
g5
(g1421
g7
Ntp1835
Rp1836
(dp1837
g1425
(lp1838
S'motion_parameters'
p1839
asg29
g30
(g1429
tp1840
Rp1841
(dp1842
g53
I00
sg1435
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g37
sg51
g52
sbsg1437
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1439
(lp1847
g1845
ag1846
asg1441
Nsbsg82
Nsg76
S'motion_plt_0'
p1848
sg83
(dp1849
sg85
g1067
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1848
sg94
Nsg95
(lp1850
sg97
Nsg98
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g18
g7
Ntp1853
Rp1854
(dp1855
g22
(dp1856
sg24
g5
(g1421
g7
Ntp1857
Rp1858
(dp1859
g1425
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg29
g30
(g1429
tp1864
Rp1865
(dp1866
g53
I00
sg51
g52
sg1861
g37
sg1435
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g37
sbsg1437
(dp1869
S'hist_path'
p1870
Nssg1439
(lp1871
g1870
asg1441
Nsbsg82
Nsg76
S'fd_plot_0'
p1872
sg83
(dp1873
sg85
g1067
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1872
sg94
Nsg95
(lp1874
sg97
Nsg98
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g18
g7
Ntp1884
Rp1885
(dp1886
g22
(dp1887
sg24
g5
(g1421
g7
Ntp1888
Rp1889
(dp1890
g1425
(lp1891
g157
asg29
g30
(g1429
tp1892
Rp1893
(dp1894
g53
I00
sg51
g52
sg1435
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p1895
sg157
g37
sbsg1437
(dp1896
g150
Nssg1439
(lp1897
g150
asg1441
Nsbsg82
Nsg76
S'calculate_FD'
p1898
sg83
(dp1899
sg85
S'gen_motion_stats_0'
p1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1898
sg94
Nsg95
(lp1901
sg97
Nsg98
Nsb(dp1902
sg5
(g18
g7
Ntp1903
Rp1904
(dp1905
g22
(dp1906
sg24
g5
(g104
g7
Ntp1907
Rp1908
(dp1909
g29
g30
(g108
tp1910
Rp1911
(dp1912
g51
g52
sS'frames_ex_1D'
p1913
g37
sS'FDJ_1D'
p1914
g37
sS'FD_1D'
p1915
g37
sS'frames_in_1D'
p1916
g37
sS'motion_params'
p1917
g37
sS'power_params'
p1918
g37
sbsg122
(lp1919
g1915
ag1914
ag1913
ag1916
ag1918
ag1917
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp1920
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp1921
sg97
Nsg98
Nsb(dp1922
sg5
(g18
g7
Ntp1923
Rp1924
(dp1925
g22
(dp1926
sg24
g5
(g1421
g7
Ntp1927
Rp1928
(dp1929
g1425
(lp1930
g157
ag195
aS'frames_before'
p1931
aS'frames_after'
p1932
asg29
g30
(g1429
tp1933
Rp1934
(dp1935
g53
I00
sg1932
g37
sg1435
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1936
sg157
g37
sg195
g37
sg51
g52
sg1931
g37
sbsg1437
(dp1937
g150
Nssg1439
(lp1938
g150
asg1441
Nsbsg82
Nsg76
S'exclude_frames'
p1939
sg83
(dp1940
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1939
sg94
Nsg95
(lp1941
sg97
Nsg98
Nsb(dp1942
sg5
(g18
g7
Ntp1943
Rp1944
(dp1945
g22
(dp1946
sg24
g5
(g1421
g7
Ntp1947
Rp1948
(dp1949
g1425
(lp1950
S'rest'
p1951
aS'mask'
p1952
asg29
g30
(g1429
tp1953
Rp1954
(dp1955
g53
I00
sg1952
g37
sg51
g52
sg1435
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p1956
sg1951
g37
sbsg1437
(dp1957
g150
Nssg1439
(lp1958
g150
asg1441
Nsbsg82
Nsg76
S'cal_DVARS'
p1959
sg83
(dp1960
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1959
sg94
Nsg95
(lp1961
sg97
Nsg98
Nsb(dp1962
sg5
(g18
g7
Ntp1963
Rp1964
(dp1965
g22
(dp1966
sg24
g5
(g1421
g7
Ntp1967
Rp1968
(dp1969
g1425
(lp1970
S'subject_id'
p1971
aS'scan_id'
p1972
aS'movement_parameters'
p1973
aS'max_displacement'
p1974
asg29
g30
(g1429
tp1975
Rp1976
(dp1977
g53
I00
sg1974
g37
sg1972
g37
sg1971
g37
sg1435
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1978
sg1973
g37
sg51
g52
sbsg1437
(dp1979
g150
Nssg1439
(lp1980
g150
asg1441
Nsbsg82
Nsg76
S'calc_motion_parameters'
p1981
sg83
(dp1982
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1981
sg94
Nsg95
(lp1983
sg97
Nsg98
Nsb(dp1984
sg5
(g18
g7
Ntp1985
Rp1986
(dp1987
g22
(dp1988
sg24
g5
(g104
g7
Ntp1989
Rp1990
(dp1991
g29
g30
(g108
tp1992
Rp1993
(dp1994
g1974
g37
sg51
g52
sg1972
g37
sg1971
g37
sg1952
g37
sg1973
g37
sS'oned_matrix_save'
p1995
g37
sS'motion_correct'
p1996
g37
sbsg122
(lp1997
g1971
ag1972
ag1973
ag1974
ag1996
ag1952
ag1995
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp1998
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp1999
sg97
Nsg98
Nsb(dp2000
sg5
(g18
g7
Ntp2001
Rp2002
(dp2003
g22
(dp2004
sg24
g5
(g104
g7
Ntp2005
Rp2006
(dp2007
g29
g30
(g108
tp2008
Rp2009
(dp2010
g195
(lp2011
F0.2
asg51
g52
sS'remove_frames_before'
p2012
I1
sS'remove_frames_after'
p2013
I2
sbsg122
(lp2014
g195
ag2012
ag2013
asg124
I01
sbsg82
Nsg76
S'scrubbing_input'
p2015
sg83
(dp2016
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
(g195
(lp2017
F0.2
atp2018
sg92
I00
sg93
g2015
sg94
Nsg95
(lp2019
sg97
Nsg98
Nsb(dp2020
sg5
(g18
g7
Ntp2021
Rp2022
(dp2023
g22
(dp2024
sg24
g5
(g1421
g7
Ntp2025
Rp2026
(dp2027
g1425
(lp2028
g1971
ag1972
ag1915
ag1914
ag195
aS'DVARS'
p2029
asg29
g30
(g1429
tp2030
Rp2031
(dp2032
g53
I00
sg51
g52
sg1972
g37
sg1971
g37
sg2029
g37
sg1435
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p2033
sg1914
g37
sg1915
g37
sg195
g37
sbsg1437
(dp2034
g150
Nssg1439
(lp2035
g150
asg1441
Nsbsg82
Nsg76
S'calc_power_parameters'
p2036
sg83
(dp2037
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2036
sg94
Nsg95
(lp2038
sg97
Nsg98
Nsb(dp2039
sg5
(g18
g7
Ntp2040
Rp2041
(dp2042
g22
(dp2043
sg24
g5
(g1421
g7
Ntp2044
Rp2045
(dp2046
g1425
(lp2047
g157
asg29
g30
(g1429
tp2048
Rp2049
(dp2050
g53
I00
sg51
g52
sg1435
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p2051
sg157
g37
sbsg1437
(dp2052
g150
Nssg1439
(lp2053
g150
asg1441
Nsbsg82
Nsg76
S'calculate_FDJ'
p2054
sg83
(dp2055
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2054
sg94
Nsg95
(lp2056
sg97
Nsg98
Nsb(dp2057
sg5
(g18
g7
Ntp2058
Rp2059
(dp2060
g22
(dp2061
sg24
g5
(g1421
g7
Ntp2062
Rp2063
(dp2064
g1425
(lp2065
g157
ag195
aS'exclude_list'
p2066
asg29
g30
(g1429
tp2067
Rp2068
(dp2069
g53
I00
sg2066
g37
sg1435
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p2070
sg157
g37
sg195
g37
sg51
g52
sbsg1437
(dp2071
g150
Nssg1439
(lp2072
g150
asg1441
Nsbsg82
Nsg76
S'include_frames'
p2073
sg83
(dp2074
sg85
g1900
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2073
sg94
Nsg95
(lp2075
sg97
Nsg98
Nsb(dp2076
ssg310
(dp2077
sg312
(dp2078
g1885
(dp2079
g2022
(dp2080
g316
(lp2081
(g150
g1915
tp2082
assg1904
(dp2083
g316
(lp2084
(g150
g1915
tp2085
assg2059
(dp2086
g316
(lp2087
(g150
g157
tp2088
assg1924
(dp2089
g316
(lp2090
(g150
g157
tp2091
asssg1904
(dp2092
sg1924
(dp2093
g1904
(dp2094
g316
(lp2095
(g150
g1913
tp2096
assg2059
(dp2097
g316
(lp2098
(g150
g2066
tp2099
asssg1944
(dp2100
g2022
(dp2101
g316
(lp2102
(g150
g2029
tp2103
asssg1964
(dp2104
g1904
(dp2105
g316
(lp2106
(g150
g1917
tp2107
asssg1986
(dp2108
g2022
(dp2109
g316
(lp2110
(g1971
g1971
tp2111
a(g1972
g1972
tp2112
assg1885
(dp2113
g316
(lp2114
(g1973
g157
tp2115
assg1964
(dp2116
g316
(lp2117
(g1971
g1971
tp2118
a(g1972
g1972
tp2119
a(g1973
g1973
tp2120
a(g1974
g1974
tp2121
assg1944
(dp2122
g316
(lp2123
(g1996
g1951
tp2124
a(g1952
g1952
tp2125
assg2041
(dp2126
g316
(lp2127
(g1995
g157
tp2128
asssg2002
(dp2129
g1924
(dp2130
g316
(lp2131
(g195
g195
tp2132
a(g2012
g1931
tp2133
a(g2013
g1932
tp2134
assg2059
(dp2135
g316
(lp2136
(g195
g195
tp2137
assg2022
(dp2138
g316
(lp2139
(g195
g195
tp2140
asssg2022
(dp2141
g1904
(dp2142
g316
(lp2143
(g150
g1918
tp2144
asssg2041
(dp2145
g1904
(dp2146
g316
(lp2147
(g150
g1914
tp2148
assg2022
(dp2149
g316
(lp2150
(g150
g1914
tp2151
asssg2059
(dp2152
g1904
(dp2153
g316
(lp2154
(g150
g1916
tp2155
assssg358
g2078
sg359
(dp2156
g1885
(dp2157
g1986
g2113
ssg1904
(dp2158
g1885
g2083
sg1924
g2094
sg1964
g2105
sg2059
g2153
sg2022
g2142
sg2041
g2146
ssg1924
(dp2159
g1885
g2089
sg2002
g2130
ssg1944
(dp2160
g1986
g2122
ssg1964
(dp2161
g1986
g2116
ssg1986
(dp2162
sg2002
(dp2163
sg2022
(dp2164
g1885
g2080
sg2041
g2149
sg1986
g2109
sg2002
g2138
sg1944
g2101
ssg2041
(dp2165
g1986
g2126
ssg2059
(dp2166
g1885
g2086
sg1924
g2097
sg2002
g2135
sssg367
g2078
sbsg76
g1900
sg85
g1067
sg93
g1900
sg94
g368
((lp2167
(lp2168
g371
ag368
((lp2169
(lp2170
g374
ag371
aa(lp2171
g376
ag377
aa(lp2172
g379
ag380
aa(lp2173
g382
ag383
aa(lp2174
g385
ag386
aa(lp2175
g388
ag389
aa(lp2176
g391
ag392
aa(lp2177
g394
ag395
aatp2178
Rp2179
aa(lp2180
g399
ag368
((lp2181
(lp2182
g374
ag399
aa(lp2183
g403
ag404
aa(lp2184
g406
ag407
aa(lp2185
g409
ag410
aa(lp2186
g412
ag413
aa(lp2187
g415
ag416
aa(lp2188
g418
ag419
aa(lp2189
g421
ag422
aa(lp2190
g424
ag425
aa(lp2191
g427
ag428
aa(lp2192
g430
ag431
aa(lp2193
g433
ag434
aa(lp2194
g436
ag437
aa(lp2195
g439
ag440
aa(lp2196
g442
ag443
aa(lp2197
g445
ag446
aa(lp2198
g448
ag449
aa(lp2199
g451
ag452
aa(lp2200
g454
ag455
aatp2201
Rp2202
aa(lp2203
g459
ag368
((lp2204
(lp2205
g374
ag459
aa(lp2206
g463
ag464
aatp2207
Rp2208
aatp2209
Rp2210
sg98
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g18
g7
Ntp2224
Rp2225
(dp2226
g22
(dp2227
sg24
g5
(g104
g7
Ntp2228
Rp2229
(dp2230
g29
g30
(g108
tp2231
Rp2232
(dp2233
S'reorient'
p2234
g37
sg114
g37
sS'refit'
p2235
g37
sg51
g52
sS'skullstrip'
p2236
g37
sbsg122
(lp2237
g2235
ag2234
ag2236
ag114
asg124
I01
sbsg82
Nsg88
I00
sg83
(dp2238
sg90
Nsg87
Nsg97
Nsg76
g179
sg85
S'anat_preproc_0'
p2239
sg89
I00
sg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp2240
sg98
Nsb(dp2241
sg5
(g18
g7
Ntp2242
Rp2243
(dp2244
g22
(dp2245
sg24
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2246
g7
Ntp2247
Rp2248
(dp2249
g29
g30
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2250
tp2251
Rp2252
(dp2253
g53
I00
sg51
g52
sg150
g37
sg55
g37
sS'outputtype'
p2254
S'AFNI'
p2255
sg58
g59
sg65
g5
(g66
g67
(dp2256
tp2257
Rp2258
(dp2259
g74
S'environ_items'
p2260
sg76
g65
sbsg157
g37
sbsS'_outputtype'
p2261
g2255
sg80
Nsg81
g59
sbsg82
Nsg88
I00
sg83
(dp2262
sg90
Nsg87
Nsg97
Nsg76
S'anat_skullstrip'
p2263
sg85
g2239
sg89
I00
sg91
Nsg92
I00
sg93
g2263
sg94
Nsg95
(lp2264
sg98
Nsb(dp2265
sg5
(g18
g7
Ntp2266
Rp2267
(dp2268
g22
(dp2269
sg24
g5
(g104
g7
Ntp2270
Rp2271
(dp2272
g29
g30
(g108
tp2273
Rp2274
(dp2275
g51
g52
sS'anat'
p2276
g37
sbsg122
(lp2277
g2276
asg124
I01
sbsg82
Nsg88
I00
sg83
(dp2278
sg90
Nsg87
Nsg97
Nsg76
g125
sg85
g2239
sg89
I00
sg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp2279
sg98
Nsb(dp2280
sg5
(g18
g7
Ntp2281
Rp2282
(dp2283
g22
(dp2284
sg24
g5
(cnipype.interfaces.afni.preprocess
Refit
p2285
g7
Ntp2286
Rp2287
(dp2288
g29
g30
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2289
tp2290
Rp2291
(dp2292
g53
I00
sg51
g52
sS'deoblique'
p2293
I01
sg55
g37
sS'yorigin'
p2294
g37
sg58
g59
sg65
g5
(g66
g67
(dp2295
tp2296
Rp2297
(dp2298
g74
S'environ_items'
p2299
sg76
g65
sbsg157
g37
sS'xorigin'
p2300
g37
sS'zorigin'
p2301
g37
sbsg80
Nsg81
g59
sbsg82
Nsg88
I00
sg83
(dp2302
sg90
Nsg87
Nsg97
Nsg76
S'anat_deoblique'
p2303
sg85
g2239
sg89
I00
sg91
Nsg92
I00
sg93
g2303
sg94
Nsg95
(lp2304
sg98
Nsb(dp2305
sg5
(g18
g7
Ntp2306
Rp2307
(dp2308
g22
(dp2309
sg24
g5
(cnipype.interfaces.afni.preprocess
Calc
p2310
g7
Ntp2311
Rp2312
(dp2313
g29
g30
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2314
tp2315
Rp2316
(dp2317
S'stop_idx'
p2318
g37
sg53
I00
sg51
g52
sg150
g37
sS'expr'
p2319
S'a*step(b)'
p2320
sg55
g37
sg2254
S'NIFTI_GZ'
p2321
sS'in_file_b'
p2322
g37
sS'in_file_c'
p2323
g37
sS'in_file_a'
p2324
g37
sg65
g5
(g66
g67
(dp2325
tp2326
Rp2327
(dp2328
g74
S'environ_items'
p2329
sg76
g65
sbsS'single_idx'
p2330
g37
sS'other'
p2331
g37
sS'start_idx'
p2332
g37
sg58
g59
sbsg2261
g2321
sg80
Nsg81
g59
sbsg82
Nsg88
I00
sg83
(dp2333
sg90
Nsg87
Nsg97
Nsg76
S'anat_brain_only'
p2334
sg85
g2239
sg89
I00
sg91
Nsg92
I00
sg93
g2334
sg94
Nsg95
(lp2335
sg98
Nsb(dp2336
sg5
(g18
g7
Ntp2337
Rp2338
(dp2339
g22
(dp2340
sg24
g5
(cnipype.interfaces.afni.preprocess
Resample
p2341
g7
Ntp2342
Rp2343
(dp2344
g29
g30
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2345
tp2346
Rp2347
(dp2348
g53
I00
sg51
g52
sg150
g37
sg55
g37
sg2254
g2321
sS'resample_mode'
p2349
g37
sS'voxel_size'
p2350
g37
sg58
g59
sS'master'
p2351
g37
sg157
g37
sg65
g5
(g66
g67
(dp2352
tp2353
Rp2354
(dp2355
g74
S'environ_items'
p2356
sg76
g65
sbsS'orientation'
p2357
S'RPI'
p2358
sbsg2261
g2321
sg80
Nsg81
g59
sbsg82
Nsg88
I00
sg83
(dp2359
sg90
Nsg87
Nsg97
Nsg76
S'anat_reorient'
p2360
sg85
g2239
sg89
I00
sg91
Nsg92
I00
sg93
g2360
sg94
Nsg95
(lp2361
sg98
Nsb(dp2362
ssg312
(dp2363
g2225
(dp2364
sg2243
(dp2365
g2307
(dp2366
g316
(lp2367
(g150
g2322
tp2368
assg2225
(dp2369
g316
(lp2370
(g150
g2236
tp2371
asssg2267
(dp2372
g2282
(dp2373
g316
(lp2374
(g2276
g157
tp2375
asssg2282
(dp2376
g2338
(dp2377
g316
(lp2378
(g150
g157
tp2379
assg2225
(dp2380
g316
(lp2381
(g150
g2235
tp2382
asssg2307
(dp2383
g2225
(dp2384
g316
(lp2385
(g150
g114
tp2386
asssg2338
(dp2387
g2225
(dp2388
g316
(lp2389
(g150
g2234
tp2390
assg2307
(dp2391
g316
(lp2392
(g150
g2324
tp2393
assg2243
(dp2394
g316
(lp2395
(g150
g157
tp2396
assssg358
g2363
sg359
(dp2397
g2225
(dp2398
g2282
g2380
sg2243
g2369
sg2338
g2388
sg2307
g2384
ssg2243
(dp2399
g2338
g2394
ssg2267
(dp2400
sg2282
(dp2401
g2267
g2373
ssg2307
(dp2402
g2338
g2391
sg2243
g2366
ssg2338
(dp2403
g2282
g2377
sssg310
(dp2404
sg367
g2363
sbsg76
g2239
sg85
g1067
sg93
g2239
sg94
g368
((lp2405
(lp2406
g371
ag368
((lp2407
(lp2408
g374
ag371
aa(lp2409
g376
ag377
aa(lp2410
g379
ag380
aa(lp2411
g382
ag383
aa(lp2412
g385
ag386
aa(lp2413
g388
ag389
aa(lp2414
g391
ag392
aa(lp2415
g394
ag395
aatp2416
Rp2417
aa(lp2418
g399
ag368
((lp2419
(lp2420
g374
ag399
aa(lp2421
g403
ag404
aa(lp2422
g406
ag407
aa(lp2423
g409
ag410
aa(lp2424
g412
ag413
aa(lp2425
g415
ag416
aa(lp2426
g418
ag419
aa(lp2427
g421
ag422
aa(lp2428
g424
ag425
aa(lp2429
g427
ag428
aa(lp2430
g430
ag431
aa(lp2431
g433
ag434
aa(lp2432
g436
ag437
aa(lp2433
g439
ag440
aa(lp2434
g442
ag443
aa(lp2435
g445
ag446
aa(lp2436
g448
ag449
aa(lp2437
g451
ag452
aa(lp2438
g454
ag455
aatp2439
Rp2440
aa(lp2441
g459
ag368
((lp2442
(lp2443
g374
ag459
aa(lp2444
g463
ag464
aatp2445
Rp2446
aatp2447
Rp2448
sg98
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g18
g7
Ntp2459
Rp2460
(dp2461
g22
(dp2462
sg24
g5
(g2310
g7
Ntp2463
Rp2464
(dp2465
g29
g30
(g2314
tp2466
Rp2467
(dp2468
g2318
g37
sg53
I00
sg51
g52
sg150
g37
sg2319
S'a*b'
p2469
sg55
g37
sg2254
g2321
sg2322
g37
sg2323
g37
sg2324
g37
sg65
g5
(g66
g67
(dp2470
tp2471
Rp2472
(dp2473
g74
S'environ_items'
p2474
sg76
g65
sbsg2330
g37
sg2331
g37
sg2332
g37
sg58
g59
sbsg2261
g2321
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_edge_detect'
p2475
sg83
(dp2476
sg85
S'func_preproc_automask_0'
p2477
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2475
sg94
Nsg95
(lp2478
sg97
Nsg98
Nsb(dp2479
sg5
(g18
g7
Ntp2480
Rp2481
(dp2482
g22
(dp2483
sg24
g5
(cnipype.interfaces.afni.preprocess
Automask
p2484
g7
Ntp2485
Rp2486
(dp2487
g29
g30
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2488
tp2489
Rp2490
(dp2491
g53
I00
sg51
g52
sg55
g37
sS'erode'
p2492
g37
sg150
g37
sS'dilate'
p2493
g37
sS'clfrac'
p2494
g37
sg2254
g2321
sS'brain_file'
p2495
g37
sg58
g59
sg65
g5
(g66
g67
(dp2496
tp2497
Rp2498
(dp2499
g74
S'environ_items'
p2500
sg76
g65
sbsg157
g37
sbsg2261
g2321
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_get_brain_mask'
p2501
sg83
(dp2502
sg85
g2477
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2501
sg94
Nsg95
(lp2503
sg97
Nsg98
Nsb(dp2504
sg5
(g18
g7
Ntp2505
Rp2506
(dp2507
g22
(dp2508
sg24
g5
(g104
g7
Ntp2509
Rp2510
(dp2511
g29
g30
(g108
tp2512
Rp2513
(dp2514
g51
g52
sS'func'
p2515
g37
sbsg122
(lp2516
g2515
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp2517
sg85
g2477
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp2518
sg97
Nsg98
Nsb(dp2519
sg5
(g18
g7
Ntp2520
Rp2521
(dp2522
g22
(dp2523
sg24
g5
(g140
g7
Ntp2524
Rp2525
(dp2526
g29
g30
(g144
tp2527
Rp2528
(dp2529
g53
I00
sg51
g52
sg148
S'-Tmin -bin'
p2530
sg149
S'char'
p2531
sg150
g37
sg55
g37
sg151
g37
sg58
g59
sg65
g5
(g66
g67
(dp2532
g69
g70
stp2533
Rp2534
(dp2535
g74
S'environ_items'
p2536
sg76
g65
sbsg157
g37
sg77
g70
sg158
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_mask_normalize'
p2537
sg83
(dp2538
sg85
g2477
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2537
sg94
Nsg95
(lp2539
sg97
Nsg98
Nsb(dp2540
sg5
(g18
g7
Ntp2541
Rp2542
(dp2543
g22
(dp2544
sg24
g5
(g2285
g7
Ntp2545
Rp2546
(dp2547
g29
g30
(g2289
tp2548
Rp2549
(dp2550
g53
I00
sg51
g52
sg2293
I01
sg55
g37
sg2294
g37
sg58
g59
sg65
g5
(g66
g67
(dp2551
tp2552
Rp2553
(dp2554
g74
S'environ_items'
p2555
sg76
g65
sbsg157
g37
sg2300
g37
sg2301
g37
sbsg80
Nsg81
g59
sbsg82
Nsg76
S'func_deoblique'
p2556
sg83
(dp2557
sg85
g2477
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2556
sg94
Nsg95
(lp2558
sg97
Nsg98
Nsb(dp2559
sg5
(g18
g7
Ntp2560
Rp2561
(dp2562
g22
(dp2563
sg24
g5
(g140
g7
Ntp2564
Rp2565
(dp2566
g29
g30
(g144
tp2567
Rp2568
(dp2569
g53
I00
sg51
g52
sg148
S'-ing 10000'
p2570
sg149
S'float'
p2571
sg150
g37
sg55
g37
sg151
g37
sg58
g59
sg65
g5
(g66
g67
(dp2572
g69
g70
stp2573
Rp2574
(dp2575
g74
S'environ_items'
p2576
sg76
g65
sbsg157
g37
sg77
g70
sg158
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_normalize'
p2577
sg83
(dp2578
sg85
g2477
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2577
sg94
Nsg95
(lp2579
sg97
Nsg98
Nsb(dp2580
sg5
(g18
g7
Ntp2581
Rp2582
(dp2583
g22
(dp2584
sg24
g5
(cnipype.interfaces.afni.preprocess
TStat
p2585
g7
Ntp2586
Rp2587
(dp2588
g29
g30
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2589
tp2590
Rp2591
(dp2592
g53
I00
sg51
g52
sg150
g37
sg55
g37
sg1952
g37
sg2254
g2321
sg58
g59
sg65
g5
(g66
g67
(dp2593
tp2594
Rp2595
(dp2596
g74
S'environ_items'
p2597
sg76
g65
sbsg157
g37
sS'options'
p2598
S'-mean'
p2599
sbsg2261
g2321
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_get_mean_RPI'
p2600
sg83
(dp2601
sg85
g2477
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2600
sg94
Nsg95
(lp2602
sg97
Nsg98
Nsb(dp2603
sg5
(g18
g7
Ntp2604
Rp2605
(dp2606
g22
(dp2607
sg24
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2608
g7
Ntp2609
Rp2610
(dp2611
g29
g30
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2612
tp2613
Rp2614
(dp2615
S'oned_file'
p2616
g37
sg53
I00
sg41
g37
sS'timeshift'
p2617
g37
sS'basefile'
p2618
g37
sg55
S'-Fourier -twopass'
p2619
sg2254
g2321
sS'zpad'
p2620
I4
sg58
g59
sS'md1d_file'
p2621
S'max_displacement.1D'
p2622
sg157
g37
sS'copyorigin'
p2623
g37
sg65
g5
(g66
g67
(dp2624
tp2625
Rp2626
(dp2627
g74
S'environ_items'
p2628
sg76
g65
sbsg1995
g37
sg51
g52
sg150
g37
sbsg2261
g2321
sg80
Nsg81
g59
sbsg82
Nsg88
I00
sg83
(dp2629
sg90
Nsg87
Nsg97
Nsg76
S'func_motion_correct_A'
p2630
sg85
g2477
sg89
I00
sg91
Nsg92
I00
sg93
g2630
sg94
Nsg95
(lp2631
sg98
Nsb(dp2632
sg5
(g18
g7
Ntp2633
Rp2634
(dp2635
g22
(dp2636
sg24
g5
(g2585
g7
Ntp2637
Rp2638
(dp2639
g29
g30
(g2589
tp2640
Rp2641
(dp2642
g53
I00
sg51
g52
sg150
g37
sg55
g37
sg1952
g37
sg2254
g2321
sg58
g59
sg65
g5
(g66
g67
(dp2643
tp2644
Rp2645
(dp2646
g74
S'environ_items'
p2647
sg76
g65
sbsg157
g37
sg2598
g2599
sbsg2261
g2321
sg80
Nsg81
g59
sbsg82
Nsg88
I00
sg83
(dp2648
sg90
Nsg87
Nsg97
Nsg76
S'func_get_mean_motion'
p2649
sg85
g2477
sg89
I00
sg91
Nsg92
I00
sg93
g2649
sg94
Nsg95
(lp2650
sg98
Nsb(dp2651
sg5
(g18
g7
Ntp2652
Rp2653
(dp2654
g22
(dp2655
sg24
g5
(g2341
g7
Ntp2656
Rp2657
(dp2658
g29
g30
(g2345
tp2659
Rp2660
(dp2661
g53
I00
sg51
g52
sg150
g37
sg55
g37
sg2254
g2321
sg2349
g37
sg2350
g37
sg58
g59
sg2351
g37
sg157
g37
sg65
g5
(g66
g67
(dp2662
tp2663
Rp2664
(dp2665
g74
S'environ_items'
p2666
sg76
g65
sbsg2357
g2358
sbsg2261
g2321
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_reorient'
p2667
sg83
(dp2668
sg85
g2477
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2667
sg94
Nsg95
(lp2669
sg97
Nsg98
Nsb(dp2670
sg5
(g18
g7
Ntp2671
Rp2672
(dp2673
g22
(dp2674
sg24
g5
(g104
g7
Ntp2675
Rp2676
(dp2677
g29
g30
(g108
tp2678
Rp2679
(dp2680
g1974
g37
sS'motion_correct_ref'
p2681
g37
sg51
g52
sS'preprocessed_mask'
p2682
g37
sg1952
g37
sg2235
g37
sg2236
g37
sg2234
g37
sS'preprocessed'
p2683
g37
sS'slice_time_corrected'
p2684
g37
sg1973
g37
sS'example_func'
p2685
g37
sg1995
g37
sS'reorient_mean'
p2686
g37
sg1996
g37
sbsg122
(lp2687
g2235
ag2234
ag2686
ag1996
ag2681
ag1973
ag1974
ag1952
ag2236
ag2685
ag2683
ag2682
ag2684
ag1995
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp2688
sg85
g2477
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp2689
sg97
Nsg98
Nsb(dp2690
sg5
(g18
g7
Ntp2691
Rp2692
(dp2693
g22
(dp2694
sg24
g5
(g2608
g7
Ntp2695
Rp2696
(dp2697
g29
g30
(g2612
tp2698
Rp2699
(dp2700
g2616
g37
sg53
I00
sg41
g37
sg2617
g37
sg2618
g37
sg55
g2619
sg2254
g2321
sg2620
I4
sg58
g59
sg2621
g37
sg157
g37
sg2623
g37
sg65
g5
(g66
g67
(dp2701
tp2702
Rp2703
(dp2704
g74
S'environ_items'
p2705
sg76
g65
sbsg1995
g37
sg51
g52
sg150
g37
sbsg2261
g2321
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_motion_correct'
p2706
sg83
(dp2707
sg85
g2477
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2706
sg94
Nsg95
(lp2708
sg97
Nsg98
Nsb(dp2709
sg5
(g18
g7
Ntp2710
Rp2711
(dp2712
g22
(dp2713
sg24
g5
(g2585
g7
Ntp2714
Rp2715
(dp2716
g29
g30
(g2589
tp2717
Rp2718
(dp2719
g53
I00
sg51
g52
sg150
g37
sg55
g37
sg1952
g37
sg2254
g2321
sg58
g59
sg65
g5
(g66
g67
(dp2720
tp2721
Rp2722
(dp2723
g74
S'environ_items'
p2724
sg76
g65
sbsg157
g37
sg2598
g2599
sbsg2261
g2321
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_mean_skullstrip'
p2725
sg83
(dp2726
sg85
g2477
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2725
sg94
Nsg95
(lp2727
sg97
Nsg98
Nsb(dp2728
ssg310
(dp2729
sg312
(dp2730
g2460
(dp2731
g2672
(dp2732
g316
(lp2733
(g150
g2236
tp2734
assg2711
(dp2735
g316
(lp2736
(g150
g157
tp2737
assg2561
(dp2738
g316
(lp2739
(g150
g157
tp2740
asssg2481
(dp2741
g2672
(dp2742
g316
(lp2743
(g150
g1952
tp2744
assg2460
(dp2745
g316
(lp2746
(g150
g2322
tp2747
asssg2506
(dp2748
g2542
(dp2749
g316
(lp2750
(g2515
g157
tp2751
asssg2521
(dp2752
g2672
(dp2753
g316
(lp2754
(g150
g2682
tp2755
asssg2542
(dp2756
g2653
(dp2757
g316
(lp2758
(g150
g157
tp2759
asssg2561
(dp2760
g2672
(dp2761
g316
(lp2762
(g150
g2683
tp2763
assg2521
(dp2764
g316
(lp2765
(g150
g157
tp2766
asssg2582
(dp2767
g2692
(dp2768
g316
(lp2769
(g150
g2618
tp2770
asssg2605
(dp2771
g2672
(dp2772
g316
(lp2773
(g150
g1996
tp2774
a(g2621
g1974
tp2775
a(g2616
g1973
tp2776
a(g1995
g1995
tp2777
assg2481
(dp2778
g316
(lp2779
(g150
g157
tp2780
assg2460
(dp2781
g316
(lp2782
(g150
g2324
tp2783
asssg2634
(dp2784
g2672
(dp2785
g316
(lp2786
(g150
g2681
tp2787
assg2605
(dp2788
g316
(lp2789
(g150
g2618
tp2790
asssg2653
(dp2791
g2672
(dp2792
g316
(lp2793
(g150
g2234
tp2794
assg2605
(dp2795
g316
(lp2796
(g150
g157
tp2797
assg2692
(dp2798
g316
(lp2799
(g150
g157
tp2800
assg2582
(dp2801
g316
(lp2802
(g150
g157
tp2803
asssg2672
(dp2804
sg2692
(dp2805
g2634
(dp2806
g316
(lp2807
(g150
g157
tp2808
asssg2711
(dp2809
g2672
(dp2810
g316
(lp2811
(g150
g2685
tp2812
assssg358
g2730
sg359
(dp2813
g2460
(dp2814
g2605
g2781
sg2481
g2745
ssg2481
(dp2815
g2605
g2778
ssg2506
(dp2816
sg2521
(dp2817
g2561
g2764
ssg2542
(dp2818
g2506
g2749
ssg2561
(dp2819
g2460
g2738
ssg2582
(dp2820
g2653
g2801
ssg2605
(dp2821
g2653
g2795
sg2634
g2788
ssg2634
(dp2822
g2692
g2806
ssg2653
(dp2823
g2542
g2757
ssg2672
(dp2824
g2481
g2742
sg2460
g2732
sg2521
g2753
sg2561
g2761
sg2634
g2785
sg2653
g2792
sg2605
g2772
sg2711
g2810
ssg2692
(dp2825
g2653
g2798
sg2582
g2768
ssg2711
(dp2826
g2460
g2735
sssg367
g2730
sbsg76
g2477
sg85
g1067
sg93
g2477
sg94
g368
((lp2827
(lp2828
g371
ag368
((lp2829
(lp2830
g374
ag371
aa(lp2831
g376
ag377
aa(lp2832
g379
ag380
aa(lp2833
g382
ag383
aa(lp2834
g385
ag386
aa(lp2835
g388
ag389
aa(lp2836
g391
ag392
aa(lp2837
g394
ag395
aatp2838
Rp2839
aa(lp2840
g399
ag368
((lp2841
(lp2842
g374
ag399
aa(lp2843
g403
ag404
aa(lp2844
g406
ag407
aa(lp2845
g409
ag410
aa(lp2846
g412
ag413
aa(lp2847
g415
ag416
aa(lp2848
g418
ag419
aa(lp2849
g421
ag422
aa(lp2850
g424
ag425
aa(lp2851
g427
ag428
aa(lp2852
g430
ag431
aa(lp2853
g433
ag434
aa(lp2854
g436
ag437
aa(lp2855
g439
ag440
aa(lp2856
g442
ag443
aa(lp2857
g445
ag446
aa(lp2858
g448
ag449
aa(lp2859
g451
ag452
aa(lp2860
g454
ag455
aatp2861
Rp2862
aa(lp2863
g459
ag368
((lp2864
(lp2865
g374
ag459
aa(lp2866
g463
ag464
aatp2867
Rp2868
aatp2869
Rp2870
sg98
NsbS'outputspec.example_func'
p2871
tp2872
sg1973
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g18
g7
Ntp2880
Rp2881
(dp2882
g22
(dp2883
sg24
g5
(g1421
g7
Ntp2884
Rp2885
(dp2886
g1425
(lp2887
g157
asg29
g30
(g1429
tp2888
Rp2889
(dp2890
g53
I00
sg51
g52
sg1435
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2891
sg157
g37
sbsg1437
(dp2892
g150
Nssg1439
(lp2893
g150
asg1441
Nsbsg82
Nsg76
S'calc_friston'
p2894
sg83
(dp2895
sg85
S'fristons_parameter_model_0'
p2896
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g2894
sg94
Nsg95
(lp2897
sg97
Nsg98
Nsb(dp2898
sg5
(g18
g7
Ntp2899
Rp2900
(dp2901
g22
(dp2902
sg24
g5
(g104
g7
Ntp2903
Rp2904
(dp2905
g29
g30
(g108
tp2906
Rp2907
(dp2908
g51
g52
sS'movement_file'
p2909
g37
sbsg122
(lp2910
g2909
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp2911
sg85
g2896
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp2912
sg97
Nsg98
Nsb(dp2913
sg5
(g18
g7
Ntp2914
Rp2915
(dp2916
g22
(dp2917
sg24
g5
(g104
g7
Ntp2918
Rp2919
(dp2920
g29
g30
(g108
tp2921
Rp2922
(dp2923
g51
g52
sg2909
g37
sbsg122
(lp2924
g2909
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp2925
sg85
g2896
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp2926
sg97
Nsg98
Nsb(dp2927
ssg310
(dp2928
sg312
(dp2929
g2881
(dp2930
g2915
(dp2931
g316
(lp2932
(g150
g2909
tp2933
asssg2900
(dp2934
g2881
(dp2935
g316
(lp2936
(g2909
g157
tp2937
asssg2915
(dp2938
ssg358
g2929
sg359
(dp2939
g2881
(dp2940
g2900
g2935
ssg2900
(dp2941
sg2915
(dp2942
g2881
g2931
sssg367
g2929
sbsg76
g2896
sg85
g1067
sg93
g2896
sg94
g368
((lp2943
(lp2944
g371
ag368
((lp2945
(lp2946
g374
ag371
aa(lp2947
g376
ag377
aa(lp2948
g379
ag380
aa(lp2949
g382
ag383
aa(lp2950
g385
ag386
aa(lp2951
g388
ag389
aa(lp2952
g391
ag392
aa(lp2953
g394
ag395
aatp2954
Rp2955
aa(lp2956
g399
ag368
((lp2957
(lp2958
g374
ag399
aa(lp2959
g403
ag404
aa(lp2960
g406
ag407
aa(lp2961
g409
ag410
aa(lp2962
g412
ag413
aa(lp2963
g415
ag416
aa(lp2964
g418
ag419
aa(lp2965
g421
ag422
aa(lp2966
g424
ag425
aa(lp2967
g427
ag428
aa(lp2968
g430
ag431
aa(lp2969
g433
ag434
aa(lp2970
g436
ag437
aa(lp2971
g439
ag440
aa(lp2972
g442
ag443
aa(lp2973
g445
ag446
aa(lp2974
g448
ag449
aa(lp2975
g451
ag452
aa(lp2976
g454
ag455
aatp2977
Rp2978
aa(lp2979
g459
ag368
((lp2980
(lp2981
g374
ag459
aa(lp2982
g463
ag464
aatp2983
Rp2984
aatp2985
Rp2986
sg98
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g18
g7
Ntp2997
Rp2998
(dp2999
g22
(dp3000
sg24
g5
(g104
g7
Ntp3001
Rp3002
(dp3003
g29
g30
(g108
tp3004
Rp3005
(dp3006
g51
g52
sg1409
g37
sg1410
g37
sbsg122
(lp3007
g1409
ag1410
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp3008
sg85
S'montage_anat_0'
p3009
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp3010
sg97
Nsg98
Nsb(dp3011
sg5
(g18
g7
Ntp3012
Rp3013
(dp3014
g22
(dp3015
sg24
g5
(g1421
g7
Ntp3016
Rp3017
(dp3018
g1425
(lp3019
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp3020
Rp3021
(dp3022
g53
I00
sg1427
S't1_edge_on_mean_func_in_t1_s.png'
p3023
sg1410
g37
sg1428
g1434
sg1435
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3024
sg1409
g37
sg51
g52
sbsg1437
(dp3025
g1427
Nssg1439
(lp3026
g1427
asg1441
Nsbsg82
Nsg76
g1516
sg83
(dp3027
sg85
g3009
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1516
sg94
Nsg95
(lp3028
sg97
Nsg98
Nsb(dp3029
sg5
(g18
g7
Ntp3030
Rp3031
(dp3032
g22
(dp3033
sg24
g5
(g104
g7
Ntp3034
Rp3035
(dp3036
g29
g30
(g108
tp3037
Rp3038
(dp3039
g51
g52
sg1493
g37
sg1494
g37
sg1495
g37
sg1496
g37
sbsg122
(lp3040
g1494
ag1495
ag1493
ag1496
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp3041
sg85
g3009
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp3042
sg97
Nsg98
Nsb(dp3043
sg5
(g18
g7
Ntp3044
Rp3045
(dp3046
g22
(dp3047
sg24
g5
(g1421
g7
Ntp3048
Rp3049
(dp3050
g1425
(lp3051
g1454
asg29
g30
(g1429
tp3052
Rp3053
(dp3054
g53
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3055
sg1454
g37
sg51
g52
sbsg1437
(dp3056
g1460
Nssg1439
(lp3057
g1460
asg1441
Nsbsg82
Nsg76
g1462
sg83
(dp3058
sg85
g3009
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1462
sg94
Nsg95
(lp3059
sg97
Nsg98
Nsb(dp3060
sg5
(g18
g7
Ntp3061
Rp3062
(dp3063
g22
(dp3064
sg24
g5
(g1421
g7
Ntp3065
Rp3066
(dp3067
g1425
(lp3068
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp3069
Rp3070
(dp3071
g53
I00
sg1427
S't1_edge_on_mean_func_in_t1_a.png'
p3072
sg1410
g37
sg1428
g1434
sg1435
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3073
sg1409
g37
sg51
g52
sbsg1437
(dp3074
g1427
Nssg1439
(lp3075
g1427
asg1441
Nsbsg82
Nsg76
g1442
sg83
(dp3076
sg85
g3009
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1442
sg94
Nsg95
(lp3077
sg97
Nsg98
Nsb(dp3078
sg5
(g18
g7
Ntp3079
Rp3080
(dp3081
g22
(dp3082
sg24
g5
(g1421
g7
Ntp3083
Rp3084
(dp3085
g1425
(lp3086
g1454
asg29
g30
(g1429
tp3087
Rp3088
(dp3089
g53
I00
sg1435
g3055
sg1454
g37
sg51
g52
sbsg1437
(dp3090
g1460
Nssg1439
(lp3091
g1460
asg1441
Nsbsg82
Nsg88
I00
sg83
(dp3092
sg90
Nsg87
Nsg97
Nsg76
g1480
sg85
g3009
sg89
I00
sg91
Nsg92
I00
sg93
g1480
sg94
Nsg95
(lp3093
sg98
Nsb(dp3094
ssg310
(dp3095
sg312
(dp3096
g2998
(dp3097
g3045
(dp3098
g316
(lp3099
(g1409
g1454
tp3100
assg3080
(dp3101
g316
(lp3102
(g1410
g1454
tp3103
asssg3013
(dp3104
g3031
(dp3105
g316
(lp3106
(g1427
g1495
tp3107
asssg3031
(dp3108
sg3045
(dp3109
g3062
(dp3110
g316
(lp3111
(g1460
g1409
tp3112
assg3013
(dp3113
g316
(lp3114
(g1460
g1409
tp3115
assg3031
(dp3116
g316
(lp3117
(g1460
g1493
tp3118
asssg3062
(dp3119
g3031
(dp3120
g316
(lp3121
(g1427
g1494
tp3122
asssg3080
(dp3123
g3062
(dp3124
g316
(lp3125
(g1460
g1410
tp3126
assg3013
(dp3127
g316
(lp3128
(g1460
g1410
tp3129
assg3031
(dp3130
g316
(lp3131
(g1460
g1496
tp3132
assssg358
g3096
sg359
(dp3133
g2998
(dp3134
sg3013
(dp3135
g3045
g3113
sg3080
g3127
ssg3031
(dp3136
g3045
g3116
sg3013
g3105
sg3080
g3130
sg3062
g3120
ssg3045
(dp3137
g2998
g3098
ssg3062
(dp3138
g3045
g3110
sg3080
g3124
ssg3080
(dp3139
g2998
g3101
sssg367
g3096
sbsg76
g3009
sg85
g1067
sg93
g3009
sg94
g368
((lp3140
(lp3141
g371
ag368
((lp3142
(lp3143
g374
ag371
aa(lp3144
g376
ag377
aa(lp3145
g379
ag380
aa(lp3146
g382
ag383
aa(lp3147
g385
ag386
aa(lp3148
g388
ag389
aa(lp3149
g391
ag392
aa(lp3150
g394
ag395
aatp3151
Rp3152
aa(lp3153
g399
ag368
((lp3154
(lp3155
g374
ag399
aa(lp3156
g403
ag404
aa(lp3157
g406
ag407
aa(lp3158
g409
ag410
aa(lp3159
g412
ag413
aa(lp3160
g415
ag416
aa(lp3161
g418
ag419
aa(lp3162
g421
ag422
aa(lp3163
g424
ag425
aa(lp3164
g427
ag428
aa(lp3165
g430
ag431
aa(lp3166
g433
ag434
aa(lp3167
g436
ag437
aa(lp3168
g439
ag440
aa(lp3169
g442
ag443
aa(lp3170
g445
ag446
aa(lp3171
g448
ag449
aa(lp3172
g451
ag452
aa(lp3173
g454
ag455
aatp3174
Rp3175
aa(lp3176
g459
ag368
((lp3177
(lp3178
g374
ag459
aa(lp3179
g463
ag464
aatp3180
Rp3181
aatp3182
Rp3183
sg98
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg1974
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g18
g7
Ntp3201
Rp3202
(dp3203
g22
(dp3204
sg24
g5
(g1421
g7
Ntp3205
Rp3206
(dp3207
g1425
(lp3208
g1454
asg29
g30
(g1429
tp3209
Rp3210
(dp3211
g53
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3212
sg1454
g37
sg51
g52
sbsg1437
(dp3213
g1460
Nssg1439
(lp3214
g1460
asg1441
Nsbsg82
Nsg88
I00
sg83
(dp3215
sg90
Nsg87
Nsg97
Nsg76
S'resample_o_csf'
p3216
sg85
S'montage_csf_gm_wm_0'
p3217
sg89
I00
sg91
Nsg92
I00
sg93
g3216
sg94
Nsg95
(lp3218
sg98
Nsb(dp3219
sg5
(g18
g7
Ntp3220
Rp3221
(dp3222
g22
(dp3223
sg24
g5
(g1421
g7
Ntp3224
Rp3225
(dp3226
g1425
(lp3227
S'overlay_csf'
p3228
aS'overlay_wm'
p3229
aS'overlay_gm'
p3230
ag1409
ag1427
asg29
g30
(g1429
tp3231
Rp3232
(dp3233
g53
I00
sg1427
S'montage_csf_gm_wm_a.png'
p3234
sg3230
g37
sg1435
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3235
sg3228
g37
sg3229
g37
sg1409
g37
sg51
g52
sbsg1437
(dp3236
g1427
Nssg1439
(lp3237
g1427
asg1441
Nsbsg82
Nsg76
g1442
sg83
(dp3238
sg85
g3217
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1442
sg94
Nsg95
(lp3239
sg97
Nsg98
Nsb(dp3240
sg5
(g18
g7
Ntp3241
Rp3242
(dp3243
g22
(dp3244
sg24
g5
(g104
g7
Ntp3245
Rp3246
(dp3247
g29
g30
(g108
tp3248
Rp3249
(dp3250
g51
g52
sS'resampled_overlay_csf'
p3251
g37
sS'resampled_overlay_gm'
p3252
g37
sg1494
g37
sg1495
g37
sg1493
g37
sS'resampled_overlay_wm'
p3253
g37
sbsg122
(lp3254
g1494
ag1495
ag1493
ag3251
ag3253
ag3252
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp3255
sg85
g3217
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp3256
sg97
Nsg98
Nsb(dp3257
sg5
(g18
g7
Ntp3258
Rp3259
(dp3260
g22
(dp3261
sg24
g5
(g1421
g7
Ntp3262
Rp3263
(dp3264
g1425
(lp3265
g1454
asg29
g30
(g1429
tp3266
Rp3267
(dp3268
g53
I00
sg1435
g3212
sg1454
g37
sg51
g52
sbsg1437
(dp3269
g1460
Nssg1439
(lp3270
g1460
asg1441
Nsbsg82
Nsg88
I00
sg83
(dp3271
sg90
Nsg87
Nsg97
Nsg76
S'resample_o_wm'
p3272
sg85
g3217
sg89
I00
sg91
Nsg92
I00
sg93
g3272
sg94
Nsg95
(lp3273
sg98
Nsb(dp3274
sg5
(g18
g7
Ntp3275
Rp3276
(dp3277
g22
(dp3278
sg24
g5
(g1421
g7
Ntp3279
Rp3280
(dp3281
g1425
(lp3282
g3228
ag3229
ag3230
ag1409
ag1427
asg29
g30
(g1429
tp3283
Rp3284
(dp3285
g53
I00
sg1427
S'montage_csf_gm_wm_s.png'
p3286
sg3230
g37
sg1435
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3287
sg3228
g37
sg3229
g37
sg1409
g37
sg51
g52
sbsg1437
(dp3288
g1427
Nssg1439
(lp3289
g1427
asg1441
Nsbsg82
Nsg76
g1516
sg83
(dp3290
sg85
g3217
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1516
sg94
Nsg95
(lp3291
sg97
Nsg98
Nsb(dp3292
sg5
(g18
g7
Ntp3293
Rp3294
(dp3295
g22
(dp3296
sg24
g5
(g1421
g7
Ntp3297
Rp3298
(dp3299
g1425
(lp3300
g1454
asg29
g30
(g1429
tp3301
Rp3302
(dp3303
g53
I00
sg1435
g3212
sg1454
g37
sg51
g52
sbsg1437
(dp3304
g1460
Nssg1439
(lp3305
g1460
asg1441
Nsbsg82
Nsg88
I00
sg83
(dp3306
sg90
Nsg87
Nsg97
Nsg76
S'resample_o_gm'
p3307
sg85
g3217
sg89
I00
sg91
Nsg92
I00
sg93
g3307
sg94
Nsg95
(lp3308
sg98
Nsb(dp3309
sg5
(g18
g7
Ntp3310
Rp3311
(dp3312
g22
(dp3313
sg24
g5
(g1421
g7
Ntp3314
Rp3315
(dp3316
g1425
(lp3317
g1454
asg29
g30
(g1429
tp3318
Rp3319
(dp3320
g53
I00
sg1435
g3212
sg1454
g37
sg51
g52
sbsg1437
(dp3321
g1460
Nssg1439
(lp3322
g1460
asg1441
Nsbsg82
Nsg76
g1462
sg83
(dp3323
sg85
g3217
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1462
sg94
Nsg95
(lp3324
sg97
Nsg98
Nsb(dp3325
sg5
(g18
g7
Ntp3326
Rp3327
(dp3328
g22
(dp3329
sg24
g5
(g104
g7
Ntp3330
Rp3331
(dp3332
g29
g30
(g108
tp3333
Rp3334
(dp3335
g51
g52
sg3230
g37
sg1409
g37
sg3228
g37
sg3229
g37
sbsg122
(lp3336
g1409
ag3228
ag3229
ag3230
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp3337
sg85
g3217
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp3338
sg97
Nsg98
Nsb(dp3339
ssg310
(dp3340
sg312
(dp3341
g3202
(dp3342
g3242
(dp3343
g316
(lp3344
(g1460
g3251
tp3345
assg3221
(dp3346
g316
(lp3347
(g1460
g3228
tp3348
assg3276
(dp3349
g316
(lp3350
(g1460
g3228
tp3351
asssg3221
(dp3352
g3242
(dp3353
g316
(lp3354
(g1427
g1494
tp3355
asssg3242
(dp3356
sg3259
(dp3357
g3242
(dp3358
g316
(lp3359
(g1460
g3253
tp3360
assg3221
(dp3361
g316
(lp3362
(g1460
g3229
tp3363
assg3276
(dp3364
g316
(lp3365
(g1460
g3229
tp3366
asssg3276
(dp3367
g3242
(dp3368
g316
(lp3369
(g1427
g1495
tp3370
asssg3294
(dp3371
g3242
(dp3372
g316
(lp3373
(g1460
g3252
tp3374
assg3221
(dp3375
g316
(lp3376
(g1460
g3230
tp3377
assg3276
(dp3378
g316
(lp3379
(g1460
g3230
tp3380
asssg3311
(dp3381
g3242
(dp3382
g316
(lp3383
(g1460
g1493
tp3384
assg3221
(dp3385
g316
(lp3386
(g1460
g1409
tp3387
assg3276
(dp3388
g316
(lp3389
(g1460
g1409
tp3390
asssg3327
(dp3391
g3202
(dp3392
g316
(lp3393
(g3228
g1454
tp3394
assg3259
(dp3395
g316
(lp3396
(g3229
g1454
tp3397
assg3311
(dp3398
g316
(lp3399
(g1409
g1454
tp3400
assg3294
(dp3401
g316
(lp3402
(g3230
g1454
tp3403
assssg358
g3341
sg359
(dp3404
g3202
(dp3405
g3327
g3392
ssg3221
(dp3406
g3202
g3346
sg3259
g3361
sg3311
g3385
sg3294
g3375
ssg3242
(dp3407
g3202
g3343
sg3221
g3353
sg3276
g3368
sg3259
g3358
sg3294
g3372
sg3311
g3382
ssg3259
(dp3408
g3327
g3395
ssg3276
(dp3409
g3202
g3349
sg3259
g3364
sg3311
g3388
sg3294
g3378
ssg3294
(dp3410
g3327
g3401
ssg3311
(dp3411
g3327
g3398
ssg3327
(dp3412
ssg367
g3341
sbsg76
g3217
sg85
g1067
sg93
g3217
sg94
g368
((lp3413
(lp3414
g371
ag368
((lp3415
(lp3416
g374
ag371
aa(lp3417
g376
ag377
aa(lp3418
g379
ag380
aa(lp3419
g382
ag383
aa(lp3420
g385
ag386
aa(lp3421
g388
ag389
aa(lp3422
g391
ag392
aa(lp3423
g394
ag395
aatp3424
Rp3425
aa(lp3426
g399
ag368
((lp3427
(lp3428
g374
ag399
aa(lp3429
g403
ag404
aa(lp3430
g406
ag407
aa(lp3431
g409
ag410
aa(lp3432
g412
ag413
aa(lp3433
g415
ag416
aa(lp3434
g418
ag419
aa(lp3435
g421
ag422
aa(lp3436
g424
ag425
aa(lp3437
g427
ag428
aa(lp3438
g430
ag431
aa(lp3439
g433
ag434
aa(lp3440
g436
ag437
aa(lp3441
g439
ag440
aa(lp3442
g442
ag443
aa(lp3443
g445
ag446
aa(lp3444
g448
ag449
aa(lp3445
g451
ag452
aa(lp3446
g454
ag455
aatp3447
Rp3448
aa(lp3449
g459
ag368
((lp3450
(lp3451
g374
ag459
aa(lp3452
g463
ag464
aatp3453
Rp3454
aatp3455
Rp3456
sg98
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g18
g7
Ntp3466
Rp3467
(dp3468
g22
(dp3469
sg24
g5
(g104
g7
Ntp3470
Rp3471
(dp3472
g29
g30
(g108
tp3473
Rp3474
(dp3475
g51
g52
sS'linear_reg_matrix'
p3476
g37
sS'bbr_schedule'
p3477
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3478
sS'anat_wm_segmentation'
p3479
g37
sS'anat_skull'
p3480
g37
sg2515
g37
sbsg122
(lp3481
g2515
ag3480
ag3476
ag3479
ag3477
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp3482
sg85
S'func_to_anat_bbreg_0'
p3483
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp3484
sg97
Nsg98
Nsb(dp3485
sg5
(g18
g7
Ntp3486
Rp3487
(dp3488
g22
(dp3489
sg24
g5
(g104
g7
Ntp3490
Rp3491
(dp3492
g29
g30
(g108
tp3493
Rp3494
(dp3495
S'func_to_anat_linear_xfm'
p3496
g37
sg51
g52
sS'anat_func'
p3497
g37
sbsg122
(lp3498
g3496
ag3497
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp3499
sg85
g3483
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp3500
sg97
Nsg98
Nsb(dp3501
sg5
(g18
g7
Ntp3502
Rp3503
(dp3504
g22
(dp3505
sg24
g5
(g140
g7
Ntp3506
Rp3507
(dp3508
g29
g30
(g144
tp3509
Rp3510
(dp3511
g53
I00
sg51
g52
sg148
S'-thr 0.5 -bin'
p3512
sg149
g37
sg150
g37
sg55
g37
sg151
g37
sg58
g59
sg65
g5
(g66
g67
(dp3513
g69
g70
stp3514
Rp3515
(dp3516
g74
S'environ_items'
p3517
sg76
g65
sbsg157
g37
sg77
g70
sg158
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'wm_bb_mask'
p3518
sg83
(dp3519
sg85
g3483
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g3518
sg94
Nsg95
(lp3520
sg97
Nsg98
Nsb(dp3521
sg5
(g18
g7
Ntp3522
Rp3523
(dp3524
g22
(dp3525
sg24
g5
(g230
g7
Ntp3526
Rp3527
(dp3528
g29
g30
(g234
tp3529
Rp3530
(dp3531
g238
g37
sg51
g52
sg239
g37
sg41
g37
sg240
g37
sg241
g37
sg242
g37
sg243
g37
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg254
g37
sg157
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg53
I00
sg259
g37
sg260
g37
sg55
g37
sg261
g37
sg262
g37
sg58
g59
sg263
g37
sg264
g37
sg265
g37
sg266
g37
sg267
g37
sg150
g37
sg268
g37
sg269
g37
sg270
g37
sg271
I6
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg276
g37
sg65
g5
(g66
g67
(dp3532
g69
g70
stp3533
Rp3534
(dp3535
g74
S'environ_items'
p3536
sg76
g65
sbsg282
g37
sg283
g37
sg77
g70
sg284
g37
sg285
g37
sg286
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'bbreg_func_to_anat'
p3537
sg83
(dp3538
sg85
g3483
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g3537
sg94
Nsg95
(lp3539
sg97
Nsg98
Nsb(dp3540
ssg310
(dp3541
sg312
(dp3542
g3467
(dp3543
g3523
(dp3544
g316
(lp3545
(g3477
g260
tp3546
a(g2515
g157
tp3547
a(g3480
g240
tp3548
a(g3476
g239
tp3549
assg3503
(dp3550
g316
(lp3551
(g3479
g157
tp3552
asssg3487
(dp3553
sg3503
(dp3554
g3523
(dp3555
g316
(lp3556
((g150
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3557
(ttp3558
g55
tp3559
asssg3523
(dp3560
g3487
(dp3561
g316
(lp3562
(g272
g3496
tp3563
a(g150
g3497
tp3564
assssg358
g3542
sg359
(dp3565
g3467
(dp3566
sg3487
(dp3567
g3523
g3561
ssg3503
(dp3568
g3467
g3550
ssg3523
(dp3569
g3467
g3544
sg3503
g3555
sssg367
g3542
sbsg76
g3483
sg85
g1067
sg93
g3483
sg94
g368
((lp3570
(lp3571
g371
ag368
((lp3572
(lp3573
g374
ag371
aa(lp3574
g376
ag377
aa(lp3575
g379
ag380
aa(lp3576
g382
ag383
aa(lp3577
g385
ag386
aa(lp3578
g388
ag389
aa(lp3579
g391
ag392
aa(lp3580
g394
ag395
aatp3581
Rp3582
aa(lp3583
g399
ag368
((lp3584
(lp3585
g374
ag399
aa(lp3586
g403
ag404
aa(lp3587
g406
ag407
aa(lp3588
g409
ag410
aa(lp3589
g412
ag413
aa(lp3590
g415
ag416
aa(lp3591
g418
ag419
aa(lp3592
g421
ag422
aa(lp3593
g424
ag425
aa(lp3594
g427
ag428
aa(lp3595
g430
ag431
aa(lp3596
g433
ag434
aa(lp3597
g436
ag437
aa(lp3598
g439
ag440
aa(lp3599
g442
ag443
aa(lp3600
g445
ag446
aa(lp3601
g448
ag449
aa(lp3602
g451
ag452
aa(lp3603
g454
ag455
aatp3604
Rp3605
aa(lp3606
g459
ag368
((lp3607
(lp3608
g374
ag459
aa(lp3609
g463
ag464
aatp3610
Rp3611
aatp3612
Rp3613
sg98
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g18
g7
Ntp3620
Rp3621
(dp3622
g22
(dp3623
sg24
g5
(g1421
g7
Ntp3624
Rp3625
(dp3626
g1425
(lp3627
S'measure_file'
p3628
asg29
g30
(g1429
tp3629
Rp3630
(dp3631
g53
I00
sg51
g52
sg1435
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g37
sbsg1437
(dp3633
S'snr_storefl'
p3634
Nssg1439
(lp3635
g3634
asg1441
Nsbsg82
Nsg76
S'snr_val0'
p3636
sg83
(dp3637
sg85
g1067
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g3636
sg94
Nsg95
(lp3638
sg97
Nsg98
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g18
g7
Ntp3648
Rp3649
(dp3650
g22
(dp3651
sg24
g5
(g1421
g7
Ntp3652
Rp3653
(dp3654
g1425
(lp3655
g3628
ag1863
asg29
g30
(g1429
tp3656
Rp3657
(dp3658
g53
I00
sg51
g52
sg1435
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g37
sg1863
S'snr'
p3660
sbsg1437
(dp3661
g1870
Nssg1439
(lp3662
g1870
asg1441
Nsbsg82
Nsg88
I00
sg83
(dp3663
sg90
Nsg87
Nsg97
Nsg76
S'hist_snr_0'
p3664
sg85
g1067
sg89
I00
sg91
Nsg92
I00
sg93
g3664
sg94
Nsg95
(lp3665
sg98
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g18
g7
Ntp3678
Rp3679
(dp3680
g22
(dp3681
sg24
g5
(g104
g7
Ntp3682
Rp3683
(dp3684
g29
g30
(g108
tp3685
Rp3686
(dp3687
g51
g52
sS'scan'
p3688
g37
sS'subject'
p3689
S'13_1563555606'
p3690
sbsg122
(lp3691
g3689
ag3688
asg124
I01
sbsg82
Nsg76
S'inputnode'
p3692
sg83
(dp3693
sg85
S'func_gather_0'
p3694
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
(lp3695
(g3688
(lp3696
S'rest_1_rest'
p3697
atp3698
asg92
I00
sg93
g3692
sg94
Nsg95
(lp3699
sg97
Nsg98
Nsb(dp3700
sg5
(g18
g7
Ntp3701
Rp3702
(dp3703
g22
(dp3704
sg24
g5
(g1421
g7
Ntp3705
Rp3706
(dp3707
g1425
(lp3708
g3688
aS'rest_dict'
p3709
asg29
g30
(g1429
tp3710
Rp3711
(dp3712
g53
I00
sg3709
(dp3713
g3697
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-40/KKI2009-40-fMRI.nii'
p3714
ssg1435
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3715
sg51
g52
sg3688
g37
sbsg1437
(dp3716
g1951
Nssg1439
(lp3717
g1951
asg1441
Nsbsg82
Nsg76
S'selectrest'
p3718
sg83
(dp3719
sg85
g3694
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g3718
sg94
Nsg95
(lp3720
sg97
Nsg98
Nsb(dp3721
sg5
(g18
g7
Ntp3722
Rp3723
(dp3724
g22
(dp3725
sg24
g5
(g104
g7
Ntp3726
Rp3727
(dp3728
g29
g30
(g108
tp3729
Rp3730
(dp3731
g51
g52
sg3688
g37
sg1951
g37
sg3689
g37
sbsg122
(lp3732
g3689
ag1951
ag3688
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp3733
sg85
g3694
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp3734
sg97
Nsg98
Nsb(dp3735
ssg310
(dp3736
sg312
(dp3737
g3679
(dp3738
g3723
(dp3739
g316
(lp3740
(g3689
g3689
tp3741
a(g3688
g3688
tp3742
assg3702
(dp3743
g316
(lp3744
(g3688
g3688
tp3745
asssg3702
(dp3746
g3723
(dp3747
g316
(lp3748
(g1951
g1951
tp3749
asssg3723
(dp3750
ssg358
g3737
sg359
(dp3751
g3679
(dp3752
sg3702
(dp3753
g3679
g3743
ssg3723
(dp3754
g3679
g3739
sg3702
g3747
sssg367
g3737
sbsg76
g3694
sg85
g1067
sg93
g3694
sg94
g368
((lp3755
(lp3756
g371
ag368
((lp3757
(lp3758
g374
ag371
aa(lp3759
g376
ag377
aa(lp3760
g379
ag380
aa(lp3761
g382
ag383
aa(lp3762
g385
ag386
aa(lp3763
g388
ag389
aa(lp3764
g391
ag392
aa(lp3765
g394
ag395
aatp3766
Rp3767
aa(lp3768
g399
ag368
((lp3769
(lp3770
g374
ag399
aa(lp3771
g403
ag404
aa(lp3772
g406
ag407
aa(lp3773
g409
ag410
aa(lp3774
g412
ag413
aa(lp3775
g415
ag416
aa(lp3776
g418
ag419
aa(lp3777
g421
ag422
aa(lp3778
g424
ag425
aa(lp3779
g427
ag428
aa(lp3780
g430
ag431
aa(lp3781
g433
ag434
aa(lp3782
g436
ag437
aa(lp3783
g439
ag440
aa(lp3784
g442
ag443
aa(lp3785
g445
ag446
aa(lp3786
g448
ag449
aa(lp3787
g451
ag452
aa(lp3788
g454
ag455
aatp3789
Rp3790
aa(lp3791
g459
ag368
((lp3792
(lp3793
g374
ag459
aa(lp3794
g463
ag464
aatp3795
Rp3796
aatp3797
Rp3798
sg98
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g18
g7
Ntp3808
Rp3809
(dp3810
g22
(dp3811
sg24
g5
(g1149
g7
Ntp3812
Rp3813
(dp3814
g29
g30
(g1153
tp3815
Rp3816
(dp3817
g53
I00
sg1157
g37
sg157
g37
sg1158
g37
sg150
g37
sg269
g37
sg55
g37
sg243
g37
sg1159
g37
sg1160
g1820
sg58
g59
sg65
g5
(g66
g67
(dp3818
g69
g70
stp3819
Rp3820
(dp3821
g74
S'environ_items'
p3822
sg76
g65
sbsg1166
g37
sg1167
g37
sg77
g70
sg1168
g37
sg1169
g37
sg51
g52
sg1170
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_mni_fsl_warp_0'
p3823
sg83
(dp3824
sg85
g1067
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g3823
sg94
Nsg95
(lp3825
sg97
Nsg98
Nsbg150
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g18
g7
Ntp3835
Rp3836
(dp3837
g22
(dp3838
sg24
g5
(g1421
g7
Ntp3839
Rp3840
(dp3841
g1425
(lp3842
S'data_file'
p3843
aS'template'
p3844
ag77
asg29
g30
(g1429
tp3845
Rp3846
(dp3847
g53
I00
sg51
g52
sg3843
g37
sg1435
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3848
sg3844
g37
sg77
g37
sbsg1437
(dp3849
g150
Nssg1439
(lp3850
g150
asg1441
Nsbsg82
Nsg76
S'timeseries_voxel'
p3851
sg83
(dp3852
sg85
S'voxel_timeseries_0'
p3853
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g3851
sg94
Nsg95
(lp3854
sg97
Nsg98
Nsb(dp3855
sg5
(g18
g7
Ntp3856
Rp3857
(dp3858
g22
(dp3859
sg24
g5
(g104
g7
Ntp3860
Rp3861
(dp3862
g29
g30
(g108
tp3863
Rp3864
(dp3865
g51
g52
sg77
(lp3866
I01
aI01
asg1951
g37
sbsg122
(lp3867
g1951
ag77
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp3868
sg85
g3853
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp3869
sg97
Nsg98
Nsb(dp3870
sg5
(g18
g7
Ntp3871
Rp3872
(dp3873
g22
(dp3874
sg24
g5
(g104
g7
Ntp3875
Rp3876
(dp3877
g29
g30
(g108
tp3878
Rp3879
(dp3880
g51
g52
sS'mask_outputs'
p3881
g37
sbsg122
(lp3882
g3881
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp3883
sg85
g3853
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp3884
sg97
Nsg98
Nsb(dp3885
sg5
(g18
g7
Ntp3886
Rp3887
(dp3888
g22
(dp3889
sg24
g5
(g104
g7
Ntp3890
Rp3891
(dp3892
g29
g30
(g108
tp3893
Rp3894
(dp3895
g51
g52
sg1952
g37
sbsg122
(lp3896
g1952
asg124
I01
sbsg82
Nsg76
S'input_mask'
p3897
sg83
(dp3898
sg85
g3853
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g3897
sg94
Nsg95
(lp3899
sg97
Nsg98
Nsb(dp3900
ssg310
(dp3901
sg312
(dp3902
g3836
(dp3903
g3872
(dp3904
g316
(lp3905
(g150
g3881
tp3906
asssg3857
(dp3907
g3836
(dp3908
g316
(lp3909
(g1951
g3843
tp3910
a(g77
g77
tp3911
asssg3872
(dp3912
sg3887
(dp3913
g3836
(dp3914
g316
(lp3915
(g1952
g3844
tp3916
assssg358
g3902
sg359
(dp3917
g3836
(dp3918
g3857
g3908
sg3887
g3914
ssg3857
(dp3919
sg3872
(dp3920
g3836
g3904
ssg3887
(dp3921
ssg367
g3902
sbsg76
g3853
sg85
g1067
sg93
g3853
sg94
g368
((lp3922
(lp3923
g371
ag368
((lp3924
(lp3925
g374
ag371
aa(lp3926
g376
ag377
aa(lp3927
g379
ag380
aa(lp3928
g382
ag383
aa(lp3929
g385
ag386
aa(lp3930
g388
ag389
aa(lp3931
g391
ag392
aa(lp3932
g394
ag395
aatp3933
Rp3934
aa(lp3935
g399
ag368
((lp3936
(lp3937
g374
ag399
aa(lp3938
g403
ag404
aa(lp3939
g406
ag407
aa(lp3940
g409
ag410
aa(lp3941
g412
ag413
aa(lp3942
g415
ag416
aa(lp3943
g418
ag419
aa(lp3944
g421
ag422
aa(lp3945
g424
ag425
aa(lp3946
g427
ag428
aa(lp3947
g430
ag431
aa(lp3948
g433
ag434
aa(lp3949
g436
ag437
aa(lp3950
g439
ag440
aa(lp3951
g442
ag443
aa(lp3952
g445
ag446
aa(lp3953
g448
ag449
aa(lp3954
g451
ag452
aa(lp3955
g454
ag455
aatp3956
Rp3957
aa(lp3958
g459
ag368
((lp3959
(lp3960
g374
ag459
aa(lp3961
g463
ag464
aatp3962
Rp3963
aatp3964
Rp3965
sg98
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g18
g7
Ntp3986
Rp3987
(dp3988
g22
(dp3989
sg24
g5
(g1421
g7
Ntp3990
Rp3991
(dp3992
g1425
(lp3993
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp3994
Rp3995
(dp3996
g53
I00
sg1427
S'mni_anat_a.png'
p3997
sg1410
g37
sg1428
g1434
sg1435
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3998
sg1409
g37
sg51
g52
sbsg1437
(dp3999
g1427
Nssg1439
(lp4000
g1427
asg1441
Nsbsg82
Nsg76
g1442
sg83
(dp4001
sg85
S'montage_mni_anat_0'
p4002
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1442
sg94
Nsg95
(lp4003
sg97
Nsg98
Nsb(dp4004
sg5
(g18
g7
Ntp4005
Rp4006
(dp4007
g22
(dp4008
sg24
g5
(g1421
g7
Ntp4009
Rp4010
(dp4011
g1425
(lp4012
g1454
asg29
g30
(g1429
tp4013
Rp4014
(dp4015
g53
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4016
sg1454
g37
sg51
g52
sbsg1437
(dp4017
g1460
Nssg1439
(lp4018
g1460
asg1441
Nsbsg82
Nsg76
g1462
sg83
(dp4019
sg85
g4002
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1462
sg94
Nsg95
(lp4020
sg97
Nsg98
Nsb(dp4021
sg5
(g18
g7
Ntp4022
Rp4023
(dp4024
g22
(dp4025
sg24
g5
(g1421
g7
Ntp4026
Rp4027
(dp4028
g1425
(lp4029
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp4030
Rp4031
(dp4032
g53
I00
sg1427
S'mni_anat_s.png'
p4033
sg1410
g37
sg1428
g1434
sg1435
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4034
sg1409
g37
sg51
g52
sbsg1437
(dp4035
g1427
Nssg1439
(lp4036
g1427
asg1441
Nsbsg82
Nsg76
g1516
sg83
(dp4037
sg85
g4002
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1516
sg94
Nsg95
(lp4038
sg97
Nsg98
Nsb(dp4039
sg5
(g18
g7
Ntp4040
Rp4041
(dp4042
g22
(dp4043
sg24
g5
(g1421
g7
Ntp4044
Rp4045
(dp4046
g1425
(lp4047
g1454
asg29
g30
(g1429
tp4048
Rp4049
(dp4050
g53
I00
sg1435
g4016
sg1454
g37
sg51
g52
sbsg1437
(dp4051
g1460
Nssg1439
(lp4052
g1460
asg1441
Nsbsg82
Nsg88
I00
sg83
(dp4053
sg90
Nsg87
Nsg97
Nsg76
g1480
sg85
g4002
sg89
I00
sg91
Nsg92
I00
sg93
g1480
sg94
Nsg95
(lp4054
sg98
Nsb(dp4055
sg5
(g18
g7
Ntp4056
Rp4057
(dp4058
g22
(dp4059
sg24
g5
(g104
g7
Ntp4060
Rp4061
(dp4062
g29
g30
(g108
tp4063
Rp4064
(dp4065
g51
g52
sg1409
g37
sg1410
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p4066
sbsg122
(lp4067
g1409
ag1410
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp4068
sg85
g4002
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp4069
sg97
Nsg98
Nsb(dp4070
sg5
(g18
g7
Ntp4071
Rp4072
(dp4073
g22
(dp4074
sg24
g5
(g104
g7
Ntp4075
Rp4076
(dp4077
g29
g30
(g108
tp4078
Rp4079
(dp4080
g51
g52
sg1493
g37
sg1494
g37
sg1495
g37
sg1496
g37
sbsg122
(lp4081
g1494
ag1495
ag1493
ag1496
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp4082
sg85
g4002
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp4083
sg97
Nsg98
Nsb(dp4084
ssg310
(dp4085
sg312
(dp4086
g3987
(dp4087
g4072
(dp4088
g316
(lp4089
(g1427
g1494
tp4090
asssg4006
(dp4091
g3987
(dp4092
g316
(lp4093
(g1460
g1409
tp4094
assg4072
(dp4095
g316
(lp4096
(g1460
g1493
tp4097
assg4023
(dp4098
g316
(lp4099
(g1460
g1409
tp4100
asssg4023
(dp4101
g4072
(dp4102
g316
(lp4103
(g1427
g1495
tp4104
asssg4041
(dp4105
g3987
(dp4106
g316
(lp4107
(g1460
g1410
tp4108
assg4072
(dp4109
g316
(lp4110
(g1460
g1496
tp4111
assg4023
(dp4112
g316
(lp4113
(g1460
g1410
tp4114
asssg4057
(dp4115
g4041
(dp4116
g316
(lp4117
(g1410
g1454
tp4118
assg4006
(dp4119
g316
(lp4120
(g1409
g1454
tp4121
asssg4072
(dp4122
ssg358
g4086
sg359
(dp4123
g3987
(dp4124
g4041
g4106
sg4006
g4092
ssg4006
(dp4125
g4057
g4119
ssg4023
(dp4126
g4041
g4112
sg4006
g4098
ssg4041
(dp4127
g4057
g4116
ssg4057
(dp4128
sg4072
(dp4129
g4041
g4109
sg4006
g4095
sg4023
g4102
sg3987
g4088
sssg367
g4086
sbsg76
g4002
sg85
g1067
sg93
g4002
sg94
g368
((lp4130
(lp4131
g371
ag368
((lp4132
(lp4133
g374
ag371
aa(lp4134
g376
ag377
aa(lp4135
g379
ag380
aa(lp4136
g382
ag383
aa(lp4137
g385
ag386
aa(lp4138
g388
ag389
aa(lp4139
g391
ag392
aa(lp4140
g394
ag395
aatp4141
Rp4142
aa(lp4143
g399
ag368
((lp4144
(lp4145
g374
ag399
aa(lp4146
g403
ag404
aa(lp4147
g406
ag407
aa(lp4148
g409
ag410
aa(lp4149
g412
ag413
aa(lp4150
g415
ag416
aa(lp4151
g418
ag419
aa(lp4152
g421
ag422
aa(lp4153
g424
ag425
aa(lp4154
g427
ag428
aa(lp4155
g430
ag431
aa(lp4156
g433
ag434
aa(lp4157
g436
ag437
aa(lp4158
g439
ag440
aa(lp4159
g442
ag443
aa(lp4160
g445
ag446
aa(lp4161
g448
ag449
aa(lp4162
g451
ag452
aa(lp4163
g454
ag455
aatp4164
Rp4165
aa(lp4166
g459
ag368
((lp4167
(lp4168
g374
ag459
aa(lp4169
g463
ag464
aatp4170
Rp4171
aatp4172
Rp4173
sg98
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg1996
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g18
g7
Ntp4188
Rp4189
(dp4190
g22
(dp4191
sg24
g5
(g1149
g7
Ntp4192
Rp4193
(dp4194
g29
g30
(g1153
tp4195
Rp4196
(dp4197
g53
I00
sg1157
g37
sg157
g37
sg1158
g37
sg150
g37
sg269
g37
sg55
g37
sg243
S'nn'
p4198
sg1159
g37
sg1160
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg58
g59
sg65
g5
(g66
g67
(dp4200
g69
g70
stp4201
Rp4202
(dp4203
g74
S'environ_items'
p4204
sg76
g65
sbsg1166
g37
sg1167
g37
sg77
g70
sg1168
g37
sg1169
g37
sg51
g52
sg1170
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_mni_fsl_warp_mask_0'
p4205
sg83
(dp4206
sg85
g1067
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4205
sg94
Nsg95
(lp4207
sg97
Nsg98
Nsbg150
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g18
g7
Ntp4217
Rp4218
(dp4219
g22
(dp4220
sg24
g5
(g1421
g7
Ntp4221
Rp4222
(dp4223
g1425
(lp4224
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp4225
Rp4226
(dp4227
g53
I00
sg1427
S'skull_vis_a.png'
p4228
sg1410
g37
sg1428
g1434
sg1435
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4229
sg1409
g37
sg51
g52
sbsg1437
(dp4230
g1427
Nssg1439
(lp4231
g1427
asg1441
Nsbsg82
Nsg76
g1442
sg83
(dp4232
sg85
S'montage_skull_0'
p4233
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1442
sg94
Nsg95
(lp4234
sg97
Nsg98
Nsb(dp4235
sg5
(g18
g7
Ntp4236
Rp4237
(dp4238
g22
(dp4239
sg24
g5
(g1421
g7
Ntp4240
Rp4241
(dp4242
g1425
(lp4243
g1454
asg29
g30
(g1429
tp4244
Rp4245
(dp4246
g53
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4247
sg1454
g37
sg51
g52
sbsg1437
(dp4248
g1460
Nssg1439
(lp4249
g1460
asg1441
Nsbsg82
Nsg76
g1462
sg83
(dp4250
sg85
g4233
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1462
sg94
Nsg95
(lp4251
sg97
Nsg98
Nsb(dp4252
sg5
(g18
g7
Ntp4253
Rp4254
(dp4255
g22
(dp4256
sg24
g5
(g104
g7
Ntp4257
Rp4258
(dp4259
g29
g30
(g108
tp4260
Rp4261
(dp4262
g51
g52
sg1409
g37
sg1410
g37
sbsg122
(lp4263
g1409
ag1410
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp4264
sg85
g4233
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp4265
sg97
Nsg98
Nsb(dp4266
sg5
(g18
g7
Ntp4267
Rp4268
(dp4269
g22
(dp4270
sg24
g5
(g1421
g7
Ntp4271
Rp4272
(dp4273
g1425
(lp4274
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp4275
Rp4276
(dp4277
g53
I00
sg1427
S'skull_vis_s.png'
p4278
sg1410
g37
sg1428
g1434
sg1435
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4279
sg1409
g37
sg51
g52
sbsg1437
(dp4280
g1427
Nssg1439
(lp4281
g1427
asg1441
Nsbsg82
Nsg76
g1516
sg83
(dp4282
sg85
g4233
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g1516
sg94
Nsg95
(lp4283
sg97
Nsg98
Nsb(dp4284
sg5
(g18
g7
Ntp4285
Rp4286
(dp4287
g22
(dp4288
sg24
g5
(g1421
g7
Ntp4289
Rp4290
(dp4291
g1425
(lp4292
g1454
asg29
g30
(g1429
tp4293
Rp4294
(dp4295
g53
I00
sg1435
g4247
sg1454
g37
sg51
g52
sbsg1437
(dp4296
g1460
Nssg1439
(lp4297
g1460
asg1441
Nsbsg82
Nsg88
I00
sg83
(dp4298
sg90
Nsg87
Nsg97
Nsg76
g1480
sg85
g4233
sg89
I00
sg91
Nsg92
I00
sg93
g1480
sg94
Nsg95
(lp4299
sg98
Nsb(dp4300
sg5
(g18
g7
Ntp4301
Rp4302
(dp4303
g22
(dp4304
sg24
g5
(g104
g7
Ntp4305
Rp4306
(dp4307
g29
g30
(g108
tp4308
Rp4309
(dp4310
g51
g52
sg1493
g37
sg1494
g37
sg1495
g37
sg1496
g37
sbsg122
(lp4311
g1494
ag1495
ag1493
ag1496
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp4312
sg85
g4233
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp4313
sg97
Nsg98
Nsb(dp4314
ssg310
(dp4315
sg312
(dp4316
g4218
(dp4317
g4302
(dp4318
g316
(lp4319
(g1427
g1494
tp4320
asssg4237
(dp4321
g4218
(dp4322
g316
(lp4323
(g1460
g1409
tp4324
assg4268
(dp4325
g316
(lp4326
(g1460
g1409
tp4327
assg4302
(dp4328
g316
(lp4329
(g1460
g1493
tp4330
asssg4254
(dp4331
g4286
(dp4332
g316
(lp4333
(g1410
g1454
tp4334
assg4237
(dp4335
g316
(lp4336
(g1409
g1454
tp4337
asssg4268
(dp4338
g4302
(dp4339
g316
(lp4340
(g1427
g1495
tp4341
asssg4286
(dp4342
g4218
(dp4343
g316
(lp4344
(g1460
g1410
tp4345
assg4268
(dp4346
g316
(lp4347
(g1460
g1410
tp4348
assg4302
(dp4349
g316
(lp4350
(g1460
g1496
tp4351
asssg4302
(dp4352
ssg358
g4316
sg359
(dp4353
g4218
(dp4354
g4286
g4343
sg4237
g4322
ssg4237
(dp4355
g4254
g4335
ssg4254
(dp4356
sg4268
(dp4357
g4286
g4346
sg4237
g4325
ssg4286
(dp4358
g4254
g4332
ssg4302
(dp4359
g4286
g4349
sg4237
g4328
sg4268
g4339
sg4218
g4318
sssg367
g4316
sbsg76
g4233
sg85
g1067
sg93
g4233
sg94
g368
((lp4360
(lp4361
g371
ag368
((lp4362
(lp4363
g374
ag371
aa(lp4364
g376
ag377
aa(lp4365
g379
ag380
aa(lp4366
g382
ag383
aa(lp4367
g385
ag386
aa(lp4368
g388
ag389
aa(lp4369
g391
ag392
aa(lp4370
g394
ag395
aatp4371
Rp4372
aa(lp4373
g399
ag368
((lp4374
(lp4375
g374
ag399
aa(lp4376
g403
ag404
aa(lp4377
g406
ag407
aa(lp4378
g409
ag410
aa(lp4379
g412
ag413
aa(lp4380
g415
ag416
aa(lp4381
g418
ag419
aa(lp4382
g421
ag422
aa(lp4383
g424
ag425
aa(lp4384
g427
ag428
aa(lp4385
g430
ag431
aa(lp4386
g433
ag434
aa(lp4387
g436
ag437
aa(lp4388
g439
ag440
aa(lp4389
g442
ag443
aa(lp4390
g445
ag446
aa(lp4391
g448
ag449
aa(lp4392
g451
ag452
aa(lp4393
g454
ag455
aatp4394
Rp4395
aa(lp4396
g459
ag368
((lp4397
(lp4398
g374
ag459
aa(lp4399
g463
ag464
aatp4400
Rp4401
aatp4402
Rp4403
sg98
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2683
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2684
(g5
(g18
g7
Ntp4413
Rp4414
(dp4415
g22
(dp4416
sg24
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g29
g30
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g53
I00
sg51
g52
sS'tpattern'
p4425
g37
sg150
g37
sS'tr'
p4426
g37
sg55
g37
sg243
g37
sg2254
g2321
sS'tzero'
p4427
g37
sS'ignore'
p4428
g37
sS'rltplus'
p4429
g37
sg58
g59
sS'tslice'
p4430
g37
sg157
g37
sS'rlt'
p4431
g37
sg65
g5
(g66
g67
(dp4432
tp4433
Rp4434
(dp4435
g74
S'environ_items'
p4436
sg76
g65
sbsbsg2261
g2321
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_slice_timing_correction_0'
p4437
sg83
(dp4438
sg85
g1067
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4437
sg94
Nsg95
(lp4439
sg97
Nsg98
Nsbg150
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g18
g7
Ntp4449
Rp4450
(dp4451
g22
(dp4452
sg24
g5
(g104
g7
Ntp4453
Rp4454
(dp4455
g29
g30
(g108
tp4456
Rp4457
(dp4458
g51
g52
sS'roi'
p4459
g37
sbsg122
(lp4460
g4459
asg124
I01
sbsg82
Nsg76
S'input_roi'
p4461
sg83
(dp4462
sg85
S'roi_timeseries_0'
p4463
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4461
sg94
Nsg95
(lp4464
sg97
Nsg98
Nsb(dp4465
sg5
(g18
g7
Ntp4466
Rp4467
(dp4468
g22
(dp4469
sg24
g5
(g104
g7
Ntp4470
Rp4471
(dp4472
g29
g30
(g108
tp4473
Rp4474
(dp4475
g51
g52
sS'roi_outputs'
p4476
g37
sbsg122
(lp4477
g4476
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp4478
sg85
g4463
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp4479
sg97
Nsg98
Nsb(dp4480
sg5
(g18
g7
Ntp4481
Rp4482
(dp4483
g22
(dp4484
sg24
g5
(g104
g7
Ntp4485
Rp4486
(dp4487
g29
g30
(g108
tp4488
Rp4489
(dp4490
g51
g52
sg77
(lp4491
I01
aI01
asg1951
g37
sbsg122
(lp4492
g1951
ag77
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp4493
sg85
g4463
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp4494
sg97
Nsg98
Nsb(dp4495
sg5
(g18
g7
Ntp4496
Rp4497
(dp4498
g22
(dp4499
sg24
g5
(g1421
g7
Ntp4500
Rp4501
(dp4502
g1425
(lp4503
g3843
ag3844
ag77
asg29
g30
(g1429
tp4504
Rp4505
(dp4506
g53
I00
sg51
g52
sg3843
g37
sg1435
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4507
sg3844
g37
sg77
g37
sbsg1437
(dp4508
g150
Nssg1439
(lp4509
g150
asg1441
Nsbsg82
Nsg76
S'timeseries_roi'
p4510
sg83
(dp4511
sg85
g4463
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4510
sg94
Nsg95
(lp4512
sg97
Nsg98
Nsb(dp4513
ssg310
(dp4514
sg312
(dp4515
g4450
(dp4516
g4497
(dp4517
g316
(lp4518
(g4459
g3844
tp4519
asssg4467
(dp4520
sg4482
(dp4521
g4497
(dp4522
g316
(lp4523
(g1951
g3843
tp4524
a(g77
g77
tp4525
asssg4497
(dp4526
g4467
(dp4527
g316
(lp4528
(g150
g4476
tp4529
assssg358
g4515
sg359
(dp4530
g4450
(dp4531
sg4467
(dp4532
g4497
g4527
ssg4482
(dp4533
sg4497
(dp4534
g4450
g4517
sg4482
g4522
sssg367
g4515
sbsg76
g4463
sg85
g1067
sg93
g4463
sg94
g368
((lp4535
(lp4536
g371
ag368
((lp4537
(lp4538
g374
ag371
aa(lp4539
g376
ag377
aa(lp4540
g379
ag380
aa(lp4541
g382
ag383
aa(lp4542
g385
ag386
aa(lp4543
g388
ag389
aa(lp4544
g391
ag392
aa(lp4545
g394
ag395
aatp4546
Rp4547
aa(lp4548
g399
ag368
((lp4549
(lp4550
g374
ag399
aa(lp4551
g403
ag404
aa(lp4552
g406
ag407
aa(lp4553
g409
ag410
aa(lp4554
g412
ag413
aa(lp4555
g415
ag416
aa(lp4556
g418
ag419
aa(lp4557
g421
ag422
aa(lp4558
g424
ag425
aa(lp4559
g427
ag428
aa(lp4560
g430
ag431
aa(lp4561
g433
ag434
aa(lp4562
g436
ag437
aa(lp4563
g439
ag440
aa(lp4564
g442
ag443
aa(lp4565
g445
ag446
aa(lp4566
g448
ag449
aa(lp4567
g451
ag452
aa(lp4568
g454
ag455
aatp4569
Rp4570
aa(lp4571
g459
ag368
((lp4572
(lp4573
g374
ag459
aa(lp4574
g463
ag464
aatp4575
Rp4576
aatp4577
Rp4578
sg98
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g18
g7
Ntp4589
Rp4590
(dp4591
g22
(dp4592
sg24
g5
(g230
g7
Ntp4593
Rp4594
(dp4595
g29
g30
(g234
tp4596
Rp4597
(dp4598
g238
g37
sg51
g52
sg239
g37
sg41
g37
sg240
g37
sg241
g37
sg242
g37
sg243
g244
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg254
g37
sg157
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg53
I00
sg259
g37
sg260
g37
sg55
S'-applyisoxfm 2'
p4599
sg261
g37
sg262
g37
sg58
g59
sg263
g37
sg264
g37
sg265
g37
sg266
g37
sg267
g37
sg150
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg276
g37
sg65
g5
(g66
g67
(dp4600
g69
g70
stp4601
Rp4602
(dp4603
g74
S'environ_items'
p4604
sg76
g65
sbsg282
g37
sg283
g37
sg77
g70
sg284
g37
sg285
g37
sg286
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'csf_anat_to_2mm_flirt_applyxfm'
p4605
sg83
(dp4606
sg85
S'nuisance_0'
p4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4605
sg94
Nsg95
(lp4608
sg97
Nsg98
Nsb(dp4609
sg5
(g18
g7
Ntp4610
Rp4611
(dp4612
g22
(dp4613
sg24
g5
(g104
g7
Ntp4614
Rp4615
(dp4616
g29
g30
(g108
tp4617
Rp4618
(dp4619
S'motion_components'
p4620
g37
sS'anat_to_mni_initial_xfm'
p4621
g37
sS'lat_ventricles_mask'
p4622
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4623
sg962
g37
sS'anat_to_mni_rigid_xfm'
p4624
g37
sS'compcor_ncomponents'
p4625
g37
sS'anat_to_mni_affine_xfm'
p4626
g37
sS'selector'
p4627
g37
sg961
g37
sS'template_brain'
p4628
g37
sg3496
g37
sS'mni_to_anat_linear_xfm'
p4629
g37
sg963
g37
sg51
g52
sg3689
g37
sbsg122
(lp4630
g3689
ag961
ag963
ag962
ag4629
ag4621
ag4624
ag4626
ag3496
ag4622
ag4620
ag4627
ag4625
ag4628
asg124
I01
sbsg82
Nsg76
g125
sg83
(dp4631
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g125
sg94
Nsg95
(lp4632
sg97
Nsg98
Nsb(dp4633
sg5
(g18
g7
Ntp4634
Rp4635
(dp4636
g22
(dp4637
sg24
g5
(g230
g7
Ntp4638
Rp4639
(dp4640
g29
g30
(g234
tp4641
Rp4642
(dp4643
g238
g37
sg51
g52
sg239
g37
sg41
g37
sg240
g37
sg241
g37
sg242
g37
sg243
g244
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg254
g37
sg157
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg53
I00
sg259
g37
sg260
g37
sg55
g4599
sg261
g37
sg262
g37
sg58
g59
sg263
g37
sg264
g37
sg265
g37
sg266
g37
sg267
g37
sg150
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg276
g37
sg65
g5
(g66
g67
(dp4644
g69
g70
stp4645
Rp4646
(dp4647
g74
S'environ_items'
p4648
sg76
g65
sbsg282
g37
sg283
g37
sg77
g70
sg284
g37
sg285
g37
sg286
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'gm_anat_to_2mm_flirt_applyxfm'
p4649
sg83
(dp4650
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4649
sg94
Nsg95
(lp4651
sg97
Nsg98
Nsb(dp4652
sg5
(g18
g7
Ntp4653
Rp4654
(dp4655
g22
(dp4656
sg24
g5
(g1421
g7
Ntp4657
Rp4658
(dp4659
g1425
(lp4660
g3843
aS'ventricles_mask_file'
p4661
aS'wm_seg_file'
p4662
aS'csf_seg_file'
p4663
aS'gm_seg_file'
p4664
ag689
ag934
ag707
asg29
g30
(g1429
tp4665
Rp4666
(dp4667
g53
I00
sg51
g52
sg689
g37
sg934
g37
sg3843
g37
sg1435
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4668
sg4664
g37
sg4661
g37
sg707
g37
sg4663
g37
sg4662
g37
sbsg1437
(dp4669
S'file_gm'
p4670
NsS'file_wm'
p4671
NsS'file_csf'
p4672
Nssg1439
(lp4673
g4671
ag4672
ag4670
asg1441
Nsbsg82
Nsg76
S'tissue_masks'
p4674
sg83
(dp4675
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4674
sg94
Nsg95
(lp4676
sg97
Nsg98
Nsb(dp4677
sg5
(g18
g7
Ntp4678
Rp4679
(dp4680
g22
(dp4681
sg24
g5
(g230
g7
Ntp4682
Rp4683
(dp4684
g29
g30
(g234
tp4685
Rp4686
(dp4687
g238
g37
sg51
g52
sg239
g37
sg41
g37
sg240
g37
sg241
g37
sg242
g37
sg243
g244
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg254
g37
sg157
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg53
I00
sg259
g37
sg260
g37
sg55
g4599
sg261
g37
sg262
g37
sg58
g59
sg263
g37
sg264
g37
sg265
g37
sg266
g37
sg267
g37
sg150
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg276
g37
sg65
g5
(g66
g67
(dp4688
g69
g70
stp4689
Rp4690
(dp4691
g74
S'environ_items'
p4692
sg76
g65
sbsg282
g37
sg283
g37
sg77
g70
sg284
g37
sg285
g37
sg286
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'wm_anat_to_2mm_flirt_applyxfm'
p4693
sg83
(dp4694
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4693
sg94
Nsg95
(lp4695
sg97
Nsg98
Nsb(dp4696
sg5
(g18
g7
Ntp4697
Rp4698
(dp4699
g22
(dp4700
sg24
g5
(g230
g7
Ntp4701
Rp4702
(dp4703
g29
g30
(g234
tp4704
Rp4705
(dp4706
g238
g37
sg51
g52
sg239
g37
sg41
g37
sg240
g37
sg241
g37
sg242
g37
sg243
g37
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg254
g37
sg157
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg53
I00
sg259
g37
sg260
g37
sg55
g4599
sg261
g37
sg262
g37
sg58
g59
sg263
g37
sg264
g37
sg265
g37
sg266
g37
sg267
g37
sg150
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg276
g37
sg65
g5
(g66
g67
(dp4707
g69
g70
stp4708
Rp4709
(dp4710
g74
S'environ_items'
p4711
sg76
g65
sbsg282
g37
sg283
g37
sg77
g70
sg284
g37
sg285
g37
sg286
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'func_to_2mm_flirt_applyxfm'
p4712
sg83
(dp4713
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4712
sg94
Nsg95
(lp4714
sg97
Nsg98
Nsb(dp4715
sg5
(g18
g7
Ntp4716
Rp4717
(dp4718
g22
(dp4719
sg24
g5
(g1421
g7
Ntp4720
Rp4721
(dp4722
g1425
(lp4723
g3689
ag4627
aS'wm_sig_file'
p4724
aS'csf_sig_file'
p4725
aS'gm_sig_file'
p4726
aS'motion_file'
p4727
ag4625
asg29
g30
(g1429
tp4728
Rp4729
(dp4730
g53
I00
sg51
g52
sg4727
g37
sg4625
g37
sg1435
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4731
sg4725
g37
sg4724
g37
sg4726
g37
sg4627
g37
sg3689
g37
sbsg1437
(dp4732
S'regressors_file'
p4733
NsS'residual_file'
p4734
Nssg1439
(lp4735
g4734
ag4733
asg1441
Nsbsg82
Nsg76
S'residuals'
p4736
sg83
(dp4737
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
(lp4738
(g4627
(lp4739
(dp4740
S'global'
p4741
I0
sS'linear'
p4742
I1
sS'wm'
p4743
I0
sS'pc1'
p4744
I0
sS'motion'
p4745
I0
sS'quadratic'
p4746
I1
sS'gm'
p4747
I0
sS'compcor'
p4748
I1
sS'csf'
p4749
I1
satp4750
a(g4625
(lp4751
I5
atp4752
asg92
I00
sg93
g4736
sg94
Nsg95
(lp4753
sg97
Nsg98
Nsb(dp4754
sg5
(g18
g7
Ntp4755
Rp4756
(dp4757
g22
(dp4758
sg24
g5
(g230
g7
Ntp4759
Rp4760
(dp4761
g29
g30
(g234
tp4762
Rp4763
(dp4764
g238
g37
sg51
g52
sg239
g37
sg41
g37
sg240
g37
sg241
g37
sg242
g37
sg243
g244
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg251
g37
sg252
g37
sg253
g37
sg254
g37
sg157
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg53
I00
sg259
g37
sg260
g37
sg55
g4599
sg261
g37
sg262
g37
sg58
g59
sg263
g37
sg264
g37
sg265
g37
sg266
g37
sg267
g37
sg150
g37
sg268
g37
sg269
g37
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg275
g37
sg276
g37
sg65
g5
(g66
g67
(dp4765
g69
g70
stp4766
Rp4767
(dp4768
g74
S'environ_items'
p4769
sg76
g65
sbsg282
g37
sg283
g37
sg77
g70
sg284
g37
sg285
g37
sg286
g37
sbsg79
g70
sg80
Nsg81
g59
sbsg82
Nsg76
S'ho_mni_to_2mm_flirt_applyxfm'
p4770
sg83
(dp4771
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g4770
sg94
Nsg95
(lp4772
sg97
Nsg98
Nsb(dp4773
sg5
(g18
g7
Ntp4774
Rp4775
(dp4776
g22
(dp4777
sg24
g5
(g104
g7
Ntp4778
Rp4779
(dp4780
g29
g30
(g108
tp4781
Rp4782
(dp4783
g51
g52
sS'regressors'
p4784
g37
sg3689
g37
sbsg122
(lp4785
g3689
ag4784
asg124
I01
sbsg82
Nsg76
g179
sg83
(dp4786
sg85
g4607
sg87
Nsg88
I00
sg89
I00
sg90
Nsg91
Nsg92
I00
sg93
g179
sg94
Nsg95
(lp4787
sg97
Nsg98
Nsb(dp4788
ssg310
(dp4789
sg312
(dp4790
g4590
(dp4791
g4654
(dp4792
g316
(lp4793
(g150
g4663
tp4794
asssg4611
(dp4795
g4590
(dp4796
g316
(lp4797
(g963
g157
tp4798
a(g963
g240
tp4799
assg4717
(dp4800
g316
(lp4801
(g3689
g3689
tp4802
a(g4620
g4727
tp4803
a(g4627
g4627
tp4804
a(g4625
g4625
tp4805
assg4679
(dp4806
g316
(lp4807
(g961
g157
tp4808
a(g961
g240
tp4809
assg4698
(dp4810
g316
(lp4811
(g3689
g157
tp4812
a(g963
g240
tp4813
a(g3496
g239
tp4814
assg4635
(dp4815
g316
(lp4816
(g962
g157
tp4817
a(g962
g240
tp4818
assg4756
(dp4819
g316
(lp4820
(g4629
g239
tp4821
a(g4622
g157
tp4822
a(g963
g240
tp4823
asssg4635
(dp4824
g4654
(dp4825
g316
(lp4826
(g150
g4664
tp4827
asssg4654
(dp4828
g4717
(dp4829
g316
(lp4830
(g4671
g4724
tp4831
a(g4672
g4725
tp4832
a(g4670
g4726
tp4833
asssg4679
(dp4834
g4654
(dp4835
g316
(lp4836
(g150
g4662
tp4837
asssg4698
(dp4838
g4654
(dp4839
g316
(lp4840
(g150
g3843
tp4841
asssg4717
(dp4842
g4775
(dp4843
g316
(lp4844
(g4734
g3689
tp4845
a(g4733
g4784
tp4846
asssg4756
(dp4847
g4654
(dp4848
g316
(lp4849
(g150
g4661
tp4850
asssg4775
(dp4851
ssg358
g4790
sg359
(dp4852
g4590
(dp4853
g4611
g4796
ssg4611
(dp4854
sg4635
(dp4855
g4611
g4815
ssg4654
(dp4856
g4756
g4848
sg4698
g4839
sg4635
g4825
sg4679
g4835
sg4590
g4792
ssg4679
(dp4857
g4611
g4806
ssg4698
(dp4858
g4611
g4810
ssg4717
(dp4859
g4611
g4800
sg4654
g4829
ssg4756
(dp4860
g4611
g4819
ssg4775
(dp4861
g4717
g4843
sssg367
g4790
sbsg76
g4607
sg85
g1067
sg93
g4607
sg94
g368
((lp4862
(lp4863
g371
ag368
((lp4864
(lp4865
g374
ag371
aa(lp4866
g376
ag377
aa(lp4867
g379
ag380
aa(lp4868
g382
ag383
aa(lp4869
g385
ag386
aa(lp4870
g388
ag389
aa(lp4871
g391
ag392
aa(lp4872
g394
ag395
aatp4873
Rp4874
aa(lp4875
g399
ag368
((lp4876
(lp4877
g374
ag399
aa(lp4878
g403
ag404
aa(lp4879
g406
ag407
aa(lp4880
g409
ag410
aa(lp4881
g412
ag413
aa(lp4882
g415
ag416
aa(lp4883
g418
ag419
aa(lp4884
g421
ag422
aa(lp4885
g424
ag425
aa(lp4886
g427
ag428
aa(lp4887
g430
ag431
aa(lp4888
g433
ag434
aa(lp4889
g436
ag437
aa(lp4890
g439
ag440
aa(lp4891
g442
ag443
aa(lp4892
g445
ag446
aa(lp4893
g448
ag449
aa(lp4894
g451
ag452
aa(lp4895
g454
ag455
aatp4896
Rp4897
aa(lp4898
g459
ag368
((lp4899
(lp4900
g374
ag459
aa(lp4901
g463
ag464
aatp4902
Rp4903
aatp4904
Rp4905
sg98
NsbS'outputspec.subject'
p4906
tp4907
sg1917
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg1918
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Completed'
p4921
sS'strat_0'
p4922
(lp4923
g2239
ag1142
ag86
ag4437
ag2477
ag2896
aS'func_to_anat_FLIRT_0'
p4924
ag3483
ag1900
ag4607
ag3823
ag4463
ag3853
asg1971
g3690
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1430310164.939734
s.