(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(g6
g7
Ntp18
Rp19
(dp20
g11
g5
(g12
g7
Ntp21
Rp22
(dp23
g16
(dp24
g5
(cnipype.pipeline.engine
Node
p25
g7
Ntp26
Rp27
(dp28
S'input_source'
p29
(dp30
sS'_interface'
p31
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p32
g7
Ntp33
Rp34
(dp35
S'inputs'
p36
ctraits.traits
__newobj__
p37
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p38
tp39
Rp40
(dp41
S'rigid2D'
p42
ctraits.trait_base
_Undefined
p43
(tRp44
sS'__traits_version__'
p45
S'4.5.0'
p46
sS'in_matrix_file'
p47
g44
sS'verbose'
p48
g44
sS'reference'
p49
g44
sS'padding_size'
p50
g44
sS'sinc_window'
p51
g44
sS'interp'
p52
S'nearestneighbour'
p53
sS'wmnorms'
p54
g44
sS'coarse_search'
p55
g44
sS'no_resample'
p56
g44
sS'sinc_width'
p57
g44
sS'in_weight'
p58
g44
sS'fieldmap'
p59
g44
sS'echospacing'
p60
g44
sS'ref_weight'
p61
g44
sS'apply_isoxfm'
p62
g44
sS'fieldmapmask'
p63
g44
sS'in_file'
p64
g44
sS'bbrtype'
p65
g44
sS'no_clamp'
p66
g44
sS'force_scaling'
p67
g44
sS'pedir'
p68
g44
sS'ignore_exception'
p69
I00
sS'display_init'
p70
g44
sS'schedule'
p71
g44
sS'args'
p72
g44
sS'uses_qform'
p73
g44
sS'wmcoords'
p74
g44
sS'terminal_output'
p75
S'stream'
p76
sS'fine_search'
p77
g44
sS'angle_rep'
p78
g44
sS'no_search'
p79
g44
sS'apply_xfm'
p80
I01
sS'wm_seg'
p81
g44
sS'out_file'
p82
g44
sS'bbrslope'
p83
g44
sS'datatype'
p84
g44
sS'save_log'
p85
g44
sS'dof'
p86
g44
sS'out_matrix_file'
p87
g44
sS'no_resample_blur'
p88
g44
sS'min_sampling'
p89
g44
sS'cost_func'
p90
g44
sS'cost'
p91
g44
sS'environ'
p92
g5
(ctraits.trait_handlers
TraitDictObject
p93
c__builtin__
dict
p94
(dp95
S'FSLOUTPUTTYPE'
p96
S'NIFTI_GZ'
p97
stp98
Rp99
(dp100
S'name_items'
p101
S'environ_items'
p102
sS'name'
p103
g92
sbsS'searchr_x'
p104
g44
sS'out_log'
p105
g44
sS'output_type'
p106
g97
sS'searchr_z'
p107
g44
sS'bins'
p108
g44
sS'searchr_y'
p109
g44
sbsS'_output_type'
p110
g97
sS'_environ'
p111
NsS'_terminal_output'
p112
g76
sbsS'_result'
p113
Nsg103
S'WM_prior_mni_to_t1'
p114
sS'plugin_args'
p115
(dp116
sS'_hierarchy'
p117
S'WM'
p118
sS'itersource'
p119
NsS'run_without_submitting'
p120
I00
sS'synchronize'
p121
I00
sS'parameterization'
p122
NsS'iterables'
p123
NsS'_got_inputs'
p124
I00
sS'_id'
p125
g114
sS'config'
p126
NsS'needed_outputs'
p127
(lp128
sS'overwrite'
p129
NsS'base_dir'
p130
Nsb(dp131
sg5
(g25
g7
Ntp132
Rp133
(dp134
g29
(dp135
sg31
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p136
g7
Ntp137
Rp138
(dp139
g36
g37
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p140
tp141
Rp142
(dp143
g69
I00
sS'nan2zeros'
p144
g44
sS'op_string'
p145
S'-mas %s '
p146
sg82
g44
sg72
g44
sS'internal_datatype'
p147
g44
sg45
g46
sg75
g76
sg92
g5
(g93
g94
(dp148
g96
g97
stp149
Rp150
(dp151
g101
S'environ_items'
p152
sg103
g92
sbsg64
g44
sg106
g97
sS'output_datatype'
p153
g44
sS'operand_files'
p154
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'WM_mask'
p155
sg115
(dp156
sg117
g118
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g155
sg126
Nsg127
(lp157
sg129
Nsg130
Nsb(dp158
sg5
(g25
g7
Ntp159
Rp160
(dp161
g29
(dp162
sg31
g5
(g136
g7
Ntp163
Rp164
(dp165
g36
g37
(g140
tp166
Rp167
(dp168
g69
I00
sg144
g44
sg145
g146
sg82
g44
sg72
g44
sg147
g44
sg45
g46
sg75
g76
sg92
g5
(g93
g94
(dp169
g96
g97
stp170
Rp171
(dp172
g101
S'environ_items'
p173
sg103
g92
sbsg64
g44
sg106
g97
sg153
g44
sg154
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'overlap_WM_map_with_prior'
p174
sg115
(dp175
sg117
g118
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g174
sg126
Nsg127
(lp176
sg129
Nsg130
Nsb(dp177
sg5
(g25
g7
Ntp178
Rp179
(dp180
g29
(dp181
sg31
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p182
g7
Ntp183
Rp184
(dp185
g36
g37
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p186
tp187
Rp188
(dp189
g69
I00
sg45
g46
sg145
g44
sS'out_data_type'
p190
g44
sg82
g44
sg72
g44
sS'in_file2'
p191
g44
sg75
g76
sg92
g5
(g93
g94
(dp192
g96
g97
stp193
Rp194
(dp195
g101
S'environ_items'
p196
sg103
g92
sbsg64
g44
sg106
g97
sS'suffix'
p197
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'binarize_threshold_WM'
p198
sg115
(dp199
sg117
g118
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g198
sg126
Nsg127
(lp200
sg129
Nsg130
Nsb(dp201
sg5
(g25
g7
Ntp202
Rp203
(dp204
g29
(dp205
sg31
g5
(cnipype.interfaces.utility
IdentityInterface
p206
g7
Ntp207
Rp208
(dp209
g36
g37
(cnipype.interfaces.base
DynamicTraitedSpec
p210
tp211
Rp212
(dp213
S'standard2highres_rig'
p214
g44
sg45
g46
sS'standard2highres_init'
p215
g44
sS'tissue_prior'
p216
g44
sS'standard2highres_mat'
p217
g44
sS'brain'
p218
g44
sS'probability_map'
p219
g44
sS'threshold'
p220
g44
sbsS'_fields'
p221
(lp222
g216
ag220
ag218
ag219
ag215
ag217
ag214
asS'_mandatory_inputs'
p223
I01
sbsg113
Nsg103
S'inputspec'
p224
sg115
(dp225
sg117
g118
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp226
sg129
Nsg130
Nsb(dp227
sg5
(g25
g7
Ntp228
Rp229
(dp230
g29
(dp231
sg31
g5
(g206
g7
Ntp232
Rp233
(dp234
g36
g37
(g210
tp235
Rp236
(dp237
g45
g46
sS'segment_combo'
p238
g44
sS'segment_mask'
p239
g44
sS'tissueprior_mni2t1'
p240
g44
sS'segment_bin'
p241
g44
sbsg221
(lp242
g240
ag238
ag241
ag239
asg223
I01
sbsg113
Nsg103
S'outputspec'
p243
sg115
(dp244
sg117
g118
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp245
sg129
Nsg130
Nsb(dp246
ssS'graph'
p247
(dp248
sS'succ'
p249
(dp250
g27
(dp251
g160
(dp252
S'connect'
p253
(lp254
(g82
g154
tp255
assg133
(dp256
g253
(lp257
(g82
g154
tp258
assg229
(dp259
g253
(lp260
(g82
g240
tp261
asssg133
(dp262
g229
(dp263
g253
(lp264
(g82
g239
tp265
asssg160
(dp266
g179
(dp267
g253
(lp268
(g82
g64
tp269
assg229
(dp270
g253
(lp271
(g82
g238
tp272
asssg179
(dp273
g133
(dp274
g253
(lp275
(g82
g64
tp276
assg229
(dp277
g253
(lp278
(g82
g241
tp279
asssg203
(dp280
g27
(dp281
g253
(lp282
(g216
g64
tp283
a(g218
g49
tp284
a(g217
g47
tp285
assg179
(dp286
g253
(lp287
((g220
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p288
(ttp289
g145
tp290
assg160
(dp291
g253
(lp292
(g219
g64
tp293
asssg229
(dp294
ssS'edge'
p295
g250
sS'pred'
p296
(dp297
g27
(dp298
g203
g281
ssg133
(dp299
g27
g256
sg179
g274
ssg160
(dp300
g27
g252
sg203
g291
ssg179
(dp301
g160
g267
sg203
g286
ssg203
(dp302
sg229
(dp303
g27
g259
sg133
g263
sg179
g277
sg160
g270
sssS'adj'
p304
g250
sbsg103
g118
sg117
S'seg_preproc_0'
p305
sg125
g118
sg126
ccollections
OrderedDict
p306
((lp307
(lp308
S'logging'
p309
ag306
((lp310
(lp311
S'__name__'
p312
ag309
aa(lp313
S'workflow_level'
p314
aS'INFO'
p315
aa(lp316
S'filemanip_level'
p317
aS'INFO'
p318
aa(lp319
S'interface_level'
p320
aS'INFO'
p321
aa(lp322
S'log_to_file'
p323
aS'True'
p324
aa(lp325
S'log_directory'
p326
aS'/mnt/ssd1/data/outputs/CPAC/CPAC_test1/outputs/logs/5_1751525030'
p327
aa(lp328
S'log_size'
p329
aS'16384000'
p330
aa(lp331
S'log_rotate'
p332
aS'4'
p333
aatp334
Rp335
aa(lp336
S'execution'
p337
ag306
((lp338
(lp339
g312
ag337
aa(lp340
S'create_report'
p341
aS'true'
p342
aa(lp343
S'crashdump_dir'
p344
aS'/home/eric/Documents/m2g/packages/functional/CPAC_pipes'
p345
aa(lp346
S'display_variable'
p347
aS':1'
p348
aa(lp349
S'hash_method'
p350
aS'timestamp'
p351
aa(lp352
S'job_finished_timeout'
p353
aS'5'
p354
aa(lp355
S'keep_inputs'
p356
aS'false'
p357
aa(lp358
S'local_hash_check'
p359
aS'true'
p360
aa(lp361
S'matplotlib_backend'
p362
aS'Agg'
p363
aa(lp364
S'plugin'
p365
aS'Linear'
p366
aa(lp367
S'remove_node_directories'
p368
aS'false'
p369
aa(lp370
S'remove_unnecessary_outputs'
p371
aS'true'
p372
aa(lp373
S'single_thread_matlab'
p374
aS'true'
p375
aa(lp376
S'stop_on_first_crash'
p377
aS'false'
p378
aa(lp379
S'stop_on_first_rerun'
p380
aS'false'
p381
aa(lp382
S'use_relative_paths'
p383
aS'false'
p384
aa(lp385
S'stop_on_unknown_version'
p386
aS'false'
p387
aa(lp388
S'write_provenance'
p389
aS'false'
p390
aa(lp391
S'parameterize_dirs'
p392
aS'true'
p393
aatp394
Rp395
aa(lp396
S'check'
p397
ag306
((lp398
(lp399
g312
ag397
aa(lp400
S'interval'
p401
aS'1209600'
p402
aatp403
Rp404
aatp405
Rp406
sg130
Nsb(dp407
sg5
(g25
g7
Ntp408
Rp409
(dp410
g29
(dp411
sg31
g5
(cnipype.interfaces.fsl.preprocess
FAST
p412
g7
Ntp413
Rp414
(dp415
g36
g37
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p416
tp417
Rp418
(dp419
S'number_classes'
p420
g44
sS'out_basename'
p421
S'segment'
p422
sS'hyper'
p423
g44
sg48
g44
sS'init_seg_smooth'
p424
g44
sS'init_transform'
p425
g44
sS'no_pve'
p426
g44
sS'output_biascorrected'
p427
g44
sS'mixel_smooth'
p428
g44
sS'segments'
p429
I01
sS'iters_afterbias'
p430
g44
sS'bias_lowpass'
p431
g44
sS'other_priors'
p432
g44
sg45
g46
sg69
I00
sS'img_type'
p433
I1
sg72
g44
sS'probability_maps'
p434
I01
sS'manual_seg'
p435
g44
sg75
g76
sS'output_biasfield'
p436
g44
sS'no_bias'
p437
g44
sS'use_priors'
p438
g44
sS'in_files'
p439
g44
sS'segment_iters'
p440
g44
sg92
g5
(g93
g94
(dp441
g96
g97
stp442
Rp443
(dp444
g101
S'environ_items'
p445
sg103
g92
sbsg106
g97
sS'bias_iters'
p446
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
g422
sg115
(dp447
sg117
g305
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g422
sg126
Nsg127
(lp448
sg129
Nsg130
Nsb(dp449
sg5
(g25
g7
Ntp450
Rp451
(dp452
g29
(dp453
sg31
g5
(g206
g7
Ntp454
Rp455
(dp456
g36
g37
(g210
tp457
Rp458
(dp459
g45
g46
sS'wm_threshold'
p460
(lp461
F0.96
asbsg221
(lp462
g460
asg223
I01
sbsg113
Nsg103
g460
sg115
(dp463
sg117
g305
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
(g460
(lp464
F0.96
atp465
sg124
I00
sg125
g460
sg126
Nsg127
(lp466
sg129
Nsg130
Nsb(dp467
sg5
(g25
g7
Ntp468
Rp469
(dp470
g29
(dp471
sg31
g5
(g206
g7
Ntp472
Rp473
(dp474
g36
g37
(g210
tp475
Rp476
(dp477
g45
g46
sS'csf_threshold'
p478
(lp479
F0.96
asbsg221
(lp480
g478
asg223
I01
sbsg113
Nsg103
g478
sg115
(dp481
sg117
g305
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
(g478
(lp482
F0.96
atp483
sg124
I00
sg125
g478
sg126
Nsg127
(lp484
sg129
Nsg130
Nsb(dp485
sg5
(g25
g7
Ntp486
Rp487
(dp488
g29
(dp489
sg31
g5
(g206
g7
Ntp490
Rp491
(dp492
g36
g37
(g210
tp493
Rp494
(dp495
g214
g44
sg45
g46
sg215
g44
sg218
g44
sS'PRIOR_GRAY'
p496
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p497
sg217
g44
sS'PRIOR_CSF'
p498
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p499
sS'PRIOR_WHITE'
p500
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p501
sbsg221
(lp502
g218
ag215
ag217
ag214
ag498
ag496
ag500
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp503
sg117
g305
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp504
sg129
Nsg130
Nsb(dp505
sg5
(g6
g7
Ntp506
Rp507
(dp508
g11
g5
(g12
g7
Ntp509
Rp510
(dp511
g16
(dp512
g5
(g25
g7
Ntp513
Rp514
(dp515
g29
(dp516
sg31
g5
(g32
g7
Ntp517
Rp518
(dp519
g36
g37
(g38
tp520
Rp521
(dp522
g42
g44
sg45
g46
sg47
g44
sg48
g44
sg49
g44
sg50
g44
sg51
g44
sg52
g53
sg54
g44
sg55
g44
sg56
g44
sg57
g44
sg58
g44
sg59
g44
sg60
g44
sg61
g44
sg62
g44
sg63
g44
sg64
g44
sg65
g44
sg66
g44
sg67
g44
sg68
g44
sg69
I00
sg70
g44
sg71
g44
sg72
g44
sg73
g44
sg74
g44
sg75
g76
sg77
g44
sg78
g44
sg79
g44
sg80
I01
sg81
g44
sg82
g44
sg83
g44
sg84
g44
sg85
g44
sg86
g44
sg87
g44
sg88
g44
sg89
g44
sg90
g44
sg91
g44
sg92
g5
(g93
g94
(dp523
g96
g97
stp524
Rp525
(dp526
g101
S'environ_items'
p527
sg103
g92
sbsg104
g44
sg105
g44
sg106
g97
sg107
g44
sg108
g44
sg109
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'CSF_prior_mni_to_t1'
p528
sg115
(dp529
sg117
S'CSF'
p530
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g528
sg126
Nsg127
(lp531
sg129
Nsg130
Nsb(dp532
sg5
(g25
g7
Ntp533
Rp534
(dp535
g29
(dp536
sg31
g5
(g136
g7
Ntp537
Rp538
(dp539
g36
g37
(g140
tp540
Rp541
(dp542
g69
I00
sg144
g44
sg145
g146
sg82
g44
sg72
g44
sg147
g44
sg45
g46
sg75
g76
sg92
g5
(g93
g94
(dp543
g96
g97
stp544
Rp545
(dp546
g101
S'environ_items'
p547
sg103
g92
sbsg64
g44
sg106
g97
sg153
g44
sg154
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'overlap_CSF_map_with_prior'
p548
sg115
(dp549
sg117
g530
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g548
sg126
Nsg127
(lp550
sg129
Nsg130
Nsb(dp551
sg5
(g25
g7
Ntp552
Rp553
(dp554
g29
(dp555
sg31
g5
(g182
g7
Ntp556
Rp557
(dp558
g36
g37
(g186
tp559
Rp560
(dp561
g69
I00
sg45
g46
sg145
g44
sg190
g44
sg82
g44
sg72
g44
sg191
g44
sg75
g76
sg92
g5
(g93
g94
(dp562
g96
g97
stp563
Rp564
(dp565
g101
S'environ_items'
p566
sg103
g92
sbsg64
g44
sg106
g97
sg197
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'binarize_threshold_CSF'
p567
sg115
(dp568
sg117
g530
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g567
sg126
Nsg127
(lp569
sg129
Nsg130
Nsb(dp570
sg5
(g25
g7
Ntp571
Rp572
(dp573
g29
(dp574
sg31
g5
(g136
g7
Ntp575
Rp576
(dp577
g36
g37
(g140
tp578
Rp579
(dp580
g69
I00
sg144
g44
sg145
g146
sg82
g44
sg72
g44
sg147
g44
sg45
g46
sg75
g76
sg92
g5
(g93
g94
(dp581
g96
g97
stp582
Rp583
(dp584
g101
S'environ_items'
p585
sg103
g92
sbsg64
g44
sg106
g97
sg153
g44
sg154
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'CSF_mask'
p586
sg115
(dp587
sg117
g530
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g586
sg126
Nsg127
(lp588
sg129
Nsg130
Nsb(dp589
sg5
(g25
g7
Ntp590
Rp591
(dp592
g29
(dp593
sg31
g5
(g206
g7
Ntp594
Rp595
(dp596
g36
g37
(g210
tp597
Rp598
(dp599
g45
g46
sg238
g44
sg239
g44
sg240
g44
sg241
g44
sbsg221
(lp600
g240
ag238
ag241
ag239
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp601
sg117
g530
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp602
sg129
Nsg130
Nsb(dp603
sg5
(g25
g7
Ntp604
Rp605
(dp606
g29
(dp607
sg31
g5
(g206
g7
Ntp608
Rp609
(dp610
g36
g37
(g210
tp611
Rp612
(dp613
g214
g44
sg45
g46
sg215
g44
sg216
g44
sg217
g44
sg218
g44
sg219
g44
sg220
g44
sbsg221
(lp614
g216
ag220
ag218
ag219
ag215
ag217
ag214
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp615
sg117
g530
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp616
sg129
Nsg130
Nsb(dp617
ssg247
(dp618
sg249
(dp619
g514
(dp620
g534
(dp621
g253
(lp622
(g82
g154
tp623
assg591
(dp624
g253
(lp625
(g82
g240
tp626
assg572
(dp627
g253
(lp628
(g82
g154
tp629
asssg534
(dp630
g553
(dp631
g253
(lp632
(g82
g64
tp633
assg591
(dp634
g253
(lp635
(g82
g238
tp636
asssg553
(dp637
g572
(dp638
g253
(lp639
(g82
g64
tp640
assg591
(dp641
g253
(lp642
(g82
g241
tp643
asssg572
(dp644
g591
(dp645
g253
(lp646
(g82
g239
tp647
asssg591
(dp648
sg605
(dp649
g534
(dp650
g253
(lp651
(g219
g64
tp652
assg514
(dp653
g253
(lp654
(g216
g64
tp655
a(g218
g49
tp656
a(g217
g47
tp657
assg553
(dp658
g253
(lp659
((g220
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p660
(ttp661
g145
tp662
assssg295
g619
sg296
(dp663
g514
(dp664
g605
g653
ssg534
(dp665
g605
g650
sg514
g621
ssg553
(dp666
g534
g631
sg605
g658
ssg572
(dp667
g553
g638
sg514
g627
ssg591
(dp668
g534
g634
sg572
g645
sg514
g624
sg553
g641
ssg605
(dp669
ssg304
g619
sbsg103
g530
sg117
g305
sg125
g530
sg126
g306
((lp670
(lp671
g309
ag306
((lp672
(lp673
g312
ag309
aa(lp674
g314
ag315
aa(lp675
g317
ag318
aa(lp676
g320
ag321
aa(lp677
g323
ag324
aa(lp678
g326
ag327
aa(lp679
g329
ag330
aa(lp680
g332
ag333
aatp681
Rp682
aa(lp683
g337
ag306
((lp684
(lp685
g312
ag337
aa(lp686
g341
ag342
aa(lp687
g344
ag345
aa(lp688
g347
ag348
aa(lp689
g350
ag351
aa(lp690
g353
ag354
aa(lp691
g356
ag357
aa(lp692
g359
ag360
aa(lp693
g362
ag363
aa(lp694
g365
ag366
aa(lp695
g368
ag369
aa(lp696
g371
ag372
aa(lp697
g374
ag375
aa(lp698
g377
ag378
aa(lp699
g380
ag381
aa(lp700
g383
ag384
aa(lp701
g386
ag387
aa(lp702
g389
ag390
aa(lp703
g392
ag393
aatp704
Rp705
aa(lp706
g397
ag306
((lp707
(lp708
g312
ag397
aa(lp709
g401
ag402
aatp710
Rp711
aatp712
Rp713
sg130
Nsb(dp714
sg5
(g6
g7
Ntp715
Rp716
(dp717
g11
g5
(g12
g7
Ntp718
Rp719
(dp720
g16
(dp721
g5
(g25
g7
Ntp722
Rp723
(dp724
g29
(dp725
sg31
g5
(g206
g7
Ntp726
Rp727
(dp728
g36
g37
(g210
tp729
Rp730
(dp731
g45
g46
sg238
g44
sg239
g44
sg240
g44
sg241
g44
sbsg221
(lp732
g240
ag238
ag241
ag239
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp733
sg117
S'GM'
p734
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp735
sg129
Nsg130
Nsb(dp736
sg5
(g25
g7
Ntp737
Rp738
(dp739
g29
(dp740
sg31
g5
(g32
g7
Ntp741
Rp742
(dp743
g36
g37
(g38
tp744
Rp745
(dp746
g42
g44
sg45
g46
sg47
g44
sg48
g44
sg49
g44
sg50
g44
sg51
g44
sg52
g53
sg54
g44
sg55
g44
sg56
g44
sg57
g44
sg58
g44
sg59
g44
sg60
g44
sg61
g44
sg62
g44
sg63
g44
sg64
g44
sg65
g44
sg66
g44
sg67
g44
sg68
g44
sg69
I00
sg70
g44
sg71
g44
sg72
g44
sg73
g44
sg74
g44
sg75
g76
sg77
g44
sg78
g44
sg79
g44
sg80
I01
sg81
g44
sg82
g44
sg83
g44
sg84
g44
sg85
g44
sg86
g44
sg87
g44
sg88
g44
sg89
g44
sg90
g44
sg91
g44
sg92
g5
(g93
g94
(dp747
g96
g97
stp748
Rp749
(dp750
g101
S'environ_items'
p751
sg103
g92
sbsg104
g44
sg105
g44
sg106
g97
sg107
g44
sg108
g44
sg109
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'GM_prior_mni_to_t1'
p752
sg115
(dp753
sg117
g734
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g752
sg126
Nsg127
(lp754
sg129
Nsg130
Nsb(dp755
sg5
(g25
g7
Ntp756
Rp757
(dp758
g29
(dp759
sg31
g5
(g182
g7
Ntp760
Rp761
(dp762
g36
g37
(g186
tp763
Rp764
(dp765
g69
I00
sg45
g46
sg145
g44
sg190
g44
sg82
g44
sg72
g44
sg191
g44
sg75
g76
sg92
g5
(g93
g94
(dp766
g96
g97
stp767
Rp768
(dp769
g101
S'environ_items'
p770
sg103
g92
sbsg64
g44
sg106
g97
sg197
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'binarize_threshold_GM'
p771
sg115
(dp772
sg117
g734
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g771
sg126
Nsg127
(lp773
sg129
Nsg130
Nsb(dp774
sg5
(g25
g7
Ntp775
Rp776
(dp777
g29
(dp778
sg31
g5
(g136
g7
Ntp779
Rp780
(dp781
g36
g37
(g140
tp782
Rp783
(dp784
g69
I00
sg144
g44
sg145
g146
sg82
g44
sg72
g44
sg147
g44
sg45
g46
sg75
g76
sg92
g5
(g93
g94
(dp785
g96
g97
stp786
Rp787
(dp788
g101
S'environ_items'
p789
sg103
g92
sbsg64
g44
sg106
g97
sg153
g44
sg154
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'overlap_GM_map_with_prior'
p790
sg115
(dp791
sg117
g734
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g790
sg126
Nsg127
(lp792
sg129
Nsg130
Nsb(dp793
sg5
(g25
g7
Ntp794
Rp795
(dp796
g29
(dp797
sg31
g5
(g206
g7
Ntp798
Rp799
(dp800
g36
g37
(g210
tp801
Rp802
(dp803
g214
g44
sg45
g46
sg215
g44
sg216
g44
sg217
g44
sg218
g44
sg219
g44
sg220
g44
sbsg221
(lp804
g216
ag220
ag218
ag219
ag215
ag217
ag214
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp805
sg117
g734
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp806
sg129
Nsg130
Nsb(dp807
sg5
(g25
g7
Ntp808
Rp809
(dp810
g29
(dp811
sg31
g5
(g136
g7
Ntp812
Rp813
(dp814
g36
g37
(g140
tp815
Rp816
(dp817
g69
I00
sg144
g44
sg145
g146
sg82
g44
sg72
g44
sg147
g44
sg45
g46
sg75
g76
sg92
g5
(g93
g94
(dp818
g96
g97
stp819
Rp820
(dp821
g101
S'environ_items'
p822
sg103
g92
sbsg64
g44
sg106
g97
sg153
g44
sg154
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'GM_mask'
p823
sg115
(dp824
sg117
g734
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g823
sg126
Nsg127
(lp825
sg129
Nsg130
Nsb(dp826
ssg247
(dp827
sg249
(dp828
g723
(dp829
sg738
(dp830
g776
(dp831
g253
(lp832
(g82
g154
tp833
assg809
(dp834
g253
(lp835
(g82
g154
tp836
assg723
(dp837
g253
(lp838
(g82
g240
tp839
asssg757
(dp840
g723
(dp841
g253
(lp842
(g82
g241
tp843
assg809
(dp844
g253
(lp845
(g82
g64
tp846
asssg776
(dp847
g757
(dp848
g253
(lp849
(g82
g64
tp850
assg723
(dp851
g253
(lp852
(g82
g238
tp853
asssg795
(dp854
g738
(dp855
g253
(lp856
(g216
g64
tp857
a(g218
g49
tp858
a(g217
g47
tp859
assg757
(dp860
g253
(lp861
((g220
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p862
(ttp863
g145
tp864
assg776
(dp865
g253
(lp866
(g219
g64
tp867
asssg809
(dp868
g723
(dp869
g253
(lp870
(g82
g239
tp871
assssg295
g828
sg296
(dp872
g723
(dp873
g738
g837
sg757
g841
sg809
g869
sg776
g851
ssg738
(dp874
g795
g855
ssg757
(dp875
g776
g848
sg795
g860
ssg776
(dp876
g795
g865
sg738
g831
ssg795
(dp877
sg809
(dp878
g757
g844
sg738
g834
sssg304
g828
sbsg103
g734
sg117
g305
sg125
g734
sg126
g306
((lp879
(lp880
g309
ag306
((lp881
(lp882
g312
ag309
aa(lp883
g314
ag315
aa(lp884
g317
ag318
aa(lp885
g320
ag321
aa(lp886
g323
ag324
aa(lp887
g326
ag327
aa(lp888
g329
ag330
aa(lp889
g332
ag333
aatp890
Rp891
aa(lp892
g337
ag306
((lp893
(lp894
g312
ag337
aa(lp895
g341
ag342
aa(lp896
g344
ag345
aa(lp897
g347
ag348
aa(lp898
g350
ag351
aa(lp899
g353
ag354
aa(lp900
g356
ag357
aa(lp901
g359
ag360
aa(lp902
g362
ag363
aa(lp903
g365
ag366
aa(lp904
g368
ag369
aa(lp905
g371
ag372
aa(lp906
g374
ag375
aa(lp907
g377
ag378
aa(lp908
g380
ag381
aa(lp909
g383
ag384
aa(lp910
g386
ag387
aa(lp911
g389
ag390
aa(lp912
g392
ag393
aatp913
Rp914
aa(lp915
g397
ag306
((lp916
(lp917
g312
ag397
aa(lp918
g401
ag402
aatp919
Rp920
aatp921
Rp922
sg130
Nsb(dp923
sg5
(g25
g7
Ntp924
Rp925
(dp926
g29
(dp927
sg31
g5
(g206
g7
Ntp928
Rp929
(dp930
g36
g37
(g210
tp931
Rp932
(dp933
g45
g46
sS'gm_threshold'
p934
(lp935
F0.7
asbsg221
(lp936
g934
asg223
I01
sbsg113
Nsg103
g934
sg115
(dp937
sg117
g305
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
(g934
(lp938
F0.7
atp939
sg124
I00
sg125
g934
sg126
Nsg127
(lp940
sg129
Nsg130
Nsb(dp941
sg5
(g25
g7
Ntp942
Rp943
(dp944
g29
(dp945
sg31
g5
(g206
g7
Ntp946
Rp947
(dp948
g36
g37
(g210
tp949
Rp950
(dp951
S'partial_volume_files'
p952
g44
sg45
g46
sS'gm_combo'
p953
g44
sS'mixeltype'
p954
g44
sS'csf_mni2t1'
p955
g44
sS'wm_bin'
p956
g44
sS'csf_bin'
p957
g44
sg434
g44
sS'wm_mni2t1'
p958
g44
sS'csf_combo'
p959
g44
sS'wm_combo'
p960
g44
sS'wm_mask'
p961
g44
sS'gm_mask'
p962
g44
sS'csf_mask'
p963
g44
sS'gm_bin'
p964
g44
sS'partial_volume_map'
p965
g44
sS'gm_mni2t1'
p966
g44
sbsg221
(lp967
g955
ag959
ag957
ag963
ag966
ag953
ag964
ag962
ag958
ag960
ag956
ag434
ag954
ag965
ag952
ag961
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp968
sg117
g305
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp969
sg129
Nsg130
Nsb(dp970
ssg247
(dp971
sg249
(dp972
g19
(dp973
g943
(dp974
g253
(lp975
(S'outputspec.tissueprior_mni2t1'
p976
g958
tp977
a(S'outputspec.segment_combo'
p978
g960
tp979
a(S'outputspec.segment_bin'
p980
g956
tp981
a(S'outputspec.segment_mask'
p982
g961
tp983
asssg409
(dp984
g507
(dp985
g253
(lp986
((g434
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p987
(ttp988
S'inputspec.probability_map'
p989
tp990
assg716
(dp991
g253
(lp992
((g434
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p993
(ttp994
g989
tp995
assg943
(dp996
g253
(lp997
(g434
g434
tp998
a(g954
g954
tp999
a(g952
g952
tp1000
a(g965
g965
tp1001
assg19
(dp1002
g253
(lp1003
((g434
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1004
(ttp1005
g989
tp1006
asssg451
(dp1007
g19
(dp1008
g253
(lp1009
(g460
S'inputspec.threshold'
p1010
tp1011
asssg469
(dp1012
g507
(dp1013
g253
(lp1014
(g478
g1010
tp1015
asssg487
(dp1016
g409
(dp1017
g253
(lp1018
(g218
g439
tp1019
assg716
(dp1020
g253
(lp1021
(g218
S'inputspec.brain'
p1022
tp1023
a(g496
S'inputspec.tissue_prior'
p1024
tp1025
a(g217
S'inputspec.standard2highres_mat'
p1026
tp1027
assg19
(dp1028
g253
(lp1029
(g218
g1022
tp1030
a(g500
g1024
tp1031
a(g217
g1026
tp1032
assg507
(dp1033
g253
(lp1034
(g218
g1022
tp1035
a(g498
g1024
tp1036
a(g217
g1026
tp1037
asssg507
(dp1038
g943
(dp1039
g253
(lp1040
(g976
g955
tp1041
a(g978
g959
tp1042
a(g980
g957
tp1043
a(g982
g963
tp1044
asssg716
(dp1045
g943
(dp1046
g253
(lp1047
(g976
g966
tp1048
a(g978
g953
tp1049
a(g980
g964
tp1050
a(g982
g962
tp1051
asssg925
(dp1052
g716
(dp1053
g253
(lp1054
(g934
g1010
tp1055
asssg943
(dp1056
ssg295
g972
sg296
(dp1057
g19
(dp1058
g409
g1002
sg487
g1028
sg451
g1008
ssg409
(dp1059
g487
g1017
ssg451
(dp1060
sg469
(dp1061
sg487
(dp1062
sg507
(dp1063
g409
g985
sg487
g1033
sg469
g1013
ssg716
(dp1064
g409
g991
sg487
g1020
sg925
g1053
ssg925
(dp1065
sg943
(dp1066
g409
g996
sg716
g1046
sg19
g974
sg507
g1039
sssg304
g972
sbsg103
g305
sg117
S'resting_preproc_5_1751525030'
p1067
sg125
g305
sg126
g306
((lp1068
(lp1069
g309
ag306
((lp1070
(lp1071
g312
ag309
aa(lp1072
g314
ag315
aa(lp1073
g317
ag318
aa(lp1074
g320
ag321
aa(lp1075
g323
ag324
aa(lp1076
g326
ag327
aa(lp1077
g329
ag330
aa(lp1078
g332
ag333
aatp1079
Rp1080
aa(lp1081
g337
ag306
((lp1082
(lp1083
g312
ag337
aa(lp1084
g341
ag342
aa(lp1085
g344
ag345
aa(lp1086
g347
ag348
aa(lp1087
g350
ag351
aa(lp1088
g353
ag354
aa(lp1089
g356
ag357
aa(lp1090
g359
ag360
aa(lp1091
g362
ag363
aa(lp1092
g365
ag366
aa(lp1093
g368
ag369
aa(lp1094
g371
ag372
aa(lp1095
g374
ag375
aa(lp1096
g377
ag378
aa(lp1097
g380
ag381
aa(lp1098
g383
ag384
aa(lp1099
g386
ag387
aa(lp1100
g389
ag390
aa(lp1101
g392
ag393
aatp1102
Rp1103
aa(lp1104
g397
ag306
((lp1105
(lp1106
g312
ag397
aa(lp1107
g401
ag402
aatp1108
Rp1109
aatp1110
Rp1111
sg130
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g25
g7
Ntp1122
Rp1123
(dp1124
g29
(dp1125
sg31
g5
(g206
g7
Ntp1126
Rp1127
(dp1128
g36
g37
(g210
tp1129
Rp1130
(dp1131
g45
g46
sS'output_brain'
p1132
g44
sS'nonlinear_xfm'
p1133
g44
sS'invlinear_xfm'
p1134
g44
sS'linear_xfm'
p1135
g44
sbsg221
(lp1136
g1132
ag1135
ag1134
ag1133
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp1137
sg117
S'anat_mni_fnirt_register_0'
p1138
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp1139
sg129
Nsg130
Nsb(dp1140
sg5
(g25
g7
Ntp1141
Rp1142
(dp1143
g29
(dp1144
sg31
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1145
g7
Ntp1146
Rp1147
(dp1148
g36
g37
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1149
tp1150
Rp1151
(dp1152
g69
I00
sg45
g46
sg82
g44
sg72
g44
sg191
g44
sS'fix_scale_skew'
p1153
g44
sS'invert_xfm'
p1154
I01
sg75
g76
sS'concat_xfm'
p1155
g44
sg64
g44
sg106
g97
sg92
g5
(g93
g94
(dp1156
g96
g97
stp1157
Rp1158
(dp1159
g101
S'environ_items'
p1160
sg103
g92
sbsbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'inv_linear_reg0_xfm'
p1161
sg115
(dp1162
sg117
g1138
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1161
sg126
Nsg127
(lp1163
sg129
Nsg130
Nsb(dp1164
sg5
(g25
g7
Ntp1165
Rp1166
(dp1167
g29
(dp1168
sg31
g5
(g206
g7
Ntp1169
Rp1170
(dp1171
g36
g37
(g210
tp1172
Rp1173
(dp1174
S'fnirt_config'
p1175
S'T1_2_MNI152_2mm'
p1176
sg45
g46
sS'input_brain'
p1177
g44
sS'reference_skull'
p1178
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1179
sS'reference_brain'
p1180
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1181
sS'input_skull'
p1182
g44
sbsg221
(lp1183
g1177
ag1182
ag1180
ag1178
ag1175
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp1184
sg117
g1138
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp1185
sg129
Nsg130
Nsb(dp1186
sg5
(g25
g7
Ntp1187
Rp1188
(dp1189
g29
(dp1190
sg31
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1191
g7
Ntp1192
Rp1193
(dp1194
g36
g37
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1195
tp1196
Rp1197
(dp1198
g45
g46
sS'derive_from_ref'
p1199
g44
sS'in_intensitymap_file'
p1200
g44
sS'modulatedref_file'
p1201
g44
sS'refmask_val'
p1202
g44
sS'hessian_precision'
p1203
g44
sS'in_fwhm'
p1204
g44
sS'skip_implicit_in_masking'
p1205
g44
sS'inmask_file'
p1206
g44
sS'refmask_file'
p1207
g44
sS'inwarp_file'
p1208
g44
sS'skip_lambda_ssq'
p1209
g44
sS'intensity_mapping_model'
p1210
g44
sS'affine_file'
p1211
g44
sS'apply_inmask'
p1212
g44
sS'spline_order'
p1213
g44
sS'apply_refmask'
p1214
g44
sS'subsampling_scheme'
p1215
g44
sg64
g44
sS'warped_file'
p1216
g44
sS'skip_refmask'
p1217
g44
sg69
I00
sS'ref_fwhm'
p1218
g44
sS'inmask_val'
p1219
g44
sS'config_file'
p1220
g44
sS'field_file'
p1221
g44
sg72
g44
sS'apply_intensity_mapping'
p1222
g44
sS'regularization_lambda'
p1223
g44
sg75
g76
sS'regularization_model'
p1224
g44
sS'jacobian_range'
p1225
g44
sS'out_intensitymap_file'
p1226
g44
sS'skip_implicit_ref_masking'
p1227
g44
sS'ref_file'
p1228
g44
sS'skip_inmask'
p1229
g44
sS'fieldcoeff_file'
p1230
I01
sS'warp_resolution'
p1231
g44
sS'jacobian_file'
p1232
I01
sg92
g5
(g93
g94
(dp1233
g96
g97
stp1234
Rp1235
(dp1236
g101
S'environ_items'
p1237
sg103
g92
sbsS'bias_regularization_lambda'
p1238
g44
sg106
g97
sS'skip_intensity_mapping'
p1239
g44
sS'log_file'
p1240
g44
sS'biasfield_resolution'
p1241
g44
sS'intensity_mapping_order'
p1242
g44
sS'max_nonlin_iter'
p1243
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'nonlinear_reg_1'
p1244
sg115
(dp1245
sg117
g1138
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1244
sg126
Nsg127
(lp1246
sg129
Nsg130
Nsb(dp1247
sg5
(g25
g7
Ntp1248
Rp1249
(dp1250
g29
(dp1251
sg31
g5
(g32
g7
Ntp1252
Rp1253
(dp1254
g36
g37
(g38
tp1255
Rp1256
(dp1257
g42
g44
sg45
g46
sg47
g44
sg48
g44
sg49
g44
sg50
g44
sg51
g44
sg52
g44
sg54
g44
sg55
g44
sg56
g44
sg57
g44
sg58
g44
sg59
g44
sg60
g44
sg61
g44
sg62
g44
sg63
g44
sg64
g44
sg65
g44
sg66
g44
sg67
g44
sg68
g44
sg69
I00
sg70
g44
sg71
g44
sg72
g44
sg73
g44
sg74
g44
sg75
g76
sg77
g44
sg78
g44
sg79
g44
sg80
g44
sg81
g44
sg82
g44
sg83
g44
sg84
g44
sg85
g44
sg86
g44
sg87
g44
sg88
g44
sg89
g44
sg90
g44
sg91
S'corratio'
p1258
sg92
g5
(g93
g94
(dp1259
g96
g97
stp1260
Rp1261
(dp1262
g101
S'environ_items'
p1263
sg103
g92
sbsg104
g44
sg105
g44
sg106
g97
sg107
g44
sg108
g44
sg109
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'linear_reg_0'
p1264
sg115
(dp1265
sg117
g1138
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1264
sg126
Nsg127
(lp1266
sg129
Nsg130
Nsb(dp1267
sg5
(g25
g7
Ntp1268
Rp1269
(dp1270
g29
(dp1271
sg31
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1272
g7
Ntp1273
Rp1274
(dp1275
g36
g37
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1276
tp1277
Rp1278
(dp1279
g69
I00
sS'supersample'
p1280
g44
sg64
g44
sS'superlevel'
p1281
g44
sg82
g44
sg84
g44
sg72
g44
sg52
g44
sg1221
g44
sg1228
g44
sg75
g76
sg92
g5
(g93
g94
(dp1282
g96
g97
stp1283
Rp1284
(dp1285
g101
S'environ_items'
p1286
sg103
g92
sbsS'premat'
p1287
g44
sS'mask_file'
p1288
g44
sg106
g97
sS'relwarp'
p1289
g44
sS'abswarp'
p1290
g44
sg45
g46
sS'postmat'
p1291
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'brain_warp'
p1292
sg115
(dp1293
sg117
g1138
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1292
sg126
Nsg127
(lp1294
sg129
Nsg130
Nsb(dp1295
ssg247
(dp1296
sg249
(dp1297
g1123
(dp1298
sg1142
(dp1299
g1123
(dp1300
g253
(lp1301
(g82
g1134
tp1302
asssg1166
(dp1303
g1188
(dp1304
g253
(lp1305
(g1182
g64
tp1306
a(g1178
g1228
tp1307
a(g1175
g1220
tp1308
assg1249
(dp1309
g253
(lp1310
(g1177
g64
tp1311
a(g1180
g49
tp1312
assg1269
(dp1313
g253
(lp1314
(g1177
g64
tp1315
a(g1180
g1228
tp1316
asssg1188
(dp1317
g1123
(dp1318
g253
(lp1319
(g1230
g1133
tp1320
assg1269
(dp1321
g253
(lp1322
(g1230
g1221
tp1323
asssg1249
(dp1324
g1188
(dp1325
g253
(lp1326
(g87
g1211
tp1327
assg1123
(dp1328
g253
(lp1329
(g87
g1135
tp1330
assg1142
(dp1331
g253
(lp1332
(g87
g64
tp1333
asssg1269
(dp1334
g1123
(dp1335
g253
(lp1336
(g82
g1132
tp1337
assssg295
g1297
sg296
(dp1338
g1123
(dp1339
g1188
g1318
sg1249
g1328
sg1269
g1335
sg1142
g1300
ssg1142
(dp1340
g1249
g1331
ssg1166
(dp1341
sg1188
(dp1342
g1166
g1304
sg1249
g1325
ssg1249
(dp1343
g1166
g1309
ssg1269
(dp1344
g1188
g1321
sg1166
g1313
sssg304
g1297
sbsg103
g1138
sg117
g1067
sg125
g1138
sg126
g306
((lp1345
(lp1346
g309
ag306
((lp1347
(lp1348
g312
ag309
aa(lp1349
g314
ag315
aa(lp1350
g317
ag318
aa(lp1351
g320
ag321
aa(lp1352
g323
ag324
aa(lp1353
g326
ag327
aa(lp1354
g329
ag330
aa(lp1355
g332
ag333
aatp1356
Rp1357
aa(lp1358
g337
ag306
((lp1359
(lp1360
g312
ag337
aa(lp1361
g341
ag342
aa(lp1362
g344
ag345
aa(lp1363
g347
ag348
aa(lp1364
g350
ag351
aa(lp1365
g353
ag354
aa(lp1366
g356
ag357
aa(lp1367
g359
ag360
aa(lp1368
g362
ag363
aa(lp1369
g365
ag366
aa(lp1370
g368
ag369
aa(lp1371
g371
ag372
aa(lp1372
g374
ag375
aa(lp1373
g377
ag378
aa(lp1374
g380
ag381
aa(lp1375
g383
ag384
aa(lp1376
g386
ag387
aa(lp1377
g389
ag390
aa(lp1378
g392
ag393
aatp1379
Rp1380
aa(lp1381
g397
ag306
((lp1382
(lp1383
g312
ag397
aa(lp1384
g401
ag402
aatp1385
Rp1386
aatp1387
Rp1388
sg130
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g25
g7
Ntp1399
Rp1400
(dp1401
g29
(dp1402
sg31
g5
(cnipype.interfaces.utility
Function
p1403
g7
Ntp1404
Rp1405
(dp1406
S'_input_names'
p1407
(lp1408
S'file_'
p1409
asg36
g37
(cnipype.interfaces.utility
FunctionInputSpec
p1410
tp1411
Rp1412
(dp1413
g69
I00
sS'function_str'
p1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1415
sg1409
g44
sg45
g46
sbsS'_out'
p1416
(dp1417
S'new_fname'
p1418
NssS'_output_names'
p1419
(lp1420
g1418
asS'imports'
p1421
Nsbsg113
Nsg103
S'resample_u'
p1422
sg115
(dp1423
sg117
S'montage_mfi_0'
p1424
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1422
sg126
Nsg127
(lp1425
sg129
Nsg130
Nsb(dp1426
sg5
(g25
g7
Ntp1427
Rp1428
(dp1429
g29
(dp1430
sg31
g5
(g1403
g7
Ntp1431
Rp1432
(dp1433
g1407
(lp1434
S'overlay'
p1435
aS'underlay'
p1436
aS'png_name'
p1437
aS'cbar_name'
p1438
asg36
g37
(g1410
tp1439
Rp1440
(dp1441
g69
I00
sg1437
S'MNI_edge_on_mean_func_mni_s.png'
p1442
sg1435
g44
sg1438
S'red'
p1443
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1444
sg1436
g44
sg45
g46
sbsg1416
(dp1445
g1437
Nssg1419
(lp1446
g1437
asg1421
Nsbsg113
Nsg103
S'montage_s'
p1447
sg115
(dp1448
sg117
g1424
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1447
sg126
Nsg127
(lp1449
sg129
Nsg130
Nsb(dp1450
sg5
(g25
g7
Ntp1451
Rp1452
(dp1453
g29
(dp1454
sg31
g5
(g1403
g7
Ntp1455
Rp1456
(dp1457
g1407
(lp1458
g1409
asg36
g37
(g1410
tp1459
Rp1460
(dp1461
g69
I00
sg1414
g1415
sg1409
g44
sg45
g46
sbsg1416
(dp1462
g1418
Nssg1419
(lp1463
g1418
asg1421
Nsbsg113
Nsg120
I00
sg115
(dp1464
sg122
Nsg119
Nsg129
Nsg103
S'resample_o'
p1465
sg117
g1424
sg121
I00
sg123
Nsg124
I00
sg125
g1465
sg126
Nsg127
(lp1466
sg130
Nsb(dp1467
sg5
(g25
g7
Ntp1468
Rp1469
(dp1470
g29
(dp1471
sg31
g5
(g1403
g7
Ntp1472
Rp1473
(dp1474
g1407
(lp1475
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp1476
Rp1477
(dp1478
g69
I00
sg1437
S'MNI_edge_on_mean_func_mni_a.png'
p1479
sg1435
g44
sg1438
g1443
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1480
sg1436
g44
sg45
g46
sbsg1416
(dp1481
g1437
Nssg1419
(lp1482
g1437
asg1421
Nsbsg113
Nsg103
S'montage_a'
p1483
sg115
(dp1484
sg117
g1424
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1483
sg126
Nsg127
(lp1485
sg129
Nsg130
Nsb(dp1486
sg5
(g25
g7
Ntp1487
Rp1488
(dp1489
g29
(dp1490
sg31
g5
(g206
g7
Ntp1491
Rp1492
(dp1493
g36
g37
(g210
tp1494
Rp1495
(dp1496
g45
g46
sS'resampled_underlay'
p1497
g44
sS'axial_png'
p1498
g44
sS'sagittal_png'
p1499
g44
sS'resampled_overlay'
p1500
g44
sbsg221
(lp1501
g1498
ag1499
ag1497
ag1500
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp1502
sg117
g1424
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp1503
sg129
Nsg130
Nsb(dp1504
sg5
(g25
g7
Ntp1505
Rp1506
(dp1507
g29
(dp1508
sg31
g5
(g206
g7
Ntp1509
Rp1510
(dp1511
g36
g37
(g210
tp1512
Rp1513
(dp1514
g45
g46
sg1436
g44
sg1435
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1515
sbsg221
(lp1516
g1436
ag1435
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp1517
sg117
g1424
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp1518
sg129
Nsg130
Nsb(dp1519
ssg247
(dp1520
sg249
(dp1521
g1400
(dp1522
g1488
(dp1523
g253
(lp1524
(g1418
g1497
tp1525
assg1469
(dp1526
g253
(lp1527
(g1418
g1436
tp1528
assg1428
(dp1529
g253
(lp1530
(g1418
g1436
tp1531
asssg1428
(dp1532
g1488
(dp1533
g253
(lp1534
(g1437
g1499
tp1535
asssg1452
(dp1536
g1488
(dp1537
g253
(lp1538
(g1418
g1500
tp1539
assg1469
(dp1540
g253
(lp1541
(g1418
g1435
tp1542
assg1428
(dp1543
g253
(lp1544
(g1418
g1435
tp1545
asssg1469
(dp1546
g1488
(dp1547
g253
(lp1548
(g1437
g1498
tp1549
asssg1488
(dp1550
sg1506
(dp1551
g1400
(dp1552
g253
(lp1553
(g1436
g1409
tp1554
assg1452
(dp1555
g253
(lp1556
(g1435
g1409
tp1557
assssg295
g1521
sg296
(dp1558
g1400
(dp1559
g1506
g1552
ssg1428
(dp1560
g1400
g1529
sg1452
g1543
ssg1452
(dp1561
g1506
g1555
ssg1469
(dp1562
g1400
g1526
sg1452
g1540
ssg1488
(dp1563
g1428
g1533
sg1400
g1523
sg1469
g1547
sg1452
g1537
ssg1506
(dp1564
ssg304
g1521
sbsg103
g1424
sg117
g1067
sg125
g1424
sg126
g306
((lp1565
(lp1566
g309
ag306
((lp1567
(lp1568
g312
ag309
aa(lp1569
g314
ag315
aa(lp1570
g317
ag318
aa(lp1571
g320
ag321
aa(lp1572
g323
ag324
aa(lp1573
g326
ag327
aa(lp1574
g329
ag330
aa(lp1575
g332
ag333
aatp1576
Rp1577
aa(lp1578
g337
ag306
((lp1579
(lp1580
g312
ag337
aa(lp1581
g341
ag342
aa(lp1582
g344
ag345
aa(lp1583
g347
ag348
aa(lp1584
g350
ag351
aa(lp1585
g353
ag354
aa(lp1586
g356
ag357
aa(lp1587
g359
ag360
aa(lp1588
g362
ag363
aa(lp1589
g365
ag366
aa(lp1590
g368
ag369
aa(lp1591
g371
ag372
aa(lp1592
g374
ag375
aa(lp1593
g377
ag378
aa(lp1594
g380
ag381
aa(lp1595
g383
ag384
aa(lp1596
g386
ag387
aa(lp1597
g389
ag390
aa(lp1598
g392
ag393
aatp1599
Rp1600
aa(lp1601
g397
ag306
((lp1602
(lp1603
g312
ag397
aa(lp1604
g401
ag402
aatp1605
Rp1606
aatp1607
Rp1608
sg130
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g25
g7
Ntp1619
Rp1620
(dp1621
g29
(dp1622
sg31
g5
(g1403
g7
Ntp1623
Rp1624
(dp1625
g1407
(lp1626
g1409
asg36
g37
(g1410
tp1627
Rp1628
(dp1629
g69
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1630
sg1409
g44
sg45
g46
sbsg1416
(dp1631
g1418
Nssg1419
(lp1632
g1418
asg1421
Nsbsg113
Nsg103
g1422
sg115
(dp1633
sg117
S'montage_snr_0'
p1634
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1422
sg126
Nsg127
(lp1635
sg129
Nsg130
Nsb(dp1636
sg5
(g25
g7
Ntp1637
Rp1638
(dp1639
g29
(dp1640
sg31
g5
(g1403
g7
Ntp1641
Rp1642
(dp1643
g1407
(lp1644
g1409
asg36
g37
(g1410
tp1645
Rp1646
(dp1647
g69
I00
sg1414
g1630
sg1409
g44
sg45
g46
sbsg1416
(dp1648
g1418
Nssg1419
(lp1649
g1418
asg1421
Nsbsg113
Nsg120
I00
sg115
(dp1650
sg122
Nsg119
Nsg129
Nsg103
g1465
sg117
g1634
sg121
I00
sg123
Nsg124
I00
sg125
g1465
sg126
Nsg127
(lp1651
sg130
Nsb(dp1652
sg5
(g25
g7
Ntp1653
Rp1654
(dp1655
g29
(dp1656
sg31
g5
(g1403
g7
Ntp1657
Rp1658
(dp1659
g1407
(lp1660
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp1661
Rp1662
(dp1663
g69
I00
sg1437
S'snr_a.png'
p1664
sg1435
g44
sg1438
S'red_to_blue'
p1665
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1666
sg1436
g44
sg45
g46
sbsg1416
(dp1667
g1437
Nssg1419
(lp1668
g1437
asg1421
Nsbsg113
Nsg103
g1483
sg115
(dp1669
sg117
g1634
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1483
sg126
Nsg127
(lp1670
sg129
Nsg130
Nsb(dp1671
sg5
(g25
g7
Ntp1672
Rp1673
(dp1674
g29
(dp1675
sg31
g5
(g206
g7
Ntp1676
Rp1677
(dp1678
g36
g37
(g210
tp1679
Rp1680
(dp1681
g45
g46
sg1436
g44
sg1435
g44
sbsg221
(lp1682
g1436
ag1435
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp1683
sg117
g1634
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp1684
sg129
Nsg130
Nsb(dp1685
sg5
(g25
g7
Ntp1686
Rp1687
(dp1688
g29
(dp1689
sg31
g5
(g1403
g7
Ntp1690
Rp1691
(dp1692
g1407
(lp1693
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp1694
Rp1695
(dp1696
g69
I00
sg1437
S'snr_s.png'
p1697
sg1435
g44
sg1438
g1665
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1698
sg1436
g44
sg45
g46
sbsg1416
(dp1699
g1437
Nssg1419
(lp1700
g1437
asg1421
Nsbsg113
Nsg103
g1447
sg115
(dp1701
sg117
g1634
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1447
sg126
Nsg127
(lp1702
sg129
Nsg130
Nsb(dp1703
sg5
(g25
g7
Ntp1704
Rp1705
(dp1706
g29
(dp1707
sg31
g5
(g206
g7
Ntp1708
Rp1709
(dp1710
g36
g37
(g210
tp1711
Rp1712
(dp1713
g45
g46
sg1497
g44
sg1498
g44
sg1499
g44
sg1500
g44
sbsg221
(lp1714
g1498
ag1499
ag1497
ag1500
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp1715
sg117
g1634
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp1716
sg129
Nsg130
Nsb(dp1717
ssg247
(dp1718
sg249
(dp1719
g1620
(dp1720
g1654
(dp1721
g253
(lp1722
(g1418
g1436
tp1723
assg1705
(dp1724
g253
(lp1725
(g1418
g1497
tp1726
assg1687
(dp1727
g253
(lp1728
(g1418
g1436
tp1729
asssg1638
(dp1730
g1654
(dp1731
g253
(lp1732
(g1418
g1435
tp1733
assg1705
(dp1734
g253
(lp1735
(g1418
g1500
tp1736
assg1687
(dp1737
g253
(lp1738
(g1418
g1435
tp1739
asssg1654
(dp1740
g1705
(dp1741
g253
(lp1742
(g1437
g1498
tp1743
asssg1673
(dp1744
g1638
(dp1745
g253
(lp1746
(g1435
g1409
tp1747
assg1620
(dp1748
g253
(lp1749
(g1436
g1409
tp1750
asssg1687
(dp1751
g1705
(dp1752
g253
(lp1753
(g1437
g1499
tp1754
asssg1705
(dp1755
ssg295
g1719
sg296
(dp1756
g1620
(dp1757
g1673
g1748
ssg1638
(dp1758
g1673
g1745
ssg1654
(dp1759
g1638
g1731
sg1620
g1721
ssg1673
(dp1760
sg1687
(dp1761
g1638
g1737
sg1620
g1727
ssg1705
(dp1762
g1687
g1752
sg1638
g1734
sg1620
g1724
sg1654
g1741
sssg304
g1719
sbsg103
g1634
sg117
g1067
sg125
g1634
sg126
g306
((lp1763
(lp1764
g309
ag306
((lp1765
(lp1766
g312
ag309
aa(lp1767
g314
ag315
aa(lp1768
g317
ag318
aa(lp1769
g320
ag321
aa(lp1770
g323
ag324
aa(lp1771
g326
ag327
aa(lp1772
g329
ag330
aa(lp1773
g332
ag333
aatp1774
Rp1775
aa(lp1776
g337
ag306
((lp1777
(lp1778
g312
ag337
aa(lp1779
g341
ag342
aa(lp1780
g344
ag345
aa(lp1781
g347
ag348
aa(lp1782
g350
ag351
aa(lp1783
g353
ag354
aa(lp1784
g356
ag357
aa(lp1785
g359
ag360
aa(lp1786
g362
ag363
aa(lp1787
g365
ag366
aa(lp1788
g368
ag369
aa(lp1789
g371
ag372
aa(lp1790
g374
ag375
aa(lp1791
g377
ag378
aa(lp1792
g380
ag381
aa(lp1793
g383
ag384
aa(lp1794
g386
ag387
aa(lp1795
g389
ag390
aa(lp1796
g392
ag393
aatp1797
Rp1798
aa(lp1799
g397
ag306
((lp1800
(lp1801
g312
ag397
aa(lp1802
g401
ag402
aatp1803
Rp1804
aatp1805
Rp1806
sg130
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g25
g7
Ntp1810
Rp1811
(dp1812
g29
(dp1813
sg31
g5
(g1272
g7
Ntp1814
Rp1815
(dp1816
g36
g37
(g1276
tp1817
Rp1818
(dp1819
g69
I00
sg1280
g44
sg64
g44
sg1281
g44
sg82
g44
sg84
g44
sg72
g44
sg52
g44
sg1221
g44
sg1228
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg75
g76
sg92
g5
(g93
g94
(dp1821
g96
g97
stp1822
Rp1823
(dp1824
g101
S'environ_items'
p1825
sg103
g92
sbsg1287
g44
sg1288
g44
sg106
g97
sg1289
g44
sg1290
g44
sg45
g46
sg1291
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'mean_func_fsl_warp_0'
p1826
sg115
(dp1827
sg117
g1067
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1826
sg126
Nsg127
(lp1828
sg129
Nsg130
Nsbg82
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g25
g7
Ntp1831
Rp1832
(dp1833
g29
(dp1834
sg31
g5
(g1403
g7
Ntp1835
Rp1836
(dp1837
g1407
(lp1838
S'motion_parameters'
p1839
asg36
g37
(g1410
tp1840
Rp1841
(dp1842
g69
I00
sg1414
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g44
sg45
g46
sbsg1416
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1419
(lp1847
g1845
ag1846
asg1421
Nsbsg113
Nsg103
S'motion_plt_0'
p1848
sg115
(dp1849
sg117
g1067
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1848
sg126
Nsg127
(lp1850
sg129
Nsg130
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g25
g7
Ntp1853
Rp1854
(dp1855
g29
(dp1856
sg31
g5
(g1403
g7
Ntp1857
Rp1858
(dp1859
g1407
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg36
g37
(g1410
tp1864
Rp1865
(dp1866
g69
I00
sg45
g46
sg1861
g44
sg1414
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g44
sbsg1416
(dp1869
S'hist_path'
p1870
Nssg1419
(lp1871
g1870
asg1421
Nsbsg113
Nsg103
S'fd_plot_0'
p1872
sg115
(dp1873
sg117
g1067
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1872
sg126
Nsg127
(lp1874
sg129
Nsg130
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g25
g7
Ntp1884
Rp1885
(dp1886
g29
(dp1887
sg31
g5
(g1403
g7
Ntp1888
Rp1889
(dp1890
g1407
(lp1891
S'subject_id'
p1892
aS'scan_id'
p1893
aS'movement_parameters'
p1894
aS'max_displacement'
p1895
asg36
g37
(g1410
tp1896
Rp1897
(dp1898
g69
I00
sg1895
g44
sg1893
g44
sg1892
g44
sg1414
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1899
sg1894
g44
sg45
g46
sbsg1416
(dp1900
g82
Nssg1419
(lp1901
g82
asg1421
Nsbsg113
Nsg103
S'calc_motion_parameters'
p1902
sg115
(dp1903
sg117
S'gen_motion_stats_0'
p1904
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1902
sg126
Nsg127
(lp1905
sg129
Nsg130
Nsb(dp1906
sg5
(g25
g7
Ntp1907
Rp1908
(dp1909
g29
(dp1910
sg31
g5
(g1403
g7
Ntp1911
Rp1912
(dp1913
g1407
(lp1914
g64
ag220
aS'frames_before'
p1915
aS'frames_after'
p1916
asg36
g37
(g1410
tp1917
Rp1918
(dp1919
g69
I00
sg1916
g44
sg1414
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1920
sg64
g44
sg220
g44
sg45
g46
sg1915
g44
sbsg1416
(dp1921
g82
Nssg1419
(lp1922
g82
asg1421
Nsbsg113
Nsg103
S'exclude_frames'
p1923
sg115
(dp1924
sg117
g1904
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1923
sg126
Nsg127
(lp1925
sg129
Nsg130
Nsb(dp1926
sg5
(g25
g7
Ntp1927
Rp1928
(dp1929
g29
(dp1930
sg31
g5
(g1403
g7
Ntp1931
Rp1932
(dp1933
g1407
(lp1934
S'rest'
p1935
aS'mask'
p1936
asg36
g37
(g1410
tp1937
Rp1938
(dp1939
g69
I00
sg1936
g44
sg45
g46
sg1414
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p1940
sg1935
g44
sbsg1416
(dp1941
g82
Nssg1419
(lp1942
g82
asg1421
Nsbsg113
Nsg103
S'cal_DVARS'
p1943
sg115
(dp1944
sg117
g1904
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1943
sg126
Nsg127
(lp1945
sg129
Nsg130
Nsb(dp1946
sg5
(g25
g7
Ntp1947
Rp1948
(dp1949
g29
(dp1950
sg31
g5
(g206
g7
Ntp1951
Rp1952
(dp1953
g36
g37
(g210
tp1954
Rp1955
(dp1956
g45
g46
sS'frames_ex_1D'
p1957
g44
sS'FDJ_1D'
p1958
g44
sS'FD_1D'
p1959
g44
sS'frames_in_1D'
p1960
g44
sS'motion_params'
p1961
g44
sS'power_params'
p1962
g44
sbsg221
(lp1963
g1959
ag1958
ag1957
ag1960
ag1962
ag1961
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp1964
sg117
g1904
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp1965
sg129
Nsg130
Nsb(dp1966
sg5
(g25
g7
Ntp1967
Rp1968
(dp1969
g29
(dp1970
sg31
g5
(g206
g7
Ntp1971
Rp1972
(dp1973
g36
g37
(g210
tp1974
Rp1975
(dp1976
g1895
g44
sg45
g46
sg1893
g44
sg1892
g44
sg1936
g44
sg1894
g44
sS'oned_matrix_save'
p1977
g44
sS'motion_correct'
p1978
g44
sbsg221
(lp1979
g1892
ag1893
ag1894
ag1895
ag1978
ag1936
ag1977
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp1980
sg117
g1904
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp1981
sg129
Nsg130
Nsb(dp1982
sg5
(g25
g7
Ntp1983
Rp1984
(dp1985
g29
(dp1986
sg31
g5
(g1403
g7
Ntp1987
Rp1988
(dp1989
g1407
(lp1990
g1892
ag1893
ag1959
ag1958
ag220
aS'DVARS'
p1991
asg36
g37
(g1410
tp1992
Rp1993
(dp1994
g69
I00
sg45
g46
sg1893
g44
sg1892
g44
sg1991
g44
sg1414
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1995
sg1958
g44
sg1959
g44
sg220
g44
sbsg1416
(dp1996
g82
Nssg1419
(lp1997
g82
asg1421
Nsbsg113
Nsg103
S'calc_power_parameters'
p1998
sg115
(dp1999
sg117
g1904
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1998
sg126
Nsg127
(lp2000
sg129
Nsg130
Nsb(dp2001
sg5
(g25
g7
Ntp2002
Rp2003
(dp2004
g29
(dp2005
sg31
g5
(g1403
g7
Ntp2006
Rp2007
(dp2008
g1407
(lp2009
g64
ag220
aS'exclude_list'
p2010
asg36
g37
(g1410
tp2011
Rp2012
(dp2013
g69
I00
sg2010
g44
sg1414
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p2014
sg64
g44
sg220
g44
sg45
g46
sbsg1416
(dp2015
g82
Nssg1419
(lp2016
g82
asg1421
Nsbsg113
Nsg103
S'include_frames'
p2017
sg115
(dp2018
sg117
g1904
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g2017
sg126
Nsg127
(lp2019
sg129
Nsg130
Nsb(dp2020
sg5
(g25
g7
Ntp2021
Rp2022
(dp2023
g29
(dp2024
sg31
g5
(g206
g7
Ntp2025
Rp2026
(dp2027
g36
g37
(g210
tp2028
Rp2029
(dp2030
g220
(lp2031
F0.2
asg45
g46
sS'remove_frames_before'
p2032
I1
sS'remove_frames_after'
p2033
I2
sbsg221
(lp2034
g220
ag2032
ag2033
asg223
I01
sbsg113
Nsg103
S'scrubbing_input'
p2035
sg115
(dp2036
sg117
g1904
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
(g220
(lp2037
F0.2
atp2038
sg124
I00
sg125
g2035
sg126
Nsg127
(lp2039
sg129
Nsg130
Nsb(dp2040
sg5
(g25
g7
Ntp2041
Rp2042
(dp2043
g29
(dp2044
sg31
g5
(g1403
g7
Ntp2045
Rp2046
(dp2047
g1407
(lp2048
g64
asg36
g37
(g1410
tp2049
Rp2050
(dp2051
g69
I00
sg45
g46
sg1414
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p2052
sg64
g44
sbsg1416
(dp2053
g82
Nssg1419
(lp2054
g82
asg1421
Nsbsg113
Nsg103
S'calculate_FD'
p2055
sg115
(dp2056
sg117
g1904
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g2055
sg126
Nsg127
(lp2057
sg129
Nsg130
Nsb(dp2058
sg5
(g25
g7
Ntp2059
Rp2060
(dp2061
g29
(dp2062
sg31
g5
(g1403
g7
Ntp2063
Rp2064
(dp2065
g1407
(lp2066
g64
asg36
g37
(g1410
tp2067
Rp2068
(dp2069
g69
I00
sg45
g46
sg1414
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p2070
sg64
g44
sbsg1416
(dp2071
g82
Nssg1419
(lp2072
g82
asg1421
Nsbsg113
Nsg103
S'calculate_FDJ'
p2073
sg115
(dp2074
sg117
g1904
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g2073
sg126
Nsg127
(lp2075
sg129
Nsg130
Nsb(dp2076
ssg247
(dp2077
sg249
(dp2078
g1885
(dp2079
g1948
(dp2080
g253
(lp2081
(g82
g1961
tp2082
asssg1908
(dp2083
g1948
(dp2084
g253
(lp2085
(g82
g1957
tp2086
assg2003
(dp2087
g253
(lp2088
(g82
g2010
tp2089
asssg1928
(dp2090
g1984
(dp2091
g253
(lp2092
(g82
g1991
tp2093
asssg1948
(dp2094
sg1968
(dp2095
g1885
(dp2096
g253
(lp2097
(g1892
g1892
tp2098
a(g1893
g1893
tp2099
a(g1894
g1894
tp2100
a(g1895
g1895
tp2101
assg2042
(dp2102
g253
(lp2103
(g1894
g64
tp2104
assg1984
(dp2105
g253
(lp2106
(g1892
g1892
tp2107
a(g1893
g1893
tp2108
assg1928
(dp2109
g253
(lp2110
(g1978
g1935
tp2111
a(g1936
g1936
tp2112
assg2060
(dp2113
g253
(lp2114
(g1977
g64
tp2115
asssg1984
(dp2116
g1948
(dp2117
g253
(lp2118
(g82
g1962
tp2119
asssg2003
(dp2120
g1948
(dp2121
g253
(lp2122
(g82
g1960
tp2123
asssg2022
(dp2124
g1908
(dp2125
g253
(lp2126
(g220
g220
tp2127
a(g2032
g1915
tp2128
a(g2033
g1916
tp2129
assg2003
(dp2130
g253
(lp2131
(g220
g220
tp2132
assg1984
(dp2133
g253
(lp2134
(g220
g220
tp2135
asssg2042
(dp2136
g1908
(dp2137
g253
(lp2138
(g82
g64
tp2139
assg1984
(dp2140
g253
(lp2141
(g82
g1959
tp2142
assg1948
(dp2143
g253
(lp2144
(g82
g1959
tp2145
assg2003
(dp2146
g253
(lp2147
(g82
g64
tp2148
asssg2060
(dp2149
g1984
(dp2150
g253
(lp2151
(g82
g1958
tp2152
assg1948
(dp2153
g253
(lp2154
(g82
g1958
tp2155
assssg295
g2078
sg296
(dp2156
g1885
(dp2157
g1968
g2096
ssg1908
(dp2158
g2042
g2137
sg2022
g2125
ssg1928
(dp2159
g1968
g2109
ssg1948
(dp2160
g1908
g2084
sg1885
g2080
sg2003
g2121
sg1984
g2117
sg2042
g2143
sg2060
g2153
ssg1968
(dp2161
sg1984
(dp2162
g1968
g2105
sg2022
g2133
sg1928
g2091
sg2060
g2150
sg2042
g2140
ssg2003
(dp2163
g1908
g2087
sg2042
g2146
sg2022
g2130
ssg2022
(dp2164
sg2042
(dp2165
g1968
g2102
ssg2060
(dp2166
g1968
g2113
sssg304
g2078
sbsg103
g1904
sg117
g1067
sg125
g1904
sg126
g306
((lp2167
(lp2168
g309
ag306
((lp2169
(lp2170
g312
ag309
aa(lp2171
g314
ag315
aa(lp2172
g317
ag318
aa(lp2173
g320
ag321
aa(lp2174
g323
ag324
aa(lp2175
g326
ag327
aa(lp2176
g329
ag330
aa(lp2177
g332
ag333
aatp2178
Rp2179
aa(lp2180
g337
ag306
((lp2181
(lp2182
g312
ag337
aa(lp2183
g341
ag342
aa(lp2184
g344
ag345
aa(lp2185
g347
ag348
aa(lp2186
g350
ag351
aa(lp2187
g353
ag354
aa(lp2188
g356
ag357
aa(lp2189
g359
ag360
aa(lp2190
g362
ag363
aa(lp2191
g365
ag366
aa(lp2192
g368
ag369
aa(lp2193
g371
ag372
aa(lp2194
g374
ag375
aa(lp2195
g377
ag378
aa(lp2196
g380
ag381
aa(lp2197
g383
ag384
aa(lp2198
g386
ag387
aa(lp2199
g389
ag390
aa(lp2200
g392
ag393
aatp2201
Rp2202
aa(lp2203
g397
ag306
((lp2204
(lp2205
g312
ag397
aa(lp2206
g401
ag402
aatp2207
Rp2208
aatp2209
Rp2210
sg130
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g25
g7
Ntp2224
Rp2225
(dp2226
g29
(dp2227
sg31
g5
(cnipype.interfaces.afni.preprocess
Calc
p2228
g7
Ntp2229
Rp2230
(dp2231
g36
g37
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2232
tp2233
Rp2234
(dp2235
S'stop_idx'
p2236
g44
sg69
I00
sg45
g46
sg82
g44
sS'expr'
p2237
S'a*step(b)'
p2238
sg72
g44
sS'outputtype'
p2239
S'NIFTI_GZ'
p2240
sS'in_file_b'
p2241
g44
sS'in_file_c'
p2242
g44
sS'in_file_a'
p2243
g44
sg92
g5
(g93
g94
(dp2244
tp2245
Rp2246
(dp2247
g101
S'environ_items'
p2248
sg103
g92
sbsS'single_idx'
p2249
g44
sS'other'
p2250
g44
sS'start_idx'
p2251
g44
sg75
g76
sbsS'_outputtype'
p2252
g2240
sg111
Nsg112
g76
sbsg113
Nsg120
I00
sg115
(dp2253
sg122
Nsg119
Nsg129
Nsg103
S'anat_brain_only'
p2254
sg117
S'anat_preproc_0'
p2255
sg121
I00
sg123
Nsg124
I00
sg125
g2254
sg126
Nsg127
(lp2256
sg130
Nsb(dp2257
sg5
(g25
g7
Ntp2258
Rp2259
(dp2260
g29
(dp2261
sg31
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2262
g7
Ntp2263
Rp2264
(dp2265
g36
g37
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2266
tp2267
Rp2268
(dp2269
g69
I00
sg45
g46
sg82
g44
sg72
g44
sg2239
S'AFNI'
p2270
sg75
g76
sg92
g5
(g93
g94
(dp2271
tp2272
Rp2273
(dp2274
g101
S'environ_items'
p2275
sg103
g92
sbsg64
g44
sbsg2252
g2270
sg111
Nsg112
g76
sbsg113
Nsg120
I00
sg115
(dp2276
sg122
Nsg119
Nsg129
Nsg103
S'anat_skullstrip'
p2277
sg117
g2255
sg121
I00
sg123
Nsg124
I00
sg125
g2277
sg126
Nsg127
(lp2278
sg130
Nsb(dp2279
sg5
(g25
g7
Ntp2280
Rp2281
(dp2282
g29
(dp2283
sg31
g5
(g206
g7
Ntp2284
Rp2285
(dp2286
g36
g37
(g210
tp2287
Rp2288
(dp2289
g45
g46
sS'anat'
p2290
g44
sbsg221
(lp2291
g2290
asg223
I01
sbsg113
Nsg120
I00
sg115
(dp2292
sg122
Nsg119
Nsg129
Nsg103
g224
sg117
g2255
sg121
I00
sg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp2293
sg130
Nsb(dp2294
sg5
(g25
g7
Ntp2295
Rp2296
(dp2297
g29
(dp2298
sg31
g5
(cnipype.interfaces.afni.preprocess
Resample
p2299
g7
Ntp2300
Rp2301
(dp2302
g36
g37
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2303
tp2304
Rp2305
(dp2306
g69
I00
sg45
g46
sg82
g44
sg72
g44
sg2239
g2240
sS'resample_mode'
p2307
g44
sS'voxel_size'
p2308
g44
sg75
g76
sS'master'
p2309
g44
sg64
g44
sg92
g5
(g93
g94
(dp2310
tp2311
Rp2312
(dp2313
g101
S'environ_items'
p2314
sg103
g92
sbsS'orientation'
p2315
S'RPI'
p2316
sbsg2252
g2240
sg111
Nsg112
g76
sbsg113
Nsg120
I00
sg115
(dp2317
sg122
Nsg119
Nsg129
Nsg103
S'anat_reorient'
p2318
sg117
g2255
sg121
I00
sg123
Nsg124
I00
sg125
g2318
sg126
Nsg127
(lp2319
sg130
Nsb(dp2320
sg5
(g25
g7
Ntp2321
Rp2322
(dp2323
g29
(dp2324
sg31
g5
(cnipype.interfaces.afni.preprocess
Refit
p2325
g7
Ntp2326
Rp2327
(dp2328
g36
g37
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2329
tp2330
Rp2331
(dp2332
g69
I00
sg45
g46
sS'deoblique'
p2333
I01
sg72
g44
sS'yorigin'
p2334
g44
sg75
g76
sg92
g5
(g93
g94
(dp2335
tp2336
Rp2337
(dp2338
g101
S'environ_items'
p2339
sg103
g92
sbsg64
g44
sS'xorigin'
p2340
g44
sS'zorigin'
p2341
g44
sbsg111
Nsg112
g76
sbsg113
Nsg120
I00
sg115
(dp2342
sg122
Nsg119
Nsg129
Nsg103
S'anat_deoblique'
p2343
sg117
g2255
sg121
I00
sg123
Nsg124
I00
sg125
g2343
sg126
Nsg127
(lp2344
sg130
Nsb(dp2345
sg5
(g25
g7
Ntp2346
Rp2347
(dp2348
g29
(dp2349
sg31
g5
(g206
g7
Ntp2350
Rp2351
(dp2352
g36
g37
(g210
tp2353
Rp2354
(dp2355
S'reorient'
p2356
g44
sg218
g44
sS'refit'
p2357
g44
sg45
g46
sS'skullstrip'
p2358
g44
sbsg221
(lp2359
g2357
ag2356
ag2358
ag218
asg223
I01
sbsg113
Nsg120
I00
sg115
(dp2360
sg122
Nsg119
Nsg129
Nsg103
g243
sg117
g2255
sg121
I00
sg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp2361
sg130
Nsb(dp2362
ssg249
(dp2363
g2225
(dp2364
g2347
(dp2365
g253
(lp2366
(g82
g218
tp2367
asssg2259
(dp2368
g2347
(dp2369
g253
(lp2370
(g82
g2358
tp2371
assg2225
(dp2372
g253
(lp2373
(g82
g2241
tp2374
asssg2281
(dp2375
g2322
(dp2376
g253
(lp2377
(g2290
g64
tp2378
asssg2296
(dp2379
g2259
(dp2380
g253
(lp2381
(g82
g64
tp2382
assg2347
(dp2383
g253
(lp2384
(g82
g2356
tp2385
assg2225
(dp2386
g253
(lp2387
(g82
g2243
tp2388
asssg2322
(dp2389
g2347
(dp2390
g253
(lp2391
(g82
g2357
tp2392
assg2296
(dp2393
g253
(lp2394
(g82
g64
tp2395
asssg2347
(dp2396
ssg295
g2363
sg296
(dp2397
g2225
(dp2398
g2259
g2372
sg2296
g2386
ssg2259
(dp2399
g2296
g2380
ssg2281
(dp2400
sg2296
(dp2401
g2322
g2393
ssg2322
(dp2402
g2281
g2376
ssg2347
(dp2403
g2259
g2369
sg2322
g2390
sg2296
g2383
sg2225
g2365
sssg247
(dp2404
sg304
g2363
sbsg103
g2255
sg117
g1067
sg125
g2255
sg126
g306
((lp2405
(lp2406
g309
ag306
((lp2407
(lp2408
g312
ag309
aa(lp2409
g314
ag315
aa(lp2410
g317
ag318
aa(lp2411
g320
ag321
aa(lp2412
g323
ag324
aa(lp2413
g326
ag327
aa(lp2414
g329
ag330
aa(lp2415
g332
ag333
aatp2416
Rp2417
aa(lp2418
g337
ag306
((lp2419
(lp2420
g312
ag337
aa(lp2421
g341
ag342
aa(lp2422
g344
ag345
aa(lp2423
g347
ag348
aa(lp2424
g350
ag351
aa(lp2425
g353
ag354
aa(lp2426
g356
ag357
aa(lp2427
g359
ag360
aa(lp2428
g362
ag363
aa(lp2429
g365
ag366
aa(lp2430
g368
ag369
aa(lp2431
g371
ag372
aa(lp2432
g374
ag375
aa(lp2433
g377
ag378
aa(lp2434
g380
ag381
aa(lp2435
g383
ag384
aa(lp2436
g386
ag387
aa(lp2437
g389
ag390
aa(lp2438
g392
ag393
aatp2439
Rp2440
aa(lp2441
g397
ag306
((lp2442
(lp2443
g312
ag397
aa(lp2444
g401
ag402
aatp2445
Rp2446
aatp2447
Rp2448
sg130
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g25
g7
Ntp2459
Rp2460
(dp2461
g29
(dp2462
sg31
g5
(g182
g7
Ntp2463
Rp2464
(dp2465
g36
g37
(g186
tp2466
Rp2467
(dp2468
g69
I00
sg45
g46
sg145
S'-ing 10000'
p2469
sg190
S'float'
p2470
sg82
g44
sg72
g44
sg191
g44
sg75
g76
sg92
g5
(g93
g94
(dp2471
g96
g97
stp2472
Rp2473
(dp2474
g101
S'environ_items'
p2475
sg103
g92
sbsg64
g44
sg106
g97
sg197
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'func_normalize'
p2476
sg115
(dp2477
sg117
S'func_preproc_automask_0'
p2478
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g2476
sg126
Nsg127
(lp2479
sg129
Nsg130
Nsb(dp2480
sg5
(g25
g7
Ntp2481
Rp2482
(dp2483
g29
(dp2484
sg31
g5
(cnipype.interfaces.afni.preprocess
Automask
p2485
g7
Ntp2486
Rp2487
(dp2488
g36
g37
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2489
tp2490
Rp2491
(dp2492
g69
I00
sg45
g46
sg72
g44
sS'erode'
p2493
g44
sg82
g44
sS'dilate'
p2494
g44
sS'clfrac'
p2495
g44
sg2239
g2240
sS'brain_file'
p2496
g44
sg75
g76
sg92
g5
(g93
g94
(dp2497
tp2498
Rp2499
(dp2500
g101
S'environ_items'
p2501
sg103
g92
sbsg64
g44
sbsg2252
g2240
sg111
Nsg112
g76
sbsg113
Nsg103
S'func_get_brain_mask'
p2502
sg115
(dp2503
sg117
g2478
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g2502
sg126
Nsg127
(lp2504
sg129
Nsg130
Nsb(dp2505
sg5
(g25
g7
Ntp2506
Rp2507
(dp2508
g29
(dp2509
sg31
g5
(cnipype.interfaces.afni.preprocess
TStat
p2510
g7
Ntp2511
Rp2512
(dp2513
g36
g37
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2514
tp2515
Rp2516
(dp2517
g69
I00
sg45
g46
sg82
g44
sg72
g44
sg1936
g44
sg2239
g2240
sg75
g76
sg92
g5
(g93
g94
(dp2518
tp2519
Rp2520
(dp2521
g101
S'environ_items'
p2522
sg103
g92
sbsg64
g44
sS'options'
p2523
S'-mean'
p2524
sbsg2252
g2240
sg111
Nsg112
g76
sbsg113
Nsg103
S'func_get_mean_RPI'
p2525
sg115
(dp2526
sg117
g2478
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g2525
sg126
Nsg127
(lp2527
sg129
Nsg130
Nsb(dp2528
sg5
(g25
g7
Ntp2529
Rp2530
(dp2531
g29
(dp2532
sg31
g5
(g2510
g7
Ntp2533
Rp2534
(dp2535
g36
g37
(g2514
tp2536
Rp2537
(dp2538
g69
I00
sg45
g46
sg82
g44
sg72
g44
sg1936
g44
sg2239
g2240
sg75
g76
sg92
g5
(g93
g94
(dp2539
tp2540
Rp2541
(dp2542
g101
S'environ_items'
p2543
sg103
g92
sbsg64
g44
sg2523
g2524
sbsg2252
g2240
sg111
Nsg112
g76
sbsg113
Nsg103
S'func_mean_skullstrip'
p2544
sg115
(dp2545
sg117
g2478
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g2544
sg126
Nsg127
(lp2546
sg129
Nsg130
Nsb(dp2547
sg5
(g25
g7
Ntp2548
Rp2549
(dp2550
g29
(dp2551
sg31
g5
(g206
g7
Ntp2552
Rp2553
(dp2554
g36
g37
(g210
tp2555
Rp2556
(dp2557
g45
g46
sS'func'
p2558
g44
sbsg221
(lp2559
g2558
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp2560
sg117
g2478
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp2561
sg129
Nsg130
Nsb(dp2562
sg5
(g25
g7
Ntp2563
Rp2564
(dp2565
g29
(dp2566
sg31
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2567
g7
Ntp2568
Rp2569
(dp2570
g36
g37
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2571
tp2572
Rp2573
(dp2574
S'oned_file'
p2575
g44
sg69
I00
sg48
g44
sS'timeshift'
p2576
g44
sS'basefile'
p2577
g44
sg72
S'-Fourier -twopass'
p2578
sg2239
g2240
sS'zpad'
p2579
I4
sg75
g76
sS'md1d_file'
p2580
g44
sg64
g44
sS'copyorigin'
p2581
g44
sg92
g5
(g93
g94
(dp2582
tp2583
Rp2584
(dp2585
g101
S'environ_items'
p2586
sg103
g92
sbsg1977
g44
sg45
g46
sg82
g44
sbsg2252
g2240
sg111
Nsg112
g76
sbsg113
Nsg103
S'func_motion_correct'
p2587
sg115
(dp2588
sg117
g2478
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g2587
sg126
Nsg127
(lp2589
sg129
Nsg130
Nsb(dp2590
sg5
(g25
g7
Ntp2591
Rp2592
(dp2593
g29
(dp2594
sg31
g5
(g206
g7
Ntp2595
Rp2596
(dp2597
g36
g37
(g210
tp2598
Rp2599
(dp2600
g1895
g44
sS'motion_correct_ref'
p2601
g44
sg45
g46
sS'preprocessed_mask'
p2602
g44
sg1936
g44
sg2357
g44
sg2358
g44
sg2356
g44
sS'preprocessed'
p2603
g44
sS'slice_time_corrected'
p2604
g44
sg1894
g44
sS'example_func'
p2605
g44
sg1977
g44
sS'reorient_mean'
p2606
g44
sg1978
g44
sbsg221
(lp2607
g2357
ag2356
ag2606
ag1978
ag2601
ag1894
ag1895
ag1936
ag2358
ag2605
ag2603
ag2602
ag2604
ag1977
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp2608
sg117
g2478
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp2609
sg129
Nsg130
Nsb(dp2610
sg5
(g25
g7
Ntp2611
Rp2612
(dp2613
g29
(dp2614
sg31
g5
(g2299
g7
Ntp2615
Rp2616
(dp2617
g36
g37
(g2303
tp2618
Rp2619
(dp2620
g69
I00
sg45
g46
sg82
g44
sg72
g44
sg2239
g2240
sg2307
g44
sg2308
g44
sg75
g76
sg2309
g44
sg64
g44
sg92
g5
(g93
g94
(dp2621
tp2622
Rp2623
(dp2624
g101
S'environ_items'
p2625
sg103
g92
sbsg2315
g2316
sbsg2252
g2240
sg111
Nsg112
g76
sbsg113
Nsg103
S'func_reorient'
p2626
sg115
(dp2627
sg117
g2478
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g2626
sg126
Nsg127
(lp2628
sg129
Nsg130
Nsb(dp2629
sg5
(g25
g7
Ntp2630
Rp2631
(dp2632
g29
(dp2633
sg31
g5
(g2510
g7
Ntp2634
Rp2635
(dp2636
g36
g37
(g2514
tp2637
Rp2638
(dp2639
g69
I00
sg45
g46
sg82
g44
sg72
g44
sg1936
g44
sg2239
g2240
sg75
g76
sg92
g5
(g93
g94
(dp2640
tp2641
Rp2642
(dp2643
g101
S'environ_items'
p2644
sg103
g92
sbsg64
g44
sg2523
g2524
sbsg2252
g2240
sg111
Nsg112
g76
sbsg113
Nsg120
I00
sg115
(dp2645
sg122
Nsg119
Nsg129
Nsg103
S'func_get_mean_motion'
p2646
sg117
g2478
sg121
I00
sg123
Nsg124
I00
sg125
g2646
sg126
Nsg127
(lp2647
sg130
Nsb(dp2648
sg5
(g25
g7
Ntp2649
Rp2650
(dp2651
g29
(dp2652
sg31
g5
(g2325
g7
Ntp2653
Rp2654
(dp2655
g36
g37
(g2329
tp2656
Rp2657
(dp2658
g69
I00
sg45
g46
sg2333
I01
sg72
g44
sg2334
g44
sg75
g76
sg92
g5
(g93
g94
(dp2659
tp2660
Rp2661
(dp2662
g101
S'environ_items'
p2663
sg103
g92
sbsg64
g44
sg2340
g44
sg2341
g44
sbsg111
Nsg112
g76
sbsg113
Nsg103
S'func_deoblique'
p2664
sg115
(dp2665
sg117
g2478
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g2664
sg126
Nsg127
(lp2666
sg129
Nsg130
Nsb(dp2667
sg5
(g25
g7
Ntp2668
Rp2669
(dp2670
g29
(dp2671
sg31
g5
(g182
g7
Ntp2672
Rp2673
(dp2674
g36
g37
(g186
tp2675
Rp2676
(dp2677
g69
I00
sg45
g46
sg145
S'-Tmin -bin'
p2678
sg190
S'char'
p2679
sg82
g44
sg72
g44
sg191
g44
sg75
g76
sg92
g5
(g93
g94
(dp2680
g96
g97
stp2681
Rp2682
(dp2683
g101
S'environ_items'
p2684
sg103
g92
sbsg64
g44
sg106
g97
sg197
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'func_mask_normalize'
p2685
sg115
(dp2686
sg117
g2478
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g2685
sg126
Nsg127
(lp2687
sg129
Nsg130
Nsb(dp2688
sg5
(g25
g7
Ntp2689
Rp2690
(dp2691
g29
(dp2692
sg31
g5
(g2567
g7
Ntp2693
Rp2694
(dp2695
g36
g37
(g2571
tp2696
Rp2697
(dp2698
g2575
g44
sg69
I00
sg48
g44
sg2576
g44
sg2577
g44
sg72
g2578
sg2239
g2240
sg2579
I4
sg75
g76
sg2580
S'max_displacement.1D'
p2699
sg64
g44
sg2581
g44
sg92
g5
(g93
g94
(dp2700
tp2701
Rp2702
(dp2703
g101
S'environ_items'
p2704
sg103
g92
sbsg1977
g44
sg45
g46
sg82
g44
sbsg2252
g2240
sg111
Nsg112
g76
sbsg113
Nsg120
I00
sg115
(dp2705
sg122
Nsg119
Nsg129
Nsg103
S'func_motion_correct_A'
p2706
sg117
g2478
sg121
I00
sg123
Nsg124
I00
sg125
g2706
sg126
Nsg127
(lp2707
sg130
Nsb(dp2708
sg5
(g25
g7
Ntp2709
Rp2710
(dp2711
g29
(dp2712
sg31
g5
(g2228
g7
Ntp2713
Rp2714
(dp2715
g36
g37
(g2232
tp2716
Rp2717
(dp2718
g2236
g44
sg69
I00
sg45
g46
sg82
g44
sg2237
S'a*b'
p2719
sg72
g44
sg2239
g2240
sg2241
g44
sg2242
g44
sg2243
g44
sg92
g5
(g93
g94
(dp2720
tp2721
Rp2722
(dp2723
g101
S'environ_items'
p2724
sg103
g92
sbsg2249
g44
sg2250
g44
sg2251
g44
sg75
g76
sbsg2252
g2240
sg111
Nsg112
g76
sbsg113
Nsg103
S'func_edge_detect'
p2725
sg115
(dp2726
sg117
g2478
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g2725
sg126
Nsg127
(lp2727
sg129
Nsg130
Nsb(dp2728
ssg247
(dp2729
sg249
(dp2730
g2460
(dp2731
g2669
(dp2732
g253
(lp2733
(g82
g64
tp2734
assg2592
(dp2735
g253
(lp2736
(g82
g2603
tp2737
asssg2482
(dp2738
g2592
(dp2739
g253
(lp2740
(g82
g1936
tp2741
assg2710
(dp2742
g253
(lp2743
(g82
g2241
tp2744
asssg2507
(dp2745
g2564
(dp2746
g253
(lp2747
(g82
g2577
tp2748
asssg2530
(dp2749
g2592
(dp2750
g253
(lp2751
(g82
g2605
tp2752
asssg2549
(dp2753
g2650
(dp2754
g253
(lp2755
(g2558
g64
tp2756
asssg2564
(dp2757
g2631
(dp2758
g253
(lp2759
(g82
g64
tp2760
asssg2592
(dp2761
sg2612
(dp2762
g2507
(dp2763
g253
(lp2764
(g82
g64
tp2765
assg2690
(dp2766
g253
(lp2767
(g82
g64
tp2768
assg2592
(dp2769
g253
(lp2770
(g82
g2356
tp2771
assg2564
(dp2772
g253
(lp2773
(g82
g64
tp2774
asssg2631
(dp2775
g2592
(dp2776
g253
(lp2777
(g82
g2601
tp2778
assg2690
(dp2779
g253
(lp2780
(g82
g2577
tp2781
asssg2650
(dp2782
g2612
(dp2783
g253
(lp2784
(g82
g64
tp2785
asssg2669
(dp2786
g2592
(dp2787
g253
(lp2788
(g82
g2602
tp2789
asssg2690
(dp2790
g2482
(dp2791
g253
(lp2792
(g82
g64
tp2793
assg2592
(dp2794
g253
(lp2795
(g82
g1978
tp2796
a(g2580
g1895
tp2797
a(g2575
g1894
tp2798
a(g1977
g1977
tp2799
assg2710
(dp2800
g253
(lp2801
(g82
g2243
tp2802
asssg2710
(dp2803
g2530
(dp2804
g253
(lp2805
(g82
g64
tp2806
assg2592
(dp2807
g253
(lp2808
(g82
g2358
tp2809
assg2460
(dp2810
g253
(lp2811
(g82
g64
tp2812
assssg295
g2730
sg296
(dp2813
g2460
(dp2814
g2710
g2810
ssg2482
(dp2815
g2690
g2791
ssg2507
(dp2816
g2612
g2763
ssg2530
(dp2817
g2710
g2804
ssg2549
(dp2818
sg2564
(dp2819
g2612
g2772
sg2507
g2746
ssg2592
(dp2820
g2460
g2735
sg2530
g2750
sg2710
g2807
sg2612
g2769
sg2631
g2776
sg2482
g2739
sg2669
g2787
sg2690
g2794
ssg2612
(dp2821
g2650
g2783
ssg2631
(dp2822
g2564
g2758
ssg2650
(dp2823
g2549
g2754
ssg2669
(dp2824
g2460
g2732
ssg2690
(dp2825
g2612
g2766
sg2631
g2779
ssg2710
(dp2826
g2482
g2742
sg2690
g2800
sssg304
g2730
sbsg103
g2478
sg117
g1067
sg125
g2478
sg126
g306
((lp2827
(lp2828
g309
ag306
((lp2829
(lp2830
g312
ag309
aa(lp2831
g314
ag315
aa(lp2832
g317
ag318
aa(lp2833
g320
ag321
aa(lp2834
g323
ag324
aa(lp2835
g326
ag327
aa(lp2836
g329
ag330
aa(lp2837
g332
ag333
aatp2838
Rp2839
aa(lp2840
g337
ag306
((lp2841
(lp2842
g312
ag337
aa(lp2843
g341
ag342
aa(lp2844
g344
ag345
aa(lp2845
g347
ag348
aa(lp2846
g350
ag351
aa(lp2847
g353
ag354
aa(lp2848
g356
ag357
aa(lp2849
g359
ag360
aa(lp2850
g362
ag363
aa(lp2851
g365
ag366
aa(lp2852
g368
ag369
aa(lp2853
g371
ag372
aa(lp2854
g374
ag375
aa(lp2855
g377
ag378
aa(lp2856
g380
ag381
aa(lp2857
g383
ag384
aa(lp2858
g386
ag387
aa(lp2859
g389
ag390
aa(lp2860
g392
ag393
aatp2861
Rp2862
aa(lp2863
g397
ag306
((lp2864
(lp2865
g312
ag397
aa(lp2866
g401
ag402
aatp2867
Rp2868
aatp2869
Rp2870
sg130
NsbS'outputspec.example_func'
p2871
tp2872
sg1894
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g25
g7
Ntp2880
Rp2881
(dp2882
g29
(dp2883
sg31
g5
(g206
g7
Ntp2884
Rp2885
(dp2886
g36
g37
(g210
tp2887
Rp2888
(dp2889
g45
g46
sS'movement_file'
p2890
g44
sbsg221
(lp2891
g2890
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp2892
sg117
S'fristons_parameter_model_0'
p2893
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp2894
sg129
Nsg130
Nsb(dp2895
sg5
(g25
g7
Ntp2896
Rp2897
(dp2898
g29
(dp2899
sg31
g5
(g1403
g7
Ntp2900
Rp2901
(dp2902
g1407
(lp2903
g64
asg36
g37
(g1410
tp2904
Rp2905
(dp2906
g69
I00
sg45
g46
sg1414
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2907
sg64
g44
sbsg1416
(dp2908
g82
Nssg1419
(lp2909
g82
asg1421
Nsbsg113
Nsg103
S'calc_friston'
p2910
sg115
(dp2911
sg117
g2893
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g2910
sg126
Nsg127
(lp2912
sg129
Nsg130
Nsb(dp2913
sg5
(g25
g7
Ntp2914
Rp2915
(dp2916
g29
(dp2917
sg31
g5
(g206
g7
Ntp2918
Rp2919
(dp2920
g36
g37
(g210
tp2921
Rp2922
(dp2923
g45
g46
sg2890
g44
sbsg221
(lp2924
g2890
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp2925
sg117
g2893
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp2926
sg129
Nsg130
Nsb(dp2927
ssg247
(dp2928
sg249
(dp2929
g2881
(dp2930
g2897
(dp2931
g253
(lp2932
(g2890
g64
tp2933
asssg2897
(dp2934
g2915
(dp2935
g253
(lp2936
(g82
g2890
tp2937
asssg2915
(dp2938
ssg295
g2929
sg296
(dp2939
g2881
(dp2940
sg2897
(dp2941
g2881
g2931
ssg2915
(dp2942
g2897
g2935
sssg304
g2929
sbsg103
g2893
sg117
g1067
sg125
g2893
sg126
g306
((lp2943
(lp2944
g309
ag306
((lp2945
(lp2946
g312
ag309
aa(lp2947
g314
ag315
aa(lp2948
g317
ag318
aa(lp2949
g320
ag321
aa(lp2950
g323
ag324
aa(lp2951
g326
ag327
aa(lp2952
g329
ag330
aa(lp2953
g332
ag333
aatp2954
Rp2955
aa(lp2956
g337
ag306
((lp2957
(lp2958
g312
ag337
aa(lp2959
g341
ag342
aa(lp2960
g344
ag345
aa(lp2961
g347
ag348
aa(lp2962
g350
ag351
aa(lp2963
g353
ag354
aa(lp2964
g356
ag357
aa(lp2965
g359
ag360
aa(lp2966
g362
ag363
aa(lp2967
g365
ag366
aa(lp2968
g368
ag369
aa(lp2969
g371
ag372
aa(lp2970
g374
ag375
aa(lp2971
g377
ag378
aa(lp2972
g380
ag381
aa(lp2973
g383
ag384
aa(lp2974
g386
ag387
aa(lp2975
g389
ag390
aa(lp2976
g392
ag393
aatp2977
Rp2978
aa(lp2979
g397
ag306
((lp2980
(lp2981
g312
ag397
aa(lp2982
g401
ag402
aatp2983
Rp2984
aatp2985
Rp2986
sg130
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g25
g7
Ntp2997
Rp2998
(dp2999
g29
(dp3000
sg31
g5
(g1403
g7
Ntp3001
Rp3002
(dp3003
g1407
(lp3004
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp3005
Rp3006
(dp3007
g69
I00
sg1437
S't1_edge_on_mean_func_in_t1_a.png'
p3008
sg1435
g44
sg1438
g1443
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3009
sg1436
g44
sg45
g46
sbsg1416
(dp3010
g1437
Nssg1419
(lp3011
g1437
asg1421
Nsbsg113
Nsg103
g1483
sg115
(dp3012
sg117
S'montage_anat_0'
p3013
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1483
sg126
Nsg127
(lp3014
sg129
Nsg130
Nsb(dp3015
sg5
(g25
g7
Ntp3016
Rp3017
(dp3018
g29
(dp3019
sg31
g5
(g1403
g7
Ntp3020
Rp3021
(dp3022
g1407
(lp3023
g1409
asg36
g37
(g1410
tp3024
Rp3025
(dp3026
g69
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3027
sg1409
g44
sg45
g46
sbsg1416
(dp3028
g1418
Nssg1419
(lp3029
g1418
asg1421
Nsbsg113
Nsg120
I00
sg115
(dp3030
sg122
Nsg119
Nsg129
Nsg103
g1465
sg117
g3013
sg121
I00
sg123
Nsg124
I00
sg125
g1465
sg126
Nsg127
(lp3031
sg130
Nsb(dp3032
sg5
(g25
g7
Ntp3033
Rp3034
(dp3035
g29
(dp3036
sg31
g5
(g1403
g7
Ntp3037
Rp3038
(dp3039
g1407
(lp3040
g1409
asg36
g37
(g1410
tp3041
Rp3042
(dp3043
g69
I00
sg1414
g3027
sg1409
g44
sg45
g46
sbsg1416
(dp3044
g1418
Nssg1419
(lp3045
g1418
asg1421
Nsbsg113
Nsg103
g1422
sg115
(dp3046
sg117
g3013
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1422
sg126
Nsg127
(lp3047
sg129
Nsg130
Nsb(dp3048
sg5
(g25
g7
Ntp3049
Rp3050
(dp3051
g29
(dp3052
sg31
g5
(g1403
g7
Ntp3053
Rp3054
(dp3055
g1407
(lp3056
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp3057
Rp3058
(dp3059
g69
I00
sg1437
S't1_edge_on_mean_func_in_t1_s.png'
p3060
sg1435
g44
sg1438
g1443
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3061
sg1436
g44
sg45
g46
sbsg1416
(dp3062
g1437
Nssg1419
(lp3063
g1437
asg1421
Nsbsg113
Nsg103
g1447
sg115
(dp3064
sg117
g3013
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1447
sg126
Nsg127
(lp3065
sg129
Nsg130
Nsb(dp3066
sg5
(g25
g7
Ntp3067
Rp3068
(dp3069
g29
(dp3070
sg31
g5
(g206
g7
Ntp3071
Rp3072
(dp3073
g36
g37
(g210
tp3074
Rp3075
(dp3076
g45
g46
sg1436
g44
sg1435
g44
sbsg221
(lp3077
g1436
ag1435
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp3078
sg117
g3013
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp3079
sg129
Nsg130
Nsb(dp3080
sg5
(g25
g7
Ntp3081
Rp3082
(dp3083
g29
(dp3084
sg31
g5
(g206
g7
Ntp3085
Rp3086
(dp3087
g36
g37
(g210
tp3088
Rp3089
(dp3090
g45
g46
sg1497
g44
sg1498
g44
sg1499
g44
sg1500
g44
sbsg221
(lp3091
g1498
ag1499
ag1497
ag1500
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp3092
sg117
g3013
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp3093
sg129
Nsg130
Nsb(dp3094
ssg247
(dp3095
sg249
(dp3096
g2998
(dp3097
g3082
(dp3098
g253
(lp3099
(g1437
g1498
tp3100
asssg3017
(dp3101
g3082
(dp3102
g253
(lp3103
(g1418
g1500
tp3104
assg2998
(dp3105
g253
(lp3106
(g1418
g1435
tp3107
assg3050
(dp3108
g253
(lp3109
(g1418
g1435
tp3110
asssg3034
(dp3111
g3082
(dp3112
g253
(lp3113
(g1418
g1497
tp3114
assg2998
(dp3115
g253
(lp3116
(g1418
g1436
tp3117
assg3050
(dp3118
g253
(lp3119
(g1418
g1436
tp3120
asssg3050
(dp3121
g3082
(dp3122
g253
(lp3123
(g1437
g1499
tp3124
asssg3068
(dp3125
g3034
(dp3126
g253
(lp3127
(g1436
g1409
tp3128
assg3017
(dp3129
g253
(lp3130
(g1435
g1409
tp3131
asssg3082
(dp3132
ssg295
g3096
sg296
(dp3133
g2998
(dp3134
g3034
g3115
sg3017
g3105
ssg3017
(dp3135
g3068
g3129
ssg3034
(dp3136
g3068
g3126
ssg3050
(dp3137
g3034
g3118
sg3017
g3108
ssg3068
(dp3138
sg3082
(dp3139
g3034
g3112
sg3050
g3122
sg3017
g3102
sg2998
g3098
sssg304
g3096
sbsg103
g3013
sg117
g1067
sg125
g3013
sg126
g306
((lp3140
(lp3141
g309
ag306
((lp3142
(lp3143
g312
ag309
aa(lp3144
g314
ag315
aa(lp3145
g317
ag318
aa(lp3146
g320
ag321
aa(lp3147
g323
ag324
aa(lp3148
g326
ag327
aa(lp3149
g329
ag330
aa(lp3150
g332
ag333
aatp3151
Rp3152
aa(lp3153
g337
ag306
((lp3154
(lp3155
g312
ag337
aa(lp3156
g341
ag342
aa(lp3157
g344
ag345
aa(lp3158
g347
ag348
aa(lp3159
g350
ag351
aa(lp3160
g353
ag354
aa(lp3161
g356
ag357
aa(lp3162
g359
ag360
aa(lp3163
g362
ag363
aa(lp3164
g365
ag366
aa(lp3165
g368
ag369
aa(lp3166
g371
ag372
aa(lp3167
g374
ag375
aa(lp3168
g377
ag378
aa(lp3169
g380
ag381
aa(lp3170
g383
ag384
aa(lp3171
g386
ag387
aa(lp3172
g389
ag390
aa(lp3173
g392
ag393
aatp3174
Rp3175
aa(lp3176
g397
ag306
((lp3177
(lp3178
g312
ag397
aa(lp3179
g401
ag402
aatp3180
Rp3181
aatp3182
Rp3183
sg130
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg1895
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g25
g7
Ntp3201
Rp3202
(dp3203
g29
(dp3204
sg31
g5
(g1403
g7
Ntp3205
Rp3206
(dp3207
g1407
(lp3208
S'overlay_csf'
p3209
aS'overlay_wm'
p3210
aS'overlay_gm'
p3211
ag1436
ag1437
asg36
g37
(g1410
tp3212
Rp3213
(dp3214
g69
I00
sg1437
S'montage_csf_gm_wm_a.png'
p3215
sg3211
g44
sg1414
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3216
sg3209
g44
sg3210
g44
sg1436
g44
sg45
g46
sbsg1416
(dp3217
g1437
Nssg1419
(lp3218
g1437
asg1421
Nsbsg113
Nsg103
g1483
sg115
(dp3219
sg117
S'montage_csf_gm_wm_0'
p3220
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1483
sg126
Nsg127
(lp3221
sg129
Nsg130
Nsb(dp3222
sg5
(g25
g7
Ntp3223
Rp3224
(dp3225
g29
(dp3226
sg31
g5
(g206
g7
Ntp3227
Rp3228
(dp3229
g36
g37
(g210
tp3230
Rp3231
(dp3232
g45
g46
sg3211
g44
sg1436
g44
sg3209
g44
sg3210
g44
sbsg221
(lp3233
g1436
ag3209
ag3210
ag3211
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp3234
sg117
g3220
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp3235
sg129
Nsg130
Nsb(dp3236
sg5
(g25
g7
Ntp3237
Rp3238
(dp3239
g29
(dp3240
sg31
g5
(g1403
g7
Ntp3241
Rp3242
(dp3243
g1407
(lp3244
g1409
asg36
g37
(g1410
tp3245
Rp3246
(dp3247
g69
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3248
sg1409
g44
sg45
g46
sbsg1416
(dp3249
g1418
Nssg1419
(lp3250
g1418
asg1421
Nsbsg113
Nsg120
I00
sg115
(dp3251
sg122
Nsg119
Nsg129
Nsg103
S'resample_o_wm'
p3252
sg117
g3220
sg121
I00
sg123
Nsg124
I00
sg125
g3252
sg126
Nsg127
(lp3253
sg130
Nsb(dp3254
sg5
(g25
g7
Ntp3255
Rp3256
(dp3257
g29
(dp3258
sg31
g5
(g1403
g7
Ntp3259
Rp3260
(dp3261
g1407
(lp3262
g1409
asg36
g37
(g1410
tp3263
Rp3264
(dp3265
g69
I00
sg1414
g3248
sg1409
g44
sg45
g46
sbsg1416
(dp3266
g1418
Nssg1419
(lp3267
g1418
asg1421
Nsbsg113
Nsg103
g1422
sg115
(dp3268
sg117
g3220
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1422
sg126
Nsg127
(lp3269
sg129
Nsg130
Nsb(dp3270
sg5
(g25
g7
Ntp3271
Rp3272
(dp3273
g29
(dp3274
sg31
g5
(g1403
g7
Ntp3275
Rp3276
(dp3277
g1407
(lp3278
g3209
ag3210
ag3211
ag1436
ag1437
asg36
g37
(g1410
tp3279
Rp3280
(dp3281
g69
I00
sg1437
S'montage_csf_gm_wm_s.png'
p3282
sg3211
g44
sg1414
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3283
sg3209
g44
sg3210
g44
sg1436
g44
sg45
g46
sbsg1416
(dp3284
g1437
Nssg1419
(lp3285
g1437
asg1421
Nsbsg113
Nsg103
g1447
sg115
(dp3286
sg117
g3220
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1447
sg126
Nsg127
(lp3287
sg129
Nsg130
Nsb(dp3288
sg5
(g25
g7
Ntp3289
Rp3290
(dp3291
g29
(dp3292
sg31
g5
(g1403
g7
Ntp3293
Rp3294
(dp3295
g1407
(lp3296
g1409
asg36
g37
(g1410
tp3297
Rp3298
(dp3299
g69
I00
sg1414
g3248
sg1409
g44
sg45
g46
sbsg1416
(dp3300
g1418
Nssg1419
(lp3301
g1418
asg1421
Nsbsg113
Nsg120
I00
sg115
(dp3302
sg122
Nsg119
Nsg129
Nsg103
S'resample_o_gm'
p3303
sg117
g3220
sg121
I00
sg123
Nsg124
I00
sg125
g3303
sg126
Nsg127
(lp3304
sg130
Nsb(dp3305
sg5
(g25
g7
Ntp3306
Rp3307
(dp3308
g29
(dp3309
sg31
g5
(g206
g7
Ntp3310
Rp3311
(dp3312
g36
g37
(g210
tp3313
Rp3314
(dp3315
g45
g46
sS'resampled_overlay_csf'
p3316
g44
sS'resampled_overlay_gm'
p3317
g44
sg1498
g44
sg1499
g44
sg1497
g44
sS'resampled_overlay_wm'
p3318
g44
sbsg221
(lp3319
g1498
ag1499
ag1497
ag3316
ag3318
ag3317
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp3320
sg117
g3220
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp3321
sg129
Nsg130
Nsb(dp3322
sg5
(g25
g7
Ntp3323
Rp3324
(dp3325
g29
(dp3326
sg31
g5
(g1403
g7
Ntp3327
Rp3328
(dp3329
g1407
(lp3330
g1409
asg36
g37
(g1410
tp3331
Rp3332
(dp3333
g69
I00
sg1414
g3248
sg1409
g44
sg45
g46
sbsg1416
(dp3334
g1418
Nssg1419
(lp3335
g1418
asg1421
Nsbsg113
Nsg120
I00
sg115
(dp3336
sg122
Nsg119
Nsg129
Nsg103
S'resample_o_csf'
p3337
sg117
g3220
sg121
I00
sg123
Nsg124
I00
sg125
g3337
sg126
Nsg127
(lp3338
sg130
Nsb(dp3339
ssg247
(dp3340
sg249
(dp3341
g3202
(dp3342
g3307
(dp3343
g253
(lp3344
(g1437
g1498
tp3345
asssg3224
(dp3346
g3238
(dp3347
g253
(lp3348
(g3210
g1409
tp3349
assg3256
(dp3350
g253
(lp3351
(g1436
g1409
tp3352
assg3324
(dp3353
g253
(lp3354
(g3209
g1409
tp3355
assg3290
(dp3356
g253
(lp3357
(g3211
g1409
tp3358
asssg3238
(dp3359
g3307
(dp3360
g253
(lp3361
(g1418
g3318
tp3362
assg3202
(dp3363
g253
(lp3364
(g1418
g3210
tp3365
assg3272
(dp3366
g253
(lp3367
(g1418
g3210
tp3368
asssg3256
(dp3369
g3307
(dp3370
g253
(lp3371
(g1418
g1497
tp3372
assg3202
(dp3373
g253
(lp3374
(g1418
g1436
tp3375
assg3272
(dp3376
g253
(lp3377
(g1418
g1436
tp3378
asssg3272
(dp3379
g3307
(dp3380
g253
(lp3381
(g1437
g1499
tp3382
asssg3290
(dp3383
g3307
(dp3384
g253
(lp3385
(g1418
g3317
tp3386
assg3202
(dp3387
g253
(lp3388
(g1418
g3211
tp3389
assg3272
(dp3390
g253
(lp3391
(g1418
g3211
tp3392
asssg3307
(dp3393
sg3324
(dp3394
g3307
(dp3395
g253
(lp3396
(g1418
g3316
tp3397
assg3202
(dp3398
g253
(lp3399
(g1418
g3209
tp3400
assg3272
(dp3401
g253
(lp3402
(g1418
g3209
tp3403
assssg295
g3341
sg296
(dp3404
g3202
(dp3405
g3238
g3363
sg3256
g3373
sg3324
g3398
sg3290
g3387
ssg3224
(dp3406
sg3238
(dp3407
g3224
g3347
ssg3256
(dp3408
g3224
g3350
ssg3272
(dp3409
g3238
g3366
sg3256
g3376
sg3324
g3401
sg3290
g3390
ssg3290
(dp3410
g3224
g3356
ssg3307
(dp3411
g3202
g3343
sg3272
g3380
sg3238
g3360
sg3256
g3370
sg3290
g3384
sg3324
g3395
ssg3324
(dp3412
g3224
g3353
sssg304
g3341
sbsg103
g3220
sg117
g1067
sg125
g3220
sg126
g306
((lp3413
(lp3414
g309
ag306
((lp3415
(lp3416
g312
ag309
aa(lp3417
g314
ag315
aa(lp3418
g317
ag318
aa(lp3419
g320
ag321
aa(lp3420
g323
ag324
aa(lp3421
g326
ag327
aa(lp3422
g329
ag330
aa(lp3423
g332
ag333
aatp3424
Rp3425
aa(lp3426
g337
ag306
((lp3427
(lp3428
g312
ag337
aa(lp3429
g341
ag342
aa(lp3430
g344
ag345
aa(lp3431
g347
ag348
aa(lp3432
g350
ag351
aa(lp3433
g353
ag354
aa(lp3434
g356
ag357
aa(lp3435
g359
ag360
aa(lp3436
g362
ag363
aa(lp3437
g365
ag366
aa(lp3438
g368
ag369
aa(lp3439
g371
ag372
aa(lp3440
g374
ag375
aa(lp3441
g377
ag378
aa(lp3442
g380
ag381
aa(lp3443
g383
ag384
aa(lp3444
g386
ag387
aa(lp3445
g389
ag390
aa(lp3446
g392
ag393
aatp3447
Rp3448
aa(lp3449
g397
ag306
((lp3450
(lp3451
g312
ag397
aa(lp3452
g401
ag402
aatp3453
Rp3454
aatp3455
Rp3456
sg130
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g25
g7
Ntp3466
Rp3467
(dp3468
g29
(dp3469
sg31
g5
(g206
g7
Ntp3470
Rp3471
(dp3472
g36
g37
(g210
tp3473
Rp3474
(dp3475
g45
g46
sS'linear_reg_matrix'
p3476
g44
sS'bbr_schedule'
p3477
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3478
sS'anat_wm_segmentation'
p3479
g44
sS'anat_skull'
p3480
g44
sg2558
g44
sbsg221
(lp3481
g2558
ag3480
ag3476
ag3479
ag3477
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp3482
sg117
S'func_to_anat_bbreg_0'
p3483
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp3484
sg129
Nsg130
Nsb(dp3485
sg5
(g25
g7
Ntp3486
Rp3487
(dp3488
g29
(dp3489
sg31
g5
(g206
g7
Ntp3490
Rp3491
(dp3492
g36
g37
(g210
tp3493
Rp3494
(dp3495
S'func_to_anat_linear_xfm'
p3496
g44
sg45
g46
sS'anat_func'
p3497
g44
sbsg221
(lp3498
g3496
ag3497
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp3499
sg117
g3483
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp3500
sg129
Nsg130
Nsb(dp3501
sg5
(g25
g7
Ntp3502
Rp3503
(dp3504
g29
(dp3505
sg31
g5
(g182
g7
Ntp3506
Rp3507
(dp3508
g36
g37
(g186
tp3509
Rp3510
(dp3511
g69
I00
sg45
g46
sg145
S'-thr 0.5 -bin'
p3512
sg190
g44
sg82
g44
sg72
g44
sg191
g44
sg75
g76
sg92
g5
(g93
g94
(dp3513
g96
g97
stp3514
Rp3515
(dp3516
g101
S'environ_items'
p3517
sg103
g92
sbsg64
g44
sg106
g97
sg197
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'wm_bb_mask'
p3518
sg115
(dp3519
sg117
g3483
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g3518
sg126
Nsg127
(lp3520
sg129
Nsg130
Nsb(dp3521
sg5
(g25
g7
Ntp3522
Rp3523
(dp3524
g29
(dp3525
sg31
g5
(g32
g7
Ntp3526
Rp3527
(dp3528
g36
g37
(g38
tp3529
Rp3530
(dp3531
g42
g44
sg45
g46
sg47
g44
sg48
g44
sg49
g44
sg50
g44
sg51
g44
sg52
g44
sg54
g44
sg55
g44
sg56
g44
sg57
g44
sg58
g44
sg59
g44
sg60
g44
sg61
g44
sg62
g44
sg63
g44
sg64
g44
sg65
g44
sg66
g44
sg67
g44
sg68
g44
sg69
I00
sg70
g44
sg71
g44
sg72
g44
sg73
g44
sg74
g44
sg75
g76
sg77
g44
sg78
g44
sg79
g44
sg80
g44
sg81
g44
sg82
g44
sg83
g44
sg84
g44
sg85
g44
sg86
I6
sg87
g44
sg88
g44
sg89
g44
sg90
g44
sg91
g44
sg92
g5
(g93
g94
(dp3532
g96
g97
stp3533
Rp3534
(dp3535
g101
S'environ_items'
p3536
sg103
g92
sbsg104
g44
sg105
g44
sg106
g97
sg107
g44
sg108
g44
sg109
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'bbreg_func_to_anat'
p3537
sg115
(dp3538
sg117
g3483
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g3537
sg126
Nsg127
(lp3539
sg129
Nsg130
Nsb(dp3540
ssg247
(dp3541
sg249
(dp3542
g3467
(dp3543
g3503
(dp3544
g253
(lp3545
(g3479
g64
tp3546
assg3523
(dp3547
g253
(lp3548
(g3477
g71
tp3549
a(g2558
g64
tp3550
a(g3480
g49
tp3551
a(g3476
g47
tp3552
asssg3487
(dp3553
sg3503
(dp3554
g3523
(dp3555
g253
(lp3556
((g82
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3557
(ttp3558
g72
tp3559
asssg3523
(dp3560
g3487
(dp3561
g253
(lp3562
(g87
g3496
tp3563
a(g82
g3497
tp3564
assssg295
g3542
sg296
(dp3565
g3467
(dp3566
sg3487
(dp3567
g3523
g3561
ssg3503
(dp3568
g3467
g3544
ssg3523
(dp3569
g3467
g3547
sg3503
g3555
sssg304
g3542
sbsg103
g3483
sg117
g1067
sg125
g3483
sg126
g306
((lp3570
(lp3571
g309
ag306
((lp3572
(lp3573
g312
ag309
aa(lp3574
g314
ag315
aa(lp3575
g317
ag318
aa(lp3576
g320
ag321
aa(lp3577
g323
ag324
aa(lp3578
g326
ag327
aa(lp3579
g329
ag330
aa(lp3580
g332
ag333
aatp3581
Rp3582
aa(lp3583
g337
ag306
((lp3584
(lp3585
g312
ag337
aa(lp3586
g341
ag342
aa(lp3587
g344
ag345
aa(lp3588
g347
ag348
aa(lp3589
g350
ag351
aa(lp3590
g353
ag354
aa(lp3591
g356
ag357
aa(lp3592
g359
ag360
aa(lp3593
g362
ag363
aa(lp3594
g365
ag366
aa(lp3595
g368
ag369
aa(lp3596
g371
ag372
aa(lp3597
g374
ag375
aa(lp3598
g377
ag378
aa(lp3599
g380
ag381
aa(lp3600
g383
ag384
aa(lp3601
g386
ag387
aa(lp3602
g389
ag390
aa(lp3603
g392
ag393
aatp3604
Rp3605
aa(lp3606
g397
ag306
((lp3607
(lp3608
g312
ag397
aa(lp3609
g401
ag402
aatp3610
Rp3611
aatp3612
Rp3613
sg130
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g25
g7
Ntp3620
Rp3621
(dp3622
g29
(dp3623
sg31
g5
(g1403
g7
Ntp3624
Rp3625
(dp3626
g1407
(lp3627
S'measure_file'
p3628
asg36
g37
(g1410
tp3629
Rp3630
(dp3631
g69
I00
sg45
g46
sg1414
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g44
sbsg1416
(dp3633
S'snr_storefl'
p3634
Nssg1419
(lp3635
g3634
asg1421
Nsbsg113
Nsg103
S'snr_val0'
p3636
sg115
(dp3637
sg117
g1067
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g3636
sg126
Nsg127
(lp3638
sg129
Nsg130
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g25
g7
Ntp3648
Rp3649
(dp3650
g29
(dp3651
sg31
g5
(g1403
g7
Ntp3652
Rp3653
(dp3654
g1407
(lp3655
g3628
ag1863
asg36
g37
(g1410
tp3656
Rp3657
(dp3658
g69
I00
sg45
g46
sg1414
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g44
sg1863
S'snr'
p3660
sbsg1416
(dp3661
g1870
Nssg1419
(lp3662
g1870
asg1421
Nsbsg113
Nsg120
I00
sg115
(dp3663
sg122
Nsg119
Nsg129
Nsg103
S'hist_snr_0'
p3664
sg117
g1067
sg121
I00
sg123
Nsg124
I00
sg125
g3664
sg126
Nsg127
(lp3665
sg130
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g25
g7
Ntp3678
Rp3679
(dp3680
g29
(dp3681
sg31
g5
(g1403
g7
Ntp3682
Rp3683
(dp3684
g1407
(lp3685
S'scan'
p3686
aS'rest_dict'
p3687
asg36
g37
(g1410
tp3688
Rp3689
(dp3690
g69
I00
sg3687
(dp3691
S'rest_1_rest'
p3692
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-09/KKI2009-09-fMRI.nii'
p3693
ssg1414
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3694
sg45
g46
sg3686
g44
sbsg1416
(dp3695
g1935
Nssg1419
(lp3696
g1935
asg1421
Nsbsg113
Nsg103
S'selectrest'
p3697
sg115
(dp3698
sg117
S'func_gather_0'
p3699
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g3697
sg126
Nsg127
(lp3700
sg129
Nsg130
Nsb(dp3701
sg5
(g25
g7
Ntp3702
Rp3703
(dp3704
g29
(dp3705
sg31
g5
(g206
g7
Ntp3706
Rp3707
(dp3708
g36
g37
(g210
tp3709
Rp3710
(dp3711
g45
g46
sg3686
g44
sS'subject'
p3712
S'5_1751525030'
p3713
sbsg221
(lp3714
g3712
ag3686
asg223
I01
sbsg113
Nsg103
S'inputnode'
p3715
sg115
(dp3716
sg117
g3699
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
(lp3717
(g3686
(lp3718
g3692
atp3719
asg124
I00
sg125
g3715
sg126
Nsg127
(lp3720
sg129
Nsg130
Nsb(dp3721
sg5
(g25
g7
Ntp3722
Rp3723
(dp3724
g29
(dp3725
sg31
g5
(g206
g7
Ntp3726
Rp3727
(dp3728
g36
g37
(g210
tp3729
Rp3730
(dp3731
g45
g46
sg3686
g44
sg1935
g44
sg3712
g44
sbsg221
(lp3732
g3712
ag1935
ag3686
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp3733
sg117
g3699
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp3734
sg129
Nsg130
Nsb(dp3735
ssg247
(dp3736
sg249
(dp3737
g3679
(dp3738
g3723
(dp3739
g253
(lp3740
(g1935
g1935
tp3741
asssg3703
(dp3742
g3679
(dp3743
g253
(lp3744
(g3686
g3686
tp3745
assg3723
(dp3746
g253
(lp3747
(g3712
g3712
tp3748
a(g3686
g3686
tp3749
asssg3723
(dp3750
ssg295
g3737
sg296
(dp3751
g3679
(dp3752
g3703
g3743
ssg3703
(dp3753
sg3723
(dp3754
g3679
g3739
sg3703
g3746
sssg304
g3737
sbsg103
g3699
sg117
g1067
sg125
g3699
sg126
g306
((lp3755
(lp3756
g309
ag306
((lp3757
(lp3758
g312
ag309
aa(lp3759
g314
ag315
aa(lp3760
g317
ag318
aa(lp3761
g320
ag321
aa(lp3762
g323
ag324
aa(lp3763
g326
ag327
aa(lp3764
g329
ag330
aa(lp3765
g332
ag333
aatp3766
Rp3767
aa(lp3768
g337
ag306
((lp3769
(lp3770
g312
ag337
aa(lp3771
g341
ag342
aa(lp3772
g344
ag345
aa(lp3773
g347
ag348
aa(lp3774
g350
ag351
aa(lp3775
g353
ag354
aa(lp3776
g356
ag357
aa(lp3777
g359
ag360
aa(lp3778
g362
ag363
aa(lp3779
g365
ag366
aa(lp3780
g368
ag369
aa(lp3781
g371
ag372
aa(lp3782
g374
ag375
aa(lp3783
g377
ag378
aa(lp3784
g380
ag381
aa(lp3785
g383
ag384
aa(lp3786
g386
ag387
aa(lp3787
g389
ag390
aa(lp3788
g392
ag393
aatp3789
Rp3790
aa(lp3791
g397
ag306
((lp3792
(lp3793
g312
ag397
aa(lp3794
g401
ag402
aatp3795
Rp3796
aatp3797
Rp3798
sg130
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g25
g7
Ntp3808
Rp3809
(dp3810
g29
(dp3811
sg31
g5
(g1272
g7
Ntp3812
Rp3813
(dp3814
g36
g37
(g1276
tp3815
Rp3816
(dp3817
g69
I00
sg1280
g44
sg64
g44
sg1281
g44
sg82
g44
sg84
g44
sg72
g44
sg52
g44
sg1221
g44
sg1228
g1820
sg75
g76
sg92
g5
(g93
g94
(dp3818
g96
g97
stp3819
Rp3820
(dp3821
g101
S'environ_items'
p3822
sg103
g92
sbsg1287
g44
sg1288
g44
sg106
g97
sg1289
g44
sg1290
g44
sg45
g46
sg1291
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'func_mni_fsl_warp_0'
p3823
sg115
(dp3824
sg117
g1067
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g3823
sg126
Nsg127
(lp3825
sg129
Nsg130
Nsbg82
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g25
g7
Ntp3835
Rp3836
(dp3837
g29
(dp3838
sg31
g5
(g206
g7
Ntp3839
Rp3840
(dp3841
g36
g37
(g210
tp3842
Rp3843
(dp3844
g45
g46
sS'mask_outputs'
p3845
g44
sbsg221
(lp3846
g3845
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp3847
sg117
S'voxel_timeseries_0'
p3848
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp3849
sg129
Nsg130
Nsb(dp3850
sg5
(g25
g7
Ntp3851
Rp3852
(dp3853
g29
(dp3854
sg31
g5
(g1403
g7
Ntp3855
Rp3856
(dp3857
g1407
(lp3858
S'data_file'
p3859
aS'template'
p3860
ag106
asg36
g37
(g1410
tp3861
Rp3862
(dp3863
g69
I00
sg45
g46
sg3859
g44
sg1414
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3864
sg3860
g44
sg106
g44
sbsg1416
(dp3865
g82
Nssg1419
(lp3866
g82
asg1421
Nsbsg113
Nsg103
S'timeseries_voxel'
p3867
sg115
(dp3868
sg117
g3848
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g3867
sg126
Nsg127
(lp3869
sg129
Nsg130
Nsb(dp3870
sg5
(g25
g7
Ntp3871
Rp3872
(dp3873
g29
(dp3874
sg31
g5
(g206
g7
Ntp3875
Rp3876
(dp3877
g36
g37
(g210
tp3878
Rp3879
(dp3880
g45
g46
sg106
(lp3881
I01
aI01
asg1935
g44
sbsg221
(lp3882
g1935
ag106
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp3883
sg117
g3848
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp3884
sg129
Nsg130
Nsb(dp3885
sg5
(g25
g7
Ntp3886
Rp3887
(dp3888
g29
(dp3889
sg31
g5
(g206
g7
Ntp3890
Rp3891
(dp3892
g36
g37
(g210
tp3893
Rp3894
(dp3895
g45
g46
sg1936
g44
sbsg221
(lp3896
g1936
asg223
I01
sbsg113
Nsg103
S'input_mask'
p3897
sg115
(dp3898
sg117
g3848
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g3897
sg126
Nsg127
(lp3899
sg129
Nsg130
Nsb(dp3900
ssg247
(dp3901
sg249
(dp3902
g3836
(dp3903
sg3852
(dp3904
g3836
(dp3905
g253
(lp3906
(g82
g3845
tp3907
asssg3872
(dp3908
g3852
(dp3909
g253
(lp3910
(g1935
g3859
tp3911
a(g106
g106
tp3912
asssg3887
(dp3913
g3852
(dp3914
g253
(lp3915
(g1936
g3860
tp3916
assssg295
g3902
sg296
(dp3917
g3836
(dp3918
g3852
g3905
ssg3852
(dp3919
g3872
g3909
sg3887
g3914
ssg3872
(dp3920
sg3887
(dp3921
ssg304
g3902
sbsg103
g3848
sg117
g1067
sg125
g3848
sg126
g306
((lp3922
(lp3923
g309
ag306
((lp3924
(lp3925
g312
ag309
aa(lp3926
g314
ag315
aa(lp3927
g317
ag318
aa(lp3928
g320
ag321
aa(lp3929
g323
ag324
aa(lp3930
g326
ag327
aa(lp3931
g329
ag330
aa(lp3932
g332
ag333
aatp3933
Rp3934
aa(lp3935
g337
ag306
((lp3936
(lp3937
g312
ag337
aa(lp3938
g341
ag342
aa(lp3939
g344
ag345
aa(lp3940
g347
ag348
aa(lp3941
g350
ag351
aa(lp3942
g353
ag354
aa(lp3943
g356
ag357
aa(lp3944
g359
ag360
aa(lp3945
g362
ag363
aa(lp3946
g365
ag366
aa(lp3947
g368
ag369
aa(lp3948
g371
ag372
aa(lp3949
g374
ag375
aa(lp3950
g377
ag378
aa(lp3951
g380
ag381
aa(lp3952
g383
ag384
aa(lp3953
g386
ag387
aa(lp3954
g389
ag390
aa(lp3955
g392
ag393
aatp3956
Rp3957
aa(lp3958
g397
ag306
((lp3959
(lp3960
g312
ag397
aa(lp3961
g401
ag402
aatp3962
Rp3963
aatp3964
Rp3965
sg130
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g25
g7
Ntp3986
Rp3987
(dp3988
g29
(dp3989
sg31
g5
(g206
g7
Ntp3990
Rp3991
(dp3992
g36
g37
(g210
tp3993
Rp3994
(dp3995
g45
g46
sg1436
g44
sg1435
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p3996
sbsg221
(lp3997
g1436
ag1435
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp3998
sg117
S'montage_mni_anat_0'
p3999
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp4000
sg129
Nsg130
Nsb(dp4001
sg5
(g25
g7
Ntp4002
Rp4003
(dp4004
g29
(dp4005
sg31
g5
(g1403
g7
Ntp4006
Rp4007
(dp4008
g1407
(lp4009
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp4010
Rp4011
(dp4012
g69
I00
sg1437
S'mni_anat_a.png'
p4013
sg1435
g44
sg1438
g1443
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4014
sg1436
g44
sg45
g46
sbsg1416
(dp4015
g1437
Nssg1419
(lp4016
g1437
asg1421
Nsbsg113
Nsg103
g1483
sg115
(dp4017
sg117
g3999
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1483
sg126
Nsg127
(lp4018
sg129
Nsg130
Nsb(dp4019
sg5
(g25
g7
Ntp4020
Rp4021
(dp4022
g29
(dp4023
sg31
g5
(g1403
g7
Ntp4024
Rp4025
(dp4026
g1407
(lp4027
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp4028
Rp4029
(dp4030
g69
I00
sg1437
S'mni_anat_s.png'
p4031
sg1435
g44
sg1438
g1443
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4032
sg1436
g44
sg45
g46
sbsg1416
(dp4033
g1437
Nssg1419
(lp4034
g1437
asg1421
Nsbsg113
Nsg103
g1447
sg115
(dp4035
sg117
g3999
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1447
sg126
Nsg127
(lp4036
sg129
Nsg130
Nsb(dp4037
sg5
(g25
g7
Ntp4038
Rp4039
(dp4040
g29
(dp4041
sg31
g5
(g1403
g7
Ntp4042
Rp4043
(dp4044
g1407
(lp4045
g1409
asg36
g37
(g1410
tp4046
Rp4047
(dp4048
g69
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4049
sg1409
g44
sg45
g46
sbsg1416
(dp4050
g1418
Nssg1419
(lp4051
g1418
asg1421
Nsbsg113
Nsg120
I00
sg115
(dp4052
sg122
Nsg119
Nsg129
Nsg103
g1465
sg117
g3999
sg121
I00
sg123
Nsg124
I00
sg125
g1465
sg126
Nsg127
(lp4053
sg130
Nsb(dp4054
sg5
(g25
g7
Ntp4055
Rp4056
(dp4057
g29
(dp4058
sg31
g5
(g1403
g7
Ntp4059
Rp4060
(dp4061
g1407
(lp4062
g1409
asg36
g37
(g1410
tp4063
Rp4064
(dp4065
g69
I00
sg1414
g4049
sg1409
g44
sg45
g46
sbsg1416
(dp4066
g1418
Nssg1419
(lp4067
g1418
asg1421
Nsbsg113
Nsg103
g1422
sg115
(dp4068
sg117
g3999
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1422
sg126
Nsg127
(lp4069
sg129
Nsg130
Nsb(dp4070
sg5
(g25
g7
Ntp4071
Rp4072
(dp4073
g29
(dp4074
sg31
g5
(g206
g7
Ntp4075
Rp4076
(dp4077
g36
g37
(g210
tp4078
Rp4079
(dp4080
g45
g46
sg1497
g44
sg1498
g44
sg1499
g44
sg1500
g44
sbsg221
(lp4081
g1498
ag1499
ag1497
ag1500
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp4082
sg117
g3999
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp4083
sg129
Nsg130
Nsb(dp4084
ssg247
(dp4085
sg249
(dp4086
g3987
(dp4087
g4056
(dp4088
g253
(lp4089
(g1436
g1409
tp4090
assg4039
(dp4091
g253
(lp4092
(g1435
g1409
tp4093
asssg4003
(dp4094
g4072
(dp4095
g253
(lp4096
(g1437
g1498
tp4097
asssg4021
(dp4098
g4072
(dp4099
g253
(lp4100
(g1437
g1499
tp4101
asssg4039
(dp4102
g4021
(dp4103
g253
(lp4104
(g1418
g1435
tp4105
assg4003
(dp4106
g253
(lp4107
(g1418
g1435
tp4108
assg4072
(dp4109
g253
(lp4110
(g1418
g1500
tp4111
asssg4056
(dp4112
g4021
(dp4113
g253
(lp4114
(g1418
g1436
tp4115
assg4003
(dp4116
g253
(lp4117
(g1418
g1436
tp4118
assg4072
(dp4119
g253
(lp4120
(g1418
g1497
tp4121
asssg4072
(dp4122
ssg295
g4086
sg296
(dp4123
g3987
(dp4124
sg4003
(dp4125
g4056
g4116
sg4039
g4106
ssg4021
(dp4126
g4056
g4113
sg4039
g4103
ssg4039
(dp4127
g3987
g4091
ssg4056
(dp4128
g3987
g4088
ssg4072
(dp4129
g4056
g4119
sg4021
g4099
sg4039
g4109
sg4003
g4095
sssg304
g4086
sbsg103
g3999
sg117
g1067
sg125
g3999
sg126
g306
((lp4130
(lp4131
g309
ag306
((lp4132
(lp4133
g312
ag309
aa(lp4134
g314
ag315
aa(lp4135
g317
ag318
aa(lp4136
g320
ag321
aa(lp4137
g323
ag324
aa(lp4138
g326
ag327
aa(lp4139
g329
ag330
aa(lp4140
g332
ag333
aatp4141
Rp4142
aa(lp4143
g337
ag306
((lp4144
(lp4145
g312
ag337
aa(lp4146
g341
ag342
aa(lp4147
g344
ag345
aa(lp4148
g347
ag348
aa(lp4149
g350
ag351
aa(lp4150
g353
ag354
aa(lp4151
g356
ag357
aa(lp4152
g359
ag360
aa(lp4153
g362
ag363
aa(lp4154
g365
ag366
aa(lp4155
g368
ag369
aa(lp4156
g371
ag372
aa(lp4157
g374
ag375
aa(lp4158
g377
ag378
aa(lp4159
g380
ag381
aa(lp4160
g383
ag384
aa(lp4161
g386
ag387
aa(lp4162
g389
ag390
aa(lp4163
g392
ag393
aatp4164
Rp4165
aa(lp4166
g397
ag306
((lp4167
(lp4168
g312
ag397
aa(lp4169
g401
ag402
aatp4170
Rp4171
aatp4172
Rp4173
sg130
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg1978
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g25
g7
Ntp4188
Rp4189
(dp4190
g29
(dp4191
sg31
g5
(g1272
g7
Ntp4192
Rp4193
(dp4194
g36
g37
(g1276
tp4195
Rp4196
(dp4197
g69
I00
sg1280
g44
sg64
g44
sg1281
g44
sg82
g44
sg84
g44
sg72
g44
sg52
S'nn'
p4198
sg1221
g44
sg1228
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg75
g76
sg92
g5
(g93
g94
(dp4200
g96
g97
stp4201
Rp4202
(dp4203
g101
S'environ_items'
p4204
sg103
g92
sbsg1287
g44
sg1288
g44
sg106
g97
sg1289
g44
sg1290
g44
sg45
g46
sg1291
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'func_mni_fsl_warp_mask_0'
p4205
sg115
(dp4206
sg117
g1067
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g4205
sg126
Nsg127
(lp4207
sg129
Nsg130
Nsbg82
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g25
g7
Ntp4217
Rp4218
(dp4219
g29
(dp4220
sg31
g5
(g1403
g7
Ntp4221
Rp4222
(dp4223
g1407
(lp4224
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp4225
Rp4226
(dp4227
g69
I00
sg1437
S'skull_vis_s.png'
p4228
sg1435
g44
sg1438
g1443
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4229
sg1436
g44
sg45
g46
sbsg1416
(dp4230
g1437
Nssg1419
(lp4231
g1437
asg1421
Nsbsg113
Nsg103
g1447
sg115
(dp4232
sg117
S'montage_skull_0'
p4233
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1447
sg126
Nsg127
(lp4234
sg129
Nsg130
Nsb(dp4235
sg5
(g25
g7
Ntp4236
Rp4237
(dp4238
g29
(dp4239
sg31
g5
(g1403
g7
Ntp4240
Rp4241
(dp4242
g1407
(lp4243
g1409
asg36
g37
(g1410
tp4244
Rp4245
(dp4246
g69
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4247
sg1409
g44
sg45
g46
sbsg1416
(dp4248
g1418
Nssg1419
(lp4249
g1418
asg1421
Nsbsg113
Nsg103
g1422
sg115
(dp4250
sg117
g4233
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1422
sg126
Nsg127
(lp4251
sg129
Nsg130
Nsb(dp4252
sg5
(g25
g7
Ntp4253
Rp4254
(dp4255
g29
(dp4256
sg31
g5
(g206
g7
Ntp4257
Rp4258
(dp4259
g36
g37
(g210
tp4260
Rp4261
(dp4262
g45
g46
sg1436
g44
sg1435
g44
sbsg221
(lp4263
g1436
ag1435
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp4264
sg117
g4233
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp4265
sg129
Nsg130
Nsb(dp4266
sg5
(g25
g7
Ntp4267
Rp4268
(dp4269
g29
(dp4270
sg31
g5
(g1403
g7
Ntp4271
Rp4272
(dp4273
g1407
(lp4274
g1435
ag1436
ag1437
ag1438
asg36
g37
(g1410
tp4275
Rp4276
(dp4277
g69
I00
sg1437
S'skull_vis_a.png'
p4278
sg1435
g44
sg1438
g1443
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4279
sg1436
g44
sg45
g46
sbsg1416
(dp4280
g1437
Nssg1419
(lp4281
g1437
asg1421
Nsbsg113
Nsg103
g1483
sg115
(dp4282
sg117
g4233
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g1483
sg126
Nsg127
(lp4283
sg129
Nsg130
Nsb(dp4284
sg5
(g25
g7
Ntp4285
Rp4286
(dp4287
g29
(dp4288
sg31
g5
(g206
g7
Ntp4289
Rp4290
(dp4291
g36
g37
(g210
tp4292
Rp4293
(dp4294
g45
g46
sg1497
g44
sg1498
g44
sg1499
g44
sg1500
g44
sbsg221
(lp4295
g1498
ag1499
ag1497
ag1500
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp4296
sg117
g4233
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp4297
sg129
Nsg130
Nsb(dp4298
sg5
(g25
g7
Ntp4299
Rp4300
(dp4301
g29
(dp4302
sg31
g5
(g1403
g7
Ntp4303
Rp4304
(dp4305
g1407
(lp4306
g1409
asg36
g37
(g1410
tp4307
Rp4308
(dp4309
g69
I00
sg1414
g4247
sg1409
g44
sg45
g46
sbsg1416
(dp4310
g1418
Nssg1419
(lp4311
g1418
asg1421
Nsbsg113
Nsg120
I00
sg115
(dp4312
sg122
Nsg119
Nsg129
Nsg103
g1465
sg117
g4233
sg121
I00
sg123
Nsg124
I00
sg125
g1465
sg126
Nsg127
(lp4313
sg130
Nsb(dp4314
ssg247
(dp4315
sg249
(dp4316
g4218
(dp4317
g4286
(dp4318
g253
(lp4319
(g1437
g1499
tp4320
asssg4237
(dp4321
g4268
(dp4322
g253
(lp4323
(g1418
g1436
tp4324
assg4286
(dp4325
g253
(lp4326
(g1418
g1497
tp4327
assg4218
(dp4328
g253
(lp4329
(g1418
g1436
tp4330
asssg4254
(dp4331
g4237
(dp4332
g253
(lp4333
(g1436
g1409
tp4334
assg4300
(dp4335
g253
(lp4336
(g1435
g1409
tp4337
asssg4268
(dp4338
g4286
(dp4339
g253
(lp4340
(g1437
g1498
tp4341
asssg4286
(dp4342
sg4300
(dp4343
g4268
(dp4344
g253
(lp4345
(g1418
g1435
tp4346
assg4286
(dp4347
g253
(lp4348
(g1418
g1500
tp4349
assg4218
(dp4350
g253
(lp4351
(g1418
g1435
tp4352
assssg295
g4316
sg296
(dp4353
g4218
(dp4354
g4237
g4328
sg4300
g4350
ssg4237
(dp4355
g4254
g4332
ssg4254
(dp4356
sg4268
(dp4357
g4237
g4322
sg4300
g4344
ssg4286
(dp4358
g4237
g4325
sg4218
g4318
sg4300
g4347
sg4268
g4339
ssg4300
(dp4359
g4254
g4335
sssg304
g4316
sbsg103
g4233
sg117
g1067
sg125
g4233
sg126
g306
((lp4360
(lp4361
g309
ag306
((lp4362
(lp4363
g312
ag309
aa(lp4364
g314
ag315
aa(lp4365
g317
ag318
aa(lp4366
g320
ag321
aa(lp4367
g323
ag324
aa(lp4368
g326
ag327
aa(lp4369
g329
ag330
aa(lp4370
g332
ag333
aatp4371
Rp4372
aa(lp4373
g337
ag306
((lp4374
(lp4375
g312
ag337
aa(lp4376
g341
ag342
aa(lp4377
g344
ag345
aa(lp4378
g347
ag348
aa(lp4379
g350
ag351
aa(lp4380
g353
ag354
aa(lp4381
g356
ag357
aa(lp4382
g359
ag360
aa(lp4383
g362
ag363
aa(lp4384
g365
ag366
aa(lp4385
g368
ag369
aa(lp4386
g371
ag372
aa(lp4387
g374
ag375
aa(lp4388
g377
ag378
aa(lp4389
g380
ag381
aa(lp4390
g383
ag384
aa(lp4391
g386
ag387
aa(lp4392
g389
ag390
aa(lp4393
g392
ag393
aatp4394
Rp4395
aa(lp4396
g397
ag306
((lp4397
(lp4398
g312
ag397
aa(lp4399
g401
ag402
aatp4400
Rp4401
aatp4402
Rp4403
sg130
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2603
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2604
(g5
(g25
g7
Ntp4413
Rp4414
(dp4415
g29
(dp4416
sg31
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g36
g37
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g69
I00
sg45
g46
sS'tpattern'
p4425
g44
sg82
g44
sS'tr'
p4426
g44
sg72
g44
sg52
g44
sg2239
g2240
sS'tzero'
p4427
g44
sS'ignore'
p4428
g44
sS'rltplus'
p4429
g44
sg75
g76
sS'tslice'
p4430
g44
sg64
g44
sS'rlt'
p4431
g44
sg92
g5
(g93
g94
(dp4432
tp4433
Rp4434
(dp4435
g101
S'environ_items'
p4436
sg103
g92
sbsbsg2252
g2240
sg111
Nsg112
g76
sbsg113
Nsg103
S'func_slice_timing_correction_0'
p4437
sg115
(dp4438
sg117
g1067
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g4437
sg126
Nsg127
(lp4439
sg129
Nsg130
Nsbg82
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g25
g7
Ntp4449
Rp4450
(dp4451
g29
(dp4452
sg31
g5
(g1403
g7
Ntp4453
Rp4454
(dp4455
g1407
(lp4456
g3859
ag3860
ag106
asg36
g37
(g1410
tp4457
Rp4458
(dp4459
g69
I00
sg45
g46
sg3859
g44
sg1414
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4460
sg3860
g44
sg106
g44
sbsg1416
(dp4461
g82
Nssg1419
(lp4462
g82
asg1421
Nsbsg113
Nsg103
S'timeseries_roi'
p4463
sg115
(dp4464
sg117
S'roi_timeseries_0'
p4465
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g4463
sg126
Nsg127
(lp4466
sg129
Nsg130
Nsb(dp4467
sg5
(g25
g7
Ntp4468
Rp4469
(dp4470
g29
(dp4471
sg31
g5
(g206
g7
Ntp4472
Rp4473
(dp4474
g36
g37
(g210
tp4475
Rp4476
(dp4477
g45
g46
sS'roi_outputs'
p4478
g44
sbsg221
(lp4479
g4478
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp4480
sg117
g4465
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp4481
sg129
Nsg130
Nsb(dp4482
sg5
(g25
g7
Ntp4483
Rp4484
(dp4485
g29
(dp4486
sg31
g5
(g206
g7
Ntp4487
Rp4488
(dp4489
g36
g37
(g210
tp4490
Rp4491
(dp4492
g45
g46
sg106
(lp4493
I01
aI01
asg1935
g44
sbsg221
(lp4494
g1935
ag106
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp4495
sg117
g4465
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp4496
sg129
Nsg130
Nsb(dp4497
sg5
(g25
g7
Ntp4498
Rp4499
(dp4500
g29
(dp4501
sg31
g5
(g206
g7
Ntp4502
Rp4503
(dp4504
g36
g37
(g210
tp4505
Rp4506
(dp4507
g45
g46
sS'roi'
p4508
g44
sbsg221
(lp4509
g4508
asg223
I01
sbsg113
Nsg103
S'input_roi'
p4510
sg115
(dp4511
sg117
g4465
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g4510
sg126
Nsg127
(lp4512
sg129
Nsg130
Nsb(dp4513
ssg247
(dp4514
sg249
(dp4515
g4450
(dp4516
g4469
(dp4517
g253
(lp4518
(g82
g4478
tp4519
asssg4469
(dp4520
sg4484
(dp4521
g4450
(dp4522
g253
(lp4523
(g1935
g3859
tp4524
a(g106
g106
tp4525
asssg4499
(dp4526
g4450
(dp4527
g253
(lp4528
(g4508
g3860
tp4529
assssg295
g4515
sg296
(dp4530
g4450
(dp4531
g4499
g4527
sg4484
g4522
ssg4469
(dp4532
g4450
g4517
ssg4484
(dp4533
sg4499
(dp4534
ssg304
g4515
sbsg103
g4465
sg117
g1067
sg125
g4465
sg126
g306
((lp4535
(lp4536
g309
ag306
((lp4537
(lp4538
g312
ag309
aa(lp4539
g314
ag315
aa(lp4540
g317
ag318
aa(lp4541
g320
ag321
aa(lp4542
g323
ag324
aa(lp4543
g326
ag327
aa(lp4544
g329
ag330
aa(lp4545
g332
ag333
aatp4546
Rp4547
aa(lp4548
g337
ag306
((lp4549
(lp4550
g312
ag337
aa(lp4551
g341
ag342
aa(lp4552
g344
ag345
aa(lp4553
g347
ag348
aa(lp4554
g350
ag351
aa(lp4555
g353
ag354
aa(lp4556
g356
ag357
aa(lp4557
g359
ag360
aa(lp4558
g362
ag363
aa(lp4559
g365
ag366
aa(lp4560
g368
ag369
aa(lp4561
g371
ag372
aa(lp4562
g374
ag375
aa(lp4563
g377
ag378
aa(lp4564
g380
ag381
aa(lp4565
g383
ag384
aa(lp4566
g386
ag387
aa(lp4567
g389
ag390
aa(lp4568
g392
ag393
aatp4569
Rp4570
aa(lp4571
g397
ag306
((lp4572
(lp4573
g312
ag397
aa(lp4574
g401
ag402
aatp4575
Rp4576
aatp4577
Rp4578
sg130
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g25
g7
Ntp4589
Rp4590
(dp4591
g29
(dp4592
sg31
g5
(g32
g7
Ntp4593
Rp4594
(dp4595
g36
g37
(g38
tp4596
Rp4597
(dp4598
g42
g44
sg45
g46
sg47
g44
sg48
g44
sg49
g44
sg50
g44
sg51
g44
sg52
g53
sg54
g44
sg55
g44
sg56
g44
sg57
g44
sg58
g44
sg59
g44
sg60
g44
sg61
g44
sg62
g44
sg63
g44
sg64
g44
sg65
g44
sg66
g44
sg67
g44
sg68
g44
sg69
I00
sg70
g44
sg71
g44
sg72
S'-applyisoxfm 2'
p4599
sg73
g44
sg74
g44
sg75
g76
sg77
g44
sg78
g44
sg79
g44
sg80
g44
sg81
g44
sg82
g44
sg83
g44
sg84
g44
sg85
g44
sg86
g44
sg87
g44
sg88
g44
sg89
g44
sg90
g44
sg91
g44
sg92
g5
(g93
g94
(dp4600
g96
g97
stp4601
Rp4602
(dp4603
g101
S'environ_items'
p4604
sg103
g92
sbsg104
g44
sg105
g44
sg106
g97
sg107
g44
sg108
g44
sg109
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'gm_anat_to_2mm_flirt_applyxfm'
p4605
sg115
(dp4606
sg117
S'nuisance_0'
p4607
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g4605
sg126
Nsg127
(lp4608
sg129
Nsg130
Nsb(dp4609
sg5
(g25
g7
Ntp4610
Rp4611
(dp4612
g29
(dp4613
sg31
g5
(g206
g7
Ntp4614
Rp4615
(dp4616
g36
g37
(g210
tp4617
Rp4618
(dp4619
S'motion_components'
p4620
g44
sS'anat_to_mni_initial_xfm'
p4621
g44
sS'lat_ventricles_mask'
p4622
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4623
sg962
g44
sS'anat_to_mni_rigid_xfm'
p4624
g44
sS'compcor_ncomponents'
p4625
g44
sS'anat_to_mni_affine_xfm'
p4626
g44
sS'selector'
p4627
g44
sg961
g44
sS'template_brain'
p4628
g44
sg3496
g44
sS'mni_to_anat_linear_xfm'
p4629
g44
sg963
g44
sg45
g46
sg3712
g44
sbsg221
(lp4630
g3712
ag961
ag963
ag962
ag4629
ag4621
ag4624
ag4626
ag3496
ag4622
ag4620
ag4627
ag4625
ag4628
asg223
I01
sbsg113
Nsg103
g224
sg115
(dp4631
sg117
g4607
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g224
sg126
Nsg127
(lp4632
sg129
Nsg130
Nsb(dp4633
sg5
(g25
g7
Ntp4634
Rp4635
(dp4636
g29
(dp4637
sg31
g5
(g32
g7
Ntp4638
Rp4639
(dp4640
g36
g37
(g38
tp4641
Rp4642
(dp4643
g42
g44
sg45
g46
sg47
g44
sg48
g44
sg49
g44
sg50
g44
sg51
g44
sg52
g44
sg54
g44
sg55
g44
sg56
g44
sg57
g44
sg58
g44
sg59
g44
sg60
g44
sg61
g44
sg62
g44
sg63
g44
sg64
g44
sg65
g44
sg66
g44
sg67
g44
sg68
g44
sg69
I00
sg70
g44
sg71
g44
sg72
g4599
sg73
g44
sg74
g44
sg75
g76
sg77
g44
sg78
g44
sg79
g44
sg80
g44
sg81
g44
sg82
g44
sg83
g44
sg84
g44
sg85
g44
sg86
g44
sg87
g44
sg88
g44
sg89
g44
sg90
g44
sg91
g44
sg92
g5
(g93
g94
(dp4644
g96
g97
stp4645
Rp4646
(dp4647
g101
S'environ_items'
p4648
sg103
g92
sbsg104
g44
sg105
g44
sg106
g97
sg107
g44
sg108
g44
sg109
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'func_to_2mm_flirt_applyxfm'
p4649
sg115
(dp4650
sg117
g4607
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g4649
sg126
Nsg127
(lp4651
sg129
Nsg130
Nsb(dp4652
sg5
(g25
g7
Ntp4653
Rp4654
(dp4655
g29
(dp4656
sg31
g5
(g32
g7
Ntp4657
Rp4658
(dp4659
g36
g37
(g38
tp4660
Rp4661
(dp4662
g42
g44
sg45
g46
sg47
g44
sg48
g44
sg49
g44
sg50
g44
sg51
g44
sg52
g53
sg54
g44
sg55
g44
sg56
g44
sg57
g44
sg58
g44
sg59
g44
sg60
g44
sg61
g44
sg62
g44
sg63
g44
sg64
g44
sg65
g44
sg66
g44
sg67
g44
sg68
g44
sg69
I00
sg70
g44
sg71
g44
sg72
g4599
sg73
g44
sg74
g44
sg75
g76
sg77
g44
sg78
g44
sg79
g44
sg80
g44
sg81
g44
sg82
g44
sg83
g44
sg84
g44
sg85
g44
sg86
g44
sg87
g44
sg88
g44
sg89
g44
sg90
g44
sg91
g44
sg92
g5
(g93
g94
(dp4663
g96
g97
stp4664
Rp4665
(dp4666
g101
S'environ_items'
p4667
sg103
g92
sbsg104
g44
sg105
g44
sg106
g97
sg107
g44
sg108
g44
sg109
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'csf_anat_to_2mm_flirt_applyxfm'
p4668
sg115
(dp4669
sg117
g4607
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g4668
sg126
Nsg127
(lp4670
sg129
Nsg130
Nsb(dp4671
sg5
(g25
g7
Ntp4672
Rp4673
(dp4674
g29
(dp4675
sg31
g5
(g1403
g7
Ntp4676
Rp4677
(dp4678
g1407
(lp4679
g3859
aS'ventricles_mask_file'
p4680
aS'wm_seg_file'
p4681
aS'csf_seg_file'
p4682
aS'gm_seg_file'
p4683
ag460
ag478
ag934
asg36
g37
(g1410
tp4684
Rp4685
(dp4686
g69
I00
sg45
g46
sg460
g44
sg478
g44
sg3859
g44
sg1414
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4687
sg4683
g44
sg4680
g44
sg934
g44
sg4682
g44
sg4681
g44
sbsg1416
(dp4688
S'file_gm'
p4689
NsS'file_wm'
p4690
NsS'file_csf'
p4691
Nssg1419
(lp4692
g4690
ag4691
ag4689
asg1421
Nsbsg113
Nsg103
S'tissue_masks'
p4693
sg115
(dp4694
sg117
g4607
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g4693
sg126
Nsg127
(lp4695
sg129
Nsg130
Nsb(dp4696
sg5
(g25
g7
Ntp4697
Rp4698
(dp4699
g29
(dp4700
sg31
g5
(g206
g7
Ntp4701
Rp4702
(dp4703
g36
g37
(g210
tp4704
Rp4705
(dp4706
g45
g46
sS'regressors'
p4707
g44
sg3712
g44
sbsg221
(lp4708
g3712
ag4707
asg223
I01
sbsg113
Nsg103
g243
sg115
(dp4709
sg117
g4607
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g243
sg126
Nsg127
(lp4710
sg129
Nsg130
Nsb(dp4711
sg5
(g25
g7
Ntp4712
Rp4713
(dp4714
g29
(dp4715
sg31
g5
(g32
g7
Ntp4716
Rp4717
(dp4718
g36
g37
(g38
tp4719
Rp4720
(dp4721
g42
g44
sg45
g46
sg47
g44
sg48
g44
sg49
g44
sg50
g44
sg51
g44
sg52
g53
sg54
g44
sg55
g44
sg56
g44
sg57
g44
sg58
g44
sg59
g44
sg60
g44
sg61
g44
sg62
g44
sg63
g44
sg64
g44
sg65
g44
sg66
g44
sg67
g44
sg68
g44
sg69
I00
sg70
g44
sg71
g44
sg72
g4599
sg73
g44
sg74
g44
sg75
g76
sg77
g44
sg78
g44
sg79
g44
sg80
g44
sg81
g44
sg82
g44
sg83
g44
sg84
g44
sg85
g44
sg86
g44
sg87
g44
sg88
g44
sg89
g44
sg90
g44
sg91
g44
sg92
g5
(g93
g94
(dp4722
g96
g97
stp4723
Rp4724
(dp4725
g101
S'environ_items'
p4726
sg103
g92
sbsg104
g44
sg105
g44
sg106
g97
sg107
g44
sg108
g44
sg109
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'wm_anat_to_2mm_flirt_applyxfm'
p4727
sg115
(dp4728
sg117
g4607
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g4727
sg126
Nsg127
(lp4729
sg129
Nsg130
Nsb(dp4730
sg5
(g25
g7
Ntp4731
Rp4732
(dp4733
g29
(dp4734
sg31
g5
(g1403
g7
Ntp4735
Rp4736
(dp4737
g1407
(lp4738
g3712
ag4627
aS'wm_sig_file'
p4739
aS'csf_sig_file'
p4740
aS'gm_sig_file'
p4741
aS'motion_file'
p4742
ag4625
asg36
g37
(g1410
tp4743
Rp4744
(dp4745
g69
I00
sg45
g46
sg4742
g44
sg4625
g44
sg1414
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4746
sg4740
g44
sg4739
g44
sg4741
g44
sg4627
g44
sg3712
g44
sbsg1416
(dp4747
S'regressors_file'
p4748
NsS'residual_file'
p4749
Nssg1419
(lp4750
g4749
ag4748
asg1421
Nsbsg113
Nsg103
S'residuals'
p4751
sg115
(dp4752
sg117
g4607
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
(lp4753
(g4627
(lp4754
(dp4755
S'global'
p4756
I0
sS'linear'
p4757
I1
sS'wm'
p4758
I0
sS'pc1'
p4759
I0
sS'motion'
p4760
I0
sS'quadratic'
p4761
I1
sS'gm'
p4762
I0
sS'compcor'
p4763
I1
sS'csf'
p4764
I1
satp4765
a(g4625
(lp4766
I5
atp4767
asg124
I00
sg125
g4751
sg126
Nsg127
(lp4768
sg129
Nsg130
Nsb(dp4769
sg5
(g25
g7
Ntp4770
Rp4771
(dp4772
g29
(dp4773
sg31
g5
(g32
g7
Ntp4774
Rp4775
(dp4776
g36
g37
(g38
tp4777
Rp4778
(dp4779
g42
g44
sg45
g46
sg47
g44
sg48
g44
sg49
g44
sg50
g44
sg51
g44
sg52
g53
sg54
g44
sg55
g44
sg56
g44
sg57
g44
sg58
g44
sg59
g44
sg60
g44
sg61
g44
sg62
g44
sg63
g44
sg64
g44
sg65
g44
sg66
g44
sg67
g44
sg68
g44
sg69
I00
sg70
g44
sg71
g44
sg72
g4599
sg73
g44
sg74
g44
sg75
g76
sg77
g44
sg78
g44
sg79
g44
sg80
g44
sg81
g44
sg82
g44
sg83
g44
sg84
g44
sg85
g44
sg86
g44
sg87
g44
sg88
g44
sg89
g44
sg90
g44
sg91
g44
sg92
g5
(g93
g94
(dp4780
g96
g97
stp4781
Rp4782
(dp4783
g101
S'environ_items'
p4784
sg103
g92
sbsg104
g44
sg105
g44
sg106
g97
sg107
g44
sg108
g44
sg109
g44
sbsg110
g97
sg111
Nsg112
g76
sbsg113
Nsg103
S'ho_mni_to_2mm_flirt_applyxfm'
p4785
sg115
(dp4786
sg117
g4607
sg119
Nsg120
I00
sg121
I00
sg122
Nsg123
Nsg124
I00
sg125
g4785
sg126
Nsg127
(lp4787
sg129
Nsg130
Nsb(dp4788
ssg247
(dp4789
sg249
(dp4790
g4590
(dp4791
g4673
(dp4792
g253
(lp4793
(g82
g4683
tp4794
asssg4611
(dp4795
g4590
(dp4796
g253
(lp4797
(g962
g64
tp4798
a(g962
g49
tp4799
assg4635
(dp4800
g253
(lp4801
(g3712
g64
tp4802
a(g963
g49
tp4803
a(g3496
g47
tp4804
assg4732
(dp4805
g253
(lp4806
(g3712
g3712
tp4807
a(g4620
g4742
tp4808
a(g4627
g4627
tp4809
a(g4625
g4625
tp4810
assg4713
(dp4811
g253
(lp4812
(g961
g64
tp4813
a(g961
g49
tp4814
assg4654
(dp4815
g253
(lp4816
(g963
g64
tp4817
a(g963
g49
tp4818
assg4771
(dp4819
g253
(lp4820
(g4629
g47
tp4821
a(g4622
g64
tp4822
a(g963
g49
tp4823
asssg4635
(dp4824
g4673
(dp4825
g253
(lp4826
(g82
g3859
tp4827
asssg4654
(dp4828
g4673
(dp4829
g253
(lp4830
(g82
g4682
tp4831
asssg4673
(dp4832
g4732
(dp4833
g253
(lp4834
(g4690
g4739
tp4835
a(g4691
g4740
tp4836
a(g4689
g4741
tp4837
asssg4698
(dp4838
sg4713
(dp4839
g4673
(dp4840
g253
(lp4841
(g82
g4681
tp4842
asssg4732
(dp4843
g4698
(dp4844
g253
(lp4845
(g4749
g3712
tp4846
a(g4748
g4707
tp4847
asssg4771
(dp4848
g4673
(dp4849
g253
(lp4850
(g82
g4680
tp4851
assssg295
g4790
sg296
(dp4852
g4590
(dp4853
g4611
g4796
ssg4611
(dp4854
sg4635
(dp4855
g4611
g4800
ssg4654
(dp4856
g4611
g4815
ssg4673
(dp4857
g4635
g4825
sg4654
g4829
sg4771
g4849
sg4590
g4792
sg4713
g4840
ssg4698
(dp4858
g4732
g4844
ssg4713
(dp4859
g4611
g4811
ssg4732
(dp4860
g4611
g4805
sg4673
g4833
ssg4771
(dp4861
g4611
g4819
sssg304
g4790
sbsg103
g4607
sg117
g1067
sg125
g4607
sg126
g306
((lp4862
(lp4863
g309
ag306
((lp4864
(lp4865
g312
ag309
aa(lp4866
g314
ag315
aa(lp4867
g317
ag318
aa(lp4868
g320
ag321
aa(lp4869
g323
ag324
aa(lp4870
g326
ag327
aa(lp4871
g329
ag330
aa(lp4872
g332
ag333
aatp4873
Rp4874
aa(lp4875
g337
ag306
((lp4876
(lp4877
g312
ag337
aa(lp4878
g341
ag342
aa(lp4879
g344
ag345
aa(lp4880
g347
ag348
aa(lp4881
g350
ag351
aa(lp4882
g353
ag354
aa(lp4883
g356
ag357
aa(lp4884
g359
ag360
aa(lp4885
g362
ag363
aa(lp4886
g365
ag366
aa(lp4887
g368
ag369
aa(lp4888
g371
ag372
aa(lp4889
g374
ag375
aa(lp4890
g377
ag378
aa(lp4891
g380
ag381
aa(lp4892
g383
ag384
aa(lp4893
g386
ag387
aa(lp4894
g389
ag390
aa(lp4895
g392
ag393
aatp4896
Rp4897
aa(lp4898
g397
ag306
((lp4899
(lp4900
g312
ag397
aa(lp4901
g401
ag402
aatp4902
Rp4903
aatp4904
Rp4905
sg130
NsbS'outputspec.subject'
p4906
tp4907
sg1961
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg1962
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Completed'
p4921
sS'strat_0'
p4922
(lp4923
g2255
ag1138
ag305
ag4437
ag2478
ag2893
aS'func_to_anat_FLIRT_0'
p4924
ag3483
ag1904
ag4607
ag3823
ag4465
ag3848
asg1892
g3713
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1430300438.08817
s.