(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(cnipype.pipeline.engine
Node
p18
g7
Ntp19
Rp20
(dp21
S'input_source'
p22
(dp23
sS'_interface'
p24
g5
(cnipype.interfaces.utility
IdentityInterface
p25
g7
Ntp26
Rp27
(dp28
S'inputs'
p29
ctraits.traits
__newobj__
p30
(cnipype.interfaces.base
DynamicTraitedSpec
p31
tp32
Rp33
(dp34
S'standard2highres_rig'
p35
ctraits.trait_base
_Undefined
p36
(tRp37
sS'__traits_version__'
p38
S'4.5.0'
p39
sS'standard2highres_init'
p40
g37
sS'brain'
p41
g37
sS'PRIOR_GRAY'
p42
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p43
sS'standard2highres_mat'
p44
g37
sS'PRIOR_CSF'
p45
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p46
sS'PRIOR_WHITE'
p47
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p48
sbsS'_fields'
p49
(lp50
g41
ag40
ag44
ag35
ag45
ag42
ag47
asS'_mandatory_inputs'
p51
I01
sbsS'_result'
p52
NsS'name'
p53
S'inputspec'
p54
sS'plugin_args'
p55
(dp56
sS'_hierarchy'
p57
S'seg_preproc_0'
p58
sS'itersource'
p59
NsS'run_without_submitting'
p60
I00
sS'synchronize'
p61
I00
sS'parameterization'
p62
NsS'iterables'
p63
NsS'_got_inputs'
p64
I00
sS'_id'
p65
g54
sS'config'
p66
NsS'needed_outputs'
p67
(lp68
sS'overwrite'
p69
NsS'base_dir'
p70
Nsb(dp71
sg5
(g18
g7
Ntp72
Rp73
(dp74
g22
(dp75
sg24
g5
(g25
g7
Ntp76
Rp77
(dp78
g29
g30
(g31
tp79
Rp80
(dp81
S'partial_volume_files'
p82
g37
sg38
g39
sS'gm_combo'
p83
g37
sS'mixeltype'
p84
g37
sS'csf_mni2t1'
p85
g37
sS'wm_bin'
p86
g37
sS'csf_bin'
p87
g37
sS'probability_maps'
p88
g37
sS'wm_mni2t1'
p89
g37
sS'csf_combo'
p90
g37
sS'wm_combo'
p91
g37
sS'wm_mask'
p92
g37
sS'gm_mask'
p93
g37
sS'csf_mask'
p94
g37
sS'gm_bin'
p95
g37
sS'partial_volume_map'
p96
g37
sS'gm_mni2t1'
p97
g37
sbsg49
(lp98
g85
ag90
ag87
ag94
ag97
ag83
ag95
ag93
ag89
ag91
ag86
ag88
ag84
ag96
ag82
ag92
asg51
I01
sbsg52
Nsg53
S'outputspec'
p99
sg55
(dp100
sg57
g58
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp101
sg69
Nsg70
Nsb(dp102
sg5
(g6
g7
Ntp103
Rp104
(dp105
g11
g5
(g12
g7
Ntp106
Rp107
(dp108
g16
(dp109
g5
(g18
g7
Ntp110
Rp111
(dp112
g22
(dp113
sg24
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p114
g7
Ntp115
Rp116
(dp117
g29
g30
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p118
tp119
Rp120
(dp121
S'ignore_exception'
p122
I00
sg38
g39
sS'op_string'
p123
g37
sS'out_data_type'
p124
g37
sS'out_file'
p125
g37
sS'args'
p126
g37
sS'in_file2'
p127
g37
sS'terminal_output'
p128
S'stream'
p129
sS'environ'
p130
g5
(ctraits.trait_handlers
TraitDictObject
p131
c__builtin__
dict
p132
(dp133
S'FSLOUTPUTTYPE'
p134
S'NIFTI_GZ'
p135
stp136
Rp137
(dp138
S'name_items'
p139
S'environ_items'
p140
sg53
g130
sbsS'in_file'
p141
g37
sS'output_type'
p142
g135
sS'suffix'
p143
g37
sbsS'_output_type'
p144
g135
sS'_environ'
p145
NsS'_terminal_output'
p146
g129
sbsg52
Nsg53
S'binarize_threshold_CSF'
p147
sg55
(dp148
sg57
S'CSF'
p149
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g147
sg66
Nsg67
(lp150
sg69
Nsg70
Nsb(dp151
sg5
(g18
g7
Ntp152
Rp153
(dp154
g22
(dp155
sg24
g5
(g25
g7
Ntp156
Rp157
(dp158
g29
g30
(g31
tp159
Rp160
(dp161
g38
g39
sS'segment_combo'
p162
g37
sS'segment_mask'
p163
g37
sS'tissueprior_mni2t1'
p164
g37
sS'segment_bin'
p165
g37
sbsg49
(lp166
g164
ag162
ag165
ag163
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp167
sg57
g149
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp168
sg69
Nsg70
Nsb(dp169
sg5
(g18
g7
Ntp170
Rp171
(dp172
g22
(dp173
sg24
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p174
g7
Ntp175
Rp176
(dp177
g29
g30
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p178
tp179
Rp180
(dp181
g122
I00
sS'nan2zeros'
p182
g37
sg123
S'-mas %s '
p183
sg125
g37
sg126
g37
sS'internal_datatype'
p184
g37
sg38
g39
sg128
g129
sg130
g5
(g131
g132
(dp185
g134
g135
stp186
Rp187
(dp188
g139
S'environ_items'
p189
sg53
g130
sbsg141
g37
sg142
g135
sS'output_datatype'
p190
g37
sS'operand_files'
p191
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'overlap_CSF_map_with_prior'
p192
sg55
(dp193
sg57
g149
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g192
sg66
Nsg67
(lp194
sg69
Nsg70
Nsb(dp195
sg5
(g18
g7
Ntp196
Rp197
(dp198
g22
(dp199
sg24
g5
(g25
g7
Ntp200
Rp201
(dp202
g29
g30
(g31
tp203
Rp204
(dp205
g35
g37
sg38
g39
sg40
g37
sS'tissue_prior'
p206
g37
sg44
g37
sg41
g37
sS'probability_map'
p207
g37
sS'threshold'
p208
g37
sbsg49
(lp209
g206
ag208
ag41
ag207
ag40
ag44
ag35
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp210
sg57
g149
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp211
sg69
Nsg70
Nsb(dp212
sg5
(g18
g7
Ntp213
Rp214
(dp215
g22
(dp216
sg24
g5
(g174
g7
Ntp217
Rp218
(dp219
g29
g30
(g178
tp220
Rp221
(dp222
g122
I00
sg182
g37
sg123
g183
sg125
g37
sg126
g37
sg184
g37
sg38
g39
sg128
g129
sg130
g5
(g131
g132
(dp223
g134
g135
stp224
Rp225
(dp226
g139
S'environ_items'
p227
sg53
g130
sbsg141
g37
sg142
g135
sg190
g37
sg191
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'CSF_mask'
p228
sg55
(dp229
sg57
g149
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g228
sg66
Nsg67
(lp230
sg69
Nsg70
Nsb(dp231
sg5
(g18
g7
Ntp232
Rp233
(dp234
g22
(dp235
sg24
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p236
g7
Ntp237
Rp238
(dp239
g29
g30
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p240
tp241
Rp242
(dp243
S'rigid2D'
p244
g37
sg38
g39
sS'in_matrix_file'
p245
g37
sS'verbose'
p246
g37
sS'reference'
p247
g37
sS'padding_size'
p248
g37
sS'sinc_window'
p249
g37
sS'interp'
p250
S'nearestneighbour'
p251
sS'wmnorms'
p252
g37
sS'coarse_search'
p253
g37
sS'no_resample'
p254
g37
sS'sinc_width'
p255
g37
sS'in_weight'
p256
g37
sS'fieldmap'
p257
g37
sS'echospacing'
p258
g37
sS'ref_weight'
p259
g37
sS'apply_isoxfm'
p260
g37
sS'fieldmapmask'
p261
g37
sg141
g37
sS'bbrtype'
p262
g37
sS'no_clamp'
p263
g37
sS'force_scaling'
p264
g37
sS'pedir'
p265
g37
sg122
I00
sS'display_init'
p266
g37
sS'schedule'
p267
g37
sg126
g37
sS'uses_qform'
p268
g37
sS'wmcoords'
p269
g37
sg128
g129
sS'fine_search'
p270
g37
sS'angle_rep'
p271
g37
sS'no_search'
p272
g37
sS'apply_xfm'
p273
I01
sS'wm_seg'
p274
g37
sg125
g37
sS'bbrslope'
p275
g37
sS'datatype'
p276
g37
sS'save_log'
p277
g37
sS'dof'
p278
g37
sS'out_matrix_file'
p279
g37
sS'no_resample_blur'
p280
g37
sS'min_sampling'
p281
g37
sS'cost_func'
p282
g37
sS'cost'
p283
g37
sg130
g5
(g131
g132
(dp284
g134
g135
stp285
Rp286
(dp287
g139
S'environ_items'
p288
sg53
g130
sbsS'searchr_x'
p289
g37
sS'out_log'
p290
g37
sg142
g135
sS'searchr_z'
p291
g37
sS'bins'
p292
g37
sS'searchr_y'
p293
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'CSF_prior_mni_to_t1'
p294
sg55
(dp295
sg57
g149
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g294
sg66
Nsg67
(lp296
sg69
Nsg70
Nsb(dp297
ssS'graph'
p298
(dp299
sS'succ'
p300
(dp301
g111
(dp302
g214
(dp303
S'connect'
p304
(lp305
(g125
g141
tp306
assg153
(dp307
g304
(lp308
(g125
g165
tp309
asssg153
(dp310
sg171
(dp311
g111
(dp312
g304
(lp313
(g125
g141
tp314
assg153
(dp315
g304
(lp316
(g125
g162
tp317
asssg197
(dp318
g171
(dp319
g304
(lp320
(g207
g141
tp321
assg233
(dp322
g304
(lp323
(g206
g141
tp324
a(g41
g247
tp325
a(g44
g245
tp326
assg111
(dp327
g304
(lp328
((g208
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p329
(ttp330
g123
tp331
asssg214
(dp332
g153
(dp333
g304
(lp334
(g125
g163
tp335
asssg233
(dp336
g171
(dp337
g304
(lp338
(g125
g191
tp339
assg153
(dp340
g304
(lp341
(g125
g164
tp342
assg214
(dp343
g304
(lp344
(g125
g191
tp345
assssS'edge'
p346
g301
sS'pred'
p347
(dp348
g111
(dp349
g171
g312
sg197
g327
ssg153
(dp350
g171
g315
sg233
g340
sg214
g333
sg111
g307
ssg171
(dp351
g197
g319
sg233
g337
ssg197
(dp352
sg214
(dp353
g111
g303
sg233
g343
ssg233
(dp354
g197
g322
sssS'adj'
p355
g301
sbsg53
g149
sg57
g58
sg65
g149
sg66
ccollections
OrderedDict
p356
((lp357
(lp358
S'logging'
p359
ag356
((lp360
(lp361
S'__name__'
p362
ag359
aa(lp363
S'workflow_level'
p364
aS'INFO'
p365
aa(lp366
S'filemanip_level'
p367
aS'INFO'
p368
aa(lp369
S'interface_level'
p370
aS'INFO'
p371
aa(lp372
S'log_to_file'
p373
aS'True'
p374
aa(lp375
S'log_directory'
p376
aS'/mnt/ssd1/data/outputs/CPAC/CPAC_test1/outputs/logs/1_1778689511'
p377
aa(lp378
S'log_size'
p379
aS'16384000'
p380
aa(lp381
S'log_rotate'
p382
aS'4'
p383
aatp384
Rp385
aa(lp386
S'execution'
p387
ag356
((lp388
(lp389
g362
ag387
aa(lp390
S'create_report'
p391
aS'true'
p392
aa(lp393
S'crashdump_dir'
p394
aS'/home/eric/Documents/m2g/packages/functional/CPAC_pipes'
p395
aa(lp396
S'display_variable'
p397
aS':1'
p398
aa(lp399
S'hash_method'
p400
aS'timestamp'
p401
aa(lp402
S'job_finished_timeout'
p403
aS'5'
p404
aa(lp405
S'keep_inputs'
p406
aS'false'
p407
aa(lp408
S'local_hash_check'
p409
aS'true'
p410
aa(lp411
S'matplotlib_backend'
p412
aS'Agg'
p413
aa(lp414
S'plugin'
p415
aS'Linear'
p416
aa(lp417
S'remove_node_directories'
p418
aS'false'
p419
aa(lp420
S'remove_unnecessary_outputs'
p421
aS'true'
p422
aa(lp423
S'single_thread_matlab'
p424
aS'true'
p425
aa(lp426
S'stop_on_first_crash'
p427
aS'false'
p428
aa(lp429
S'stop_on_first_rerun'
p430
aS'false'
p431
aa(lp432
S'use_relative_paths'
p433
aS'false'
p434
aa(lp435
S'stop_on_unknown_version'
p436
aS'false'
p437
aa(lp438
S'write_provenance'
p439
aS'false'
p440
aa(lp441
S'parameterize_dirs'
p442
aS'true'
p443
aatp444
Rp445
aa(lp446
S'check'
p447
ag356
((lp448
(lp449
g362
ag447
aa(lp450
S'interval'
p451
aS'1209600'
p452
aatp453
Rp454
aatp455
Rp456
sg70
Nsb(dp457
sg5
(g18
g7
Ntp458
Rp459
(dp460
g22
(dp461
sg24
g5
(g25
g7
Ntp462
Rp463
(dp464
g29
g30
(g31
tp465
Rp466
(dp467
g38
g39
sS'csf_threshold'
p468
(lp469
F0.96
asbsg49
(lp470
g468
asg51
I01
sbsg52
Nsg53
g468
sg55
(dp471
sg57
g58
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
(g468
(lp472
F0.96
atp473
sg64
I00
sg65
g468
sg66
Nsg67
(lp474
sg69
Nsg70
Nsb(dp475
sg5
(g6
g7
Ntp476
Rp477
(dp478
g11
g5
(g12
g7
Ntp479
Rp480
(dp481
g16
(dp482
g5
(g18
g7
Ntp483
Rp484
(dp485
g22
(dp486
sg24
g5
(g114
g7
Ntp487
Rp488
(dp489
g29
g30
(g118
tp490
Rp491
(dp492
g122
I00
sg38
g39
sg123
g37
sg124
g37
sg125
g37
sg126
g37
sg127
g37
sg128
g129
sg130
g5
(g131
g132
(dp493
g134
g135
stp494
Rp495
(dp496
g139
S'environ_items'
p497
sg53
g130
sbsg141
g37
sg142
g135
sg143
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'binarize_threshold_WM'
p498
sg55
(dp499
sg57
S'WM'
p500
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g498
sg66
Nsg67
(lp501
sg69
Nsg70
Nsb(dp502
sg5
(g18
g7
Ntp503
Rp504
(dp505
g22
(dp506
sg24
g5
(g236
g7
Ntp507
Rp508
(dp509
g29
g30
(g240
tp510
Rp511
(dp512
g244
g37
sg38
g39
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g251
sg252
g37
sg253
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg259
g37
sg260
g37
sg261
g37
sg141
g37
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg122
I00
sg266
g37
sg267
g37
sg126
g37
sg268
g37
sg269
g37
sg128
g129
sg270
g37
sg271
g37
sg272
g37
sg273
I01
sg274
g37
sg125
g37
sg275
g37
sg276
g37
sg277
g37
sg278
g37
sg279
g37
sg280
g37
sg281
g37
sg282
g37
sg283
g37
sg130
g5
(g131
g132
(dp513
g134
g135
stp514
Rp515
(dp516
g139
S'environ_items'
p517
sg53
g130
sbsg289
g37
sg290
g37
sg142
g135
sg291
g37
sg292
g37
sg293
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'WM_prior_mni_to_t1'
p518
sg55
(dp519
sg57
g500
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g518
sg66
Nsg67
(lp520
sg69
Nsg70
Nsb(dp521
sg5
(g18
g7
Ntp522
Rp523
(dp524
g22
(dp525
sg24
g5
(g25
g7
Ntp526
Rp527
(dp528
g29
g30
(g31
tp529
Rp530
(dp531
g35
g37
sg38
g39
sg40
g37
sg206
g37
sg44
g37
sg41
g37
sg207
g37
sg208
g37
sbsg49
(lp532
g206
ag208
ag41
ag207
ag40
ag44
ag35
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp533
sg57
g500
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp534
sg69
Nsg70
Nsb(dp535
sg5
(g18
g7
Ntp536
Rp537
(dp538
g22
(dp539
sg24
g5
(g174
g7
Ntp540
Rp541
(dp542
g29
g30
(g178
tp543
Rp544
(dp545
g122
I00
sg182
g37
sg123
g183
sg125
g37
sg126
g37
sg184
g37
sg38
g39
sg128
g129
sg130
g5
(g131
g132
(dp546
g134
g135
stp547
Rp548
(dp549
g139
S'environ_items'
p550
sg53
g130
sbsg141
g37
sg142
g135
sg190
g37
sg191
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'overlap_WM_map_with_prior'
p551
sg55
(dp552
sg57
g500
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g551
sg66
Nsg67
(lp553
sg69
Nsg70
Nsb(dp554
sg5
(g18
g7
Ntp555
Rp556
(dp557
g22
(dp558
sg24
g5
(g174
g7
Ntp559
Rp560
(dp561
g29
g30
(g178
tp562
Rp563
(dp564
g122
I00
sg182
g37
sg123
g183
sg125
g37
sg126
g37
sg184
g37
sg38
g39
sg128
g129
sg130
g5
(g131
g132
(dp565
g134
g135
stp566
Rp567
(dp568
g139
S'environ_items'
p569
sg53
g130
sbsg141
g37
sg142
g135
sg190
g37
sg191
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'WM_mask'
p570
sg55
(dp571
sg57
g500
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g570
sg66
Nsg67
(lp572
sg69
Nsg70
Nsb(dp573
sg5
(g18
g7
Ntp574
Rp575
(dp576
g22
(dp577
sg24
g5
(g25
g7
Ntp578
Rp579
(dp580
g29
g30
(g31
tp581
Rp582
(dp583
g38
g39
sg162
g37
sg163
g37
sg164
g37
sg165
g37
sbsg49
(lp584
g164
ag162
ag165
ag163
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp585
sg57
g500
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp586
sg69
Nsg70
Nsb(dp587
ssg298
(dp588
sg300
(dp589
g484
(dp590
g556
(dp591
g304
(lp592
(g125
g141
tp593
assg575
(dp594
g304
(lp595
(g125
g165
tp596
asssg504
(dp597
g575
(dp598
g304
(lp599
(g125
g164
tp600
assg537
(dp601
g304
(lp602
(g125
g191
tp603
assg556
(dp604
g304
(lp605
(g125
g191
tp606
asssg523
(dp607
g537
(dp608
g304
(lp609
(g207
g141
tp610
assg504
(dp611
g304
(lp612
(g206
g141
tp613
a(g41
g247
tp614
a(g44
g245
tp615
assg484
(dp616
g304
(lp617
((g208
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p618
(ttp619
g123
tp620
asssg537
(dp621
g575
(dp622
g304
(lp623
(g125
g162
tp624
assg484
(dp625
g304
(lp626
(g125
g141
tp627
asssg556
(dp628
g575
(dp629
g304
(lp630
(g125
g163
tp631
asssg575
(dp632
ssg346
g589
sg347
(dp633
g484
(dp634
g537
g625
sg523
g616
ssg504
(dp635
g523
g611
ssg523
(dp636
sg537
(dp637
g523
g608
sg504
g601
ssg556
(dp638
g484
g591
sg504
g604
ssg575
(dp639
g537
g622
sg556
g629
sg504
g598
sg484
g594
sssg355
g589
sbsg53
g500
sg57
g58
sg65
g500
sg66
g356
((lp640
(lp641
g359
ag356
((lp642
(lp643
g362
ag359
aa(lp644
g364
ag365
aa(lp645
g367
ag368
aa(lp646
g370
ag371
aa(lp647
g373
ag374
aa(lp648
g376
ag377
aa(lp649
g379
ag380
aa(lp650
g382
ag383
aatp651
Rp652
aa(lp653
g387
ag356
((lp654
(lp655
g362
ag387
aa(lp656
g391
ag392
aa(lp657
g394
ag395
aa(lp658
g397
ag398
aa(lp659
g400
ag401
aa(lp660
g403
ag404
aa(lp661
g406
ag407
aa(lp662
g409
ag410
aa(lp663
g412
ag413
aa(lp664
g415
ag416
aa(lp665
g418
ag419
aa(lp666
g421
ag422
aa(lp667
g424
ag425
aa(lp668
g427
ag428
aa(lp669
g430
ag431
aa(lp670
g433
ag434
aa(lp671
g436
ag437
aa(lp672
g439
ag440
aa(lp673
g442
ag443
aatp674
Rp675
aa(lp676
g447
ag356
((lp677
(lp678
g362
ag447
aa(lp679
g451
ag452
aatp680
Rp681
aatp682
Rp683
sg70
Nsb(dp684
sg5
(g6
g7
Ntp685
Rp686
(dp687
g11
g5
(g12
g7
Ntp688
Rp689
(dp690
g16
(dp691
g5
(g18
g7
Ntp692
Rp693
(dp694
g22
(dp695
sg24
g5
(g236
g7
Ntp696
Rp697
(dp698
g29
g30
(g240
tp699
Rp700
(dp701
g244
g37
sg38
g39
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g251
sg252
g37
sg253
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg259
g37
sg260
g37
sg261
g37
sg141
g37
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg122
I00
sg266
g37
sg267
g37
sg126
g37
sg268
g37
sg269
g37
sg128
g129
sg270
g37
sg271
g37
sg272
g37
sg273
I01
sg274
g37
sg125
g37
sg275
g37
sg276
g37
sg277
g37
sg278
g37
sg279
g37
sg280
g37
sg281
g37
sg282
g37
sg283
g37
sg130
g5
(g131
g132
(dp702
g134
g135
stp703
Rp704
(dp705
g139
S'environ_items'
p706
sg53
g130
sbsg289
g37
sg290
g37
sg142
g135
sg291
g37
sg292
g37
sg293
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'GM_prior_mni_to_t1'
p707
sg55
(dp708
sg57
S'GM'
p709
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g707
sg66
Nsg67
(lp710
sg69
Nsg70
Nsb(dp711
sg5
(g18
g7
Ntp712
Rp713
(dp714
g22
(dp715
sg24
g5
(g174
g7
Ntp716
Rp717
(dp718
g29
g30
(g178
tp719
Rp720
(dp721
g122
I00
sg182
g37
sg123
g183
sg125
g37
sg126
g37
sg184
g37
sg38
g39
sg128
g129
sg130
g5
(g131
g132
(dp722
g134
g135
stp723
Rp724
(dp725
g139
S'environ_items'
p726
sg53
g130
sbsg141
g37
sg142
g135
sg190
g37
sg191
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'GM_mask'
p727
sg55
(dp728
sg57
g709
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g727
sg66
Nsg67
(lp729
sg69
Nsg70
Nsb(dp730
sg5
(g18
g7
Ntp731
Rp732
(dp733
g22
(dp734
sg24
g5
(g114
g7
Ntp735
Rp736
(dp737
g29
g30
(g118
tp738
Rp739
(dp740
g122
I00
sg38
g39
sg123
g37
sg124
g37
sg125
g37
sg126
g37
sg127
g37
sg128
g129
sg130
g5
(g131
g132
(dp741
g134
g135
stp742
Rp743
(dp744
g139
S'environ_items'
p745
sg53
g130
sbsg141
g37
sg142
g135
sg143
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'binarize_threshold_GM'
p746
sg55
(dp747
sg57
g709
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g746
sg66
Nsg67
(lp748
sg69
Nsg70
Nsb(dp749
sg5
(g18
g7
Ntp750
Rp751
(dp752
g22
(dp753
sg24
g5
(g25
g7
Ntp754
Rp755
(dp756
g29
g30
(g31
tp757
Rp758
(dp759
g35
g37
sg38
g39
sg40
g37
sg206
g37
sg44
g37
sg41
g37
sg207
g37
sg208
g37
sbsg49
(lp760
g206
ag208
ag41
ag207
ag40
ag44
ag35
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp761
sg57
g709
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp762
sg69
Nsg70
Nsb(dp763
sg5
(g18
g7
Ntp764
Rp765
(dp766
g22
(dp767
sg24
g5
(g174
g7
Ntp768
Rp769
(dp770
g29
g30
(g178
tp771
Rp772
(dp773
g122
I00
sg182
g37
sg123
g183
sg125
g37
sg126
g37
sg184
g37
sg38
g39
sg128
g129
sg130
g5
(g131
g132
(dp774
g134
g135
stp775
Rp776
(dp777
g139
S'environ_items'
p778
sg53
g130
sbsg141
g37
sg142
g135
sg190
g37
sg191
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'overlap_GM_map_with_prior'
p779
sg55
(dp780
sg57
g709
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g779
sg66
Nsg67
(lp781
sg69
Nsg70
Nsb(dp782
sg5
(g18
g7
Ntp783
Rp784
(dp785
g22
(dp786
sg24
g5
(g25
g7
Ntp787
Rp788
(dp789
g29
g30
(g31
tp790
Rp791
(dp792
g38
g39
sg162
g37
sg163
g37
sg164
g37
sg165
g37
sbsg49
(lp793
g164
ag162
ag165
ag163
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp794
sg57
g709
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp795
sg69
Nsg70
Nsb(dp796
ssg298
(dp797
sg300
(dp798
g693
(dp799
g784
(dp800
g304
(lp801
(g125
g164
tp802
assg765
(dp803
g304
(lp804
(g125
g191
tp805
assg713
(dp806
g304
(lp807
(g125
g191
tp808
asssg713
(dp809
g784
(dp810
g304
(lp811
(g125
g163
tp812
asssg732
(dp813
g713
(dp814
g304
(lp815
(g125
g141
tp816
assg784
(dp817
g304
(lp818
(g125
g165
tp819
asssg751
(dp820
g693
(dp821
g304
(lp822
(g206
g141
tp823
a(g41
g247
tp824
a(g44
g245
tp825
assg765
(dp826
g304
(lp827
(g207
g141
tp828
assg732
(dp829
g304
(lp830
((g208
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p831
(ttp832
g123
tp833
asssg765
(dp834
g732
(dp835
g304
(lp836
(g125
g141
tp837
assg784
(dp838
g304
(lp839
(g125
g162
tp840
asssg784
(dp841
ssg346
g798
sg347
(dp842
g693
(dp843
g751
g821
ssg713
(dp844
g732
g814
sg693
g806
ssg732
(dp845
g765
g835
sg751
g829
ssg751
(dp846
sg765
(dp847
g693
g803
sg751
g826
ssg784
(dp848
g693
g800
sg713
g810
sg765
g838
sg732
g817
sssg355
g798
sbsg53
g709
sg57
g58
sg65
g709
sg66
g356
((lp849
(lp850
g359
ag356
((lp851
(lp852
g362
ag359
aa(lp853
g364
ag365
aa(lp854
g367
ag368
aa(lp855
g370
ag371
aa(lp856
g373
ag374
aa(lp857
g376
ag377
aa(lp858
g379
ag380
aa(lp859
g382
ag383
aatp860
Rp861
aa(lp862
g387
ag356
((lp863
(lp864
g362
ag387
aa(lp865
g391
ag392
aa(lp866
g394
ag395
aa(lp867
g397
ag398
aa(lp868
g400
ag401
aa(lp869
g403
ag404
aa(lp870
g406
ag407
aa(lp871
g409
ag410
aa(lp872
g412
ag413
aa(lp873
g415
ag416
aa(lp874
g418
ag419
aa(lp875
g421
ag422
aa(lp876
g424
ag425
aa(lp877
g427
ag428
aa(lp878
g430
ag431
aa(lp879
g433
ag434
aa(lp880
g436
ag437
aa(lp881
g439
ag440
aa(lp882
g442
ag443
aatp883
Rp884
aa(lp885
g447
ag356
((lp886
(lp887
g362
ag447
aa(lp888
g451
ag452
aatp889
Rp890
aatp891
Rp892
sg70
Nsb(dp893
sg5
(g18
g7
Ntp894
Rp895
(dp896
g22
(dp897
sg24
g5
(g25
g7
Ntp898
Rp899
(dp900
g29
g30
(g31
tp901
Rp902
(dp903
g38
g39
sS'gm_threshold'
p904
(lp905
F0.7
asbsg49
(lp906
g904
asg51
I01
sbsg52
Nsg53
g904
sg55
(dp907
sg57
g58
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
(g904
(lp908
F0.7
atp909
sg64
I00
sg65
g904
sg66
Nsg67
(lp910
sg69
Nsg70
Nsb(dp911
sg5
(g18
g7
Ntp912
Rp913
(dp914
g22
(dp915
sg24
g5
(cnipype.interfaces.fsl.preprocess
FAST
p916
g7
Ntp917
Rp918
(dp919
g29
g30
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p920
tp921
Rp922
(dp923
S'number_classes'
p924
g37
sS'out_basename'
p925
S'segment'
p926
sS'hyper'
p927
g37
sg246
g37
sS'init_seg_smooth'
p928
g37
sS'init_transform'
p929
g37
sS'no_pve'
p930
g37
sS'output_biascorrected'
p931
g37
sS'mixel_smooth'
p932
g37
sS'segments'
p933
I01
sS'iters_afterbias'
p934
g37
sS'bias_lowpass'
p935
g37
sS'other_priors'
p936
g37
sg38
g39
sg122
I00
sS'img_type'
p937
I1
sg126
g37
sg88
I01
sS'manual_seg'
p938
g37
sg128
g129
sS'output_biasfield'
p939
g37
sS'no_bias'
p940
g37
sS'use_priors'
p941
g37
sS'in_files'
p942
g37
sS'segment_iters'
p943
g37
sg130
g5
(g131
g132
(dp944
g134
g135
stp945
Rp946
(dp947
g139
S'environ_items'
p948
sg53
g130
sbsg142
g135
sS'bias_iters'
p949
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
g926
sg55
(dp950
sg57
g58
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g926
sg66
Nsg67
(lp951
sg69
Nsg70
Nsb(dp952
sg5
(g18
g7
Ntp953
Rp954
(dp955
g22
(dp956
sg24
g5
(g25
g7
Ntp957
Rp958
(dp959
g29
g30
(g31
tp960
Rp961
(dp962
g38
g39
sS'wm_threshold'
p963
(lp964
F0.96
asbsg49
(lp965
g963
asg51
I01
sbsg52
Nsg53
g963
sg55
(dp966
sg57
g58
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
(g963
(lp967
F0.96
atp968
sg64
I00
sg65
g963
sg66
Nsg67
(lp969
sg69
Nsg70
Nsb(dp970
ssg298
(dp971
sg300
(dp972
g20
(dp973
g686
(dp974
g304
(lp975
(g41
S'inputspec.brain'
p976
tp977
a(g42
S'inputspec.tissue_prior'
p978
tp979
a(g44
S'inputspec.standard2highres_mat'
p980
tp981
assg104
(dp982
g304
(lp983
(g41
g976
tp984
a(g45
g978
tp985
a(g44
g980
tp986
assg913
(dp987
g304
(lp988
(g41
g942
tp989
assg477
(dp990
g304
(lp991
(g41
g976
tp992
a(g47
g978
tp993
a(g44
g980
tp994
asssg73
(dp995
sg104
(dp996
g73
(dp997
g304
(lp998
(S'outputspec.tissueprior_mni2t1'
p999
g85
tp1000
a(S'outputspec.segment_combo'
p1001
g90
tp1002
a(S'outputspec.segment_bin'
p1003
g87
tp1004
a(S'outputspec.segment_mask'
p1005
g94
tp1006
asssg459
(dp1007
g104
(dp1008
g304
(lp1009
(g468
S'inputspec.threshold'
p1010
tp1011
asssg477
(dp1012
g73
(dp1013
g304
(lp1014
(g999
g89
tp1015
a(g1001
g91
tp1016
a(g1003
g86
tp1017
a(g1005
g92
tp1018
asssg686
(dp1019
g73
(dp1020
g304
(lp1021
(g999
g97
tp1022
a(g1001
g83
tp1023
a(g1003
g95
tp1024
a(g1005
g93
tp1025
asssg895
(dp1026
g686
(dp1027
g304
(lp1028
(g904
g1010
tp1029
asssg913
(dp1030
g686
(dp1031
g304
(lp1032
((g88
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1033
(ttp1034
S'inputspec.probability_map'
p1035
tp1036
assg104
(dp1037
g304
(lp1038
((g88
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1039
(ttp1040
g1035
tp1041
assg73
(dp1042
g304
(lp1043
(g88
g88
tp1044
a(g84
g84
tp1045
a(g82
g82
tp1046
a(g96
g96
tp1047
assg477
(dp1048
g304
(lp1049
((g88
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1050
(ttp1051
g1035
tp1052
asssg954
(dp1053
g477
(dp1054
g304
(lp1055
(g963
g1010
tp1056
assssg346
g972
sg347
(dp1057
g20
(dp1058
sg73
(dp1059
g686
g1020
sg104
g997
sg913
g1042
sg477
g1013
ssg104
(dp1060
g20
g982
sg913
g1037
sg459
g1008
ssg459
(dp1061
sg477
(dp1062
g20
g990
sg913
g1048
sg954
g1054
ssg686
(dp1063
g20
g974
sg913
g1031
sg895
g1027
ssg895
(dp1064
sg913
(dp1065
g20
g987
ssg954
(dp1066
ssg355
g972
sbsg53
g58
sg57
S'resting_preproc_1_1778689511'
p1067
sg65
g58
sg66
g356
((lp1068
(lp1069
g359
ag356
((lp1070
(lp1071
g362
ag359
aa(lp1072
g364
ag365
aa(lp1073
g367
ag368
aa(lp1074
g370
ag371
aa(lp1075
g373
ag374
aa(lp1076
g376
ag377
aa(lp1077
g379
ag380
aa(lp1078
g382
ag383
aatp1079
Rp1080
aa(lp1081
g387
ag356
((lp1082
(lp1083
g362
ag387
aa(lp1084
g391
ag392
aa(lp1085
g394
ag395
aa(lp1086
g397
ag398
aa(lp1087
g400
ag401
aa(lp1088
g403
ag404
aa(lp1089
g406
ag407
aa(lp1090
g409
ag410
aa(lp1091
g412
ag413
aa(lp1092
g415
ag416
aa(lp1093
g418
ag419
aa(lp1094
g421
ag422
aa(lp1095
g424
ag425
aa(lp1096
g427
ag428
aa(lp1097
g430
ag431
aa(lp1098
g433
ag434
aa(lp1099
g436
ag437
aa(lp1100
g439
ag440
aa(lp1101
g442
ag443
aatp1102
Rp1103
aa(lp1104
g447
ag356
((lp1105
(lp1106
g362
ag447
aa(lp1107
g451
ag452
aatp1108
Rp1109
aatp1110
Rp1111
sg70
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g18
g7
Ntp1122
Rp1123
(dp1124
g22
(dp1125
sg24
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1126
g7
Ntp1127
Rp1128
(dp1129
g29
g30
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1130
tp1131
Rp1132
(dp1133
g38
g39
sS'derive_from_ref'
p1134
g37
sS'in_intensitymap_file'
p1135
g37
sS'modulatedref_file'
p1136
g37
sS'refmask_val'
p1137
g37
sS'hessian_precision'
p1138
g37
sS'in_fwhm'
p1139
g37
sS'skip_implicit_in_masking'
p1140
g37
sS'inmask_file'
p1141
g37
sS'refmask_file'
p1142
g37
sS'inwarp_file'
p1143
g37
sS'skip_lambda_ssq'
p1144
g37
sS'intensity_mapping_model'
p1145
g37
sS'affine_file'
p1146
g37
sS'apply_inmask'
p1147
g37
sS'spline_order'
p1148
g37
sS'apply_refmask'
p1149
g37
sS'subsampling_scheme'
p1150
g37
sg141
g37
sS'warped_file'
p1151
g37
sS'skip_refmask'
p1152
g37
sg122
I00
sS'ref_fwhm'
p1153
g37
sS'inmask_val'
p1154
g37
sS'config_file'
p1155
g37
sS'field_file'
p1156
g37
sg126
g37
sS'apply_intensity_mapping'
p1157
g37
sS'regularization_lambda'
p1158
g37
sg128
g129
sS'regularization_model'
p1159
g37
sS'jacobian_range'
p1160
g37
sS'out_intensitymap_file'
p1161
g37
sS'skip_implicit_ref_masking'
p1162
g37
sS'ref_file'
p1163
g37
sS'skip_inmask'
p1164
g37
sS'fieldcoeff_file'
p1165
I01
sS'warp_resolution'
p1166
g37
sS'jacobian_file'
p1167
I01
sg130
g5
(g131
g132
(dp1168
g134
g135
stp1169
Rp1170
(dp1171
g139
S'environ_items'
p1172
sg53
g130
sbsS'bias_regularization_lambda'
p1173
g37
sg142
g135
sS'skip_intensity_mapping'
p1174
g37
sS'log_file'
p1175
g37
sS'biasfield_resolution'
p1176
g37
sS'intensity_mapping_order'
p1177
g37
sS'max_nonlin_iter'
p1178
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'nonlinear_reg_1'
p1179
sg55
(dp1180
sg57
S'anat_mni_fnirt_register_0'
p1181
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1179
sg66
Nsg67
(lp1182
sg69
Nsg70
Nsb(dp1183
sg5
(g18
g7
Ntp1184
Rp1185
(dp1186
g22
(dp1187
sg24
g5
(g25
g7
Ntp1188
Rp1189
(dp1190
g29
g30
(g31
tp1191
Rp1192
(dp1193
g38
g39
sS'output_brain'
p1194
g37
sS'nonlinear_xfm'
p1195
g37
sS'invlinear_xfm'
p1196
g37
sS'linear_xfm'
p1197
g37
sbsg49
(lp1198
g1194
ag1197
ag1196
ag1195
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp1199
sg57
g1181
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp1200
sg69
Nsg70
Nsb(dp1201
sg5
(g18
g7
Ntp1202
Rp1203
(dp1204
g22
(dp1205
sg24
g5
(g236
g7
Ntp1206
Rp1207
(dp1208
g29
g30
(g240
tp1209
Rp1210
(dp1211
g244
g37
sg38
g39
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg252
g37
sg253
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg259
g37
sg260
g37
sg261
g37
sg141
g37
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg122
I00
sg266
g37
sg267
g37
sg126
g37
sg268
g37
sg269
g37
sg128
g129
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg125
g37
sg275
g37
sg276
g37
sg277
g37
sg278
g37
sg279
g37
sg280
g37
sg281
g37
sg282
g37
sg283
S'corratio'
p1212
sg130
g5
(g131
g132
(dp1213
g134
g135
stp1214
Rp1215
(dp1216
g139
S'environ_items'
p1217
sg53
g130
sbsg289
g37
sg290
g37
sg142
g135
sg291
g37
sg292
g37
sg293
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'linear_reg_0'
p1218
sg55
(dp1219
sg57
g1181
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1218
sg66
Nsg67
(lp1220
sg69
Nsg70
Nsb(dp1221
sg5
(g18
g7
Ntp1222
Rp1223
(dp1224
g22
(dp1225
sg24
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1226
g7
Ntp1227
Rp1228
(dp1229
g29
g30
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1230
tp1231
Rp1232
(dp1233
g122
I00
sS'supersample'
p1234
g37
sg141
g37
sS'superlevel'
p1235
g37
sg125
g37
sg276
g37
sg126
g37
sg250
g37
sg1156
g37
sg1163
g37
sg128
g129
sg130
g5
(g131
g132
(dp1236
g134
g135
stp1237
Rp1238
(dp1239
g139
S'environ_items'
p1240
sg53
g130
sbsS'premat'
p1241
g37
sS'mask_file'
p1242
g37
sg142
g135
sS'relwarp'
p1243
g37
sS'abswarp'
p1244
g37
sg38
g39
sS'postmat'
p1245
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'brain_warp'
p1246
sg55
(dp1247
sg57
g1181
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1246
sg66
Nsg67
(lp1248
sg69
Nsg70
Nsb(dp1249
sg5
(g18
g7
Ntp1250
Rp1251
(dp1252
g22
(dp1253
sg24
g5
(g25
g7
Ntp1254
Rp1255
(dp1256
g29
g30
(g31
tp1257
Rp1258
(dp1259
S'fnirt_config'
p1260
S'T1_2_MNI152_2mm'
p1261
sg38
g39
sS'input_brain'
p1262
g37
sS'reference_skull'
p1263
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1264
sS'reference_brain'
p1265
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1266
sS'input_skull'
p1267
g37
sbsg49
(lp1268
g1262
ag1267
ag1265
ag1263
ag1260
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp1269
sg57
g1181
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp1270
sg69
Nsg70
Nsb(dp1271
sg5
(g18
g7
Ntp1272
Rp1273
(dp1274
g22
(dp1275
sg24
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1276
g7
Ntp1277
Rp1278
(dp1279
g29
g30
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1280
tp1281
Rp1282
(dp1283
g122
I00
sg38
g39
sg125
g37
sg126
g37
sg127
g37
sS'fix_scale_skew'
p1284
g37
sS'invert_xfm'
p1285
I01
sg128
g129
sS'concat_xfm'
p1286
g37
sg141
g37
sg142
g135
sg130
g5
(g131
g132
(dp1287
g134
g135
stp1288
Rp1289
(dp1290
g139
S'environ_items'
p1291
sg53
g130
sbsbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'inv_linear_reg0_xfm'
p1292
sg55
(dp1293
sg57
g1181
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1292
sg66
Nsg67
(lp1294
sg69
Nsg70
Nsb(dp1295
ssg298
(dp1296
sg300
(dp1297
g1123
(dp1298
g1185
(dp1299
g304
(lp1300
(g1165
g1195
tp1301
assg1223
(dp1302
g304
(lp1303
(g1165
g1156
tp1304
asssg1185
(dp1305
sg1203
(dp1306
g1123
(dp1307
g304
(lp1308
(g279
g1146
tp1309
assg1185
(dp1310
g304
(lp1311
(g279
g1197
tp1312
assg1273
(dp1313
g304
(lp1314
(g279
g141
tp1315
asssg1223
(dp1316
g1185
(dp1317
g304
(lp1318
(g125
g1194
tp1319
asssg1251
(dp1320
g1123
(dp1321
g304
(lp1322
(g1267
g141
tp1323
a(g1263
g1163
tp1324
a(g1260
g1155
tp1325
assg1203
(dp1326
g304
(lp1327
(g1262
g141
tp1328
a(g1265
g247
tp1329
assg1223
(dp1330
g304
(lp1331
(g1262
g141
tp1332
a(g1265
g1163
tp1333
asssg1273
(dp1334
g1185
(dp1335
g304
(lp1336
(g125
g1196
tp1337
assssg346
g1297
sg347
(dp1338
g1123
(dp1339
g1251
g1321
sg1203
g1307
ssg1185
(dp1340
g1123
g1299
sg1203
g1310
sg1223
g1317
sg1273
g1335
ssg1203
(dp1341
g1251
g1326
ssg1223
(dp1342
g1251
g1330
sg1123
g1302
ssg1251
(dp1343
sg1273
(dp1344
g1203
g1313
sssg355
g1297
sbsg53
g1181
sg57
g1067
sg65
g1181
sg66
g356
((lp1345
(lp1346
g359
ag356
((lp1347
(lp1348
g362
ag359
aa(lp1349
g364
ag365
aa(lp1350
g367
ag368
aa(lp1351
g370
ag371
aa(lp1352
g373
ag374
aa(lp1353
g376
ag377
aa(lp1354
g379
ag380
aa(lp1355
g382
ag383
aatp1356
Rp1357
aa(lp1358
g387
ag356
((lp1359
(lp1360
g362
ag387
aa(lp1361
g391
ag392
aa(lp1362
g394
ag395
aa(lp1363
g397
ag398
aa(lp1364
g400
ag401
aa(lp1365
g403
ag404
aa(lp1366
g406
ag407
aa(lp1367
g409
ag410
aa(lp1368
g412
ag413
aa(lp1369
g415
ag416
aa(lp1370
g418
ag419
aa(lp1371
g421
ag422
aa(lp1372
g424
ag425
aa(lp1373
g427
ag428
aa(lp1374
g430
ag431
aa(lp1375
g433
ag434
aa(lp1376
g436
ag437
aa(lp1377
g439
ag440
aa(lp1378
g442
ag443
aatp1379
Rp1380
aa(lp1381
g447
ag356
((lp1382
(lp1383
g362
ag447
aa(lp1384
g451
ag452
aatp1385
Rp1386
aatp1387
Rp1388
sg70
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g18
g7
Ntp1399
Rp1400
(dp1401
g22
(dp1402
sg24
g5
(cnipype.interfaces.utility
Function
p1403
g7
Ntp1404
Rp1405
(dp1406
S'_input_names'
p1407
(lp1408
S'file_'
p1409
asg29
g30
(cnipype.interfaces.utility
FunctionInputSpec
p1410
tp1411
Rp1412
(dp1413
g122
I00
sS'function_str'
p1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1415
sg1409
g37
sg38
g39
sbsS'_out'
p1416
(dp1417
S'new_fname'
p1418
NssS'_output_names'
p1419
(lp1420
g1418
asS'imports'
p1421
Nsbsg52
Nsg60
I00
sg55
(dp1422
sg62
Nsg59
Nsg69
Nsg53
S'resample_o'
p1423
sg57
S'montage_mfi_0'
p1424
sg61
I00
sg63
Nsg64
I00
sg65
g1423
sg66
Nsg67
(lp1425
sg70
Nsb(dp1426
sg5
(g18
g7
Ntp1427
Rp1428
(dp1429
g22
(dp1430
sg24
g5
(g25
g7
Ntp1431
Rp1432
(dp1433
g29
g30
(g31
tp1434
Rp1435
(dp1436
g38
g39
sS'resampled_underlay'
p1437
g37
sS'axial_png'
p1438
g37
sS'sagittal_png'
p1439
g37
sS'resampled_overlay'
p1440
g37
sbsg49
(lp1441
g1438
ag1439
ag1437
ag1440
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp1442
sg57
g1424
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp1443
sg69
Nsg70
Nsb(dp1444
sg5
(g18
g7
Ntp1445
Rp1446
(dp1447
g22
(dp1448
sg24
g5
(g1403
g7
Ntp1449
Rp1450
(dp1451
g1407
(lp1452
S'overlay'
p1453
aS'underlay'
p1454
aS'png_name'
p1455
aS'cbar_name'
p1456
asg29
g30
(g1410
tp1457
Rp1458
(dp1459
g122
I00
sg1455
S'MNI_edge_on_mean_func_mni_s.png'
p1460
sg1453
g37
sg1456
S'red'
p1461
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1462
sg1454
g37
sg38
g39
sbsg1416
(dp1463
g1455
Nssg1419
(lp1464
g1455
asg1421
Nsbsg52
Nsg53
S'montage_s'
p1465
sg55
(dp1466
sg57
g1424
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1465
sg66
Nsg67
(lp1467
sg69
Nsg70
Nsb(dp1468
sg5
(g18
g7
Ntp1469
Rp1470
(dp1471
g22
(dp1472
sg24
g5
(g1403
g7
Ntp1473
Rp1474
(dp1475
g1407
(lp1476
g1409
asg29
g30
(g1410
tp1477
Rp1478
(dp1479
g122
I00
sg1414
g1415
sg1409
g37
sg38
g39
sbsg1416
(dp1480
g1418
Nssg1419
(lp1481
g1418
asg1421
Nsbsg52
Nsg53
S'resample_u'
p1482
sg55
(dp1483
sg57
g1424
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1482
sg66
Nsg67
(lp1484
sg69
Nsg70
Nsb(dp1485
sg5
(g18
g7
Ntp1486
Rp1487
(dp1488
g22
(dp1489
sg24
g5
(g25
g7
Ntp1490
Rp1491
(dp1492
g29
g30
(g31
tp1493
Rp1494
(dp1495
g38
g39
sg1454
g37
sg1453
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1496
sbsg49
(lp1497
g1454
ag1453
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp1498
sg57
g1424
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp1499
sg69
Nsg70
Nsb(dp1500
sg5
(g18
g7
Ntp1501
Rp1502
(dp1503
g22
(dp1504
sg24
g5
(g1403
g7
Ntp1505
Rp1506
(dp1507
g1407
(lp1508
g1453
ag1454
ag1455
ag1456
asg29
g30
(g1410
tp1509
Rp1510
(dp1511
g122
I00
sg1455
S'MNI_edge_on_mean_func_mni_a.png'
p1512
sg1453
g37
sg1456
g1461
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1513
sg1454
g37
sg38
g39
sbsg1416
(dp1514
g1455
Nssg1419
(lp1515
g1455
asg1421
Nsbsg52
Nsg53
S'montage_a'
p1516
sg55
(dp1517
sg57
g1424
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1516
sg66
Nsg67
(lp1518
sg69
Nsg70
Nsb(dp1519
ssg298
(dp1520
sg300
(dp1521
g1400
(dp1522
g1428
(dp1523
g304
(lp1524
(g1418
g1440
tp1525
assg1502
(dp1526
g304
(lp1527
(g1418
g1453
tp1528
assg1446
(dp1529
g304
(lp1530
(g1418
g1453
tp1531
asssg1428
(dp1532
sg1446
(dp1533
g1428
(dp1534
g304
(lp1535
(g1455
g1439
tp1536
asssg1470
(dp1537
g1428
(dp1538
g304
(lp1539
(g1418
g1437
tp1540
assg1502
(dp1541
g304
(lp1542
(g1418
g1454
tp1543
assg1446
(dp1544
g304
(lp1545
(g1418
g1454
tp1546
asssg1487
(dp1547
g1470
(dp1548
g304
(lp1549
(g1454
g1409
tp1550
assg1400
(dp1551
g304
(lp1552
(g1453
g1409
tp1553
asssg1502
(dp1554
g1428
(dp1555
g304
(lp1556
(g1455
g1438
tp1557
assssg346
g1521
sg347
(dp1558
g1400
(dp1559
g1487
g1551
ssg1428
(dp1560
g1470
g1538
sg1400
g1523
sg1446
g1534
sg1502
g1555
ssg1446
(dp1561
g1470
g1544
sg1400
g1529
ssg1470
(dp1562
g1487
g1548
ssg1487
(dp1563
sg1502
(dp1564
g1470
g1541
sg1400
g1526
sssg355
g1521
sbsg53
g1424
sg57
g1067
sg65
g1424
sg66
g356
((lp1565
(lp1566
g359
ag356
((lp1567
(lp1568
g362
ag359
aa(lp1569
g364
ag365
aa(lp1570
g367
ag368
aa(lp1571
g370
ag371
aa(lp1572
g373
ag374
aa(lp1573
g376
ag377
aa(lp1574
g379
ag380
aa(lp1575
g382
ag383
aatp1576
Rp1577
aa(lp1578
g387
ag356
((lp1579
(lp1580
g362
ag387
aa(lp1581
g391
ag392
aa(lp1582
g394
ag395
aa(lp1583
g397
ag398
aa(lp1584
g400
ag401
aa(lp1585
g403
ag404
aa(lp1586
g406
ag407
aa(lp1587
g409
ag410
aa(lp1588
g412
ag413
aa(lp1589
g415
ag416
aa(lp1590
g418
ag419
aa(lp1591
g421
ag422
aa(lp1592
g424
ag425
aa(lp1593
g427
ag428
aa(lp1594
g430
ag431
aa(lp1595
g433
ag434
aa(lp1596
g436
ag437
aa(lp1597
g439
ag440
aa(lp1598
g442
ag443
aatp1599
Rp1600
aa(lp1601
g447
ag356
((lp1602
(lp1603
g362
ag447
aa(lp1604
g451
ag452
aatp1605
Rp1606
aatp1607
Rp1608
sg70
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g18
g7
Ntp1619
Rp1620
(dp1621
g22
(dp1622
sg24
g5
(g1403
g7
Ntp1623
Rp1624
(dp1625
g1407
(lp1626
g1409
asg29
g30
(g1410
tp1627
Rp1628
(dp1629
g122
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1630
sg1409
g37
sg38
g39
sbsg1416
(dp1631
g1418
Nssg1419
(lp1632
g1418
asg1421
Nsbsg52
Nsg60
I00
sg55
(dp1633
sg62
Nsg59
Nsg69
Nsg53
g1423
sg57
S'montage_snr_0'
p1634
sg61
I00
sg63
Nsg64
I00
sg65
g1423
sg66
Nsg67
(lp1635
sg70
Nsb(dp1636
sg5
(g18
g7
Ntp1637
Rp1638
(dp1639
g22
(dp1640
sg24
g5
(g1403
g7
Ntp1641
Rp1642
(dp1643
g1407
(lp1644
g1453
ag1454
ag1455
ag1456
asg29
g30
(g1410
tp1645
Rp1646
(dp1647
g122
I00
sg1455
S'snr_s.png'
p1648
sg1453
g37
sg1456
S'red_to_blue'
p1649
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1650
sg1454
g37
sg38
g39
sbsg1416
(dp1651
g1455
Nssg1419
(lp1652
g1455
asg1421
Nsbsg52
Nsg53
g1465
sg55
(dp1653
sg57
g1634
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1465
sg66
Nsg67
(lp1654
sg69
Nsg70
Nsb(dp1655
sg5
(g18
g7
Ntp1656
Rp1657
(dp1658
g22
(dp1659
sg24
g5
(g1403
g7
Ntp1660
Rp1661
(dp1662
g1407
(lp1663
g1409
asg29
g30
(g1410
tp1664
Rp1665
(dp1666
g122
I00
sg1414
g1630
sg1409
g37
sg38
g39
sbsg1416
(dp1667
g1418
Nssg1419
(lp1668
g1418
asg1421
Nsbsg52
Nsg53
g1482
sg55
(dp1669
sg57
g1634
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1482
sg66
Nsg67
(lp1670
sg69
Nsg70
Nsb(dp1671
sg5
(g18
g7
Ntp1672
Rp1673
(dp1674
g22
(dp1675
sg24
g5
(g25
g7
Ntp1676
Rp1677
(dp1678
g29
g30
(g31
tp1679
Rp1680
(dp1681
g38
g39
sg1454
g37
sg1453
g37
sbsg49
(lp1682
g1454
ag1453
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp1683
sg57
g1634
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp1684
sg69
Nsg70
Nsb(dp1685
sg5
(g18
g7
Ntp1686
Rp1687
(dp1688
g22
(dp1689
sg24
g5
(g1403
g7
Ntp1690
Rp1691
(dp1692
g1407
(lp1693
g1453
ag1454
ag1455
ag1456
asg29
g30
(g1410
tp1694
Rp1695
(dp1696
g122
I00
sg1455
S'snr_a.png'
p1697
sg1453
g37
sg1456
g1649
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1698
sg1454
g37
sg38
g39
sbsg1416
(dp1699
g1455
Nssg1419
(lp1700
g1455
asg1421
Nsbsg52
Nsg53
g1516
sg55
(dp1701
sg57
g1634
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1516
sg66
Nsg67
(lp1702
sg69
Nsg70
Nsb(dp1703
sg5
(g18
g7
Ntp1704
Rp1705
(dp1706
g22
(dp1707
sg24
g5
(g25
g7
Ntp1708
Rp1709
(dp1710
g29
g30
(g31
tp1711
Rp1712
(dp1713
g38
g39
sg1437
g37
sg1438
g37
sg1439
g37
sg1440
g37
sbsg49
(lp1714
g1438
ag1439
ag1437
ag1440
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp1715
sg57
g1634
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp1716
sg69
Nsg70
Nsb(dp1717
ssg298
(dp1718
sg300
(dp1719
g1620
(dp1720
g1687
(dp1721
g304
(lp1722
(g1418
g1453
tp1723
assg1705
(dp1724
g304
(lp1725
(g1418
g1440
tp1726
assg1638
(dp1727
g304
(lp1728
(g1418
g1453
tp1729
asssg1638
(dp1730
g1705
(dp1731
g304
(lp1732
(g1455
g1439
tp1733
asssg1657
(dp1734
g1687
(dp1735
g304
(lp1736
(g1418
g1454
tp1737
assg1705
(dp1738
g304
(lp1739
(g1418
g1437
tp1740
assg1638
(dp1741
g304
(lp1742
(g1418
g1454
tp1743
asssg1673
(dp1744
g1620
(dp1745
g304
(lp1746
(g1453
g1409
tp1747
assg1657
(dp1748
g304
(lp1749
(g1454
g1409
tp1750
asssg1687
(dp1751
g1705
(dp1752
g304
(lp1753
(g1455
g1438
tp1754
asssg1705
(dp1755
ssg346
g1719
sg347
(dp1756
g1620
(dp1757
g1673
g1745
ssg1638
(dp1758
g1620
g1727
sg1657
g1741
ssg1657
(dp1759
g1673
g1748
ssg1673
(dp1760
sg1687
(dp1761
g1620
g1721
sg1657
g1735
ssg1705
(dp1762
g1620
g1724
sg1638
g1731
sg1657
g1738
sg1687
g1752
sssg355
g1719
sbsg53
g1634
sg57
g1067
sg65
g1634
sg66
g356
((lp1763
(lp1764
g359
ag356
((lp1765
(lp1766
g362
ag359
aa(lp1767
g364
ag365
aa(lp1768
g367
ag368
aa(lp1769
g370
ag371
aa(lp1770
g373
ag374
aa(lp1771
g376
ag377
aa(lp1772
g379
ag380
aa(lp1773
g382
ag383
aatp1774
Rp1775
aa(lp1776
g387
ag356
((lp1777
(lp1778
g362
ag387
aa(lp1779
g391
ag392
aa(lp1780
g394
ag395
aa(lp1781
g397
ag398
aa(lp1782
g400
ag401
aa(lp1783
g403
ag404
aa(lp1784
g406
ag407
aa(lp1785
g409
ag410
aa(lp1786
g412
ag413
aa(lp1787
g415
ag416
aa(lp1788
g418
ag419
aa(lp1789
g421
ag422
aa(lp1790
g424
ag425
aa(lp1791
g427
ag428
aa(lp1792
g430
ag431
aa(lp1793
g433
ag434
aa(lp1794
g436
ag437
aa(lp1795
g439
ag440
aa(lp1796
g442
ag443
aatp1797
Rp1798
aa(lp1799
g447
ag356
((lp1800
(lp1801
g362
ag447
aa(lp1802
g451
ag452
aatp1803
Rp1804
aatp1805
Rp1806
sg70
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g18
g7
Ntp1810
Rp1811
(dp1812
g22
(dp1813
sg24
g5
(g1226
g7
Ntp1814
Rp1815
(dp1816
g29
g30
(g1230
tp1817
Rp1818
(dp1819
g122
I00
sg1234
g37
sg141
g37
sg1235
g37
sg125
g37
sg276
g37
sg126
g37
sg250
g37
sg1156
g37
sg1163
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg128
g129
sg130
g5
(g131
g132
(dp1821
g134
g135
stp1822
Rp1823
(dp1824
g139
S'environ_items'
p1825
sg53
g130
sbsg1241
g37
sg1242
g37
sg142
g135
sg1243
g37
sg1244
g37
sg38
g39
sg1245
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'mean_func_fsl_warp_0'
p1826
sg55
(dp1827
sg57
g1067
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1826
sg66
Nsg67
(lp1828
sg69
Nsg70
Nsbg125
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g18
g7
Ntp1831
Rp1832
(dp1833
g22
(dp1834
sg24
g5
(g1403
g7
Ntp1835
Rp1836
(dp1837
g1407
(lp1838
S'motion_parameters'
p1839
asg29
g30
(g1410
tp1840
Rp1841
(dp1842
g122
I00
sg1414
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g37
sg38
g39
sbsg1416
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1419
(lp1847
g1845
ag1846
asg1421
Nsbsg52
Nsg53
S'motion_plt_0'
p1848
sg55
(dp1849
sg57
g1067
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1848
sg66
Nsg67
(lp1850
sg69
Nsg70
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g18
g7
Ntp1853
Rp1854
(dp1855
g22
(dp1856
sg24
g5
(g1403
g7
Ntp1857
Rp1858
(dp1859
g1407
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg29
g30
(g1410
tp1864
Rp1865
(dp1866
g122
I00
sg38
g39
sg1861
g37
sg1414
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g37
sbsg1416
(dp1869
S'hist_path'
p1870
Nssg1419
(lp1871
g1870
asg1421
Nsbsg52
Nsg53
S'fd_plot_0'
p1872
sg55
(dp1873
sg57
g1067
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1872
sg66
Nsg67
(lp1874
sg69
Nsg70
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g18
g7
Ntp1884
Rp1885
(dp1886
g22
(dp1887
sg24
g5
(g1403
g7
Ntp1888
Rp1889
(dp1890
g1407
(lp1891
g141
ag208
aS'exclude_list'
p1892
asg29
g30
(g1410
tp1893
Rp1894
(dp1895
g122
I00
sg1892
g37
sg1414
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1896
sg141
g37
sg208
g37
sg38
g39
sbsg1416
(dp1897
g125
Nssg1419
(lp1898
g125
asg1421
Nsbsg52
Nsg53
S'include_frames'
p1899
sg55
(dp1900
sg57
S'gen_motion_stats_0'
p1901
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1899
sg66
Nsg67
(lp1902
sg69
Nsg70
Nsb(dp1903
sg5
(g18
g7
Ntp1904
Rp1905
(dp1906
g22
(dp1907
sg24
g5
(g1403
g7
Ntp1908
Rp1909
(dp1910
g1407
(lp1911
g141
asg29
g30
(g1410
tp1912
Rp1913
(dp1914
g122
I00
sg38
g39
sg1414
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p1915
sg141
g37
sbsg1416
(dp1916
g125
Nssg1419
(lp1917
g125
asg1421
Nsbsg52
Nsg53
S'calculate_FD'
p1918
sg55
(dp1919
sg57
g1901
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1918
sg66
Nsg67
(lp1920
sg69
Nsg70
Nsb(dp1921
sg5
(g18
g7
Ntp1922
Rp1923
(dp1924
g22
(dp1925
sg24
g5
(g1403
g7
Ntp1926
Rp1927
(dp1928
g1407
(lp1929
S'subject_id'
p1930
aS'scan_id'
p1931
aS'FD_1D'
p1932
aS'FDJ_1D'
p1933
ag208
aS'DVARS'
p1934
asg29
g30
(g1410
tp1935
Rp1936
(dp1937
g122
I00
sg38
g39
sg1931
g37
sg1930
g37
sg1934
g37
sg1414
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1938
sg1933
g37
sg1932
g37
sg208
g37
sbsg1416
(dp1939
g125
Nssg1419
(lp1940
g125
asg1421
Nsbsg52
Nsg53
S'calc_power_parameters'
p1941
sg55
(dp1942
sg57
g1901
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1941
sg66
Nsg67
(lp1943
sg69
Nsg70
Nsb(dp1944
sg5
(g18
g7
Ntp1945
Rp1946
(dp1947
g22
(dp1948
sg24
g5
(g1403
g7
Ntp1949
Rp1950
(dp1951
g1407
(lp1952
g141
asg29
g30
(g1410
tp1953
Rp1954
(dp1955
g122
I00
sg38
g39
sg1414
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p1956
sg141
g37
sbsg1416
(dp1957
g125
Nssg1419
(lp1958
g125
asg1421
Nsbsg52
Nsg53
S'calculate_FDJ'
p1959
sg55
(dp1960
sg57
g1901
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1959
sg66
Nsg67
(lp1961
sg69
Nsg70
Nsb(dp1962
sg5
(g18
g7
Ntp1963
Rp1964
(dp1965
g22
(dp1966
sg24
g5
(g25
g7
Ntp1967
Rp1968
(dp1969
g29
g30
(g31
tp1970
Rp1971
(dp1972
g38
g39
sS'frames_ex_1D'
p1973
g37
sg1933
g37
sg1932
g37
sS'frames_in_1D'
p1974
g37
sS'motion_params'
p1975
g37
sS'power_params'
p1976
g37
sbsg49
(lp1977
g1932
ag1933
ag1973
ag1974
ag1976
ag1975
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp1978
sg57
g1901
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp1979
sg69
Nsg70
Nsb(dp1980
sg5
(g18
g7
Ntp1981
Rp1982
(dp1983
g22
(dp1984
sg24
g5
(g25
g7
Ntp1985
Rp1986
(dp1987
g29
g30
(g31
tp1988
Rp1989
(dp1990
S'max_displacement'
p1991
g37
sg38
g39
sg1931
g37
sg1930
g37
sS'mask'
p1992
g37
sS'movement_parameters'
p1993
g37
sS'oned_matrix_save'
p1994
g37
sS'motion_correct'
p1995
g37
sbsg49
(lp1996
g1930
ag1931
ag1993
ag1991
ag1995
ag1992
ag1994
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp1997
sg57
g1901
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp1998
sg69
Nsg70
Nsb(dp1999
sg5
(g18
g7
Ntp2000
Rp2001
(dp2002
g22
(dp2003
sg24
g5
(g1403
g7
Ntp2004
Rp2005
(dp2006
g1407
(lp2007
g141
ag208
aS'frames_before'
p2008
aS'frames_after'
p2009
asg29
g30
(g1410
tp2010
Rp2011
(dp2012
g122
I00
sg2009
g37
sg1414
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p2013
sg141
g37
sg208
g37
sg38
g39
sg2008
g37
sbsg1416
(dp2014
g125
Nssg1419
(lp2015
g125
asg1421
Nsbsg52
Nsg53
S'exclude_frames'
p2016
sg55
(dp2017
sg57
g1901
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2016
sg66
Nsg67
(lp2018
sg69
Nsg70
Nsb(dp2019
sg5
(g18
g7
Ntp2020
Rp2021
(dp2022
g22
(dp2023
sg24
g5
(g25
g7
Ntp2024
Rp2025
(dp2026
g29
g30
(g31
tp2027
Rp2028
(dp2029
g208
(lp2030
F0.2
asg38
g39
sS'remove_frames_before'
p2031
I1
sS'remove_frames_after'
p2032
I2
sbsg49
(lp2033
g208
ag2031
ag2032
asg51
I01
sbsg52
Nsg53
S'scrubbing_input'
p2034
sg55
(dp2035
sg57
g1901
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
(g208
(lp2036
F0.2
atp2037
sg64
I00
sg65
g2034
sg66
Nsg67
(lp2038
sg69
Nsg70
Nsb(dp2039
sg5
(g18
g7
Ntp2040
Rp2041
(dp2042
g22
(dp2043
sg24
g5
(g1403
g7
Ntp2044
Rp2045
(dp2046
g1407
(lp2047
S'rest'
p2048
ag1992
asg29
g30
(g1410
tp2049
Rp2050
(dp2051
g122
I00
sg1992
g37
sg38
g39
sg1414
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p2052
sg2048
g37
sbsg1416
(dp2053
g125
Nssg1419
(lp2054
g125
asg1421
Nsbsg52
Nsg53
S'cal_DVARS'
p2055
sg55
(dp2056
sg57
g1901
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2055
sg66
Nsg67
(lp2057
sg69
Nsg70
Nsb(dp2058
sg5
(g18
g7
Ntp2059
Rp2060
(dp2061
g22
(dp2062
sg24
g5
(g1403
g7
Ntp2063
Rp2064
(dp2065
g1407
(lp2066
g1930
ag1931
ag1993
ag1991
asg29
g30
(g1410
tp2067
Rp2068
(dp2069
g122
I00
sg1991
g37
sg1931
g37
sg1930
g37
sg1414
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p2070
sg1993
g37
sg38
g39
sbsg1416
(dp2071
g125
Nssg1419
(lp2072
g125
asg1421
Nsbsg52
Nsg53
S'calc_motion_parameters'
p2073
sg55
(dp2074
sg57
g1901
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2073
sg66
Nsg67
(lp2075
sg69
Nsg70
Nsb(dp2076
ssg298
(dp2077
sg300
(dp2078
g1885
(dp2079
g1964
(dp2080
g304
(lp2081
(g125
g1974
tp2082
asssg1905
(dp2083
g1885
(dp2084
g304
(lp2085
(g125
g141
tp2086
assg1923
(dp2087
g304
(lp2088
(g125
g1932
tp2089
assg1964
(dp2090
g304
(lp2091
(g125
g1932
tp2092
assg2001
(dp2093
g304
(lp2094
(g125
g141
tp2095
asssg1923
(dp2096
g1964
(dp2097
g304
(lp2098
(g125
g1976
tp2099
asssg1946
(dp2100
g1923
(dp2101
g304
(lp2102
(g125
g1933
tp2103
assg1964
(dp2104
g304
(lp2105
(g125
g1933
tp2106
asssg1964
(dp2107
sg1982
(dp2108
g2041
(dp2109
g304
(lp2110
(g1995
g2048
tp2111
a(g1992
g1992
tp2112
assg2060
(dp2113
g304
(lp2114
(g1930
g1930
tp2115
a(g1931
g1931
tp2116
a(g1993
g1993
tp2117
a(g1991
g1991
tp2118
assg1923
(dp2119
g304
(lp2120
(g1930
g1930
tp2121
a(g1931
g1931
tp2122
assg1905
(dp2123
g304
(lp2124
(g1993
g141
tp2125
assg1946
(dp2126
g304
(lp2127
(g1994
g141
tp2128
asssg2001
(dp2129
g1885
(dp2130
g304
(lp2131
(g125
g1892
tp2132
assg1964
(dp2133
g304
(lp2134
(g125
g1973
tp2135
asssg2021
(dp2136
g1885
(dp2137
g304
(lp2138
(g208
g208
tp2139
assg2001
(dp2140
g304
(lp2141
(g208
g208
tp2142
a(g2031
g2008
tp2143
a(g2032
g2009
tp2144
assg1923
(dp2145
g304
(lp2146
(g208
g208
tp2147
asssg2041
(dp2148
g1923
(dp2149
g304
(lp2150
(g125
g1934
tp2151
asssg2060
(dp2152
g1964
(dp2153
g304
(lp2154
(g125
g1975
tp2155
assssg346
g2078
sg347
(dp2156
g1885
(dp2157
g2021
g2137
sg1905
g2084
sg2001
g2130
ssg1905
(dp2158
g1982
g2123
ssg1923
(dp2159
g1982
g2119
sg2021
g2145
sg1905
g2087
sg1946
g2101
sg2041
g2149
ssg1946
(dp2160
g1982
g2126
ssg1964
(dp2161
g1885
g2080
sg1905
g2090
sg1946
g2104
sg1923
g2097
sg2001
g2133
sg2060
g2153
ssg1982
(dp2162
sg2001
(dp2163
g2021
g2140
sg1905
g2093
ssg2021
(dp2164
sg2041
(dp2165
g1982
g2109
ssg2060
(dp2166
g1982
g2113
sssg355
g2078
sbsg53
g1901
sg57
g1067
sg65
g1901
sg66
g356
((lp2167
(lp2168
g359
ag356
((lp2169
(lp2170
g362
ag359
aa(lp2171
g364
ag365
aa(lp2172
g367
ag368
aa(lp2173
g370
ag371
aa(lp2174
g373
ag374
aa(lp2175
g376
ag377
aa(lp2176
g379
ag380
aa(lp2177
g382
ag383
aatp2178
Rp2179
aa(lp2180
g387
ag356
((lp2181
(lp2182
g362
ag387
aa(lp2183
g391
ag392
aa(lp2184
g394
ag395
aa(lp2185
g397
ag398
aa(lp2186
g400
ag401
aa(lp2187
g403
ag404
aa(lp2188
g406
ag407
aa(lp2189
g409
ag410
aa(lp2190
g412
ag413
aa(lp2191
g415
ag416
aa(lp2192
g418
ag419
aa(lp2193
g421
ag422
aa(lp2194
g424
ag425
aa(lp2195
g427
ag428
aa(lp2196
g430
ag431
aa(lp2197
g433
ag434
aa(lp2198
g436
ag437
aa(lp2199
g439
ag440
aa(lp2200
g442
ag443
aatp2201
Rp2202
aa(lp2203
g447
ag356
((lp2204
(lp2205
g362
ag447
aa(lp2206
g451
ag452
aatp2207
Rp2208
aatp2209
Rp2210
sg70
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g18
g7
Ntp2224
Rp2225
(dp2226
g22
(dp2227
sg24
g5
(cnipype.interfaces.afni.preprocess
Refit
p2228
g7
Ntp2229
Rp2230
(dp2231
g29
g30
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2232
tp2233
Rp2234
(dp2235
g122
I00
sg38
g39
sS'deoblique'
p2236
I01
sg126
g37
sS'yorigin'
p2237
g37
sg128
g129
sg130
g5
(g131
g132
(dp2238
tp2239
Rp2240
(dp2241
g139
S'environ_items'
p2242
sg53
g130
sbsg141
g37
sS'xorigin'
p2243
g37
sS'zorigin'
p2244
g37
sbsg145
Nsg146
g129
sbsg52
Nsg60
I00
sg55
(dp2245
sg62
Nsg59
Nsg69
Nsg53
S'anat_deoblique'
p2246
sg57
S'anat_preproc_0'
p2247
sg61
I00
sg63
Nsg64
I00
sg65
g2246
sg66
Nsg67
(lp2248
sg70
Nsb(dp2249
sg5
(g18
g7
Ntp2250
Rp2251
(dp2252
g22
(dp2253
sg24
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2254
g7
Ntp2255
Rp2256
(dp2257
g29
g30
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2258
tp2259
Rp2260
(dp2261
g122
I00
sg38
g39
sg125
g37
sg126
g37
sS'outputtype'
p2262
S'AFNI'
p2263
sg128
g129
sg130
g5
(g131
g132
(dp2264
tp2265
Rp2266
(dp2267
g139
S'environ_items'
p2268
sg53
g130
sbsg141
g37
sbsS'_outputtype'
p2269
g2263
sg145
Nsg146
g129
sbsg52
Nsg60
I00
sg55
(dp2270
sg62
Nsg59
Nsg69
Nsg53
S'anat_skullstrip'
p2271
sg57
g2247
sg61
I00
sg63
Nsg64
I00
sg65
g2271
sg66
Nsg67
(lp2272
sg70
Nsb(dp2273
sg5
(g18
g7
Ntp2274
Rp2275
(dp2276
g22
(dp2277
sg24
g5
(cnipype.interfaces.afni.preprocess
Resample
p2278
g7
Ntp2279
Rp2280
(dp2281
g29
g30
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2282
tp2283
Rp2284
(dp2285
g122
I00
sg38
g39
sg125
g37
sg126
g37
sg2262
S'NIFTI_GZ'
p2286
sS'resample_mode'
p2287
g37
sS'voxel_size'
p2288
g37
sg128
g129
sS'master'
p2289
g37
sg141
g37
sg130
g5
(g131
g132
(dp2290
tp2291
Rp2292
(dp2293
g139
S'environ_items'
p2294
sg53
g130
sbsS'orientation'
p2295
S'RPI'
p2296
sbsg2269
g2286
sg145
Nsg146
g129
sbsg52
Nsg60
I00
sg55
(dp2297
sg62
Nsg59
Nsg69
Nsg53
S'anat_reorient'
p2298
sg57
g2247
sg61
I00
sg63
Nsg64
I00
sg65
g2298
sg66
Nsg67
(lp2299
sg70
Nsb(dp2300
sg5
(g18
g7
Ntp2301
Rp2302
(dp2303
g22
(dp2304
sg24
g5
(g25
g7
Ntp2305
Rp2306
(dp2307
g29
g30
(g31
tp2308
Rp2309
(dp2310
g38
g39
sS'anat'
p2311
g37
sbsg49
(lp2312
g2311
asg51
I01
sbsg52
Nsg60
I00
sg55
(dp2313
sg62
Nsg59
Nsg69
Nsg53
g54
sg57
g2247
sg61
I00
sg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp2314
sg70
Nsb(dp2315
sg5
(g18
g7
Ntp2316
Rp2317
(dp2318
g22
(dp2319
sg24
g5
(g25
g7
Ntp2320
Rp2321
(dp2322
g29
g30
(g31
tp2323
Rp2324
(dp2325
S'reorient'
p2326
g37
sg41
g37
sS'refit'
p2327
g37
sg38
g39
sS'skullstrip'
p2328
g37
sbsg49
(lp2329
g2327
ag2326
ag2328
ag41
asg51
I01
sbsg52
Nsg60
I00
sg55
(dp2330
sg62
Nsg59
Nsg69
Nsg53
g99
sg57
g2247
sg61
I00
sg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp2331
sg70
Nsb(dp2332
sg5
(g18
g7
Ntp2333
Rp2334
(dp2335
g22
(dp2336
sg24
g5
(cnipype.interfaces.afni.preprocess
Calc
p2337
g7
Ntp2338
Rp2339
(dp2340
g29
g30
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2341
tp2342
Rp2343
(dp2344
S'stop_idx'
p2345
g37
sg122
I00
sg38
g39
sg125
g37
sS'expr'
p2346
S'a*step(b)'
p2347
sg126
g37
sg2262
g2286
sS'in_file_b'
p2348
g37
sS'in_file_c'
p2349
g37
sS'in_file_a'
p2350
g37
sg130
g5
(g131
g132
(dp2351
tp2352
Rp2353
(dp2354
g139
S'environ_items'
p2355
sg53
g130
sbsS'single_idx'
p2356
g37
sS'other'
p2357
g37
sS'start_idx'
p2358
g37
sg128
g129
sbsg2269
g2286
sg145
Nsg146
g129
sbsg52
Nsg60
I00
sg55
(dp2359
sg62
Nsg59
Nsg69
Nsg53
S'anat_brain_only'
p2360
sg57
g2247
sg61
I00
sg63
Nsg64
I00
sg65
g2360
sg66
Nsg67
(lp2361
sg70
Nsb(dp2362
ssg300
(dp2363
g2225
(dp2364
g2275
(dp2365
g304
(lp2366
(g125
g141
tp2367
assg2317
(dp2368
g304
(lp2369
(g125
g2327
tp2370
asssg2251
(dp2371
g2334
(dp2372
g304
(lp2373
(g125
g2348
tp2374
assg2317
(dp2375
g304
(lp2376
(g125
g2328
tp2377
asssg2275
(dp2378
g2317
(dp2379
g304
(lp2380
(g125
g2326
tp2381
assg2334
(dp2382
g304
(lp2383
(g125
g2350
tp2384
assg2251
(dp2385
g304
(lp2386
(g125
g141
tp2387
asssg2302
(dp2388
g2225
(dp2389
g304
(lp2390
(g2311
g141
tp2391
asssg2317
(dp2392
sg2334
(dp2393
g2317
(dp2394
g304
(lp2395
(g125
g41
tp2396
assssg346
g2363
sg347
(dp2397
g2225
(dp2398
g2302
g2389
ssg2251
(dp2399
g2275
g2385
ssg2275
(dp2400
g2225
g2365
ssg2302
(dp2401
sg2317
(dp2402
g2251
g2375
sg2275
g2379
sg2225
g2368
sg2334
g2394
ssg2334
(dp2403
g2275
g2382
sg2251
g2372
sssg298
(dp2404
sg355
g2363
sbsg53
g2247
sg57
g1067
sg65
g2247
sg66
g356
((lp2405
(lp2406
g359
ag356
((lp2407
(lp2408
g362
ag359
aa(lp2409
g364
ag365
aa(lp2410
g367
ag368
aa(lp2411
g370
ag371
aa(lp2412
g373
ag374
aa(lp2413
g376
ag377
aa(lp2414
g379
ag380
aa(lp2415
g382
ag383
aatp2416
Rp2417
aa(lp2418
g387
ag356
((lp2419
(lp2420
g362
ag387
aa(lp2421
g391
ag392
aa(lp2422
g394
ag395
aa(lp2423
g397
ag398
aa(lp2424
g400
ag401
aa(lp2425
g403
ag404
aa(lp2426
g406
ag407
aa(lp2427
g409
ag410
aa(lp2428
g412
ag413
aa(lp2429
g415
ag416
aa(lp2430
g418
ag419
aa(lp2431
g421
ag422
aa(lp2432
g424
ag425
aa(lp2433
g427
ag428
aa(lp2434
g430
ag431
aa(lp2435
g433
ag434
aa(lp2436
g436
ag437
aa(lp2437
g439
ag440
aa(lp2438
g442
ag443
aatp2439
Rp2440
aa(lp2441
g447
ag356
((lp2442
(lp2443
g362
ag447
aa(lp2444
g451
ag452
aatp2445
Rp2446
aatp2447
Rp2448
sg70
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g18
g7
Ntp2459
Rp2460
(dp2461
g22
(dp2462
sg24
g5
(g114
g7
Ntp2463
Rp2464
(dp2465
g29
g30
(g118
tp2466
Rp2467
(dp2468
g122
I00
sg38
g39
sg123
S'-Tmin -bin'
p2469
sg124
S'char'
p2470
sg125
g37
sg126
g37
sg127
g37
sg128
g129
sg130
g5
(g131
g132
(dp2471
g134
g135
stp2472
Rp2473
(dp2474
g139
S'environ_items'
p2475
sg53
g130
sbsg141
g37
sg142
g135
sg143
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'func_mask_normalize'
p2476
sg55
(dp2477
sg57
S'func_preproc_automask_0'
p2478
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2476
sg66
Nsg67
(lp2479
sg69
Nsg70
Nsb(dp2480
sg5
(g18
g7
Ntp2481
Rp2482
(dp2483
g22
(dp2484
sg24
g5
(g25
g7
Ntp2485
Rp2486
(dp2487
g29
g30
(g31
tp2488
Rp2489
(dp2490
g1991
g37
sS'motion_correct_ref'
p2491
g37
sg38
g39
sS'preprocessed_mask'
p2492
g37
sg1992
g37
sg2327
g37
sg2328
g37
sg2326
g37
sS'preprocessed'
p2493
g37
sS'slice_time_corrected'
p2494
g37
sg1993
g37
sS'example_func'
p2495
g37
sg1994
g37
sS'reorient_mean'
p2496
g37
sg1995
g37
sbsg49
(lp2497
g2327
ag2326
ag2496
ag1995
ag2491
ag1993
ag1991
ag1992
ag2328
ag2495
ag2493
ag2492
ag2494
ag1994
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp2498
sg57
g2478
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp2499
sg69
Nsg70
Nsb(dp2500
sg5
(g18
g7
Ntp2501
Rp2502
(dp2503
g22
(dp2504
sg24
g5
(cnipype.interfaces.afni.preprocess
Automask
p2505
g7
Ntp2506
Rp2507
(dp2508
g29
g30
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2509
tp2510
Rp2511
(dp2512
g122
I00
sg38
g39
sg126
g37
sS'erode'
p2513
g37
sg125
g37
sS'dilate'
p2514
g37
sS'clfrac'
p2515
g37
sg2262
g2286
sS'brain_file'
p2516
g37
sg128
g129
sg130
g5
(g131
g132
(dp2517
tp2518
Rp2519
(dp2520
g139
S'environ_items'
p2521
sg53
g130
sbsg141
g37
sbsg2269
g2286
sg145
Nsg146
g129
sbsg52
Nsg53
S'func_get_brain_mask'
p2522
sg55
(dp2523
sg57
g2478
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2522
sg66
Nsg67
(lp2524
sg69
Nsg70
Nsb(dp2525
sg5
(g18
g7
Ntp2526
Rp2527
(dp2528
g22
(dp2529
sg24
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2530
g7
Ntp2531
Rp2532
(dp2533
g29
g30
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2534
tp2535
Rp2536
(dp2537
S'oned_file'
p2538
g37
sg122
I00
sg246
g37
sS'timeshift'
p2539
g37
sS'basefile'
p2540
g37
sg126
S'-Fourier -twopass'
p2541
sg2262
g2286
sS'zpad'
p2542
I4
sg128
g129
sS'md1d_file'
p2543
S'max_displacement.1D'
p2544
sg141
g37
sS'copyorigin'
p2545
g37
sg130
g5
(g131
g132
(dp2546
tp2547
Rp2548
(dp2549
g139
S'environ_items'
p2550
sg53
g130
sbsg1994
g37
sg38
g39
sg125
g37
sbsg2269
g2286
sg145
Nsg146
g129
sbsg52
Nsg60
I00
sg55
(dp2551
sg62
Nsg59
Nsg69
Nsg53
S'func_motion_correct_A'
p2552
sg57
g2478
sg61
I00
sg63
Nsg64
I00
sg65
g2552
sg66
Nsg67
(lp2553
sg70
Nsb(dp2554
sg5
(g18
g7
Ntp2555
Rp2556
(dp2557
g22
(dp2558
sg24
g5
(g25
g7
Ntp2559
Rp2560
(dp2561
g29
g30
(g31
tp2562
Rp2563
(dp2564
g38
g39
sS'func'
p2565
g37
sbsg49
(lp2566
g2565
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp2567
sg57
g2478
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp2568
sg69
Nsg70
Nsb(dp2569
sg5
(g18
g7
Ntp2570
Rp2571
(dp2572
g22
(dp2573
sg24
g5
(g2337
g7
Ntp2574
Rp2575
(dp2576
g29
g30
(g2341
tp2577
Rp2578
(dp2579
g2345
g37
sg122
I00
sg38
g39
sg125
g37
sg2346
S'a*b'
p2580
sg126
g37
sg2262
g2286
sg2348
g37
sg2349
g37
sg2350
g37
sg130
g5
(g131
g132
(dp2581
tp2582
Rp2583
(dp2584
g139
S'environ_items'
p2585
sg53
g130
sbsg2356
g37
sg2357
g37
sg2358
g37
sg128
g129
sbsg2269
g2286
sg145
Nsg146
g129
sbsg52
Nsg53
S'func_edge_detect'
p2586
sg55
(dp2587
sg57
g2478
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2586
sg66
Nsg67
(lp2588
sg69
Nsg70
Nsb(dp2589
sg5
(g18
g7
Ntp2590
Rp2591
(dp2592
g22
(dp2593
sg24
g5
(g114
g7
Ntp2594
Rp2595
(dp2596
g29
g30
(g118
tp2597
Rp2598
(dp2599
g122
I00
sg38
g39
sg123
S'-ing 10000'
p2600
sg124
S'float'
p2601
sg125
g37
sg126
g37
sg127
g37
sg128
g129
sg130
g5
(g131
g132
(dp2602
g134
g135
stp2603
Rp2604
(dp2605
g139
S'environ_items'
p2606
sg53
g130
sbsg141
g37
sg142
g135
sg143
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'func_normalize'
p2607
sg55
(dp2608
sg57
g2478
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2607
sg66
Nsg67
(lp2609
sg69
Nsg70
Nsb(dp2610
sg5
(g18
g7
Ntp2611
Rp2612
(dp2613
g22
(dp2614
sg24
g5
(g2530
g7
Ntp2615
Rp2616
(dp2617
g29
g30
(g2534
tp2618
Rp2619
(dp2620
g2538
g37
sg122
I00
sg246
g37
sg2539
g37
sg2540
g37
sg126
g2541
sg2262
g2286
sg2542
I4
sg128
g129
sg2543
g37
sg141
g37
sg2545
g37
sg130
g5
(g131
g132
(dp2621
tp2622
Rp2623
(dp2624
g139
S'environ_items'
p2625
sg53
g130
sbsg1994
g37
sg38
g39
sg125
g37
sbsg2269
g2286
sg145
Nsg146
g129
sbsg52
Nsg53
S'func_motion_correct'
p2626
sg55
(dp2627
sg57
g2478
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2626
sg66
Nsg67
(lp2628
sg69
Nsg70
Nsb(dp2629
sg5
(g18
g7
Ntp2630
Rp2631
(dp2632
g22
(dp2633
sg24
g5
(g2228
g7
Ntp2634
Rp2635
(dp2636
g29
g30
(g2232
tp2637
Rp2638
(dp2639
g122
I00
sg38
g39
sg2236
I01
sg126
g37
sg2237
g37
sg128
g129
sg130
g5
(g131
g132
(dp2640
tp2641
Rp2642
(dp2643
g139
S'environ_items'
p2644
sg53
g130
sbsg141
g37
sg2243
g37
sg2244
g37
sbsg145
Nsg146
g129
sbsg52
Nsg53
S'func_deoblique'
p2645
sg55
(dp2646
sg57
g2478
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2645
sg66
Nsg67
(lp2647
sg69
Nsg70
Nsb(dp2648
sg5
(g18
g7
Ntp2649
Rp2650
(dp2651
g22
(dp2652
sg24
g5
(cnipype.interfaces.afni.preprocess
TStat
p2653
g7
Ntp2654
Rp2655
(dp2656
g29
g30
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2657
tp2658
Rp2659
(dp2660
g122
I00
sg38
g39
sg125
g37
sg126
g37
sg1992
g37
sg2262
g2286
sg128
g129
sg130
g5
(g131
g132
(dp2661
tp2662
Rp2663
(dp2664
g139
S'environ_items'
p2665
sg53
g130
sbsg141
g37
sS'options'
p2666
S'-mean'
p2667
sbsg2269
g2286
sg145
Nsg146
g129
sbsg52
Nsg53
S'func_mean_skullstrip'
p2668
sg55
(dp2669
sg57
g2478
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2668
sg66
Nsg67
(lp2670
sg69
Nsg70
Nsb(dp2671
sg5
(g18
g7
Ntp2672
Rp2673
(dp2674
g22
(dp2675
sg24
g5
(g2653
g7
Ntp2676
Rp2677
(dp2678
g29
g30
(g2657
tp2679
Rp2680
(dp2681
g122
I00
sg38
g39
sg125
g37
sg126
g37
sg1992
g37
sg2262
g2286
sg128
g129
sg130
g5
(g131
g132
(dp2682
tp2683
Rp2684
(dp2685
g139
S'environ_items'
p2686
sg53
g130
sbsg141
g37
sg2666
g2667
sbsg2269
g2286
sg145
Nsg146
g129
sbsg52
Nsg53
S'func_get_mean_RPI'
p2687
sg55
(dp2688
sg57
g2478
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2687
sg66
Nsg67
(lp2689
sg69
Nsg70
Nsb(dp2690
sg5
(g18
g7
Ntp2691
Rp2692
(dp2693
g22
(dp2694
sg24
g5
(g2278
g7
Ntp2695
Rp2696
(dp2697
g29
g30
(g2282
tp2698
Rp2699
(dp2700
g122
I00
sg38
g39
sg125
g37
sg126
g37
sg2262
g2286
sg2287
g37
sg2288
g37
sg128
g129
sg2289
g37
sg141
g37
sg130
g5
(g131
g132
(dp2701
tp2702
Rp2703
(dp2704
g139
S'environ_items'
p2705
sg53
g130
sbsg2295
g2296
sbsg2269
g2286
sg145
Nsg146
g129
sbsg52
Nsg53
S'func_reorient'
p2706
sg55
(dp2707
sg57
g2478
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2706
sg66
Nsg67
(lp2708
sg69
Nsg70
Nsb(dp2709
sg5
(g18
g7
Ntp2710
Rp2711
(dp2712
g22
(dp2713
sg24
g5
(g2653
g7
Ntp2714
Rp2715
(dp2716
g29
g30
(g2657
tp2717
Rp2718
(dp2719
g122
I00
sg38
g39
sg125
g37
sg126
g37
sg1992
g37
sg2262
g2286
sg128
g129
sg130
g5
(g131
g132
(dp2720
tp2721
Rp2722
(dp2723
g139
S'environ_items'
p2724
sg53
g130
sbsg141
g37
sg2666
g2667
sbsg2269
g2286
sg145
Nsg146
g129
sbsg52
Nsg60
I00
sg55
(dp2725
sg62
Nsg59
Nsg69
Nsg53
S'func_get_mean_motion'
p2726
sg57
g2478
sg61
I00
sg63
Nsg64
I00
sg65
g2726
sg66
Nsg67
(lp2727
sg70
Nsb(dp2728
ssg298
(dp2729
sg300
(dp2730
g2460
(dp2731
g2482
(dp2732
g304
(lp2733
(g125
g2492
tp2734
asssg2482
(dp2735
sg2502
(dp2736
g2482
(dp2737
g304
(lp2738
(g125
g1992
tp2739
assg2571
(dp2740
g304
(lp2741
(g125
g2348
tp2742
asssg2527
(dp2743
g2502
(dp2744
g304
(lp2745
(g125
g141
tp2746
assg2482
(dp2747
g304
(lp2748
(g125
g1995
tp2749
a(g2543
g1991
tp2750
a(g2538
g1993
tp2751
a(g1994
g1994
tp2752
assg2571
(dp2753
g304
(lp2754
(g125
g2350
tp2755
asssg2556
(dp2756
g2631
(dp2757
g304
(lp2758
(g2565
g141
tp2759
asssg2571
(dp2760
g2650
(dp2761
g304
(lp2762
(g125
g141
tp2763
assg2482
(dp2764
g304
(lp2765
(g125
g2328
tp2766
assg2591
(dp2767
g304
(lp2768
(g125
g141
tp2769
asssg2591
(dp2770
g2460
(dp2771
g304
(lp2772
(g125
g141
tp2773
assg2482
(dp2774
g304
(lp2775
(g125
g2493
tp2776
asssg2612
(dp2777
g2711
(dp2778
g304
(lp2779
(g125
g141
tp2780
asssg2631
(dp2781
g2692
(dp2782
g304
(lp2783
(g125
g141
tp2784
asssg2650
(dp2785
g2482
(dp2786
g304
(lp2787
(g125
g2495
tp2788
asssg2673
(dp2789
g2612
(dp2790
g304
(lp2791
(g125
g2540
tp2792
asssg2692
(dp2793
g2673
(dp2794
g304
(lp2795
(g125
g141
tp2796
assg2527
(dp2797
g304
(lp2798
(g125
g141
tp2799
assg2482
(dp2800
g304
(lp2801
(g125
g2326
tp2802
assg2612
(dp2803
g304
(lp2804
(g125
g141
tp2805
asssg2711
(dp2806
g2482
(dp2807
g304
(lp2808
(g125
g2491
tp2809
assg2527
(dp2810
g304
(lp2811
(g125
g2540
tp2812
assssg346
g2730
sg347
(dp2813
g2460
(dp2814
g2591
g2771
ssg2482
(dp2815
g2460
g2732
sg2527
g2747
sg2650
g2786
sg2591
g2774
sg2502
g2737
sg2571
g2764
sg2692
g2800
sg2711
g2807
ssg2502
(dp2816
g2527
g2744
ssg2527
(dp2817
g2692
g2797
sg2711
g2810
ssg2556
(dp2818
sg2571
(dp2819
g2502
g2740
sg2527
g2753
ssg2591
(dp2820
g2571
g2767
ssg2612
(dp2821
g2673
g2790
sg2692
g2803
ssg2631
(dp2822
g2556
g2757
ssg2650
(dp2823
g2571
g2761
ssg2673
(dp2824
g2692
g2794
ssg2692
(dp2825
g2631
g2782
ssg2711
(dp2826
g2612
g2778
sssg355
g2730
sbsg53
g2478
sg57
g1067
sg65
g2478
sg66
g356
((lp2827
(lp2828
g359
ag356
((lp2829
(lp2830
g362
ag359
aa(lp2831
g364
ag365
aa(lp2832
g367
ag368
aa(lp2833
g370
ag371
aa(lp2834
g373
ag374
aa(lp2835
g376
ag377
aa(lp2836
g379
ag380
aa(lp2837
g382
ag383
aatp2838
Rp2839
aa(lp2840
g387
ag356
((lp2841
(lp2842
g362
ag387
aa(lp2843
g391
ag392
aa(lp2844
g394
ag395
aa(lp2845
g397
ag398
aa(lp2846
g400
ag401
aa(lp2847
g403
ag404
aa(lp2848
g406
ag407
aa(lp2849
g409
ag410
aa(lp2850
g412
ag413
aa(lp2851
g415
ag416
aa(lp2852
g418
ag419
aa(lp2853
g421
ag422
aa(lp2854
g424
ag425
aa(lp2855
g427
ag428
aa(lp2856
g430
ag431
aa(lp2857
g433
ag434
aa(lp2858
g436
ag437
aa(lp2859
g439
ag440
aa(lp2860
g442
ag443
aatp2861
Rp2862
aa(lp2863
g447
ag356
((lp2864
(lp2865
g362
ag447
aa(lp2866
g451
ag452
aatp2867
Rp2868
aatp2869
Rp2870
sg70
NsbS'outputspec.example_func'
p2871
tp2872
sg1993
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g18
g7
Ntp2880
Rp2881
(dp2882
g22
(dp2883
sg24
g5
(g25
g7
Ntp2884
Rp2885
(dp2886
g29
g30
(g31
tp2887
Rp2888
(dp2889
g38
g39
sS'movement_file'
p2890
g37
sbsg49
(lp2891
g2890
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp2892
sg57
S'fristons_parameter_model_0'
p2893
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp2894
sg69
Nsg70
Nsb(dp2895
sg5
(g18
g7
Ntp2896
Rp2897
(dp2898
g22
(dp2899
sg24
g5
(g25
g7
Ntp2900
Rp2901
(dp2902
g29
g30
(g31
tp2903
Rp2904
(dp2905
g38
g39
sg2890
g37
sbsg49
(lp2906
g2890
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp2907
sg57
g2893
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp2908
sg69
Nsg70
Nsb(dp2909
sg5
(g18
g7
Ntp2910
Rp2911
(dp2912
g22
(dp2913
sg24
g5
(g1403
g7
Ntp2914
Rp2915
(dp2916
g1407
(lp2917
g141
asg29
g30
(g1410
tp2918
Rp2919
(dp2920
g122
I00
sg38
g39
sg1414
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2921
sg141
g37
sbsg1416
(dp2922
g125
Nssg1419
(lp2923
g125
asg1421
Nsbsg52
Nsg53
S'calc_friston'
p2924
sg55
(dp2925
sg57
g2893
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g2924
sg66
Nsg67
(lp2926
sg69
Nsg70
Nsb(dp2927
ssg298
(dp2928
sg300
(dp2929
g2881
(dp2930
sg2897
(dp2931
g2911
(dp2932
g304
(lp2933
(g2890
g141
tp2934
asssg2911
(dp2935
g2881
(dp2936
g304
(lp2937
(g125
g2890
tp2938
assssg346
g2929
sg347
(dp2939
g2881
(dp2940
g2911
g2936
ssg2897
(dp2941
sg2911
(dp2942
g2897
g2932
sssg355
g2929
sbsg53
g2893
sg57
g1067
sg65
g2893
sg66
g356
((lp2943
(lp2944
g359
ag356
((lp2945
(lp2946
g362
ag359
aa(lp2947
g364
ag365
aa(lp2948
g367
ag368
aa(lp2949
g370
ag371
aa(lp2950
g373
ag374
aa(lp2951
g376
ag377
aa(lp2952
g379
ag380
aa(lp2953
g382
ag383
aatp2954
Rp2955
aa(lp2956
g387
ag356
((lp2957
(lp2958
g362
ag387
aa(lp2959
g391
ag392
aa(lp2960
g394
ag395
aa(lp2961
g397
ag398
aa(lp2962
g400
ag401
aa(lp2963
g403
ag404
aa(lp2964
g406
ag407
aa(lp2965
g409
ag410
aa(lp2966
g412
ag413
aa(lp2967
g415
ag416
aa(lp2968
g418
ag419
aa(lp2969
g421
ag422
aa(lp2970
g424
ag425
aa(lp2971
g427
ag428
aa(lp2972
g430
ag431
aa(lp2973
g433
ag434
aa(lp2974
g436
ag437
aa(lp2975
g439
ag440
aa(lp2976
g442
ag443
aatp2977
Rp2978
aa(lp2979
g447
ag356
((lp2980
(lp2981
g362
ag447
aa(lp2982
g451
ag452
aatp2983
Rp2984
aatp2985
Rp2986
sg70
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g18
g7
Ntp2997
Rp2998
(dp2999
g22
(dp3000
sg24
g5
(g1403
g7
Ntp3001
Rp3002
(dp3003
g1407
(lp3004
g1409
asg29
g30
(g1410
tp3005
Rp3006
(dp3007
g122
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3008
sg1409
g37
sg38
g39
sbsg1416
(dp3009
g1418
Nssg1419
(lp3010
g1418
asg1421
Nsbsg52
Nsg53
g1482
sg55
(dp3011
sg57
S'montage_anat_0'
p3012
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1482
sg66
Nsg67
(lp3013
sg69
Nsg70
Nsb(dp3014
sg5
(g18
g7
Ntp3015
Rp3016
(dp3017
g22
(dp3018
sg24
g5
(g1403
g7
Ntp3019
Rp3020
(dp3021
g1407
(lp3022
g1453
ag1454
ag1455
ag1456
asg29
g30
(g1410
tp3023
Rp3024
(dp3025
g122
I00
sg1455
S't1_edge_on_mean_func_in_t1_s.png'
p3026
sg1453
g37
sg1456
g1461
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3027
sg1454
g37
sg38
g39
sbsg1416
(dp3028
g1455
Nssg1419
(lp3029
g1455
asg1421
Nsbsg52
Nsg53
g1465
sg55
(dp3030
sg57
g3012
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1465
sg66
Nsg67
(lp3031
sg69
Nsg70
Nsb(dp3032
sg5
(g18
g7
Ntp3033
Rp3034
(dp3035
g22
(dp3036
sg24
g5
(g1403
g7
Ntp3037
Rp3038
(dp3039
g1407
(lp3040
g1409
asg29
g30
(g1410
tp3041
Rp3042
(dp3043
g122
I00
sg1414
g3008
sg1409
g37
sg38
g39
sbsg1416
(dp3044
g1418
Nssg1419
(lp3045
g1418
asg1421
Nsbsg52
Nsg60
I00
sg55
(dp3046
sg62
Nsg59
Nsg69
Nsg53
g1423
sg57
g3012
sg61
I00
sg63
Nsg64
I00
sg65
g1423
sg66
Nsg67
(lp3047
sg70
Nsb(dp3048
sg5
(g18
g7
Ntp3049
Rp3050
(dp3051
g22
(dp3052
sg24
g5
(g25
g7
Ntp3053
Rp3054
(dp3055
g29
g30
(g31
tp3056
Rp3057
(dp3058
g38
g39
sg1454
g37
sg1453
g37
sbsg49
(lp3059
g1454
ag1453
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp3060
sg57
g3012
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp3061
sg69
Nsg70
Nsb(dp3062
sg5
(g18
g7
Ntp3063
Rp3064
(dp3065
g22
(dp3066
sg24
g5
(g25
g7
Ntp3067
Rp3068
(dp3069
g29
g30
(g31
tp3070
Rp3071
(dp3072
g38
g39
sg1437
g37
sg1438
g37
sg1439
g37
sg1440
g37
sbsg49
(lp3073
g1438
ag1439
ag1437
ag1440
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp3074
sg57
g3012
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp3075
sg69
Nsg70
Nsb(dp3076
sg5
(g18
g7
Ntp3077
Rp3078
(dp3079
g22
(dp3080
sg24
g5
(g1403
g7
Ntp3081
Rp3082
(dp3083
g1407
(lp3084
g1453
ag1454
ag1455
ag1456
asg29
g30
(g1410
tp3085
Rp3086
(dp3087
g122
I00
sg1455
S't1_edge_on_mean_func_in_t1_a.png'
p3088
sg1453
g37
sg1456
g1461
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3089
sg1454
g37
sg38
g39
sbsg1416
(dp3090
g1455
Nssg1419
(lp3091
g1455
asg1421
Nsbsg52
Nsg53
g1516
sg55
(dp3092
sg57
g3012
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1516
sg66
Nsg67
(lp3093
sg69
Nsg70
Nsb(dp3094
ssg298
(dp3095
sg300
(dp3096
g2998
(dp3097
g3016
(dp3098
g304
(lp3099
(g1418
g1454
tp3100
assg3078
(dp3101
g304
(lp3102
(g1418
g1454
tp3103
assg3064
(dp3104
g304
(lp3105
(g1418
g1437
tp3106
asssg3016
(dp3107
g3064
(dp3108
g304
(lp3109
(g1455
g1439
tp3110
asssg3034
(dp3111
g3016
(dp3112
g304
(lp3113
(g1418
g1453
tp3114
assg3078
(dp3115
g304
(lp3116
(g1418
g1453
tp3117
assg3064
(dp3118
g304
(lp3119
(g1418
g1440
tp3120
asssg3050
(dp3121
g2998
(dp3122
g304
(lp3123
(g1454
g1409
tp3124
assg3034
(dp3125
g304
(lp3126
(g1453
g1409
tp3127
asssg3064
(dp3128
sg3078
(dp3129
g3064
(dp3130
g304
(lp3131
(g1455
g1438
tp3132
assssg346
g3096
sg347
(dp3133
g2998
(dp3134
g3050
g3122
ssg3016
(dp3135
g2998
g3098
sg3034
g3112
ssg3034
(dp3136
g3050
g3125
ssg3050
(dp3137
sg3064
(dp3138
g3016
g3108
sg3078
g3130
sg2998
g3104
sg3034
g3118
ssg3078
(dp3139
g2998
g3101
sg3034
g3115
sssg355
g3096
sbsg53
g3012
sg57
g1067
sg65
g3012
sg66
g356
((lp3140
(lp3141
g359
ag356
((lp3142
(lp3143
g362
ag359
aa(lp3144
g364
ag365
aa(lp3145
g367
ag368
aa(lp3146
g370
ag371
aa(lp3147
g373
ag374
aa(lp3148
g376
ag377
aa(lp3149
g379
ag380
aa(lp3150
g382
ag383
aatp3151
Rp3152
aa(lp3153
g387
ag356
((lp3154
(lp3155
g362
ag387
aa(lp3156
g391
ag392
aa(lp3157
g394
ag395
aa(lp3158
g397
ag398
aa(lp3159
g400
ag401
aa(lp3160
g403
ag404
aa(lp3161
g406
ag407
aa(lp3162
g409
ag410
aa(lp3163
g412
ag413
aa(lp3164
g415
ag416
aa(lp3165
g418
ag419
aa(lp3166
g421
ag422
aa(lp3167
g424
ag425
aa(lp3168
g427
ag428
aa(lp3169
g430
ag431
aa(lp3170
g433
ag434
aa(lp3171
g436
ag437
aa(lp3172
g439
ag440
aa(lp3173
g442
ag443
aatp3174
Rp3175
aa(lp3176
g447
ag356
((lp3177
(lp3178
g362
ag447
aa(lp3179
g451
ag452
aatp3180
Rp3181
aatp3182
Rp3183
sg70
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg1991
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g18
g7
Ntp3201
Rp3202
(dp3203
g22
(dp3204
sg24
g5
(g1403
g7
Ntp3205
Rp3206
(dp3207
g1407
(lp3208
g1409
asg29
g30
(g1410
tp3209
Rp3210
(dp3211
g122
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3212
sg1409
g37
sg38
g39
sbsg1416
(dp3213
g1418
Nssg1419
(lp3214
g1418
asg1421
Nsbsg52
Nsg60
I00
sg55
(dp3215
sg62
Nsg59
Nsg69
Nsg53
S'resample_o_wm'
p3216
sg57
S'montage_csf_gm_wm_0'
p3217
sg61
I00
sg63
Nsg64
I00
sg65
g3216
sg66
Nsg67
(lp3218
sg70
Nsb(dp3219
sg5
(g18
g7
Ntp3220
Rp3221
(dp3222
g22
(dp3223
sg24
g5
(g25
g7
Ntp3224
Rp3225
(dp3226
g29
g30
(g31
tp3227
Rp3228
(dp3229
g38
g39
sS'resampled_overlay_csf'
p3230
g37
sS'resampled_overlay_gm'
p3231
g37
sg1438
g37
sg1439
g37
sg1437
g37
sS'resampled_overlay_wm'
p3232
g37
sbsg49
(lp3233
g1438
ag1439
ag1437
ag3230
ag3232
ag3231
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp3234
sg57
g3217
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp3235
sg69
Nsg70
Nsb(dp3236
sg5
(g18
g7
Ntp3237
Rp3238
(dp3239
g22
(dp3240
sg24
g5
(g1403
g7
Ntp3241
Rp3242
(dp3243
g1407
(lp3244
S'overlay_csf'
p3245
aS'overlay_wm'
p3246
aS'overlay_gm'
p3247
ag1454
ag1455
asg29
g30
(g1410
tp3248
Rp3249
(dp3250
g122
I00
sg1455
S'montage_csf_gm_wm_s.png'
p3251
sg3247
g37
sg1414
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3252
sg3245
g37
sg3246
g37
sg1454
g37
sg38
g39
sbsg1416
(dp3253
g1455
Nssg1419
(lp3254
g1455
asg1421
Nsbsg52
Nsg53
g1465
sg55
(dp3255
sg57
g3217
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1465
sg66
Nsg67
(lp3256
sg69
Nsg70
Nsb(dp3257
sg5
(g18
g7
Ntp3258
Rp3259
(dp3260
g22
(dp3261
sg24
g5
(g1403
g7
Ntp3262
Rp3263
(dp3264
g1407
(lp3265
g1409
asg29
g30
(g1410
tp3266
Rp3267
(dp3268
g122
I00
sg1414
g3212
sg1409
g37
sg38
g39
sbsg1416
(dp3269
g1418
Nssg1419
(lp3270
g1418
asg1421
Nsbsg52
Nsg60
I00
sg55
(dp3271
sg62
Nsg59
Nsg69
Nsg53
S'resample_o_gm'
p3272
sg57
g3217
sg61
I00
sg63
Nsg64
I00
sg65
g3272
sg66
Nsg67
(lp3273
sg70
Nsb(dp3274
sg5
(g18
g7
Ntp3275
Rp3276
(dp3277
g22
(dp3278
sg24
g5
(g1403
g7
Ntp3279
Rp3280
(dp3281
g1407
(lp3282
g1409
asg29
g30
(g1410
tp3283
Rp3284
(dp3285
g122
I00
sg1414
g3212
sg1409
g37
sg38
g39
sbsg1416
(dp3286
g1418
Nssg1419
(lp3287
g1418
asg1421
Nsbsg52
Nsg53
g1482
sg55
(dp3288
sg57
g3217
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1482
sg66
Nsg67
(lp3289
sg69
Nsg70
Nsb(dp3290
sg5
(g18
g7
Ntp3291
Rp3292
(dp3293
g22
(dp3294
sg24
g5
(g25
g7
Ntp3295
Rp3296
(dp3297
g29
g30
(g31
tp3298
Rp3299
(dp3300
g38
g39
sg3247
g37
sg1454
g37
sg3245
g37
sg3246
g37
sbsg49
(lp3301
g1454
ag3245
ag3246
ag3247
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp3302
sg57
g3217
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp3303
sg69
Nsg70
Nsb(dp3304
sg5
(g18
g7
Ntp3305
Rp3306
(dp3307
g22
(dp3308
sg24
g5
(g1403
g7
Ntp3309
Rp3310
(dp3311
g1407
(lp3312
g1409
asg29
g30
(g1410
tp3313
Rp3314
(dp3315
g122
I00
sg1414
g3212
sg1409
g37
sg38
g39
sbsg1416
(dp3316
g1418
Nssg1419
(lp3317
g1418
asg1421
Nsbsg52
Nsg60
I00
sg55
(dp3318
sg62
Nsg59
Nsg69
Nsg53
S'resample_o_csf'
p3319
sg57
g3217
sg61
I00
sg63
Nsg64
I00
sg65
g3319
sg66
Nsg67
(lp3320
sg70
Nsb(dp3321
sg5
(g18
g7
Ntp3322
Rp3323
(dp3324
g22
(dp3325
sg24
g5
(g1403
g7
Ntp3326
Rp3327
(dp3328
g1407
(lp3329
g3245
ag3246
ag3247
ag1454
ag1455
asg29
g30
(g1410
tp3330
Rp3331
(dp3332
g122
I00
sg1455
S'montage_csf_gm_wm_a.png'
p3333
sg3247
g37
sg1414
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3334
sg3245
g37
sg3246
g37
sg1454
g37
sg38
g39
sbsg1416
(dp3335
g1455
Nssg1419
(lp3336
g1455
asg1421
Nsbsg52
Nsg53
g1516
sg55
(dp3337
sg57
g3217
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1516
sg66
Nsg67
(lp3338
sg69
Nsg70
Nsb(dp3339
ssg298
(dp3340
sg300
(dp3341
g3202
(dp3342
g3323
(dp3343
g304
(lp3344
(g1418
g3246
tp3345
assg3221
(dp3346
g304
(lp3347
(g1418
g3232
tp3348
assg3238
(dp3349
g304
(lp3350
(g1418
g3246
tp3351
asssg3221
(dp3352
sg3238
(dp3353
g3221
(dp3354
g304
(lp3355
(g1455
g1439
tp3356
asssg3259
(dp3357
g3323
(dp3358
g304
(lp3359
(g1418
g3247
tp3360
assg3221
(dp3361
g304
(lp3362
(g1418
g3231
tp3363
assg3238
(dp3364
g304
(lp3365
(g1418
g3247
tp3366
asssg3276
(dp3367
g3323
(dp3368
g304
(lp3369
(g1418
g1454
tp3370
assg3221
(dp3371
g304
(lp3372
(g1418
g1437
tp3373
assg3238
(dp3374
g304
(lp3375
(g1418
g1454
tp3376
asssg3292
(dp3377
g3202
(dp3378
g304
(lp3379
(g3246
g1409
tp3380
assg3306
(dp3381
g304
(lp3382
(g3245
g1409
tp3383
assg3276
(dp3384
g304
(lp3385
(g1454
g1409
tp3386
assg3259
(dp3387
g304
(lp3388
(g3247
g1409
tp3389
asssg3306
(dp3390
g3323
(dp3391
g304
(lp3392
(g1418
g3245
tp3393
assg3221
(dp3394
g304
(lp3395
(g1418
g3230
tp3396
assg3238
(dp3397
g304
(lp3398
(g1418
g3245
tp3399
asssg3323
(dp3400
g3221
(dp3401
g304
(lp3402
(g1455
g1438
tp3403
assssg346
g3341
sg347
(dp3404
g3202
(dp3405
g3292
g3378
ssg3221
(dp3406
g3238
g3354
sg3202
g3346
sg3259
g3361
sg3276
g3371
sg3323
g3401
sg3306
g3394
ssg3238
(dp3407
g3202
g3349
sg3306
g3397
sg3276
g3374
sg3259
g3364
ssg3259
(dp3408
g3292
g3387
ssg3276
(dp3409
g3292
g3384
ssg3292
(dp3410
sg3306
(dp3411
g3292
g3381
ssg3323
(dp3412
g3202
g3343
sg3306
g3391
sg3276
g3368
sg3259
g3358
sssg355
g3341
sbsg53
g3217
sg57
g1067
sg65
g3217
sg66
g356
((lp3413
(lp3414
g359
ag356
((lp3415
(lp3416
g362
ag359
aa(lp3417
g364
ag365
aa(lp3418
g367
ag368
aa(lp3419
g370
ag371
aa(lp3420
g373
ag374
aa(lp3421
g376
ag377
aa(lp3422
g379
ag380
aa(lp3423
g382
ag383
aatp3424
Rp3425
aa(lp3426
g387
ag356
((lp3427
(lp3428
g362
ag387
aa(lp3429
g391
ag392
aa(lp3430
g394
ag395
aa(lp3431
g397
ag398
aa(lp3432
g400
ag401
aa(lp3433
g403
ag404
aa(lp3434
g406
ag407
aa(lp3435
g409
ag410
aa(lp3436
g412
ag413
aa(lp3437
g415
ag416
aa(lp3438
g418
ag419
aa(lp3439
g421
ag422
aa(lp3440
g424
ag425
aa(lp3441
g427
ag428
aa(lp3442
g430
ag431
aa(lp3443
g433
ag434
aa(lp3444
g436
ag437
aa(lp3445
g439
ag440
aa(lp3446
g442
ag443
aatp3447
Rp3448
aa(lp3449
g447
ag356
((lp3450
(lp3451
g362
ag447
aa(lp3452
g451
ag452
aatp3453
Rp3454
aatp3455
Rp3456
sg70
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g18
g7
Ntp3466
Rp3467
(dp3468
g22
(dp3469
sg24
g5
(g25
g7
Ntp3470
Rp3471
(dp3472
g29
g30
(g31
tp3473
Rp3474
(dp3475
g38
g39
sS'linear_reg_matrix'
p3476
g37
sS'bbr_schedule'
p3477
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3478
sS'anat_wm_segmentation'
p3479
g37
sS'anat_skull'
p3480
g37
sg2565
g37
sbsg49
(lp3481
g2565
ag3480
ag3476
ag3479
ag3477
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp3482
sg57
S'func_to_anat_bbreg_0'
p3483
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp3484
sg69
Nsg70
Nsb(dp3485
sg5
(g18
g7
Ntp3486
Rp3487
(dp3488
g22
(dp3489
sg24
g5
(g25
g7
Ntp3490
Rp3491
(dp3492
g29
g30
(g31
tp3493
Rp3494
(dp3495
S'func_to_anat_linear_xfm'
p3496
g37
sg38
g39
sS'anat_func'
p3497
g37
sbsg49
(lp3498
g3496
ag3497
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp3499
sg57
g3483
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp3500
sg69
Nsg70
Nsb(dp3501
sg5
(g18
g7
Ntp3502
Rp3503
(dp3504
g22
(dp3505
sg24
g5
(g236
g7
Ntp3506
Rp3507
(dp3508
g29
g30
(g240
tp3509
Rp3510
(dp3511
g244
g37
sg38
g39
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg252
g37
sg253
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg259
g37
sg260
g37
sg261
g37
sg141
g37
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg122
I00
sg266
g37
sg267
g37
sg126
g37
sg268
g37
sg269
g37
sg128
g129
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg125
g37
sg275
g37
sg276
g37
sg277
g37
sg278
I6
sg279
g37
sg280
g37
sg281
g37
sg282
g37
sg283
g37
sg130
g5
(g131
g132
(dp3512
g134
g135
stp3513
Rp3514
(dp3515
g139
S'environ_items'
p3516
sg53
g130
sbsg289
g37
sg290
g37
sg142
g135
sg291
g37
sg292
g37
sg293
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'bbreg_func_to_anat'
p3517
sg55
(dp3518
sg57
g3483
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g3517
sg66
Nsg67
(lp3519
sg69
Nsg70
Nsb(dp3520
sg5
(g18
g7
Ntp3521
Rp3522
(dp3523
g22
(dp3524
sg24
g5
(g114
g7
Ntp3525
Rp3526
(dp3527
g29
g30
(g118
tp3528
Rp3529
(dp3530
g122
I00
sg38
g39
sg123
S'-thr 0.5 -bin'
p3531
sg124
g37
sg125
g37
sg126
g37
sg127
g37
sg128
g129
sg130
g5
(g131
g132
(dp3532
g134
g135
stp3533
Rp3534
(dp3535
g139
S'environ_items'
p3536
sg53
g130
sbsg141
g37
sg142
g135
sg143
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'wm_bb_mask'
p3537
sg55
(dp3538
sg57
g3483
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g3537
sg66
Nsg67
(lp3539
sg69
Nsg70
Nsb(dp3540
ssg298
(dp3541
sg300
(dp3542
g3467
(dp3543
g3522
(dp3544
g304
(lp3545
(g3479
g141
tp3546
assg3503
(dp3547
g304
(lp3548
(g3477
g267
tp3549
a(g2565
g141
tp3550
a(g3480
g247
tp3551
a(g3476
g245
tp3552
asssg3487
(dp3553
sg3503
(dp3554
g3487
(dp3555
g304
(lp3556
(g279
g3496
tp3557
a(g125
g3497
tp3558
asssg3522
(dp3559
g3503
(dp3560
g304
(lp3561
((g125
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3562
(ttp3563
g126
tp3564
assssg346
g3542
sg347
(dp3565
g3467
(dp3566
sg3487
(dp3567
g3503
g3555
ssg3503
(dp3568
g3467
g3547
sg3522
g3560
ssg3522
(dp3569
g3467
g3544
sssg355
g3542
sbsg53
g3483
sg57
g1067
sg65
g3483
sg66
g356
((lp3570
(lp3571
g359
ag356
((lp3572
(lp3573
g362
ag359
aa(lp3574
g364
ag365
aa(lp3575
g367
ag368
aa(lp3576
g370
ag371
aa(lp3577
g373
ag374
aa(lp3578
g376
ag377
aa(lp3579
g379
ag380
aa(lp3580
g382
ag383
aatp3581
Rp3582
aa(lp3583
g387
ag356
((lp3584
(lp3585
g362
ag387
aa(lp3586
g391
ag392
aa(lp3587
g394
ag395
aa(lp3588
g397
ag398
aa(lp3589
g400
ag401
aa(lp3590
g403
ag404
aa(lp3591
g406
ag407
aa(lp3592
g409
ag410
aa(lp3593
g412
ag413
aa(lp3594
g415
ag416
aa(lp3595
g418
ag419
aa(lp3596
g421
ag422
aa(lp3597
g424
ag425
aa(lp3598
g427
ag428
aa(lp3599
g430
ag431
aa(lp3600
g433
ag434
aa(lp3601
g436
ag437
aa(lp3602
g439
ag440
aa(lp3603
g442
ag443
aatp3604
Rp3605
aa(lp3606
g447
ag356
((lp3607
(lp3608
g362
ag447
aa(lp3609
g451
ag452
aatp3610
Rp3611
aatp3612
Rp3613
sg70
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g18
g7
Ntp3620
Rp3621
(dp3622
g22
(dp3623
sg24
g5
(g1403
g7
Ntp3624
Rp3625
(dp3626
g1407
(lp3627
S'measure_file'
p3628
asg29
g30
(g1410
tp3629
Rp3630
(dp3631
g122
I00
sg38
g39
sg1414
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g37
sbsg1416
(dp3633
S'snr_storefl'
p3634
Nssg1419
(lp3635
g3634
asg1421
Nsbsg52
Nsg53
S'snr_val0'
p3636
sg55
(dp3637
sg57
g1067
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g3636
sg66
Nsg67
(lp3638
sg69
Nsg70
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g18
g7
Ntp3648
Rp3649
(dp3650
g22
(dp3651
sg24
g5
(g1403
g7
Ntp3652
Rp3653
(dp3654
g1407
(lp3655
g3628
ag1863
asg29
g30
(g1410
tp3656
Rp3657
(dp3658
g122
I00
sg38
g39
sg1414
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g37
sg1863
S'snr'
p3660
sbsg1416
(dp3661
g1870
Nssg1419
(lp3662
g1870
asg1421
Nsbsg52
Nsg60
I00
sg55
(dp3663
sg62
Nsg59
Nsg69
Nsg53
S'hist_snr_0'
p3664
sg57
g1067
sg61
I00
sg63
Nsg64
I00
sg65
g3664
sg66
Nsg67
(lp3665
sg70
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g18
g7
Ntp3678
Rp3679
(dp3680
g22
(dp3681
sg24
g5
(g25
g7
Ntp3682
Rp3683
(dp3684
g29
g30
(g31
tp3685
Rp3686
(dp3687
g38
g39
sS'scan'
p3688
g37
sg2048
g37
sS'subject'
p3689
g37
sbsg49
(lp3690
g3689
ag2048
ag3688
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp3691
sg57
S'func_gather_0'
p3692
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp3693
sg69
Nsg70
Nsb(dp3694
sg5
(g18
g7
Ntp3695
Rp3696
(dp3697
g22
(dp3698
sg24
g5
(g25
g7
Ntp3699
Rp3700
(dp3701
g29
g30
(g31
tp3702
Rp3703
(dp3704
g38
g39
sg3688
g37
sg3689
S'1_1778689511'
p3705
sbsg49
(lp3706
g3689
ag3688
asg51
I01
sbsg52
Nsg53
S'inputnode'
p3707
sg55
(dp3708
sg57
g3692
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
(lp3709
(g3688
(lp3710
S'rest_1_rest'
p3711
atp3712
asg64
I00
sg65
g3707
sg66
Nsg67
(lp3713
sg69
Nsg70
Nsb(dp3714
sg5
(g18
g7
Ntp3715
Rp3716
(dp3717
g22
(dp3718
sg24
g5
(g1403
g7
Ntp3719
Rp3720
(dp3721
g1407
(lp3722
g3688
aS'rest_dict'
p3723
asg29
g30
(g1410
tp3724
Rp3725
(dp3726
g122
I00
sg3723
(dp3727
g3711
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-06/KKI2009-06-fMRI.nii'
p3728
ssg1414
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3729
sg38
g39
sg3688
g37
sbsg1416
(dp3730
g2048
Nssg1419
(lp3731
g2048
asg1421
Nsbsg52
Nsg53
S'selectrest'
p3732
sg55
(dp3733
sg57
g3692
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g3732
sg66
Nsg67
(lp3734
sg69
Nsg70
Nsb(dp3735
ssg298
(dp3736
sg300
(dp3737
g3679
(dp3738
sg3696
(dp3739
g3679
(dp3740
g304
(lp3741
(g3689
g3689
tp3742
a(g3688
g3688
tp3743
assg3716
(dp3744
g304
(lp3745
(g3688
g3688
tp3746
asssg3716
(dp3747
g3679
(dp3748
g304
(lp3749
(g2048
g2048
tp3750
assssg346
g3737
sg347
(dp3751
g3679
(dp3752
g3696
g3740
sg3716
g3748
ssg3696
(dp3753
sg3716
(dp3754
g3696
g3744
sssg355
g3737
sbsg53
g3692
sg57
g1067
sg65
g3692
sg66
g356
((lp3755
(lp3756
g359
ag356
((lp3757
(lp3758
g362
ag359
aa(lp3759
g364
ag365
aa(lp3760
g367
ag368
aa(lp3761
g370
ag371
aa(lp3762
g373
ag374
aa(lp3763
g376
ag377
aa(lp3764
g379
ag380
aa(lp3765
g382
ag383
aatp3766
Rp3767
aa(lp3768
g387
ag356
((lp3769
(lp3770
g362
ag387
aa(lp3771
g391
ag392
aa(lp3772
g394
ag395
aa(lp3773
g397
ag398
aa(lp3774
g400
ag401
aa(lp3775
g403
ag404
aa(lp3776
g406
ag407
aa(lp3777
g409
ag410
aa(lp3778
g412
ag413
aa(lp3779
g415
ag416
aa(lp3780
g418
ag419
aa(lp3781
g421
ag422
aa(lp3782
g424
ag425
aa(lp3783
g427
ag428
aa(lp3784
g430
ag431
aa(lp3785
g433
ag434
aa(lp3786
g436
ag437
aa(lp3787
g439
ag440
aa(lp3788
g442
ag443
aatp3789
Rp3790
aa(lp3791
g447
ag356
((lp3792
(lp3793
g362
ag447
aa(lp3794
g451
ag452
aatp3795
Rp3796
aatp3797
Rp3798
sg70
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g18
g7
Ntp3808
Rp3809
(dp3810
g22
(dp3811
sg24
g5
(g1226
g7
Ntp3812
Rp3813
(dp3814
g29
g30
(g1230
tp3815
Rp3816
(dp3817
g122
I00
sg1234
g37
sg141
g37
sg1235
g37
sg125
g37
sg276
g37
sg126
g37
sg250
g37
sg1156
g37
sg1163
g1820
sg128
g129
sg130
g5
(g131
g132
(dp3818
g134
g135
stp3819
Rp3820
(dp3821
g139
S'environ_items'
p3822
sg53
g130
sbsg1241
g37
sg1242
g37
sg142
g135
sg1243
g37
sg1244
g37
sg38
g39
sg1245
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'func_mni_fsl_warp_0'
p3823
sg55
(dp3824
sg57
g1067
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g3823
sg66
Nsg67
(lp3825
sg69
Nsg70
Nsbg125
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g18
g7
Ntp3835
Rp3836
(dp3837
g22
(dp3838
sg24
g5
(g25
g7
Ntp3839
Rp3840
(dp3841
g29
g30
(g31
tp3842
Rp3843
(dp3844
g38
g39
sg142
(lp3845
I01
aI01
asg2048
g37
sbsg49
(lp3846
g2048
ag142
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp3847
sg57
S'voxel_timeseries_0'
p3848
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp3849
sg69
Nsg70
Nsb(dp3850
sg5
(g18
g7
Ntp3851
Rp3852
(dp3853
g22
(dp3854
sg24
g5
(g25
g7
Ntp3855
Rp3856
(dp3857
g29
g30
(g31
tp3858
Rp3859
(dp3860
g38
g39
sS'mask_outputs'
p3861
g37
sbsg49
(lp3862
g3861
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp3863
sg57
g3848
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp3864
sg69
Nsg70
Nsb(dp3865
sg5
(g18
g7
Ntp3866
Rp3867
(dp3868
g22
(dp3869
sg24
g5
(g1403
g7
Ntp3870
Rp3871
(dp3872
g1407
(lp3873
S'data_file'
p3874
aS'template'
p3875
ag142
asg29
g30
(g1410
tp3876
Rp3877
(dp3878
g122
I00
sg38
g39
sg3874
g37
sg1414
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3879
sg3875
g37
sg142
g37
sbsg1416
(dp3880
g125
Nssg1419
(lp3881
g125
asg1421
Nsbsg52
Nsg53
S'timeseries_voxel'
p3882
sg55
(dp3883
sg57
g3848
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g3882
sg66
Nsg67
(lp3884
sg69
Nsg70
Nsb(dp3885
sg5
(g18
g7
Ntp3886
Rp3887
(dp3888
g22
(dp3889
sg24
g5
(g25
g7
Ntp3890
Rp3891
(dp3892
g29
g30
(g31
tp3893
Rp3894
(dp3895
g38
g39
sg1992
g37
sbsg49
(lp3896
g1992
asg51
I01
sbsg52
Nsg53
S'input_mask'
p3897
sg55
(dp3898
sg57
g3848
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g3897
sg66
Nsg67
(lp3899
sg69
Nsg70
Nsb(dp3900
ssg298
(dp3901
sg300
(dp3902
g3836
(dp3903
g3867
(dp3904
g304
(lp3905
(g2048
g3874
tp3906
a(g142
g142
tp3907
asssg3852
(dp3908
sg3867
(dp3909
g3852
(dp3910
g304
(lp3911
(g125
g3861
tp3912
asssg3887
(dp3913
g3867
(dp3914
g304
(lp3915
(g1992
g3875
tp3916
assssg346
g3902
sg347
(dp3917
g3836
(dp3918
sg3852
(dp3919
g3867
g3910
ssg3867
(dp3920
g3836
g3904
sg3887
g3914
ssg3887
(dp3921
ssg355
g3902
sbsg53
g3848
sg57
g1067
sg65
g3848
sg66
g356
((lp3922
(lp3923
g359
ag356
((lp3924
(lp3925
g362
ag359
aa(lp3926
g364
ag365
aa(lp3927
g367
ag368
aa(lp3928
g370
ag371
aa(lp3929
g373
ag374
aa(lp3930
g376
ag377
aa(lp3931
g379
ag380
aa(lp3932
g382
ag383
aatp3933
Rp3934
aa(lp3935
g387
ag356
((lp3936
(lp3937
g362
ag387
aa(lp3938
g391
ag392
aa(lp3939
g394
ag395
aa(lp3940
g397
ag398
aa(lp3941
g400
ag401
aa(lp3942
g403
ag404
aa(lp3943
g406
ag407
aa(lp3944
g409
ag410
aa(lp3945
g412
ag413
aa(lp3946
g415
ag416
aa(lp3947
g418
ag419
aa(lp3948
g421
ag422
aa(lp3949
g424
ag425
aa(lp3950
g427
ag428
aa(lp3951
g430
ag431
aa(lp3952
g433
ag434
aa(lp3953
g436
ag437
aa(lp3954
g439
ag440
aa(lp3955
g442
ag443
aatp3956
Rp3957
aa(lp3958
g447
ag356
((lp3959
(lp3960
g362
ag447
aa(lp3961
g451
ag452
aatp3962
Rp3963
aatp3964
Rp3965
sg70
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g18
g7
Ntp3986
Rp3987
(dp3988
g22
(dp3989
sg24
g5
(g25
g7
Ntp3990
Rp3991
(dp3992
g29
g30
(g31
tp3993
Rp3994
(dp3995
g38
g39
sg1437
g37
sg1438
g37
sg1439
g37
sg1440
g37
sbsg49
(lp3996
g1438
ag1439
ag1437
ag1440
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp3997
sg57
S'montage_mni_anat_0'
p3998
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp3999
sg69
Nsg70
Nsb(dp4000
sg5
(g18
g7
Ntp4001
Rp4002
(dp4003
g22
(dp4004
sg24
g5
(g1403
g7
Ntp4005
Rp4006
(dp4007
g1407
(lp4008
g1409
asg29
g30
(g1410
tp4009
Rp4010
(dp4011
g122
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4012
sg1409
g37
sg38
g39
sbsg1416
(dp4013
g1418
Nssg1419
(lp4014
g1418
asg1421
Nsbsg52
Nsg60
I00
sg55
(dp4015
sg62
Nsg59
Nsg69
Nsg53
g1423
sg57
g3998
sg61
I00
sg63
Nsg64
I00
sg65
g1423
sg66
Nsg67
(lp4016
sg70
Nsb(dp4017
sg5
(g18
g7
Ntp4018
Rp4019
(dp4020
g22
(dp4021
sg24
g5
(g1403
g7
Ntp4022
Rp4023
(dp4024
g1407
(lp4025
g1453
ag1454
ag1455
ag1456
asg29
g30
(g1410
tp4026
Rp4027
(dp4028
g122
I00
sg1455
S'mni_anat_a.png'
p4029
sg1453
g37
sg1456
g1461
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4030
sg1454
g37
sg38
g39
sbsg1416
(dp4031
g1455
Nssg1419
(lp4032
g1455
asg1421
Nsbsg52
Nsg53
g1516
sg55
(dp4033
sg57
g3998
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1516
sg66
Nsg67
(lp4034
sg69
Nsg70
Nsb(dp4035
sg5
(g18
g7
Ntp4036
Rp4037
(dp4038
g22
(dp4039
sg24
g5
(g25
g7
Ntp4040
Rp4041
(dp4042
g29
g30
(g31
tp4043
Rp4044
(dp4045
g38
g39
sg1454
g37
sg1453
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p4046
sbsg49
(lp4047
g1454
ag1453
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp4048
sg57
g3998
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp4049
sg69
Nsg70
Nsb(dp4050
sg5
(g18
g7
Ntp4051
Rp4052
(dp4053
g22
(dp4054
sg24
g5
(g1403
g7
Ntp4055
Rp4056
(dp4057
g1407
(lp4058
g1453
ag1454
ag1455
ag1456
asg29
g30
(g1410
tp4059
Rp4060
(dp4061
g122
I00
sg1455
S'mni_anat_s.png'
p4062
sg1453
g37
sg1456
g1461
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4063
sg1454
g37
sg38
g39
sbsg1416
(dp4064
g1455
Nssg1419
(lp4065
g1455
asg1421
Nsbsg52
Nsg53
g1465
sg55
(dp4066
sg57
g3998
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1465
sg66
Nsg67
(lp4067
sg69
Nsg70
Nsb(dp4068
sg5
(g18
g7
Ntp4069
Rp4070
(dp4071
g22
(dp4072
sg24
g5
(g1403
g7
Ntp4073
Rp4074
(dp4075
g1407
(lp4076
g1409
asg29
g30
(g1410
tp4077
Rp4078
(dp4079
g122
I00
sg1414
g4012
sg1409
g37
sg38
g39
sbsg1416
(dp4080
g1418
Nssg1419
(lp4081
g1418
asg1421
Nsbsg52
Nsg53
g1482
sg55
(dp4082
sg57
g3998
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1482
sg66
Nsg67
(lp4083
sg69
Nsg70
Nsb(dp4084
ssg298
(dp4085
sg300
(dp4086
g3987
(dp4087
sg4002
(dp4088
g4019
(dp4089
g304
(lp4090
(g1418
g1453
tp4091
assg4052
(dp4092
g304
(lp4093
(g1418
g1453
tp4094
assg3987
(dp4095
g304
(lp4096
(g1418
g1440
tp4097
asssg4019
(dp4098
g3987
(dp4099
g304
(lp4100
(g1455
g1438
tp4101
asssg4037
(dp4102
g4002
(dp4103
g304
(lp4104
(g1453
g1409
tp4105
assg4070
(dp4106
g304
(lp4107
(g1454
g1409
tp4108
asssg4052
(dp4109
g3987
(dp4110
g304
(lp4111
(g1455
g1439
tp4112
asssg4070
(dp4113
g4019
(dp4114
g304
(lp4115
(g1418
g1454
tp4116
assg4052
(dp4117
g304
(lp4118
(g1418
g1454
tp4119
assg3987
(dp4120
g304
(lp4121
(g1418
g1437
tp4122
assssg346
g4086
sg347
(dp4123
g3987
(dp4124
g4002
g4095
sg4052
g4110
sg4070
g4120
sg4019
g4099
ssg4002
(dp4125
g4037
g4103
ssg4019
(dp4126
g4002
g4089
sg4070
g4114
ssg4037
(dp4127
sg4052
(dp4128
g4002
g4092
sg4070
g4117
ssg4070
(dp4129
g4037
g4106
sssg355
g4086
sbsg53
g3998
sg57
g1067
sg65
g3998
sg66
g356
((lp4130
(lp4131
g359
ag356
((lp4132
(lp4133
g362
ag359
aa(lp4134
g364
ag365
aa(lp4135
g367
ag368
aa(lp4136
g370
ag371
aa(lp4137
g373
ag374
aa(lp4138
g376
ag377
aa(lp4139
g379
ag380
aa(lp4140
g382
ag383
aatp4141
Rp4142
aa(lp4143
g387
ag356
((lp4144
(lp4145
g362
ag387
aa(lp4146
g391
ag392
aa(lp4147
g394
ag395
aa(lp4148
g397
ag398
aa(lp4149
g400
ag401
aa(lp4150
g403
ag404
aa(lp4151
g406
ag407
aa(lp4152
g409
ag410
aa(lp4153
g412
ag413
aa(lp4154
g415
ag416
aa(lp4155
g418
ag419
aa(lp4156
g421
ag422
aa(lp4157
g424
ag425
aa(lp4158
g427
ag428
aa(lp4159
g430
ag431
aa(lp4160
g433
ag434
aa(lp4161
g436
ag437
aa(lp4162
g439
ag440
aa(lp4163
g442
ag443
aatp4164
Rp4165
aa(lp4166
g447
ag356
((lp4167
(lp4168
g362
ag447
aa(lp4169
g451
ag452
aatp4170
Rp4171
aatp4172
Rp4173
sg70
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg1995
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g18
g7
Ntp4188
Rp4189
(dp4190
g22
(dp4191
sg24
g5
(g1226
g7
Ntp4192
Rp4193
(dp4194
g29
g30
(g1230
tp4195
Rp4196
(dp4197
g122
I00
sg1234
g37
sg141
g37
sg1235
g37
sg125
g37
sg276
g37
sg126
g37
sg250
S'nn'
p4198
sg1156
g37
sg1163
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg128
g129
sg130
g5
(g131
g132
(dp4200
g134
g135
stp4201
Rp4202
(dp4203
g139
S'environ_items'
p4204
sg53
g130
sbsg1241
g37
sg1242
g37
sg142
g135
sg1243
g37
sg1244
g37
sg38
g39
sg1245
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'func_mni_fsl_warp_mask_0'
p4205
sg55
(dp4206
sg57
g1067
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4205
sg66
Nsg67
(lp4207
sg69
Nsg70
Nsbg125
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g18
g7
Ntp4217
Rp4218
(dp4219
g22
(dp4220
sg24
g5
(g25
g7
Ntp4221
Rp4222
(dp4223
g29
g30
(g31
tp4224
Rp4225
(dp4226
g38
g39
sg1454
g37
sg1453
g37
sbsg49
(lp4227
g1454
ag1453
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp4228
sg57
S'montage_skull_0'
p4229
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp4230
sg69
Nsg70
Nsb(dp4231
sg5
(g18
g7
Ntp4232
Rp4233
(dp4234
g22
(dp4235
sg24
g5
(g1403
g7
Ntp4236
Rp4237
(dp4238
g1407
(lp4239
g1453
ag1454
ag1455
ag1456
asg29
g30
(g1410
tp4240
Rp4241
(dp4242
g122
I00
sg1455
S'skull_vis_s.png'
p4243
sg1453
g37
sg1456
g1461
sg1414
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4244
sg1454
g37
sg38
g39
sbsg1416
(dp4245
g1455
Nssg1419
(lp4246
g1455
asg1421
Nsbsg52
Nsg53
g1465
sg55
(dp4247
sg57
g4229
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1465
sg66
Nsg67
(lp4248
sg69
Nsg70
Nsb(dp4249
sg5
(g18
g7
Ntp4250
Rp4251
(dp4252
g22
(dp4253
sg24
g5
(g1403
g7
Ntp4254
Rp4255
(dp4256
g1407
(lp4257
g1409
asg29
g30
(g1410
tp4258
Rp4259
(dp4260
g122
I00
sg1414
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4261
sg1409
g37
sg38
g39
sbsg1416
(dp4262
g1418
Nssg1419
(lp4263
g1418
asg1421
Nsbsg52
Nsg60
I00
sg55
(dp4264
sg62
Nsg59
Nsg69
Nsg53
g1423
sg57
g4229
sg61
I00
sg63
Nsg64
I00
sg65
g1423
sg66
Nsg67
(lp4265
sg70
Nsb(dp4266
sg5
(g18
g7
Ntp4267
Rp4268
(dp4269
g22
(dp4270
sg24
g5
(g1403
g7
Ntp4271
Rp4272
(dp4273
g1407
(lp4274
g1409
asg29
g30
(g1410
tp4275
Rp4276
(dp4277
g122
I00
sg1414
g4261
sg1409
g37
sg38
g39
sbsg1416
(dp4278
g1418
Nssg1419
(lp4279
g1418
asg1421
Nsbsg52
Nsg53
g1482
sg55
(dp4280
sg57
g4229
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1482
sg66
Nsg67
(lp4281
sg69
Nsg70
Nsb(dp4282
sg5
(g18
g7
Ntp4283
Rp4284
(dp4285
g22
(dp4286
sg24
g5
(g1403
g7
Ntp4287
Rp4288
(dp4289
g1407
(lp4290
g1453
ag1454
ag1455
ag1456
asg29
g30
(g1410
tp4291
Rp4292
(dp4293
g122
I00
sg1455
S'skull_vis_a.png'
p4294
sg1453
g37
sg1456
g1461
sg1414
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4295
sg1454
g37
sg38
g39
sbsg1416
(dp4296
g1455
Nssg1419
(lp4297
g1455
asg1421
Nsbsg52
Nsg53
g1516
sg55
(dp4298
sg57
g4229
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g1516
sg66
Nsg67
(lp4299
sg69
Nsg70
Nsb(dp4300
sg5
(g18
g7
Ntp4301
Rp4302
(dp4303
g22
(dp4304
sg24
g5
(g25
g7
Ntp4305
Rp4306
(dp4307
g29
g30
(g31
tp4308
Rp4309
(dp4310
g38
g39
sg1437
g37
sg1438
g37
sg1439
g37
sg1440
g37
sbsg49
(lp4311
g1438
ag1439
ag1437
ag1440
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp4312
sg57
g4229
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp4313
sg69
Nsg70
Nsb(dp4314
ssg298
(dp4315
sg300
(dp4316
g4218
(dp4317
g4268
(dp4318
g304
(lp4319
(g1454
g1409
tp4320
assg4251
(dp4321
g304
(lp4322
(g1453
g1409
tp4323
asssg4233
(dp4324
g4302
(dp4325
g304
(lp4326
(g1455
g1439
tp4327
asssg4251
(dp4328
g4302
(dp4329
g304
(lp4330
(g1418
g1440
tp4331
assg4284
(dp4332
g304
(lp4333
(g1418
g1453
tp4334
assg4233
(dp4335
g304
(lp4336
(g1418
g1453
tp4337
asssg4268
(dp4338
g4302
(dp4339
g304
(lp4340
(g1418
g1437
tp4341
assg4284
(dp4342
g304
(lp4343
(g1418
g1454
tp4344
assg4233
(dp4345
g304
(lp4346
(g1418
g1454
tp4347
asssg4284
(dp4348
g4302
(dp4349
g304
(lp4350
(g1455
g1438
tp4351
asssg4302
(dp4352
ssg346
g4316
sg347
(dp4353
g4218
(dp4354
sg4233
(dp4355
g4268
g4345
sg4251
g4335
ssg4251
(dp4356
g4218
g4321
ssg4268
(dp4357
g4218
g4318
ssg4284
(dp4358
g4268
g4342
sg4251
g4332
ssg4302
(dp4359
g4284
g4349
sg4233
g4325
sg4268
g4339
sg4251
g4329
sssg355
g4316
sbsg53
g4229
sg57
g1067
sg65
g4229
sg66
g356
((lp4360
(lp4361
g359
ag356
((lp4362
(lp4363
g362
ag359
aa(lp4364
g364
ag365
aa(lp4365
g367
ag368
aa(lp4366
g370
ag371
aa(lp4367
g373
ag374
aa(lp4368
g376
ag377
aa(lp4369
g379
ag380
aa(lp4370
g382
ag383
aatp4371
Rp4372
aa(lp4373
g387
ag356
((lp4374
(lp4375
g362
ag387
aa(lp4376
g391
ag392
aa(lp4377
g394
ag395
aa(lp4378
g397
ag398
aa(lp4379
g400
ag401
aa(lp4380
g403
ag404
aa(lp4381
g406
ag407
aa(lp4382
g409
ag410
aa(lp4383
g412
ag413
aa(lp4384
g415
ag416
aa(lp4385
g418
ag419
aa(lp4386
g421
ag422
aa(lp4387
g424
ag425
aa(lp4388
g427
ag428
aa(lp4389
g430
ag431
aa(lp4390
g433
ag434
aa(lp4391
g436
ag437
aa(lp4392
g439
ag440
aa(lp4393
g442
ag443
aatp4394
Rp4395
aa(lp4396
g447
ag356
((lp4397
(lp4398
g362
ag447
aa(lp4399
g451
ag452
aatp4400
Rp4401
aatp4402
Rp4403
sg70
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2493
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2494
(g5
(g18
g7
Ntp4413
Rp4414
(dp4415
g22
(dp4416
sg24
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g29
g30
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g122
I00
sg38
g39
sS'tpattern'
p4425
g37
sg125
g37
sS'tr'
p4426
g37
sg126
g37
sg250
g37
sg2262
g2286
sS'tzero'
p4427
g37
sS'ignore'
p4428
g37
sS'rltplus'
p4429
g37
sg128
g129
sS'tslice'
p4430
g37
sg141
g37
sS'rlt'
p4431
g37
sg130
g5
(g131
g132
(dp4432
tp4433
Rp4434
(dp4435
g139
S'environ_items'
p4436
sg53
g130
sbsbsg2269
g2286
sg145
Nsg146
g129
sbsg52
Nsg53
S'func_slice_timing_correction_0'
p4437
sg55
(dp4438
sg57
g1067
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4437
sg66
Nsg67
(lp4439
sg69
Nsg70
Nsbg125
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g18
g7
Ntp4449
Rp4450
(dp4451
g22
(dp4452
sg24
g5
(g25
g7
Ntp4453
Rp4454
(dp4455
g29
g30
(g31
tp4456
Rp4457
(dp4458
g38
g39
sg142
(lp4459
I01
aI01
asg2048
g37
sbsg49
(lp4460
g2048
ag142
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp4461
sg57
S'roi_timeseries_0'
p4462
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp4463
sg69
Nsg70
Nsb(dp4464
sg5
(g18
g7
Ntp4465
Rp4466
(dp4467
g22
(dp4468
sg24
g5
(g25
g7
Ntp4469
Rp4470
(dp4471
g29
g30
(g31
tp4472
Rp4473
(dp4474
g38
g39
sS'roi_outputs'
p4475
g37
sbsg49
(lp4476
g4475
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp4477
sg57
g4462
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp4478
sg69
Nsg70
Nsb(dp4479
sg5
(g18
g7
Ntp4480
Rp4481
(dp4482
g22
(dp4483
sg24
g5
(g25
g7
Ntp4484
Rp4485
(dp4486
g29
g30
(g31
tp4487
Rp4488
(dp4489
g38
g39
sS'roi'
p4490
g37
sbsg49
(lp4491
g4490
asg51
I01
sbsg52
Nsg53
S'input_roi'
p4492
sg55
(dp4493
sg57
g4462
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4492
sg66
Nsg67
(lp4494
sg69
Nsg70
Nsb(dp4495
sg5
(g18
g7
Ntp4496
Rp4497
(dp4498
g22
(dp4499
sg24
g5
(g1403
g7
Ntp4500
Rp4501
(dp4502
g1407
(lp4503
g3874
ag3875
ag142
asg29
g30
(g1410
tp4504
Rp4505
(dp4506
g122
I00
sg38
g39
sg3874
g37
sg1414
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4507
sg3875
g37
sg142
g37
sbsg1416
(dp4508
g125
Nssg1419
(lp4509
g125
asg1421
Nsbsg52
Nsg53
S'timeseries_roi'
p4510
sg55
(dp4511
sg57
g4462
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4510
sg66
Nsg67
(lp4512
sg69
Nsg70
Nsb(dp4513
ssg298
(dp4514
sg300
(dp4515
g4450
(dp4516
g4497
(dp4517
g304
(lp4518
(g2048
g3874
tp4519
a(g142
g142
tp4520
asssg4466
(dp4521
sg4481
(dp4522
g4497
(dp4523
g304
(lp4524
(g4490
g3875
tp4525
asssg4497
(dp4526
g4466
(dp4527
g304
(lp4528
(g125
g4475
tp4529
assssg346
g4515
sg347
(dp4530
g4450
(dp4531
sg4466
(dp4532
g4497
g4527
ssg4481
(dp4533
sg4497
(dp4534
g4450
g4517
sg4481
g4523
sssg355
g4515
sbsg53
g4462
sg57
g1067
sg65
g4462
sg66
g356
((lp4535
(lp4536
g359
ag356
((lp4537
(lp4538
g362
ag359
aa(lp4539
g364
ag365
aa(lp4540
g367
ag368
aa(lp4541
g370
ag371
aa(lp4542
g373
ag374
aa(lp4543
g376
ag377
aa(lp4544
g379
ag380
aa(lp4545
g382
ag383
aatp4546
Rp4547
aa(lp4548
g387
ag356
((lp4549
(lp4550
g362
ag387
aa(lp4551
g391
ag392
aa(lp4552
g394
ag395
aa(lp4553
g397
ag398
aa(lp4554
g400
ag401
aa(lp4555
g403
ag404
aa(lp4556
g406
ag407
aa(lp4557
g409
ag410
aa(lp4558
g412
ag413
aa(lp4559
g415
ag416
aa(lp4560
g418
ag419
aa(lp4561
g421
ag422
aa(lp4562
g424
ag425
aa(lp4563
g427
ag428
aa(lp4564
g430
ag431
aa(lp4565
g433
ag434
aa(lp4566
g436
ag437
aa(lp4567
g439
ag440
aa(lp4568
g442
ag443
aatp4569
Rp4570
aa(lp4571
g447
ag356
((lp4572
(lp4573
g362
ag447
aa(lp4574
g451
ag452
aatp4575
Rp4576
aatp4577
Rp4578
sg70
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g18
g7
Ntp4589
Rp4590
(dp4591
g22
(dp4592
sg24
g5
(g25
g7
Ntp4593
Rp4594
(dp4595
g29
g30
(g31
tp4596
Rp4597
(dp4598
S'motion_components'
p4599
g37
sS'anat_to_mni_initial_xfm'
p4600
g37
sS'lat_ventricles_mask'
p4601
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4602
sg93
g37
sS'anat_to_mni_rigid_xfm'
p4603
g37
sS'compcor_ncomponents'
p4604
g37
sS'anat_to_mni_affine_xfm'
p4605
g37
sS'selector'
p4606
g37
sg92
g37
sS'template_brain'
p4607
g37
sg3496
g37
sS'mni_to_anat_linear_xfm'
p4608
g37
sg94
g37
sg38
g39
sg3689
g37
sbsg49
(lp4609
g3689
ag92
ag94
ag93
ag4608
ag4600
ag4603
ag4605
ag3496
ag4601
ag4599
ag4606
ag4604
ag4607
asg51
I01
sbsg52
Nsg53
g54
sg55
(dp4610
sg57
S'nuisance_0'
p4611
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g54
sg66
Nsg67
(lp4612
sg69
Nsg70
Nsb(dp4613
sg5
(g18
g7
Ntp4614
Rp4615
(dp4616
g22
(dp4617
sg24
g5
(g25
g7
Ntp4618
Rp4619
(dp4620
g29
g30
(g31
tp4621
Rp4622
(dp4623
g38
g39
sS'regressors'
p4624
g37
sg3689
g37
sbsg49
(lp4625
g3689
ag4624
asg51
I01
sbsg52
Nsg53
g99
sg55
(dp4626
sg57
g4611
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g99
sg66
Nsg67
(lp4627
sg69
Nsg70
Nsb(dp4628
sg5
(g18
g7
Ntp4629
Rp4630
(dp4631
g22
(dp4632
sg24
g5
(g1403
g7
Ntp4633
Rp4634
(dp4635
g1407
(lp4636
g3874
aS'ventricles_mask_file'
p4637
aS'wm_seg_file'
p4638
aS'csf_seg_file'
p4639
aS'gm_seg_file'
p4640
ag963
ag468
ag904
asg29
g30
(g1410
tp4641
Rp4642
(dp4643
g122
I00
sg38
g39
sg963
g37
sg468
g37
sg3874
g37
sg1414
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4644
sg4640
g37
sg4637
g37
sg904
g37
sg4639
g37
sg4638
g37
sbsg1416
(dp4645
S'file_gm'
p4646
NsS'file_wm'
p4647
NsS'file_csf'
p4648
Nssg1419
(lp4649
g4647
ag4648
ag4646
asg1421
Nsbsg52
Nsg53
S'tissue_masks'
p4650
sg55
(dp4651
sg57
g4611
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4650
sg66
Nsg67
(lp4652
sg69
Nsg70
Nsb(dp4653
sg5
(g18
g7
Ntp4654
Rp4655
(dp4656
g22
(dp4657
sg24
g5
(g236
g7
Ntp4658
Rp4659
(dp4660
g29
g30
(g240
tp4661
Rp4662
(dp4663
g244
g37
sg38
g39
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g251
sg252
g37
sg253
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg259
g37
sg260
g37
sg261
g37
sg141
g37
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg122
I00
sg266
g37
sg267
g37
sg126
S'-applyisoxfm 2'
p4664
sg268
g37
sg269
g37
sg128
g129
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg125
g37
sg275
g37
sg276
g37
sg277
g37
sg278
g37
sg279
g37
sg280
g37
sg281
g37
sg282
g37
sg283
g37
sg130
g5
(g131
g132
(dp4665
g134
g135
stp4666
Rp4667
(dp4668
g139
S'environ_items'
p4669
sg53
g130
sbsg289
g37
sg290
g37
sg142
g135
sg291
g37
sg292
g37
sg293
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'ho_mni_to_2mm_flirt_applyxfm'
p4670
sg55
(dp4671
sg57
g4611
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4670
sg66
Nsg67
(lp4672
sg69
Nsg70
Nsb(dp4673
sg5
(g18
g7
Ntp4674
Rp4675
(dp4676
g22
(dp4677
sg24
g5
(g236
g7
Ntp4678
Rp4679
(dp4680
g29
g30
(g240
tp4681
Rp4682
(dp4683
g244
g37
sg38
g39
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g251
sg252
g37
sg253
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg259
g37
sg260
g37
sg261
g37
sg141
g37
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg122
I00
sg266
g37
sg267
g37
sg126
g4664
sg268
g37
sg269
g37
sg128
g129
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg125
g37
sg275
g37
sg276
g37
sg277
g37
sg278
g37
sg279
g37
sg280
g37
sg281
g37
sg282
g37
sg283
g37
sg130
g5
(g131
g132
(dp4684
g134
g135
stp4685
Rp4686
(dp4687
g139
S'environ_items'
p4688
sg53
g130
sbsg289
g37
sg290
g37
sg142
g135
sg291
g37
sg292
g37
sg293
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'wm_anat_to_2mm_flirt_applyxfm'
p4689
sg55
(dp4690
sg57
g4611
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4689
sg66
Nsg67
(lp4691
sg69
Nsg70
Nsb(dp4692
sg5
(g18
g7
Ntp4693
Rp4694
(dp4695
g22
(dp4696
sg24
g5
(g236
g7
Ntp4697
Rp4698
(dp4699
g29
g30
(g240
tp4700
Rp4701
(dp4702
g244
g37
sg38
g39
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g251
sg252
g37
sg253
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg259
g37
sg260
g37
sg261
g37
sg141
g37
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg122
I00
sg266
g37
sg267
g37
sg126
g4664
sg268
g37
sg269
g37
sg128
g129
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg125
g37
sg275
g37
sg276
g37
sg277
g37
sg278
g37
sg279
g37
sg280
g37
sg281
g37
sg282
g37
sg283
g37
sg130
g5
(g131
g132
(dp4703
g134
g135
stp4704
Rp4705
(dp4706
g139
S'environ_items'
p4707
sg53
g130
sbsg289
g37
sg290
g37
sg142
g135
sg291
g37
sg292
g37
sg293
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'csf_anat_to_2mm_flirt_applyxfm'
p4708
sg55
(dp4709
sg57
g4611
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4708
sg66
Nsg67
(lp4710
sg69
Nsg70
Nsb(dp4711
sg5
(g18
g7
Ntp4712
Rp4713
(dp4714
g22
(dp4715
sg24
g5
(g236
g7
Ntp4716
Rp4717
(dp4718
g29
g30
(g240
tp4719
Rp4720
(dp4721
g244
g37
sg38
g39
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g251
sg252
g37
sg253
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg259
g37
sg260
g37
sg261
g37
sg141
g37
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg122
I00
sg266
g37
sg267
g37
sg126
g4664
sg268
g37
sg269
g37
sg128
g129
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg125
g37
sg275
g37
sg276
g37
sg277
g37
sg278
g37
sg279
g37
sg280
g37
sg281
g37
sg282
g37
sg283
g37
sg130
g5
(g131
g132
(dp4722
g134
g135
stp4723
Rp4724
(dp4725
g139
S'environ_items'
p4726
sg53
g130
sbsg289
g37
sg290
g37
sg142
g135
sg291
g37
sg292
g37
sg293
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'gm_anat_to_2mm_flirt_applyxfm'
p4727
sg55
(dp4728
sg57
g4611
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4727
sg66
Nsg67
(lp4729
sg69
Nsg70
Nsb(dp4730
sg5
(g18
g7
Ntp4731
Rp4732
(dp4733
g22
(dp4734
sg24
g5
(g1403
g7
Ntp4735
Rp4736
(dp4737
g1407
(lp4738
g3689
ag4606
aS'wm_sig_file'
p4739
aS'csf_sig_file'
p4740
aS'gm_sig_file'
p4741
aS'motion_file'
p4742
ag4604
asg29
g30
(g1410
tp4743
Rp4744
(dp4745
g122
I00
sg38
g39
sg4742
g37
sg4604
g37
sg1414
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4746
sg4740
g37
sg4739
g37
sg4741
g37
sg4606
g37
sg3689
g37
sbsg1416
(dp4747
S'regressors_file'
p4748
NsS'residual_file'
p4749
Nssg1419
(lp4750
g4749
ag4748
asg1421
Nsbsg52
Nsg53
S'residuals'
p4751
sg55
(dp4752
sg57
g4611
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
(lp4753
(g4606
(lp4754
(dp4755
S'global'
p4756
I0
sS'linear'
p4757
I1
sS'wm'
p4758
I0
sS'pc1'
p4759
I0
sS'motion'
p4760
I0
sS'quadratic'
p4761
I1
sS'gm'
p4762
I0
sS'compcor'
p4763
I1
sS'csf'
p4764
I1
satp4765
a(g4604
(lp4766
I5
atp4767
asg64
I00
sg65
g4751
sg66
Nsg67
(lp4768
sg69
Nsg70
Nsb(dp4769
sg5
(g18
g7
Ntp4770
Rp4771
(dp4772
g22
(dp4773
sg24
g5
(g236
g7
Ntp4774
Rp4775
(dp4776
g29
g30
(g240
tp4777
Rp4778
(dp4779
g244
g37
sg38
g39
sg245
g37
sg246
g37
sg247
g37
sg248
g37
sg249
g37
sg250
g37
sg252
g37
sg253
g37
sg254
g37
sg255
g37
sg256
g37
sg257
g37
sg258
g37
sg259
g37
sg260
g37
sg261
g37
sg141
g37
sg262
g37
sg263
g37
sg264
g37
sg265
g37
sg122
I00
sg266
g37
sg267
g37
sg126
g4664
sg268
g37
sg269
g37
sg128
g129
sg270
g37
sg271
g37
sg272
g37
sg273
g37
sg274
g37
sg125
g37
sg275
g37
sg276
g37
sg277
g37
sg278
g37
sg279
g37
sg280
g37
sg281
g37
sg282
g37
sg283
g37
sg130
g5
(g131
g132
(dp4780
g134
g135
stp4781
Rp4782
(dp4783
g139
S'environ_items'
p4784
sg53
g130
sbsg289
g37
sg290
g37
sg142
g135
sg291
g37
sg292
g37
sg293
g37
sbsg144
g135
sg145
Nsg146
g129
sbsg52
Nsg53
S'func_to_2mm_flirt_applyxfm'
p4785
sg55
(dp4786
sg57
g4611
sg59
Nsg60
I00
sg61
I00
sg62
Nsg63
Nsg64
I00
sg65
g4785
sg66
Nsg67
(lp4787
sg69
Nsg70
Nsb(dp4788
ssg298
(dp4789
sg300
(dp4790
g4590
(dp4791
g4771
(dp4792
g304
(lp4793
(g3689
g141
tp4794
a(g94
g247
tp4795
a(g3496
g245
tp4796
assg4655
(dp4797
g304
(lp4798
(g4608
g245
tp4799
a(g4601
g141
tp4800
a(g94
g247
tp4801
assg4694
(dp4802
g304
(lp4803
(g94
g141
tp4804
a(g94
g247
tp4805
assg4713
(dp4806
g304
(lp4807
(g93
g141
tp4808
a(g93
g247
tp4809
assg4732
(dp4810
g304
(lp4811
(g3689
g3689
tp4812
a(g4599
g4742
tp4813
a(g4606
g4606
tp4814
a(g4604
g4604
tp4815
assg4675
(dp4816
g304
(lp4817
(g92
g141
tp4818
a(g92
g247
tp4819
asssg4615
(dp4820
sg4630
(dp4821
g4732
(dp4822
g304
(lp4823
(g4647
g4739
tp4824
a(g4648
g4740
tp4825
a(g4646
g4741
tp4826
asssg4655
(dp4827
g4630
(dp4828
g304
(lp4829
(g125
g4637
tp4830
asssg4675
(dp4831
g4630
(dp4832
g304
(lp4833
(g125
g4638
tp4834
asssg4694
(dp4835
g4630
(dp4836
g304
(lp4837
(g125
g4639
tp4838
asssg4713
(dp4839
g4630
(dp4840
g304
(lp4841
(g125
g4640
tp4842
asssg4732
(dp4843
g4615
(dp4844
g304
(lp4845
(g4749
g3689
tp4846
a(g4748
g4624
tp4847
asssg4771
(dp4848
g4630
(dp4849
g304
(lp4850
(g125
g3874
tp4851
assssg346
g4790
sg347
(dp4852
g4590
(dp4853
sg4615
(dp4854
g4732
g4844
ssg4630
(dp4855
g4694
g4836
sg4713
g4840
sg4771
g4849
sg4655
g4828
sg4675
g4832
ssg4655
(dp4856
g4590
g4797
ssg4675
(dp4857
g4590
g4816
ssg4694
(dp4858
g4590
g4802
ssg4713
(dp4859
g4590
g4806
ssg4732
(dp4860
g4590
g4810
sg4630
g4822
ssg4771
(dp4861
g4590
g4792
sssg355
g4790
sbsg53
g4611
sg57
g1067
sg65
g4611
sg66
g356
((lp4862
(lp4863
g359
ag356
((lp4864
(lp4865
g362
ag359
aa(lp4866
g364
ag365
aa(lp4867
g367
ag368
aa(lp4868
g370
ag371
aa(lp4869
g373
ag374
aa(lp4870
g376
ag377
aa(lp4871
g379
ag380
aa(lp4872
g382
ag383
aatp4873
Rp4874
aa(lp4875
g387
ag356
((lp4876
(lp4877
g362
ag387
aa(lp4878
g391
ag392
aa(lp4879
g394
ag395
aa(lp4880
g397
ag398
aa(lp4881
g400
ag401
aa(lp4882
g403
ag404
aa(lp4883
g406
ag407
aa(lp4884
g409
ag410
aa(lp4885
g412
ag413
aa(lp4886
g415
ag416
aa(lp4887
g418
ag419
aa(lp4888
g421
ag422
aa(lp4889
g424
ag425
aa(lp4890
g427
ag428
aa(lp4891
g430
ag431
aa(lp4892
g433
ag434
aa(lp4893
g436
ag437
aa(lp4894
g439
ag440
aa(lp4895
g442
ag443
aatp4896
Rp4897
aa(lp4898
g447
ag356
((lp4899
(lp4900
g362
ag447
aa(lp4901
g451
ag452
aatp4902
Rp4903
aatp4904
Rp4905
sg70
NsbS'outputspec.subject'
p4906
tp4907
sg1975
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg1976
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Completed'
p4921
sS'strat_0'
p4922
(lp4923
g2247
ag1181
ag58
ag4437
ag2478
ag2893
aS'func_to_anat_FLIRT_0'
p4924
ag3483
ag1901
ag4611
ag3823
ag4462
ag3848
asg1930
g3705
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1430296471.187349
s.