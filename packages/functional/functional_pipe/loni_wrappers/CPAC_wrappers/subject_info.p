(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(cnipype.pipeline.engine
Node
p18
g7
Ntp19
Rp20
(dp21
S'input_source'
p22
(dp23
sS'_interface'
p24
g5
(cnipype.interfaces.utility
IdentityInterface
p25
g7
Ntp26
Rp27
(dp28
S'inputs'
p29
ctraits.traits
__newobj__
p30
(cnipype.interfaces.base
DynamicTraitedSpec
p31
tp32
Rp33
(dp34
S'__traits_version__'
p35
S'4.5.0'
p36
sS'gm_threshold'
p37
(lp38
F0.7
asbsS'_fields'
p39
(lp40
g37
asS'_mandatory_inputs'
p41
I01
sbsS'_result'
p42
NsS'name'
p43
g37
sS'plugin_args'
p44
(dp45
sS'_hierarchy'
p46
S'seg_preproc_0'
p47
sS'itersource'
p48
NsS'run_without_submitting'
p49
I00
sS'synchronize'
p50
I00
sS'parameterization'
p51
NsS'iterables'
p52
(g37
(lp53
F0.7
atp54
sS'_got_inputs'
p55
I00
sS'_id'
p56
g37
sS'config'
p57
NsS'needed_outputs'
p58
(lp59
sS'overwrite'
p60
NsS'base_dir'
p61
Nsb(dp62
sg5
(g18
g7
Ntp63
Rp64
(dp65
g22
(dp66
sg24
g5
(g25
g7
Ntp67
Rp68
(dp69
g29
g30
(g31
tp70
Rp71
(dp72
g35
g36
sS'wm_threshold'
p73
(lp74
F0.96
asbsg39
(lp75
g73
asg41
I01
sbsg42
Nsg43
g73
sg44
(dp76
sg46
g47
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
(g73
(lp77
F0.96
atp78
sg55
I00
sg56
g73
sg57
Nsg58
(lp79
sg60
Nsg61
Nsb(dp80
sg5
(g18
g7
Ntp81
Rp82
(dp83
g22
(dp84
sg24
g5
(g25
g7
Ntp85
Rp86
(dp87
g29
g30
(g31
tp88
Rp89
(dp90
g35
g36
sS'csf_threshold'
p91
(lp92
F0.96
asbsg39
(lp93
g91
asg41
I01
sbsg42
Nsg43
g91
sg44
(dp94
sg46
g47
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
(g91
(lp95
F0.96
atp96
sg55
I00
sg56
g91
sg57
Nsg58
(lp97
sg60
Nsg61
Nsb(dp98
sg5
(g6
g7
Ntp99
Rp100
(dp101
g11
g5
(g12
g7
Ntp102
Rp103
(dp104
g16
(dp105
g5
(g18
g7
Ntp106
Rp107
(dp108
g22
(dp109
sg24
g5
(g25
g7
Ntp110
Rp111
(dp112
g29
g30
(g31
tp113
Rp114
(dp115
S'standard2highres_rig'
p116
ctraits.trait_base
_Undefined
p117
(tRp118
sg35
g36
sS'standard2highres_init'
p119
g118
sS'tissue_prior'
p120
g118
sS'standard2highres_mat'
p121
g118
sS'brain'
p122
g118
sS'probability_map'
p123
g118
sS'threshold'
p124
g118
sbsg39
(lp125
g120
ag124
ag122
ag123
ag119
ag121
ag116
asg41
I01
sbsg42
Nsg43
S'inputspec'
p126
sg44
(dp127
sg46
S'WM'
p128
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp129
sg60
Nsg61
Nsb(dp130
sg5
(g18
g7
Ntp131
Rp132
(dp133
g22
(dp134
sg24
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p135
g7
Ntp136
Rp137
(dp138
g29
g30
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p139
tp140
Rp141
(dp142
S'ignore_exception'
p143
I00
sg35
g36
sS'op_string'
p144
g118
sS'out_data_type'
p145
g118
sS'out_file'
p146
g118
sS'args'
p147
g118
sS'in_file2'
p148
g118
sS'terminal_output'
p149
S'stream'
p150
sS'environ'
p151
g5
(ctraits.trait_handlers
TraitDictObject
p152
c__builtin__
dict
p153
(dp154
S'FSLOUTPUTTYPE'
p155
S'NIFTI_GZ'
p156
stp157
Rp158
(dp159
S'name_items'
p160
S'environ_items'
p161
sg43
g151
sbsS'in_file'
p162
g118
sS'output_type'
p163
g156
sS'suffix'
p164
g118
sbsS'_output_type'
p165
g156
sS'_environ'
p166
NsS'_terminal_output'
p167
g150
sbsg42
Nsg43
S'binarize_threshold_WM'
p168
sg44
(dp169
sg46
g128
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g168
sg57
Nsg58
(lp170
sg60
Nsg61
Nsb(dp171
sg5
(g18
g7
Ntp172
Rp173
(dp174
g22
(dp175
sg24
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p176
g7
Ntp177
Rp178
(dp179
g29
g30
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p180
tp181
Rp182
(dp183
S'rigid2D'
p184
g118
sg35
g36
sS'in_matrix_file'
p185
g118
sS'verbose'
p186
g118
sS'reference'
p187
g118
sS'padding_size'
p188
g118
sS'sinc_window'
p189
g118
sS'interp'
p190
S'nearestneighbour'
p191
sS'wmnorms'
p192
g118
sS'coarse_search'
p193
g118
sS'no_resample'
p194
g118
sS'sinc_width'
p195
g118
sS'in_weight'
p196
g118
sS'fieldmap'
p197
g118
sS'echospacing'
p198
g118
sS'ref_weight'
p199
g118
sS'apply_isoxfm'
p200
g118
sS'fieldmapmask'
p201
g118
sg162
g118
sS'bbrtype'
p202
g118
sS'no_clamp'
p203
g118
sS'force_scaling'
p204
g118
sS'pedir'
p205
g118
sg143
I00
sS'display_init'
p206
g118
sS'schedule'
p207
g118
sg147
g118
sS'uses_qform'
p208
g118
sS'wmcoords'
p209
g118
sg149
g150
sS'fine_search'
p210
g118
sS'angle_rep'
p211
g118
sS'no_search'
p212
g118
sS'apply_xfm'
p213
I01
sS'wm_seg'
p214
g118
sg146
g118
sS'bbrslope'
p215
g118
sS'datatype'
p216
g118
sS'save_log'
p217
g118
sS'dof'
p218
g118
sS'out_matrix_file'
p219
g118
sS'no_resample_blur'
p220
g118
sS'min_sampling'
p221
g118
sS'cost_func'
p222
g118
sS'cost'
p223
g118
sg151
g5
(g152
g153
(dp224
g155
g156
stp225
Rp226
(dp227
g160
S'environ_items'
p228
sg43
g151
sbsS'searchr_x'
p229
g118
sS'out_log'
p230
g118
sg163
g156
sS'searchr_z'
p231
g118
sS'bins'
p232
g118
sS'searchr_y'
p233
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'WM_prior_mni_to_t1'
p234
sg44
(dp235
sg46
g128
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g234
sg57
Nsg58
(lp236
sg60
Nsg61
Nsb(dp237
sg5
(g18
g7
Ntp238
Rp239
(dp240
g22
(dp241
sg24
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p242
g7
Ntp243
Rp244
(dp245
g29
g30
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p246
tp247
Rp248
(dp249
g143
I00
sS'nan2zeros'
p250
g118
sg144
S'-mas %s '
p251
sg146
g118
sg147
g118
sS'internal_datatype'
p252
g118
sg35
g36
sg149
g150
sg151
g5
(g152
g153
(dp253
g155
g156
stp254
Rp255
(dp256
g160
S'environ_items'
p257
sg43
g151
sbsg162
g118
sg163
g156
sS'output_datatype'
p258
g118
sS'operand_files'
p259
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'overlap_WM_map_with_prior'
p260
sg44
(dp261
sg46
g128
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g260
sg57
Nsg58
(lp262
sg60
Nsg61
Nsb(dp263
sg5
(g18
g7
Ntp264
Rp265
(dp266
g22
(dp267
sg24
g5
(g25
g7
Ntp268
Rp269
(dp270
g29
g30
(g31
tp271
Rp272
(dp273
g35
g36
sS'segment_combo'
p274
g118
sS'segment_mask'
p275
g118
sS'tissueprior_mni2t1'
p276
g118
sS'segment_bin'
p277
g118
sbsg39
(lp278
g276
ag274
ag277
ag275
asg41
I01
sbsg42
Nsg43
S'outputspec'
p279
sg44
(dp280
sg46
g128
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp281
sg60
Nsg61
Nsb(dp282
sg5
(g18
g7
Ntp283
Rp284
(dp285
g22
(dp286
sg24
g5
(g242
g7
Ntp287
Rp288
(dp289
g29
g30
(g246
tp290
Rp291
(dp292
g143
I00
sg250
g118
sg144
g251
sg146
g118
sg147
g118
sg252
g118
sg35
g36
sg149
g150
sg151
g5
(g152
g153
(dp293
g155
g156
stp294
Rp295
(dp296
g160
S'environ_items'
p297
sg43
g151
sbsg162
g118
sg163
g156
sg258
g118
sg259
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'WM_mask'
p298
sg44
(dp299
sg46
g128
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g298
sg57
Nsg58
(lp300
sg60
Nsg61
Nsb(dp301
ssS'graph'
p302
(dp303
sS'succ'
p304
(dp305
g107
(dp306
g173
(dp307
S'connect'
p308
(lp309
(g120
g162
tp310
a(g122
g187
tp311
a(g121
g185
tp312
assg239
(dp313
g308
(lp314
(g123
g162
tp315
assg132
(dp316
g308
(lp317
((g124
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p318
(ttp319
g144
tp320
asssg132
(dp321
g284
(dp322
g308
(lp323
(g146
g162
tp324
assg265
(dp325
g308
(lp326
(g146
g277
tp327
asssg173
(dp328
g284
(dp329
g308
(lp330
(g146
g259
tp331
assg239
(dp332
g308
(lp333
(g146
g259
tp334
assg265
(dp335
g308
(lp336
(g146
g276
tp337
asssg239
(dp338
g265
(dp339
g308
(lp340
(g146
g274
tp341
assg132
(dp342
g308
(lp343
(g146
g162
tp344
asssg265
(dp345
sg284
(dp346
g265
(dp347
g308
(lp348
(g146
g275
tp349
assssS'edge'
p350
g305
sS'pred'
p351
(dp352
g107
(dp353
sg132
(dp354
g107
g316
sg239
g342
ssg173
(dp355
g107
g307
ssg239
(dp356
g107
g313
sg173
g332
ssg265
(dp357
g173
g335
sg239
g339
sg284
g347
sg132
g325
ssg284
(dp358
g173
g329
sg132
g322
sssS'adj'
p359
g305
sbsg43
g128
sg46
g47
sg56
g128
sg57
ccollections
OrderedDict
p360
((lp361
(lp362
S'logging'
p363
ag360
((lp364
(lp365
S'__name__'
p366
ag363
aa(lp367
S'workflow_level'
p368
aS'INFO'
p369
aa(lp370
S'filemanip_level'
p371
aS'INFO'
p372
aa(lp373
S'interface_level'
p374
aS'INFO'
p375
aa(lp376
S'log_to_file'
p377
aS'True'
p378
aa(lp379
S'log_directory'
p380
aS'/mnt/ssd1/data/outputs/CPAC/CPACtest2/outputs/logs/849_1790682990'
p381
aa(lp382
S'log_size'
p383
aS'16384000'
p384
aa(lp385
S'log_rotate'
p386
aS'4'
p387
aatp388
Rp389
aa(lp390
S'execution'
p391
ag360
((lp392
(lp393
g366
ag391
aa(lp394
S'create_report'
p395
aS'true'
p396
aa(lp397
S'crashdump_dir'
p398
aS'/home/eric/Documents/m2g/packages/functional/functional_pipe/loni_wrappers/CPAC_wrappers'
p399
aa(lp400
S'display_variable'
p401
aS':1'
p402
aa(lp403
S'hash_method'
p404
aS'timestamp'
p405
aa(lp406
S'job_finished_timeout'
p407
aS'5'
p408
aa(lp409
S'keep_inputs'
p410
aS'false'
p411
aa(lp412
S'local_hash_check'
p413
aS'true'
p414
aa(lp415
S'matplotlib_backend'
p416
aS'Agg'
p417
aa(lp418
S'plugin'
p419
aS'Linear'
p420
aa(lp421
S'remove_node_directories'
p422
aS'false'
p423
aa(lp424
S'remove_unnecessary_outputs'
p425
aS'true'
p426
aa(lp427
S'single_thread_matlab'
p428
aS'true'
p429
aa(lp430
S'stop_on_first_crash'
p431
aS'false'
p432
aa(lp433
S'stop_on_first_rerun'
p434
aS'false'
p435
aa(lp436
S'use_relative_paths'
p437
aS'false'
p438
aa(lp439
S'stop_on_unknown_version'
p440
aS'false'
p441
aa(lp442
S'write_provenance'
p443
aS'false'
p444
aa(lp445
S'parameterize_dirs'
p446
aS'true'
p447
aatp448
Rp449
aa(lp450
S'check'
p451
ag360
((lp452
(lp453
g366
ag451
aa(lp454
S'interval'
p455
aS'1209600'
p456
aatp457
Rp458
aatp459
Rp460
sg61
Nsb(dp461
sg5
(g18
g7
Ntp462
Rp463
(dp464
g22
(dp465
sg24
g5
(g25
g7
Ntp466
Rp467
(dp468
g29
g30
(g31
tp469
Rp470
(dp471
S'partial_volume_files'
p472
g118
sg35
g36
sS'gm_combo'
p473
g118
sS'mixeltype'
p474
g118
sS'csf_mni2t1'
p475
g118
sS'wm_bin'
p476
g118
sS'csf_bin'
p477
g118
sS'probability_maps'
p478
g118
sS'wm_mni2t1'
p479
g118
sS'csf_combo'
p480
g118
sS'wm_combo'
p481
g118
sS'wm_mask'
p482
g118
sS'gm_mask'
p483
g118
sS'csf_mask'
p484
g118
sS'gm_bin'
p485
g118
sS'partial_volume_map'
p486
g118
sS'gm_mni2t1'
p487
g118
sbsg39
(lp488
g475
ag480
ag477
ag484
ag487
ag473
ag485
ag483
ag479
ag481
ag476
ag478
ag474
ag486
ag472
ag482
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp489
sg46
g47
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp490
sg60
Nsg61
Nsb(dp491
sg5
(g18
g7
Ntp492
Rp493
(dp494
g22
(dp495
sg24
g5
(g25
g7
Ntp496
Rp497
(dp498
g29
g30
(g31
tp499
Rp500
(dp501
g116
g118
sg35
g36
sg119
g118
sg122
g118
sS'PRIOR_GRAY'
p502
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p503
sg121
g118
sS'PRIOR_CSF'
p504
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p505
sS'PRIOR_WHITE'
p506
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p507
sbsg39
(lp508
g122
ag119
ag121
ag116
ag504
ag502
ag506
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp509
sg46
g47
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp510
sg60
Nsg61
Nsb(dp511
sg5
(g18
g7
Ntp512
Rp513
(dp514
g22
(dp515
sg24
g5
(cnipype.interfaces.fsl.preprocess
FAST
p516
g7
Ntp517
Rp518
(dp519
g29
g30
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p520
tp521
Rp522
(dp523
S'number_classes'
p524
g118
sS'out_basename'
p525
S'segment'
p526
sS'hyper'
p527
g118
sg186
g118
sS'init_seg_smooth'
p528
g118
sS'init_transform'
p529
g118
sS'no_pve'
p530
g118
sS'output_biascorrected'
p531
g118
sS'mixel_smooth'
p532
g118
sS'segments'
p533
I01
sS'iters_afterbias'
p534
g118
sS'bias_lowpass'
p535
g118
sS'other_priors'
p536
g118
sg35
g36
sg143
I00
sS'img_type'
p537
I1
sg147
g118
sg478
I01
sS'manual_seg'
p538
g118
sg149
g150
sS'output_biasfield'
p539
g118
sS'no_bias'
p540
g118
sS'use_priors'
p541
g118
sS'in_files'
p542
g118
sS'segment_iters'
p543
g118
sg151
g5
(g152
g153
(dp544
g155
g156
stp545
Rp546
(dp547
g160
S'environ_items'
p548
sg43
g151
sbsg163
g156
sS'bias_iters'
p549
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
g526
sg44
(dp550
sg46
g47
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g526
sg57
Nsg58
(lp551
sg60
Nsg61
Nsb(dp552
sg5
(g6
g7
Ntp553
Rp554
(dp555
g11
g5
(g12
g7
Ntp556
Rp557
(dp558
g16
(dp559
g5
(g18
g7
Ntp560
Rp561
(dp562
g22
(dp563
sg24
g5
(g176
g7
Ntp564
Rp565
(dp566
g29
g30
(g180
tp567
Rp568
(dp569
g184
g118
sg35
g36
sg185
g118
sg186
g118
sg187
g118
sg188
g118
sg189
g118
sg190
g191
sg192
g118
sg193
g118
sg194
g118
sg195
g118
sg196
g118
sg197
g118
sg198
g118
sg199
g118
sg200
g118
sg201
g118
sg162
g118
sg202
g118
sg203
g118
sg204
g118
sg205
g118
sg143
I00
sg206
g118
sg207
g118
sg147
g118
sg208
g118
sg209
g118
sg149
g150
sg210
g118
sg211
g118
sg212
g118
sg213
I01
sg214
g118
sg146
g118
sg215
g118
sg216
g118
sg217
g118
sg218
g118
sg219
g118
sg220
g118
sg221
g118
sg222
g118
sg223
g118
sg151
g5
(g152
g153
(dp570
g155
g156
stp571
Rp572
(dp573
g160
S'environ_items'
p574
sg43
g151
sbsg229
g118
sg230
g118
sg163
g156
sg231
g118
sg232
g118
sg233
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'GM_prior_mni_to_t1'
p575
sg44
(dp576
sg46
S'GM'
p577
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g575
sg57
Nsg58
(lp578
sg60
Nsg61
Nsb(dp579
sg5
(g18
g7
Ntp580
Rp581
(dp582
g22
(dp583
sg24
g5
(g242
g7
Ntp584
Rp585
(dp586
g29
g30
(g246
tp587
Rp588
(dp589
g143
I00
sg250
g118
sg144
g251
sg146
g118
sg147
g118
sg252
g118
sg35
g36
sg149
g150
sg151
g5
(g152
g153
(dp590
g155
g156
stp591
Rp592
(dp593
g160
S'environ_items'
p594
sg43
g151
sbsg162
g118
sg163
g156
sg258
g118
sg259
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'GM_mask'
p595
sg44
(dp596
sg46
g577
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g595
sg57
Nsg58
(lp597
sg60
Nsg61
Nsb(dp598
sg5
(g18
g7
Ntp599
Rp600
(dp601
g22
(dp602
sg24
g5
(g242
g7
Ntp603
Rp604
(dp605
g29
g30
(g246
tp606
Rp607
(dp608
g143
I00
sg250
g118
sg144
g251
sg146
g118
sg147
g118
sg252
g118
sg35
g36
sg149
g150
sg151
g5
(g152
g153
(dp609
g155
g156
stp610
Rp611
(dp612
g160
S'environ_items'
p613
sg43
g151
sbsg162
g118
sg163
g156
sg258
g118
sg259
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'overlap_GM_map_with_prior'
p614
sg44
(dp615
sg46
g577
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g614
sg57
Nsg58
(lp616
sg60
Nsg61
Nsb(dp617
sg5
(g18
g7
Ntp618
Rp619
(dp620
g22
(dp621
sg24
g5
(g25
g7
Ntp622
Rp623
(dp624
g29
g30
(g31
tp625
Rp626
(dp627
g35
g36
sg274
g118
sg275
g118
sg276
g118
sg277
g118
sbsg39
(lp628
g276
ag274
ag277
ag275
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp629
sg46
g577
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp630
sg60
Nsg61
Nsb(dp631
sg5
(g18
g7
Ntp632
Rp633
(dp634
g22
(dp635
sg24
g5
(g25
g7
Ntp636
Rp637
(dp638
g29
g30
(g31
tp639
Rp640
(dp641
g116
g118
sg35
g36
sg119
g118
sg120
g118
sg121
g118
sg122
g118
sg123
g118
sg124
g118
sbsg39
(lp642
g120
ag124
ag122
ag123
ag119
ag121
ag116
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp643
sg46
g577
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp644
sg60
Nsg61
Nsb(dp645
sg5
(g18
g7
Ntp646
Rp647
(dp648
g22
(dp649
sg24
g5
(g135
g7
Ntp650
Rp651
(dp652
g29
g30
(g139
tp653
Rp654
(dp655
g143
I00
sg35
g36
sg144
g118
sg145
g118
sg146
g118
sg147
g118
sg148
g118
sg149
g150
sg151
g5
(g152
g153
(dp656
g155
g156
stp657
Rp658
(dp659
g160
S'environ_items'
p660
sg43
g151
sbsg162
g118
sg163
g156
sg164
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'binarize_threshold_GM'
p661
sg44
(dp662
sg46
g577
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g661
sg57
Nsg58
(lp663
sg60
Nsg61
Nsb(dp664
ssg302
(dp665
sg304
(dp666
g561
(dp667
g619
(dp668
g308
(lp669
(g146
g276
tp670
assg600
(dp671
g308
(lp672
(g146
g259
tp673
assg581
(dp674
g308
(lp675
(g146
g259
tp676
asssg581
(dp677
g619
(dp678
g308
(lp679
(g146
g275
tp680
asssg600
(dp681
g647
(dp682
g308
(lp683
(g146
g162
tp684
assg619
(dp685
g308
(lp686
(g146
g274
tp687
asssg619
(dp688
sg633
(dp689
g561
(dp690
g308
(lp691
(g120
g162
tp692
a(g122
g187
tp693
a(g121
g185
tp694
assg600
(dp695
g308
(lp696
(g123
g162
tp697
assg647
(dp698
g308
(lp699
((g124
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p700
(ttp701
g144
tp702
asssg647
(dp703
g581
(dp704
g308
(lp705
(g146
g162
tp706
assg619
(dp707
g308
(lp708
(g146
g277
tp709
assssg350
g666
sg351
(dp710
g561
(dp711
g633
g690
ssg581
(dp712
g647
g704
sg561
g674
ssg600
(dp713
g633
g695
sg561
g671
ssg619
(dp714
g561
g668
sg581
g678
sg600
g685
sg647
g707
ssg633
(dp715
sg647
(dp716
g633
g698
sg600
g682
sssg359
g666
sbsg43
g577
sg46
g47
sg56
g577
sg57
g360
((lp717
(lp718
g363
ag360
((lp719
(lp720
g366
ag363
aa(lp721
g368
ag369
aa(lp722
g371
ag372
aa(lp723
g374
ag375
aa(lp724
g377
ag378
aa(lp725
g380
ag381
aa(lp726
g383
ag384
aa(lp727
g386
ag387
aatp728
Rp729
aa(lp730
g391
ag360
((lp731
(lp732
g366
ag391
aa(lp733
g395
ag396
aa(lp734
g398
ag399
aa(lp735
g401
ag402
aa(lp736
g404
ag405
aa(lp737
g407
ag408
aa(lp738
g410
ag411
aa(lp739
g413
ag414
aa(lp740
g416
ag417
aa(lp741
g419
ag420
aa(lp742
g422
ag423
aa(lp743
g425
ag426
aa(lp744
g428
ag429
aa(lp745
g431
ag432
aa(lp746
g434
ag435
aa(lp747
g437
ag438
aa(lp748
g440
ag441
aa(lp749
g443
ag444
aa(lp750
g446
ag447
aatp751
Rp752
aa(lp753
g451
ag360
((lp754
(lp755
g366
ag451
aa(lp756
g455
ag456
aatp757
Rp758
aatp759
Rp760
sg61
Nsb(dp761
sg5
(g6
g7
Ntp762
Rp763
(dp764
g11
g5
(g12
g7
Ntp765
Rp766
(dp767
g16
(dp768
g5
(g18
g7
Ntp769
Rp770
(dp771
g22
(dp772
sg24
g5
(g25
g7
Ntp773
Rp774
(dp775
g29
g30
(g31
tp776
Rp777
(dp778
g35
g36
sg274
g118
sg275
g118
sg276
g118
sg277
g118
sbsg39
(lp779
g276
ag274
ag277
ag275
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp780
sg46
S'CSF'
p781
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp782
sg60
Nsg61
Nsb(dp783
sg5
(g18
g7
Ntp784
Rp785
(dp786
g22
(dp787
sg24
g5
(g25
g7
Ntp788
Rp789
(dp790
g29
g30
(g31
tp791
Rp792
(dp793
g116
g118
sg35
g36
sg119
g118
sg120
g118
sg121
g118
sg122
g118
sg123
g118
sg124
g118
sbsg39
(lp794
g120
ag124
ag122
ag123
ag119
ag121
ag116
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp795
sg46
g781
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp796
sg60
Nsg61
Nsb(dp797
sg5
(g18
g7
Ntp798
Rp799
(dp800
g22
(dp801
sg24
g5
(g176
g7
Ntp802
Rp803
(dp804
g29
g30
(g180
tp805
Rp806
(dp807
g184
g118
sg35
g36
sg185
g118
sg186
g118
sg187
g118
sg188
g118
sg189
g118
sg190
g191
sg192
g118
sg193
g118
sg194
g118
sg195
g118
sg196
g118
sg197
g118
sg198
g118
sg199
g118
sg200
g118
sg201
g118
sg162
g118
sg202
g118
sg203
g118
sg204
g118
sg205
g118
sg143
I00
sg206
g118
sg207
g118
sg147
g118
sg208
g118
sg209
g118
sg149
g150
sg210
g118
sg211
g118
sg212
g118
sg213
I01
sg214
g118
sg146
g118
sg215
g118
sg216
g118
sg217
g118
sg218
g118
sg219
g118
sg220
g118
sg221
g118
sg222
g118
sg223
g118
sg151
g5
(g152
g153
(dp808
g155
g156
stp809
Rp810
(dp811
g160
S'environ_items'
p812
sg43
g151
sbsg229
g118
sg230
g118
sg163
g156
sg231
g118
sg232
g118
sg233
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'CSF_prior_mni_to_t1'
p813
sg44
(dp814
sg46
g781
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g813
sg57
Nsg58
(lp815
sg60
Nsg61
Nsb(dp816
sg5
(g18
g7
Ntp817
Rp818
(dp819
g22
(dp820
sg24
g5
(g242
g7
Ntp821
Rp822
(dp823
g29
g30
(g246
tp824
Rp825
(dp826
g143
I00
sg250
g118
sg144
g251
sg146
g118
sg147
g118
sg252
g118
sg35
g36
sg149
g150
sg151
g5
(g152
g153
(dp827
g155
g156
stp828
Rp829
(dp830
g160
S'environ_items'
p831
sg43
g151
sbsg162
g118
sg163
g156
sg258
g118
sg259
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'overlap_CSF_map_with_prior'
p832
sg44
(dp833
sg46
g781
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g832
sg57
Nsg58
(lp834
sg60
Nsg61
Nsb(dp835
sg5
(g18
g7
Ntp836
Rp837
(dp838
g22
(dp839
sg24
g5
(g135
g7
Ntp840
Rp841
(dp842
g29
g30
(g139
tp843
Rp844
(dp845
g143
I00
sg35
g36
sg144
g118
sg145
g118
sg146
g118
sg147
g118
sg148
g118
sg149
g150
sg151
g5
(g152
g153
(dp846
g155
g156
stp847
Rp848
(dp849
g160
S'environ_items'
p850
sg43
g151
sbsg162
g118
sg163
g156
sg164
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'binarize_threshold_CSF'
p851
sg44
(dp852
sg46
g781
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g851
sg57
Nsg58
(lp853
sg60
Nsg61
Nsb(dp854
sg5
(g18
g7
Ntp855
Rp856
(dp857
g22
(dp858
sg24
g5
(g242
g7
Ntp859
Rp860
(dp861
g29
g30
(g246
tp862
Rp863
(dp864
g143
I00
sg250
g118
sg144
g251
sg146
g118
sg147
g118
sg252
g118
sg35
g36
sg149
g150
sg151
g5
(g152
g153
(dp865
g155
g156
stp866
Rp867
(dp868
g160
S'environ_items'
p869
sg43
g151
sbsg162
g118
sg163
g156
sg258
g118
sg259
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'CSF_mask'
p870
sg44
(dp871
sg46
g781
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g870
sg57
Nsg58
(lp872
sg60
Nsg61
Nsb(dp873
ssg302
(dp874
sg304
(dp875
g770
(dp876
sg785
(dp877
g799
(dp878
g308
(lp879
(g120
g162
tp880
a(g122
g187
tp881
a(g121
g185
tp882
assg818
(dp883
g308
(lp884
(g123
g162
tp885
assg837
(dp886
g308
(lp887
((g124
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p888
(ttp889
g144
tp890
asssg799
(dp891
g770
(dp892
g308
(lp893
(g146
g276
tp894
assg818
(dp895
g308
(lp896
(g146
g259
tp897
assg856
(dp898
g308
(lp899
(g146
g259
tp900
asssg818
(dp901
g837
(dp902
g308
(lp903
(g146
g162
tp904
assg770
(dp905
g308
(lp906
(g146
g274
tp907
asssg837
(dp908
g856
(dp909
g308
(lp910
(g146
g162
tp911
assg770
(dp912
g308
(lp913
(g146
g277
tp914
asssg856
(dp915
g770
(dp916
g308
(lp917
(g146
g275
tp918
assssg350
g875
sg351
(dp919
g770
(dp920
g799
g892
sg818
g905
sg856
g916
sg837
g912
ssg785
(dp921
sg799
(dp922
g785
g878
ssg818
(dp923
g785
g883
sg799
g895
ssg837
(dp924
g785
g886
sg818
g902
ssg856
(dp925
g837
g909
sg799
g898
sssg359
g875
sbsg43
g781
sg46
g47
sg56
g781
sg57
g360
((lp926
(lp927
g363
ag360
((lp928
(lp929
g366
ag363
aa(lp930
g368
ag369
aa(lp931
g371
ag372
aa(lp932
g374
ag375
aa(lp933
g377
ag378
aa(lp934
g380
ag381
aa(lp935
g383
ag384
aa(lp936
g386
ag387
aatp937
Rp938
aa(lp939
g391
ag360
((lp940
(lp941
g366
ag391
aa(lp942
g395
ag396
aa(lp943
g398
ag399
aa(lp944
g401
ag402
aa(lp945
g404
ag405
aa(lp946
g407
ag408
aa(lp947
g410
ag411
aa(lp948
g413
ag414
aa(lp949
g416
ag417
aa(lp950
g419
ag420
aa(lp951
g422
ag423
aa(lp952
g425
ag426
aa(lp953
g428
ag429
aa(lp954
g431
ag432
aa(lp955
g434
ag435
aa(lp956
g437
ag438
aa(lp957
g440
ag441
aa(lp958
g443
ag444
aa(lp959
g446
ag447
aatp960
Rp961
aa(lp962
g451
ag360
((lp963
(lp964
g366
ag451
aa(lp965
g455
ag456
aatp966
Rp967
aatp968
Rp969
sg61
Nsb(dp970
ssg302
(dp971
sg304
(dp972
g20
(dp973
g554
(dp974
g308
(lp975
(g37
S'inputspec.threshold'
p976
tp977
asssg64
(dp978
g100
(dp979
g308
(lp980
(g73
g976
tp981
asssg82
(dp982
g763
(dp983
g308
(lp984
(g91
g976
tp985
asssg100
(dp986
g463
(dp987
g308
(lp988
(S'outputspec.tissueprior_mni2t1'
p989
g479
tp990
a(S'outputspec.segment_combo'
p991
g481
tp992
a(S'outputspec.segment_bin'
p993
g476
tp994
a(S'outputspec.segment_mask'
p995
g482
tp996
asssg463
(dp997
sg493
(dp998
g554
(dp999
g308
(lp1000
(g122
S'inputspec.brain'
p1001
tp1002
a(g502
S'inputspec.tissue_prior'
p1003
tp1004
a(g121
S'inputspec.standard2highres_mat'
p1005
tp1006
assg100
(dp1007
g308
(lp1008
(g122
g1001
tp1009
a(g506
g1003
tp1010
a(g121
g1005
tp1011
assg513
(dp1012
g308
(lp1013
(g122
g542
tp1014
assg763
(dp1015
g308
(lp1016
(g122
g1001
tp1017
a(g504
g1003
tp1018
a(g121
g1005
tp1019
asssg513
(dp1020
g554
(dp1021
g308
(lp1022
((g478
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1023
(ttp1024
S'inputspec.probability_map'
p1025
tp1026
assg100
(dp1027
g308
(lp1028
((g478
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1029
(ttp1030
g1025
tp1031
assg463
(dp1032
g308
(lp1033
(g478
g478
tp1034
a(g474
g474
tp1035
a(g472
g472
tp1036
a(g486
g486
tp1037
assg763
(dp1038
g308
(lp1039
((g478
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1040
(ttp1041
g1025
tp1042
asssg554
(dp1043
g463
(dp1044
g308
(lp1045
(g989
g487
tp1046
a(g991
g473
tp1047
a(g993
g485
tp1048
a(g995
g483
tp1049
asssg763
(dp1050
g463
(dp1051
g308
(lp1052
(g989
g475
tp1053
a(g991
g480
tp1054
a(g993
g477
tp1055
a(g995
g484
tp1056
assssg350
g972
sg351
(dp1057
g20
(dp1058
sg64
(dp1059
sg82
(dp1060
sg100
(dp1061
g493
g1007
sg513
g1027
sg64
g979
ssg463
(dp1062
g554
g1044
sg100
g987
sg513
g1032
sg763
g1051
ssg493
(dp1063
sg513
(dp1064
g493
g1012
ssg554
(dp1065
g493
g999
sg513
g1021
sg20
g974
ssg763
(dp1066
g493
g1015
sg513
g1038
sg82
g983
sssg359
g972
sbsg43
g47
sg46
S'resting_preproc_849_1790682990'
p1067
sg56
g47
sg57
g360
((lp1068
(lp1069
g363
ag360
((lp1070
(lp1071
g366
ag363
aa(lp1072
g368
ag369
aa(lp1073
g371
ag372
aa(lp1074
g374
ag375
aa(lp1075
g377
ag378
aa(lp1076
g380
ag381
aa(lp1077
g383
ag384
aa(lp1078
g386
ag387
aatp1079
Rp1080
aa(lp1081
g391
ag360
((lp1082
(lp1083
g366
ag391
aa(lp1084
g395
ag396
aa(lp1085
g398
ag399
aa(lp1086
g401
ag402
aa(lp1087
g404
ag405
aa(lp1088
g407
ag408
aa(lp1089
g410
ag411
aa(lp1090
g413
ag414
aa(lp1091
g416
ag417
aa(lp1092
g419
ag420
aa(lp1093
g422
ag423
aa(lp1094
g425
ag426
aa(lp1095
g428
ag429
aa(lp1096
g431
ag432
aa(lp1097
g434
ag435
aa(lp1098
g437
ag438
aa(lp1099
g440
ag441
aa(lp1100
g443
ag444
aa(lp1101
g446
ag447
aatp1102
Rp1103
aa(lp1104
g451
ag360
((lp1105
(lp1106
g366
ag451
aa(lp1107
g455
ag456
aatp1108
Rp1109
aatp1110
Rp1111
sg61
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g18
g7
Ntp1122
Rp1123
(dp1124
g22
(dp1125
sg24
g5
(g25
g7
Ntp1126
Rp1127
(dp1128
g29
g30
(g31
tp1129
Rp1130
(dp1131
g35
g36
sS'output_brain'
p1132
g118
sS'nonlinear_xfm'
p1133
g118
sS'invlinear_xfm'
p1134
g118
sS'linear_xfm'
p1135
g118
sbsg39
(lp1136
g1132
ag1135
ag1134
ag1133
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp1137
sg46
S'anat_mni_fnirt_register_0'
p1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp1139
sg60
Nsg61
Nsb(dp1140
sg5
(g18
g7
Ntp1141
Rp1142
(dp1143
g22
(dp1144
sg24
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1145
g7
Ntp1146
Rp1147
(dp1148
g29
g30
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1149
tp1150
Rp1151
(dp1152
g143
I00
sS'supersample'
p1153
g118
sg162
g118
sS'superlevel'
p1154
g118
sg146
g118
sg216
g118
sg147
g118
sg190
g118
sS'field_file'
p1155
g118
sS'ref_file'
p1156
g118
sg149
g150
sg151
g5
(g152
g153
(dp1157
g155
g156
stp1158
Rp1159
(dp1160
g160
S'environ_items'
p1161
sg43
g151
sbsS'premat'
p1162
g118
sS'mask_file'
p1163
g118
sg163
g156
sS'relwarp'
p1164
g118
sS'abswarp'
p1165
g118
sg35
g36
sS'postmat'
p1166
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'brain_warp'
p1167
sg44
(dp1168
sg46
g1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1167
sg57
Nsg58
(lp1169
sg60
Nsg61
Nsb(dp1170
sg5
(g18
g7
Ntp1171
Rp1172
(dp1173
g22
(dp1174
sg24
g5
(g176
g7
Ntp1175
Rp1176
(dp1177
g29
g30
(g180
tp1178
Rp1179
(dp1180
g184
g118
sg35
g36
sg185
g118
sg186
g118
sg187
g118
sg188
g118
sg189
g118
sg190
g118
sg192
g118
sg193
g118
sg194
g118
sg195
g118
sg196
g118
sg197
g118
sg198
g118
sg199
g118
sg200
g118
sg201
g118
sg162
g118
sg202
g118
sg203
g118
sg204
g118
sg205
g118
sg143
I00
sg206
g118
sg207
g118
sg147
g118
sg208
g118
sg209
g118
sg149
g150
sg210
g118
sg211
g118
sg212
g118
sg213
g118
sg214
g118
sg146
g118
sg215
g118
sg216
g118
sg217
g118
sg218
g118
sg219
g118
sg220
g118
sg221
g118
sg222
g118
sg223
S'corratio'
p1181
sg151
g5
(g152
g153
(dp1182
g155
g156
stp1183
Rp1184
(dp1185
g160
S'environ_items'
p1186
sg43
g151
sbsg229
g118
sg230
g118
sg163
g156
sg231
g118
sg232
g118
sg233
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'linear_reg_0'
p1187
sg44
(dp1188
sg46
g1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1187
sg57
Nsg58
(lp1189
sg60
Nsg61
Nsb(dp1190
sg5
(g18
g7
Ntp1191
Rp1192
(dp1193
g22
(dp1194
sg24
g5
(g25
g7
Ntp1195
Rp1196
(dp1197
g29
g30
(g31
tp1198
Rp1199
(dp1200
S'fnirt_config'
p1201
S'T1_2_MNI152_2mm'
p1202
sg35
g36
sS'input_brain'
p1203
g118
sS'reference_skull'
p1204
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1205
sS'reference_brain'
p1206
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1207
sS'input_skull'
p1208
g118
sbsg39
(lp1209
g1203
ag1208
ag1206
ag1204
ag1201
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp1210
sg46
g1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp1211
sg60
Nsg61
Nsb(dp1212
sg5
(g18
g7
Ntp1213
Rp1214
(dp1215
g22
(dp1216
sg24
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1217
g7
Ntp1218
Rp1219
(dp1220
g29
g30
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1221
tp1222
Rp1223
(dp1224
g143
I00
sg35
g36
sg146
g118
sg147
g118
sg148
g118
sS'fix_scale_skew'
p1225
g118
sS'invert_xfm'
p1226
I01
sg149
g150
sS'concat_xfm'
p1227
g118
sg162
g118
sg163
g156
sg151
g5
(g152
g153
(dp1228
g155
g156
stp1229
Rp1230
(dp1231
g160
S'environ_items'
p1232
sg43
g151
sbsbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'inv_linear_reg0_xfm'
p1233
sg44
(dp1234
sg46
g1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1233
sg57
Nsg58
(lp1235
sg60
Nsg61
Nsb(dp1236
sg5
(g18
g7
Ntp1237
Rp1238
(dp1239
g22
(dp1240
sg24
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1241
g7
Ntp1242
Rp1243
(dp1244
g29
g30
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1245
tp1246
Rp1247
(dp1248
g35
g36
sS'derive_from_ref'
p1249
g118
sS'in_intensitymap_file'
p1250
g118
sS'modulatedref_file'
p1251
g118
sS'refmask_val'
p1252
g118
sS'hessian_precision'
p1253
g118
sS'in_fwhm'
p1254
g118
sS'skip_implicit_in_masking'
p1255
g118
sS'inmask_file'
p1256
g118
sS'refmask_file'
p1257
g118
sS'inwarp_file'
p1258
g118
sS'skip_lambda_ssq'
p1259
g118
sS'intensity_mapping_model'
p1260
g118
sS'affine_file'
p1261
g118
sS'apply_inmask'
p1262
g118
sS'spline_order'
p1263
g118
sS'apply_refmask'
p1264
g118
sS'subsampling_scheme'
p1265
g118
sg162
g118
sS'warped_file'
p1266
g118
sS'skip_refmask'
p1267
g118
sg143
I00
sS'ref_fwhm'
p1268
g118
sS'inmask_val'
p1269
g118
sS'config_file'
p1270
g118
sg1155
g118
sg147
g118
sS'apply_intensity_mapping'
p1271
g118
sS'regularization_lambda'
p1272
g118
sg149
g150
sS'regularization_model'
p1273
g118
sS'jacobian_range'
p1274
g118
sS'out_intensitymap_file'
p1275
g118
sS'skip_implicit_ref_masking'
p1276
g118
sg1156
g118
sS'skip_inmask'
p1277
g118
sS'fieldcoeff_file'
p1278
I01
sS'warp_resolution'
p1279
g118
sS'jacobian_file'
p1280
I01
sg151
g5
(g152
g153
(dp1281
g155
g156
stp1282
Rp1283
(dp1284
g160
S'environ_items'
p1285
sg43
g151
sbsS'bias_regularization_lambda'
p1286
g118
sg163
g156
sS'skip_intensity_mapping'
p1287
g118
sS'log_file'
p1288
g118
sS'biasfield_resolution'
p1289
g118
sS'intensity_mapping_order'
p1290
g118
sS'max_nonlin_iter'
p1291
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'nonlinear_reg_1'
p1292
sg44
(dp1293
sg46
g1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1292
sg57
Nsg58
(lp1294
sg60
Nsg61
Nsb(dp1295
ssg302
(dp1296
sg304
(dp1297
g1123
(dp1298
sg1142
(dp1299
g1123
(dp1300
g308
(lp1301
(g146
g1132
tp1302
asssg1172
(dp1303
g1238
(dp1304
g308
(lp1305
(g219
g1261
tp1306
assg1123
(dp1307
g308
(lp1308
(g219
g1135
tp1309
assg1214
(dp1310
g308
(lp1311
(g219
g162
tp1312
asssg1192
(dp1313
g1142
(dp1314
g308
(lp1315
(g1203
g162
tp1316
a(g1206
g1156
tp1317
assg1172
(dp1318
g308
(lp1319
(g1203
g162
tp1320
a(g1206
g187
tp1321
assg1238
(dp1322
g308
(lp1323
(g1208
g162
tp1324
a(g1204
g1156
tp1325
a(g1201
g1270
tp1326
asssg1214
(dp1327
g1123
(dp1328
g308
(lp1329
(g146
g1134
tp1330
asssg1238
(dp1331
g1142
(dp1332
g308
(lp1333
(g1278
g1155
tp1334
assg1123
(dp1335
g308
(lp1336
(g1278
g1133
tp1337
assssg350
g1297
sg351
(dp1338
g1123
(dp1339
g1172
g1307
sg1142
g1300
sg1238
g1335
sg1214
g1328
ssg1142
(dp1340
g1192
g1314
sg1238
g1332
ssg1172
(dp1341
g1192
g1318
ssg1192
(dp1342
sg1214
(dp1343
g1172
g1310
ssg1238
(dp1344
g1192
g1322
sg1172
g1304
sssg359
g1297
sbsg43
g1138
sg46
g1067
sg56
g1138
sg57
g360
((lp1345
(lp1346
g363
ag360
((lp1347
(lp1348
g366
ag363
aa(lp1349
g368
ag369
aa(lp1350
g371
ag372
aa(lp1351
g374
ag375
aa(lp1352
g377
ag378
aa(lp1353
g380
ag381
aa(lp1354
g383
ag384
aa(lp1355
g386
ag387
aatp1356
Rp1357
aa(lp1358
g391
ag360
((lp1359
(lp1360
g366
ag391
aa(lp1361
g395
ag396
aa(lp1362
g398
ag399
aa(lp1363
g401
ag402
aa(lp1364
g404
ag405
aa(lp1365
g407
ag408
aa(lp1366
g410
ag411
aa(lp1367
g413
ag414
aa(lp1368
g416
ag417
aa(lp1369
g419
ag420
aa(lp1370
g422
ag423
aa(lp1371
g425
ag426
aa(lp1372
g428
ag429
aa(lp1373
g431
ag432
aa(lp1374
g434
ag435
aa(lp1375
g437
ag438
aa(lp1376
g440
ag441
aa(lp1377
g443
ag444
aa(lp1378
g446
ag447
aatp1379
Rp1380
aa(lp1381
g451
ag360
((lp1382
(lp1383
g366
ag451
aa(lp1384
g455
ag456
aatp1385
Rp1386
aatp1387
Rp1388
sg61
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g18
g7
Ntp1399
Rp1400
(dp1401
g22
(dp1402
sg24
g5
(g25
g7
Ntp1403
Rp1404
(dp1405
g29
g30
(g31
tp1406
Rp1407
(dp1408
g35
g36
sS'resampled_underlay'
p1409
g118
sS'axial_png'
p1410
g118
sS'sagittal_png'
p1411
g118
sS'resampled_overlay'
p1412
g118
sbsg39
(lp1413
g1410
ag1411
ag1409
ag1412
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp1414
sg46
S'montage_mfi_0'
p1415
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp1416
sg60
Nsg61
Nsb(dp1417
sg5
(g18
g7
Ntp1418
Rp1419
(dp1420
g22
(dp1421
sg24
g5
(g25
g7
Ntp1422
Rp1423
(dp1424
g29
g30
(g31
tp1425
Rp1426
(dp1427
g35
g36
sS'underlay'
p1428
g118
sS'overlay'
p1429
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1430
sbsg39
(lp1431
g1428
ag1429
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp1432
sg46
g1415
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp1433
sg60
Nsg61
Nsb(dp1434
sg5
(g18
g7
Ntp1435
Rp1436
(dp1437
g22
(dp1438
sg24
g5
(cnipype.interfaces.utility
Function
p1439
g7
Ntp1440
Rp1441
(dp1442
S'_input_names'
p1443
(lp1444
S'file_'
p1445
asg29
g30
(cnipype.interfaces.utility
FunctionInputSpec
p1446
tp1447
Rp1448
(dp1449
g143
I00
sS'function_str'
p1450
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1451
sg1445
g118
sg35
g36
sbsS'_out'
p1452
(dp1453
S'new_fname'
p1454
NssS'_output_names'
p1455
(lp1456
g1454
asS'imports'
p1457
Nsbsg42
Nsg43
S'resample_u'
p1458
sg44
(dp1459
sg46
g1415
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1458
sg57
Nsg58
(lp1460
sg60
Nsg61
Nsb(dp1461
sg5
(g18
g7
Ntp1462
Rp1463
(dp1464
g22
(dp1465
sg24
g5
(g1439
g7
Ntp1466
Rp1467
(dp1468
g1443
(lp1469
g1445
asg29
g30
(g1446
tp1470
Rp1471
(dp1472
g143
I00
sg1450
g1451
sg1445
g118
sg35
g36
sbsg1452
(dp1473
g1454
Nssg1455
(lp1474
g1454
asg1457
Nsbsg42
Nsg49
I00
sg44
(dp1475
sg51
Nsg48
Nsg60
Nsg43
S'resample_o'
p1476
sg46
g1415
sg50
I00
sg52
Nsg55
I00
sg56
g1476
sg57
Nsg58
(lp1477
sg61
Nsb(dp1478
sg5
(g18
g7
Ntp1479
Rp1480
(dp1481
g22
(dp1482
sg24
g5
(g1439
g7
Ntp1483
Rp1484
(dp1485
g1443
(lp1486
g1429
ag1428
aS'png_name'
p1487
aS'cbar_name'
p1488
asg29
g30
(g1446
tp1489
Rp1490
(dp1491
g143
I00
sg1487
S'MNI_edge_on_mean_func_mni_s.png'
p1492
sg1429
g118
sg1488
S'red'
p1493
sg1450
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1494
sg1428
g118
sg35
g36
sbsg1452
(dp1495
g1487
Nssg1455
(lp1496
g1487
asg1457
Nsbsg42
Nsg43
S'montage_s'
p1497
sg44
(dp1498
sg46
g1415
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1497
sg57
Nsg58
(lp1499
sg60
Nsg61
Nsb(dp1500
sg5
(g18
g7
Ntp1501
Rp1502
(dp1503
g22
(dp1504
sg24
g5
(g1439
g7
Ntp1505
Rp1506
(dp1507
g1443
(lp1508
g1429
ag1428
ag1487
ag1488
asg29
g30
(g1446
tp1509
Rp1510
(dp1511
g143
I00
sg1487
S'MNI_edge_on_mean_func_mni_a.png'
p1512
sg1429
g118
sg1488
g1493
sg1450
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1513
sg1428
g118
sg35
g36
sbsg1452
(dp1514
g1487
Nssg1455
(lp1515
g1487
asg1457
Nsbsg42
Nsg43
S'montage_a'
p1516
sg44
(dp1517
sg46
g1415
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1516
sg57
Nsg58
(lp1518
sg60
Nsg61
Nsb(dp1519
ssg302
(dp1520
sg304
(dp1521
g1400
(dp1522
sg1419
(dp1523
g1436
(dp1524
g308
(lp1525
(g1428
g1445
tp1526
assg1463
(dp1527
g308
(lp1528
(g1429
g1445
tp1529
asssg1436
(dp1530
g1480
(dp1531
g308
(lp1532
(g1454
g1428
tp1533
assg1502
(dp1534
g308
(lp1535
(g1454
g1428
tp1536
assg1400
(dp1537
g308
(lp1538
(g1454
g1409
tp1539
asssg1463
(dp1540
g1480
(dp1541
g308
(lp1542
(g1454
g1429
tp1543
assg1502
(dp1544
g308
(lp1545
(g1454
g1429
tp1546
assg1400
(dp1547
g308
(lp1548
(g1454
g1412
tp1549
asssg1480
(dp1550
g1400
(dp1551
g308
(lp1552
(g1487
g1411
tp1553
asssg1502
(dp1554
g1400
(dp1555
g308
(lp1556
(g1487
g1410
tp1557
assssg350
g1521
sg351
(dp1558
g1400
(dp1559
g1436
g1537
sg1480
g1551
sg1463
g1547
sg1502
g1555
ssg1419
(dp1560
sg1436
(dp1561
g1419
g1524
ssg1463
(dp1562
g1419
g1527
ssg1480
(dp1563
g1436
g1531
sg1463
g1541
ssg1502
(dp1564
g1436
g1534
sg1463
g1544
sssg359
g1521
sbsg43
g1415
sg46
g1067
sg56
g1415
sg57
g360
((lp1565
(lp1566
g363
ag360
((lp1567
(lp1568
g366
ag363
aa(lp1569
g368
ag369
aa(lp1570
g371
ag372
aa(lp1571
g374
ag375
aa(lp1572
g377
ag378
aa(lp1573
g380
ag381
aa(lp1574
g383
ag384
aa(lp1575
g386
ag387
aatp1576
Rp1577
aa(lp1578
g391
ag360
((lp1579
(lp1580
g366
ag391
aa(lp1581
g395
ag396
aa(lp1582
g398
ag399
aa(lp1583
g401
ag402
aa(lp1584
g404
ag405
aa(lp1585
g407
ag408
aa(lp1586
g410
ag411
aa(lp1587
g413
ag414
aa(lp1588
g416
ag417
aa(lp1589
g419
ag420
aa(lp1590
g422
ag423
aa(lp1591
g425
ag426
aa(lp1592
g428
ag429
aa(lp1593
g431
ag432
aa(lp1594
g434
ag435
aa(lp1595
g437
ag438
aa(lp1596
g440
ag441
aa(lp1597
g443
ag444
aa(lp1598
g446
ag447
aatp1599
Rp1600
aa(lp1601
g451
ag360
((lp1602
(lp1603
g366
ag451
aa(lp1604
g455
ag456
aatp1605
Rp1606
aatp1607
Rp1608
sg61
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g18
g7
Ntp1619
Rp1620
(dp1621
g22
(dp1622
sg24
g5
(g1439
g7
Ntp1623
Rp1624
(dp1625
g1443
(lp1626
g1429
ag1428
ag1487
ag1488
asg29
g30
(g1446
tp1627
Rp1628
(dp1629
g143
I00
sg1487
S'snr_a.png'
p1630
sg1429
g118
sg1488
S'red_to_blue'
p1631
sg1450
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1632
sg1428
g118
sg35
g36
sbsg1452
(dp1633
g1487
Nssg1455
(lp1634
g1487
asg1457
Nsbsg42
Nsg43
g1516
sg44
(dp1635
sg46
S'montage_snr_0'
p1636
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1516
sg57
Nsg58
(lp1637
sg60
Nsg61
Nsb(dp1638
sg5
(g18
g7
Ntp1639
Rp1640
(dp1641
g22
(dp1642
sg24
g5
(g25
g7
Ntp1643
Rp1644
(dp1645
g29
g30
(g31
tp1646
Rp1647
(dp1648
g35
g36
sg1409
g118
sg1410
g118
sg1411
g118
sg1412
g118
sbsg39
(lp1649
g1410
ag1411
ag1409
ag1412
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp1650
sg46
g1636
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp1651
sg60
Nsg61
Nsb(dp1652
sg5
(g18
g7
Ntp1653
Rp1654
(dp1655
g22
(dp1656
sg24
g5
(g1439
g7
Ntp1657
Rp1658
(dp1659
g1443
(lp1660
g1429
ag1428
ag1487
ag1488
asg29
g30
(g1446
tp1661
Rp1662
(dp1663
g143
I00
sg1487
S'snr_s.png'
p1664
sg1429
g118
sg1488
g1631
sg1450
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1665
sg1428
g118
sg35
g36
sbsg1452
(dp1666
g1487
Nssg1455
(lp1667
g1487
asg1457
Nsbsg42
Nsg43
g1497
sg44
(dp1668
sg46
g1636
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1497
sg57
Nsg58
(lp1669
sg60
Nsg61
Nsb(dp1670
sg5
(g18
g7
Ntp1671
Rp1672
(dp1673
g22
(dp1674
sg24
g5
(g1439
g7
Ntp1675
Rp1676
(dp1677
g1443
(lp1678
g1445
asg29
g30
(g1446
tp1679
Rp1680
(dp1681
g143
I00
sg1450
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1682
sg1445
g118
sg35
g36
sbsg1452
(dp1683
g1454
Nssg1455
(lp1684
g1454
asg1457
Nsbsg42
Nsg43
g1458
sg44
(dp1685
sg46
g1636
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1458
sg57
Nsg58
(lp1686
sg60
Nsg61
Nsb(dp1687
sg5
(g18
g7
Ntp1688
Rp1689
(dp1690
g22
(dp1691
sg24
g5
(g25
g7
Ntp1692
Rp1693
(dp1694
g29
g30
(g31
tp1695
Rp1696
(dp1697
g35
g36
sg1428
g118
sg1429
g118
sbsg39
(lp1698
g1428
ag1429
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp1699
sg46
g1636
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp1700
sg60
Nsg61
Nsb(dp1701
sg5
(g18
g7
Ntp1702
Rp1703
(dp1704
g22
(dp1705
sg24
g5
(g1439
g7
Ntp1706
Rp1707
(dp1708
g1443
(lp1709
g1445
asg29
g30
(g1446
tp1710
Rp1711
(dp1712
g143
I00
sg1450
g1682
sg1445
g118
sg35
g36
sbsg1452
(dp1713
g1454
Nssg1455
(lp1714
g1454
asg1457
Nsbsg42
Nsg49
I00
sg44
(dp1715
sg51
Nsg48
Nsg60
Nsg43
g1476
sg46
g1636
sg50
I00
sg52
Nsg55
I00
sg56
g1476
sg57
Nsg58
(lp1716
sg61
Nsb(dp1717
ssg302
(dp1718
sg304
(dp1719
g1620
(dp1720
g1640
(dp1721
g308
(lp1722
(g1487
g1410
tp1723
asssg1640
(dp1724
sg1654
(dp1725
g1640
(dp1726
g308
(lp1727
(g1487
g1411
tp1728
asssg1672
(dp1729
g1620
(dp1730
g308
(lp1731
(g1454
g1428
tp1732
assg1640
(dp1733
g308
(lp1734
(g1454
g1409
tp1735
assg1654
(dp1736
g308
(lp1737
(g1454
g1428
tp1738
asssg1689
(dp1739
g1672
(dp1740
g308
(lp1741
(g1428
g1445
tp1742
assg1703
(dp1743
g308
(lp1744
(g1429
g1445
tp1745
asssg1703
(dp1746
g1620
(dp1747
g308
(lp1748
(g1454
g1429
tp1749
assg1640
(dp1750
g308
(lp1751
(g1454
g1412
tp1752
assg1654
(dp1753
g308
(lp1754
(g1454
g1429
tp1755
assssg350
g1719
sg351
(dp1756
g1620
(dp1757
g1672
g1730
sg1703
g1747
ssg1640
(dp1758
g1672
g1733
sg1654
g1726
sg1703
g1750
sg1620
g1721
ssg1654
(dp1759
g1672
g1736
sg1703
g1753
ssg1672
(dp1760
g1689
g1740
ssg1689
(dp1761
sg1703
(dp1762
g1689
g1743
sssg359
g1719
sbsg43
g1636
sg46
g1067
sg56
g1636
sg57
g360
((lp1763
(lp1764
g363
ag360
((lp1765
(lp1766
g366
ag363
aa(lp1767
g368
ag369
aa(lp1768
g371
ag372
aa(lp1769
g374
ag375
aa(lp1770
g377
ag378
aa(lp1771
g380
ag381
aa(lp1772
g383
ag384
aa(lp1773
g386
ag387
aatp1774
Rp1775
aa(lp1776
g391
ag360
((lp1777
(lp1778
g366
ag391
aa(lp1779
g395
ag396
aa(lp1780
g398
ag399
aa(lp1781
g401
ag402
aa(lp1782
g404
ag405
aa(lp1783
g407
ag408
aa(lp1784
g410
ag411
aa(lp1785
g413
ag414
aa(lp1786
g416
ag417
aa(lp1787
g419
ag420
aa(lp1788
g422
ag423
aa(lp1789
g425
ag426
aa(lp1790
g428
ag429
aa(lp1791
g431
ag432
aa(lp1792
g434
ag435
aa(lp1793
g437
ag438
aa(lp1794
g440
ag441
aa(lp1795
g443
ag444
aa(lp1796
g446
ag447
aatp1797
Rp1798
aa(lp1799
g451
ag360
((lp1800
(lp1801
g366
ag451
aa(lp1802
g455
ag456
aatp1803
Rp1804
aatp1805
Rp1806
sg61
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g18
g7
Ntp1810
Rp1811
(dp1812
g22
(dp1813
sg24
g5
(g1145
g7
Ntp1814
Rp1815
(dp1816
g29
g30
(g1149
tp1817
Rp1818
(dp1819
g143
I00
sg1153
g118
sg162
g118
sg1154
g118
sg146
g118
sg216
g118
sg147
g118
sg190
g118
sg1155
g118
sg1156
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg149
g150
sg151
g5
(g152
g153
(dp1821
g155
g156
stp1822
Rp1823
(dp1824
g160
S'environ_items'
p1825
sg43
g151
sbsg1162
g118
sg1163
g118
sg163
g156
sg1164
g118
sg1165
g118
sg35
g36
sg1166
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'mean_func_fsl_warp_0'
p1826
sg44
(dp1827
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1826
sg57
Nsg58
(lp1828
sg60
Nsg61
Nsbg146
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g18
g7
Ntp1831
Rp1832
(dp1833
g22
(dp1834
sg24
g5
(g1439
g7
Ntp1835
Rp1836
(dp1837
g1443
(lp1838
S'motion_parameters'
p1839
asg29
g30
(g1446
tp1840
Rp1841
(dp1842
g143
I00
sg1450
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g118
sg35
g36
sbsg1452
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1455
(lp1847
g1845
ag1846
asg1457
Nsbsg42
Nsg43
S'motion_plt_0'
p1848
sg44
(dp1849
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1848
sg57
Nsg58
(lp1850
sg60
Nsg61
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g18
g7
Ntp1853
Rp1854
(dp1855
g22
(dp1856
sg24
g5
(g1439
g7
Ntp1857
Rp1858
(dp1859
g1443
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg29
g30
(g1446
tp1864
Rp1865
(dp1866
g143
I00
sg35
g36
sg1861
g118
sg1450
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g118
sbsg1452
(dp1869
S'hist_path'
p1870
Nssg1455
(lp1871
g1870
asg1457
Nsbsg42
Nsg43
S'fd_plot_0'
p1872
sg44
(dp1873
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1872
sg57
Nsg58
(lp1874
sg60
Nsg61
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g18
g7
Ntp1884
Rp1885
(dp1886
g22
(dp1887
sg24
g5
(g1439
g7
Ntp1888
Rp1889
(dp1890
g1443
(lp1891
g162
asg29
g30
(g1446
tp1892
Rp1893
(dp1894
g143
I00
sg35
g36
sg1450
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p1895
sg162
g118
sbsg1452
(dp1896
g146
Nssg1455
(lp1897
g146
asg1457
Nsbsg42
Nsg43
S'calculate_FDJ'
p1898
sg44
(dp1899
sg46
S'gen_motion_stats_0'
p1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1898
sg57
Nsg58
(lp1901
sg60
Nsg61
Nsb(dp1902
sg5
(g18
g7
Ntp1903
Rp1904
(dp1905
g22
(dp1906
sg24
g5
(g1439
g7
Ntp1907
Rp1908
(dp1909
g1443
(lp1910
S'subject_id'
p1911
aS'scan_id'
p1912
aS'FD_1D'
p1913
aS'FDJ_1D'
p1914
ag124
aS'DVARS'
p1915
asg29
g30
(g1446
tp1916
Rp1917
(dp1918
g143
I00
sg35
g36
sg1912
g118
sg1911
g118
sg1915
g118
sg1450
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1919
sg1914
g118
sg1913
g118
sg124
g118
sbsg1452
(dp1920
g146
Nssg1455
(lp1921
g146
asg1457
Nsbsg42
Nsg43
S'calc_power_parameters'
p1922
sg44
(dp1923
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1922
sg57
Nsg58
(lp1924
sg60
Nsg61
Nsb(dp1925
sg5
(g18
g7
Ntp1926
Rp1927
(dp1928
g22
(dp1929
sg24
g5
(g25
g7
Ntp1930
Rp1931
(dp1932
g29
g30
(g31
tp1933
Rp1934
(dp1935
g35
g36
sS'frames_ex_1D'
p1936
g118
sg1914
g118
sg1913
g118
sS'frames_in_1D'
p1937
g118
sS'motion_params'
p1938
g118
sS'power_params'
p1939
g118
sbsg39
(lp1940
g1913
ag1914
ag1936
ag1937
ag1939
ag1938
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp1941
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp1942
sg60
Nsg61
Nsb(dp1943
sg5
(g18
g7
Ntp1944
Rp1945
(dp1946
g22
(dp1947
sg24
g5
(g1439
g7
Ntp1948
Rp1949
(dp1950
g1443
(lp1951
S'rest'
p1952
aS'mask'
p1953
asg29
g30
(g1446
tp1954
Rp1955
(dp1956
g143
I00
sg1953
g118
sg35
g36
sg1450
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p1957
sg1952
g118
sbsg1452
(dp1958
g146
Nssg1455
(lp1959
g146
asg1457
Nsbsg42
Nsg43
S'cal_DVARS'
p1960
sg44
(dp1961
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1960
sg57
Nsg58
(lp1962
sg60
Nsg61
Nsb(dp1963
sg5
(g18
g7
Ntp1964
Rp1965
(dp1966
g22
(dp1967
sg24
g5
(g1439
g7
Ntp1968
Rp1969
(dp1970
g1443
(lp1971
g162
ag124
aS'frames_before'
p1972
aS'frames_after'
p1973
asg29
g30
(g1446
tp1974
Rp1975
(dp1976
g143
I00
sg1973
g118
sg1450
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1977
sg162
g118
sg124
g118
sg35
g36
sg1972
g118
sbsg1452
(dp1978
g146
Nssg1455
(lp1979
g146
asg1457
Nsbsg42
Nsg43
S'exclude_frames'
p1980
sg44
(dp1981
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1980
sg57
Nsg58
(lp1982
sg60
Nsg61
Nsb(dp1983
sg5
(g18
g7
Ntp1984
Rp1985
(dp1986
g22
(dp1987
sg24
g5
(g25
g7
Ntp1988
Rp1989
(dp1990
g29
g30
(g31
tp1991
Rp1992
(dp1993
S'max_displacement'
p1994
g118
sg35
g36
sg1912
g118
sg1911
g118
sg1953
g118
sS'movement_parameters'
p1995
g118
sS'oned_matrix_save'
p1996
g118
sS'motion_correct'
p1997
g118
sbsg39
(lp1998
g1911
ag1912
ag1995
ag1994
ag1997
ag1953
ag1996
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp1999
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp2000
sg60
Nsg61
Nsb(dp2001
sg5
(g18
g7
Ntp2002
Rp2003
(dp2004
g22
(dp2005
sg24
g5
(g1439
g7
Ntp2006
Rp2007
(dp2008
g1443
(lp2009
g162
ag124
aS'exclude_list'
p2010
asg29
g30
(g1446
tp2011
Rp2012
(dp2013
g143
I00
sg2010
g118
sg1450
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p2014
sg162
g118
sg124
g118
sg35
g36
sbsg1452
(dp2015
g146
Nssg1455
(lp2016
g146
asg1457
Nsbsg42
Nsg43
S'include_frames'
p2017
sg44
(dp2018
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2017
sg57
Nsg58
(lp2019
sg60
Nsg61
Nsb(dp2020
sg5
(g18
g7
Ntp2021
Rp2022
(dp2023
g22
(dp2024
sg24
g5
(g1439
g7
Ntp2025
Rp2026
(dp2027
g1443
(lp2028
g162
asg29
g30
(g1446
tp2029
Rp2030
(dp2031
g143
I00
sg35
g36
sg1450
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p2032
sg162
g118
sbsg1452
(dp2033
g146
Nssg1455
(lp2034
g146
asg1457
Nsbsg42
Nsg43
S'calculate_FD'
p2035
sg44
(dp2036
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2035
sg57
Nsg58
(lp2037
sg60
Nsg61
Nsb(dp2038
sg5
(g18
g7
Ntp2039
Rp2040
(dp2041
g22
(dp2042
sg24
g5
(g25
g7
Ntp2043
Rp2044
(dp2045
g29
g30
(g31
tp2046
Rp2047
(dp2048
g124
(lp2049
F0.2
asg35
g36
sS'remove_frames_before'
p2050
I1
sS'remove_frames_after'
p2051
I2
sbsg39
(lp2052
g124
ag2050
ag2051
asg41
I01
sbsg42
Nsg43
S'scrubbing_input'
p2053
sg44
(dp2054
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
(g124
(lp2055
F0.2
atp2056
sg55
I00
sg56
g2053
sg57
Nsg58
(lp2057
sg60
Nsg61
Nsb(dp2058
sg5
(g18
g7
Ntp2059
Rp2060
(dp2061
g22
(dp2062
sg24
g5
(g1439
g7
Ntp2063
Rp2064
(dp2065
g1443
(lp2066
g1911
ag1912
ag1995
ag1994
asg29
g30
(g1446
tp2067
Rp2068
(dp2069
g143
I00
sg1994
g118
sg1912
g118
sg1911
g118
sg1450
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p2070
sg1995
g118
sg35
g36
sbsg1452
(dp2071
g146
Nssg1455
(lp2072
g146
asg1457
Nsbsg42
Nsg43
S'calc_motion_parameters'
p2073
sg44
(dp2074
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2073
sg57
Nsg58
(lp2075
sg60
Nsg61
Nsb(dp2076
ssg302
(dp2077
sg304
(dp2078
g1885
(dp2079
g1927
(dp2080
g308
(lp2081
(g146
g1914
tp2082
assg1904
(dp2083
g308
(lp2084
(g146
g1914
tp2085
asssg1904
(dp2086
g1927
(dp2087
g308
(lp2088
(g146
g1939
tp2089
asssg1927
(dp2090
sg1945
(dp2091
g1904
(dp2092
g308
(lp2093
(g146
g1915
tp2094
asssg1965
(dp2095
g1927
(dp2096
g308
(lp2097
(g146
g1936
tp2098
assg2003
(dp2099
g308
(lp2100
(g146
g2010
tp2101
asssg1985
(dp2102
g1904
(dp2103
g308
(lp2104
(g1911
g1911
tp2105
a(g1912
g1912
tp2106
assg2022
(dp2107
g308
(lp2108
(g1995
g162
tp2109
assg2060
(dp2110
g308
(lp2111
(g1911
g1911
tp2112
a(g1912
g1912
tp2113
a(g1995
g1995
tp2114
a(g1994
g1994
tp2115
assg1945
(dp2116
g308
(lp2117
(g1997
g1952
tp2118
a(g1953
g1953
tp2119
assg1885
(dp2120
g308
(lp2121
(g1996
g162
tp2122
asssg2003
(dp2123
g1927
(dp2124
g308
(lp2125
(g146
g1937
tp2126
asssg2022
(dp2127
g1904
(dp2128
g308
(lp2129
(g146
g1913
tp2130
assg1927
(dp2131
g308
(lp2132
(g146
g1913
tp2133
assg2003
(dp2134
g308
(lp2135
(g146
g162
tp2136
assg1965
(dp2137
g308
(lp2138
(g146
g162
tp2139
asssg2040
(dp2140
g1965
(dp2141
g308
(lp2142
(g124
g124
tp2143
a(g2050
g1972
tp2144
a(g2051
g1973
tp2145
assg1904
(dp2146
g308
(lp2147
(g124
g124
tp2148
assg2003
(dp2149
g308
(lp2150
(g124
g124
tp2151
asssg2060
(dp2152
g1927
(dp2153
g308
(lp2154
(g146
g1938
tp2155
assssg350
g2078
sg351
(dp2156
g1885
(dp2157
g1985
g2120
ssg1904
(dp2158
g2022
g2128
sg1885
g2083
sg2040
g2146
sg1985
g2103
sg1945
g2092
ssg1927
(dp2159
g1904
g2087
sg1965
g2096
sg2060
g2153
sg2003
g2124
sg2022
g2131
sg1885
g2080
ssg1945
(dp2160
g1985
g2116
ssg1965
(dp2161
g2022
g2137
sg2040
g2141
ssg1985
(dp2162
sg2003
(dp2163
g2022
g2134
sg2040
g2149
sg1965
g2099
ssg2022
(dp2164
g1985
g2107
ssg2040
(dp2165
sg2060
(dp2166
g1985
g2110
sssg359
g2078
sbsg43
g1900
sg46
g1067
sg56
g1900
sg57
g360
((lp2167
(lp2168
g363
ag360
((lp2169
(lp2170
g366
ag363
aa(lp2171
g368
ag369
aa(lp2172
g371
ag372
aa(lp2173
g374
ag375
aa(lp2174
g377
ag378
aa(lp2175
g380
ag381
aa(lp2176
g383
ag384
aa(lp2177
g386
ag387
aatp2178
Rp2179
aa(lp2180
g391
ag360
((lp2181
(lp2182
g366
ag391
aa(lp2183
g395
ag396
aa(lp2184
g398
ag399
aa(lp2185
g401
ag402
aa(lp2186
g404
ag405
aa(lp2187
g407
ag408
aa(lp2188
g410
ag411
aa(lp2189
g413
ag414
aa(lp2190
g416
ag417
aa(lp2191
g419
ag420
aa(lp2192
g422
ag423
aa(lp2193
g425
ag426
aa(lp2194
g428
ag429
aa(lp2195
g431
ag432
aa(lp2196
g434
ag435
aa(lp2197
g437
ag438
aa(lp2198
g440
ag441
aa(lp2199
g443
ag444
aa(lp2200
g446
ag447
aatp2201
Rp2202
aa(lp2203
g451
ag360
((lp2204
(lp2205
g366
ag451
aa(lp2206
g455
ag456
aatp2207
Rp2208
aatp2209
Rp2210
sg61
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g18
g7
Ntp2224
Rp2225
(dp2226
g22
(dp2227
sg24
g5
(cnipype.interfaces.afni.preprocess
Refit
p2228
g7
Ntp2229
Rp2230
(dp2231
g29
g30
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2232
tp2233
Rp2234
(dp2235
g143
I00
sg35
g36
sS'deoblique'
p2236
I01
sg147
g118
sS'yorigin'
p2237
g118
sg149
g150
sg151
g5
(g152
g153
(dp2238
tp2239
Rp2240
(dp2241
g160
S'environ_items'
p2242
sg43
g151
sbsg162
g118
sS'xorigin'
p2243
g118
sS'zorigin'
p2244
g118
sbsg166
Nsg167
g150
sbsg42
Nsg49
I00
sg44
(dp2245
sg51
Nsg48
Nsg60
Nsg43
S'anat_deoblique'
p2246
sg46
S'anat_preproc_0'
p2247
sg50
I00
sg52
Nsg55
I00
sg56
g2246
sg57
Nsg58
(lp2248
sg61
Nsb(dp2249
sg5
(g18
g7
Ntp2250
Rp2251
(dp2252
g22
(dp2253
sg24
g5
(cnipype.interfaces.afni.preprocess
Calc
p2254
g7
Ntp2255
Rp2256
(dp2257
g29
g30
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2258
tp2259
Rp2260
(dp2261
S'stop_idx'
p2262
g118
sg143
I00
sg35
g36
sg146
g118
sS'expr'
p2263
S'a*step(b)'
p2264
sg147
g118
sS'outputtype'
p2265
S'NIFTI_GZ'
p2266
sS'in_file_b'
p2267
g118
sS'in_file_c'
p2268
g118
sS'in_file_a'
p2269
g118
sg151
g5
(g152
g153
(dp2270
tp2271
Rp2272
(dp2273
g160
S'environ_items'
p2274
sg43
g151
sbsS'single_idx'
p2275
g118
sS'other'
p2276
g118
sS'start_idx'
p2277
g118
sg149
g150
sbsS'_outputtype'
p2278
g2266
sg166
Nsg167
g150
sbsg42
Nsg49
I00
sg44
(dp2279
sg51
Nsg48
Nsg60
Nsg43
S'anat_brain_only'
p2280
sg46
g2247
sg50
I00
sg52
Nsg55
I00
sg56
g2280
sg57
Nsg58
(lp2281
sg61
Nsb(dp2282
sg5
(g18
g7
Ntp2283
Rp2284
(dp2285
g22
(dp2286
sg24
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2287
g7
Ntp2288
Rp2289
(dp2290
g29
g30
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2291
tp2292
Rp2293
(dp2294
g143
I00
sg35
g36
sg146
g118
sg147
g118
sg2265
S'AFNI'
p2295
sg149
g150
sg151
g5
(g152
g153
(dp2296
tp2297
Rp2298
(dp2299
g160
S'environ_items'
p2300
sg43
g151
sbsg162
g118
sbsg2278
g2295
sg166
Nsg167
g150
sbsg42
Nsg49
I00
sg44
(dp2301
sg51
Nsg48
Nsg60
Nsg43
S'anat_skullstrip'
p2302
sg46
g2247
sg50
I00
sg52
Nsg55
I00
sg56
g2302
sg57
Nsg58
(lp2303
sg61
Nsb(dp2304
sg5
(g18
g7
Ntp2305
Rp2306
(dp2307
g22
(dp2308
sg24
g5
(g25
g7
Ntp2309
Rp2310
(dp2311
g29
g30
(g31
tp2312
Rp2313
(dp2314
g35
g36
sS'anat'
p2315
g118
sbsg39
(lp2316
g2315
asg41
I01
sbsg42
Nsg49
I00
sg44
(dp2317
sg51
Nsg48
Nsg60
Nsg43
g126
sg46
g2247
sg50
I00
sg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp2318
sg61
Nsb(dp2319
sg5
(g18
g7
Ntp2320
Rp2321
(dp2322
g22
(dp2323
sg24
g5
(cnipype.interfaces.afni.preprocess
Resample
p2324
g7
Ntp2325
Rp2326
(dp2327
g29
g30
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2328
tp2329
Rp2330
(dp2331
g143
I00
sg35
g36
sg146
g118
sg147
g118
sg2265
g2266
sS'resample_mode'
p2332
g118
sS'voxel_size'
p2333
g118
sg149
g150
sS'master'
p2334
g118
sg162
g118
sg151
g5
(g152
g153
(dp2335
tp2336
Rp2337
(dp2338
g160
S'environ_items'
p2339
sg43
g151
sbsS'orientation'
p2340
S'RPI'
p2341
sbsg2278
g2266
sg166
Nsg167
g150
sbsg42
Nsg49
I00
sg44
(dp2342
sg51
Nsg48
Nsg60
Nsg43
S'anat_reorient'
p2343
sg46
g2247
sg50
I00
sg52
Nsg55
I00
sg56
g2343
sg57
Nsg58
(lp2344
sg61
Nsb(dp2345
sg5
(g18
g7
Ntp2346
Rp2347
(dp2348
g22
(dp2349
sg24
g5
(g25
g7
Ntp2350
Rp2351
(dp2352
g29
g30
(g31
tp2353
Rp2354
(dp2355
S'reorient'
p2356
g118
sg122
g118
sS'refit'
p2357
g118
sg35
g36
sS'skullstrip'
p2358
g118
sbsg39
(lp2359
g2357
ag2356
ag2358
ag122
asg41
I01
sbsg42
Nsg49
I00
sg44
(dp2360
sg51
Nsg48
Nsg60
Nsg43
g279
sg46
g2247
sg50
I00
sg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp2361
sg61
Nsb(dp2362
ssg304
(dp2363
g2225
(dp2364
g2321
(dp2365
g308
(lp2366
(g146
g162
tp2367
assg2347
(dp2368
g308
(lp2369
(g146
g2357
tp2370
asssg2251
(dp2371
g2347
(dp2372
g308
(lp2373
(g146
g122
tp2374
asssg2284
(dp2375
g2251
(dp2376
g308
(lp2377
(g146
g2267
tp2378
assg2347
(dp2379
g308
(lp2380
(g146
g2358
tp2381
asssg2306
(dp2382
g2225
(dp2383
g308
(lp2384
(g2315
g162
tp2385
asssg2321
(dp2386
g2251
(dp2387
g308
(lp2388
(g146
g2269
tp2389
assg2347
(dp2390
g308
(lp2391
(g146
g2356
tp2392
assg2284
(dp2393
g308
(lp2394
(g146
g162
tp2395
asssg2347
(dp2396
ssg350
g2363
sg351
(dp2397
g2225
(dp2398
g2306
g2383
ssg2251
(dp2399
g2321
g2387
sg2284
g2376
ssg2284
(dp2400
g2321
g2393
ssg2306
(dp2401
sg2321
(dp2402
g2225
g2365
ssg2347
(dp2403
g2251
g2372
sg2284
g2379
sg2225
g2368
sg2321
g2390
sssg302
(dp2404
sg359
g2363
sbsg43
g2247
sg46
g1067
sg56
g2247
sg57
g360
((lp2405
(lp2406
g363
ag360
((lp2407
(lp2408
g366
ag363
aa(lp2409
g368
ag369
aa(lp2410
g371
ag372
aa(lp2411
g374
ag375
aa(lp2412
g377
ag378
aa(lp2413
g380
ag381
aa(lp2414
g383
ag384
aa(lp2415
g386
ag387
aatp2416
Rp2417
aa(lp2418
g391
ag360
((lp2419
(lp2420
g366
ag391
aa(lp2421
g395
ag396
aa(lp2422
g398
ag399
aa(lp2423
g401
ag402
aa(lp2424
g404
ag405
aa(lp2425
g407
ag408
aa(lp2426
g410
ag411
aa(lp2427
g413
ag414
aa(lp2428
g416
ag417
aa(lp2429
g419
ag420
aa(lp2430
g422
ag423
aa(lp2431
g425
ag426
aa(lp2432
g428
ag429
aa(lp2433
g431
ag432
aa(lp2434
g434
ag435
aa(lp2435
g437
ag438
aa(lp2436
g440
ag441
aa(lp2437
g443
ag444
aa(lp2438
g446
ag447
aatp2439
Rp2440
aa(lp2441
g451
ag360
((lp2442
(lp2443
g366
ag451
aa(lp2444
g455
ag456
aatp2445
Rp2446
aatp2447
Rp2448
sg61
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g18
g7
Ntp2459
Rp2460
(dp2461
g22
(dp2462
sg24
g5
(g135
g7
Ntp2463
Rp2464
(dp2465
g29
g30
(g139
tp2466
Rp2467
(dp2468
g143
I00
sg35
g36
sg144
S'-ing 10000'
p2469
sg145
S'float'
p2470
sg146
g118
sg147
g118
sg148
g118
sg149
g150
sg151
g5
(g152
g153
(dp2471
g155
g156
stp2472
Rp2473
(dp2474
g160
S'environ_items'
p2475
sg43
g151
sbsg162
g118
sg163
g156
sg164
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'func_normalize'
p2476
sg44
(dp2477
sg46
S'func_preproc_automask_0'
p2478
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2476
sg57
Nsg58
(lp2479
sg60
Nsg61
Nsb(dp2480
sg5
(g18
g7
Ntp2481
Rp2482
(dp2483
g22
(dp2484
sg24
g5
(g2228
g7
Ntp2485
Rp2486
(dp2487
g29
g30
(g2232
tp2488
Rp2489
(dp2490
g143
I00
sg35
g36
sg2236
I01
sg147
g118
sg2237
g118
sg149
g150
sg151
g5
(g152
g153
(dp2491
tp2492
Rp2493
(dp2494
g160
S'environ_items'
p2495
sg43
g151
sbsg162
g118
sg2243
g118
sg2244
g118
sbsg166
Nsg167
g150
sbsg42
Nsg43
S'func_deoblique'
p2496
sg44
(dp2497
sg46
g2478
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2496
sg57
Nsg58
(lp2498
sg60
Nsg61
Nsb(dp2499
sg5
(g18
g7
Ntp2500
Rp2501
(dp2502
g22
(dp2503
sg24
g5
(cnipype.interfaces.afni.preprocess
Automask
p2504
g7
Ntp2505
Rp2506
(dp2507
g29
g30
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2508
tp2509
Rp2510
(dp2511
g143
I00
sg35
g36
sg147
g118
sS'erode'
p2512
g118
sg146
g118
sS'dilate'
p2513
g118
sS'clfrac'
p2514
g118
sg2265
g2266
sS'brain_file'
p2515
g118
sg149
g150
sg151
g5
(g152
g153
(dp2516
tp2517
Rp2518
(dp2519
g160
S'environ_items'
p2520
sg43
g151
sbsg162
g118
sbsg2278
g2266
sg166
Nsg167
g150
sbsg42
Nsg43
S'func_get_brain_mask'
p2521
sg44
(dp2522
sg46
g2478
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2521
sg57
Nsg58
(lp2523
sg60
Nsg61
Nsb(dp2524
sg5
(g18
g7
Ntp2525
Rp2526
(dp2527
g22
(dp2528
sg24
g5
(cnipype.interfaces.afni.preprocess
TStat
p2529
g7
Ntp2530
Rp2531
(dp2532
g29
g30
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2533
tp2534
Rp2535
(dp2536
g143
I00
sg35
g36
sg146
g118
sg147
g118
sg1953
g118
sg2265
g2266
sg149
g150
sg151
g5
(g152
g153
(dp2537
tp2538
Rp2539
(dp2540
g160
S'environ_items'
p2541
sg43
g151
sbsg162
g118
sS'options'
p2542
S'-mean'
p2543
sbsg2278
g2266
sg166
Nsg167
g150
sbsg42
Nsg43
S'func_mean_skullstrip'
p2544
sg44
(dp2545
sg46
g2478
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2544
sg57
Nsg58
(lp2546
sg60
Nsg61
Nsb(dp2547
sg5
(g18
g7
Ntp2548
Rp2549
(dp2550
g22
(dp2551
sg24
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2552
g7
Ntp2553
Rp2554
(dp2555
g29
g30
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2556
tp2557
Rp2558
(dp2559
S'oned_file'
p2560
g118
sg143
I00
sg186
g118
sS'timeshift'
p2561
g118
sS'basefile'
p2562
g118
sg147
S'-Fourier -twopass'
p2563
sg2265
g2266
sS'zpad'
p2564
I4
sg149
g150
sS'md1d_file'
p2565
g118
sg162
g118
sS'copyorigin'
p2566
g118
sg151
g5
(g152
g153
(dp2567
tp2568
Rp2569
(dp2570
g160
S'environ_items'
p2571
sg43
g151
sbsg1996
g118
sg35
g36
sg146
g118
sbsg2278
g2266
sg166
Nsg167
g150
sbsg42
Nsg43
S'func_motion_correct'
p2572
sg44
(dp2573
sg46
g2478
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2572
sg57
Nsg58
(lp2574
sg60
Nsg61
Nsb(dp2575
sg5
(g18
g7
Ntp2576
Rp2577
(dp2578
g22
(dp2579
sg24
g5
(g25
g7
Ntp2580
Rp2581
(dp2582
g29
g30
(g31
tp2583
Rp2584
(dp2585
g35
g36
sS'func'
p2586
g118
sbsg39
(lp2587
g2586
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp2588
sg46
g2478
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp2589
sg60
Nsg61
Nsb(dp2590
sg5
(g18
g7
Ntp2591
Rp2592
(dp2593
g22
(dp2594
sg24
g5
(g2529
g7
Ntp2595
Rp2596
(dp2597
g29
g30
(g2533
tp2598
Rp2599
(dp2600
g143
I00
sg35
g36
sg146
g118
sg147
g118
sg1953
g118
sg2265
g2266
sg149
g150
sg151
g5
(g152
g153
(dp2601
tp2602
Rp2603
(dp2604
g160
S'environ_items'
p2605
sg43
g151
sbsg162
g118
sg2542
g2543
sbsg2278
g2266
sg166
Nsg167
g150
sbsg42
Nsg49
I00
sg44
(dp2606
sg51
Nsg48
Nsg60
Nsg43
S'func_get_mean_motion'
p2607
sg46
g2478
sg50
I00
sg52
Nsg55
I00
sg56
g2607
sg57
Nsg58
(lp2608
sg61
Nsb(dp2609
sg5
(g18
g7
Ntp2610
Rp2611
(dp2612
g22
(dp2613
sg24
g5
(g2254
g7
Ntp2614
Rp2615
(dp2616
g29
g30
(g2258
tp2617
Rp2618
(dp2619
g2262
g118
sg143
I00
sg35
g36
sg146
g118
sg2263
S'a*b'
p2620
sg147
g118
sg2265
g2266
sg2267
g118
sg2268
g118
sg2269
g118
sg151
g5
(g152
g153
(dp2621
tp2622
Rp2623
(dp2624
g160
S'environ_items'
p2625
sg43
g151
sbsg2275
g118
sg2276
g118
sg2277
g118
sg149
g150
sbsg2278
g2266
sg166
Nsg167
g150
sbsg42
Nsg43
S'func_edge_detect'
p2626
sg44
(dp2627
sg46
g2478
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2626
sg57
Nsg58
(lp2628
sg60
Nsg61
Nsb(dp2629
sg5
(g18
g7
Ntp2630
Rp2631
(dp2632
g22
(dp2633
sg24
g5
(g2529
g7
Ntp2634
Rp2635
(dp2636
g29
g30
(g2533
tp2637
Rp2638
(dp2639
g143
I00
sg35
g36
sg146
g118
sg147
g118
sg1953
g118
sg2265
g2266
sg149
g150
sg151
g5
(g152
g153
(dp2640
tp2641
Rp2642
(dp2643
g160
S'environ_items'
p2644
sg43
g151
sbsg162
g118
sg2542
g2543
sbsg2278
g2266
sg166
Nsg167
g150
sbsg42
Nsg43
S'func_get_mean_RPI'
p2645
sg44
(dp2646
sg46
g2478
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2645
sg57
Nsg58
(lp2647
sg60
Nsg61
Nsb(dp2648
sg5
(g18
g7
Ntp2649
Rp2650
(dp2651
g22
(dp2652
sg24
g5
(g25
g7
Ntp2653
Rp2654
(dp2655
g29
g30
(g31
tp2656
Rp2657
(dp2658
g1994
g118
sS'motion_correct_ref'
p2659
g118
sg35
g36
sS'preprocessed_mask'
p2660
g118
sg1953
g118
sg2357
g118
sg2358
g118
sg2356
g118
sS'preprocessed'
p2661
g118
sS'slice_time_corrected'
p2662
g118
sg1995
g118
sS'example_func'
p2663
g118
sg1996
g118
sS'reorient_mean'
p2664
g118
sg1997
g118
sbsg39
(lp2665
g2357
ag2356
ag2664
ag1997
ag2659
ag1995
ag1994
ag1953
ag2358
ag2663
ag2661
ag2660
ag2662
ag1996
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp2666
sg46
g2478
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp2667
sg60
Nsg61
Nsb(dp2668
sg5
(g18
g7
Ntp2669
Rp2670
(dp2671
g22
(dp2672
sg24
g5
(g2324
g7
Ntp2673
Rp2674
(dp2675
g29
g30
(g2328
tp2676
Rp2677
(dp2678
g143
I00
sg35
g36
sg146
g118
sg147
g118
sg2265
g2266
sg2332
g118
sg2333
g118
sg149
g150
sg2334
g118
sg162
g118
sg151
g5
(g152
g153
(dp2679
tp2680
Rp2681
(dp2682
g160
S'environ_items'
p2683
sg43
g151
sbsg2340
g2341
sbsg2278
g2266
sg166
Nsg167
g150
sbsg42
Nsg43
S'func_reorient'
p2684
sg44
(dp2685
sg46
g2478
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2684
sg57
Nsg58
(lp2686
sg60
Nsg61
Nsb(dp2687
sg5
(g18
g7
Ntp2688
Rp2689
(dp2690
g22
(dp2691
sg24
g5
(g135
g7
Ntp2692
Rp2693
(dp2694
g29
g30
(g139
tp2695
Rp2696
(dp2697
g143
I00
sg35
g36
sg144
S'-Tmin -bin'
p2698
sg145
S'char'
p2699
sg146
g118
sg147
g118
sg148
g118
sg149
g150
sg151
g5
(g152
g153
(dp2700
g155
g156
stp2701
Rp2702
(dp2703
g160
S'environ_items'
p2704
sg43
g151
sbsg162
g118
sg163
g156
sg164
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'func_mask_normalize'
p2705
sg44
(dp2706
sg46
g2478
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2705
sg57
Nsg58
(lp2707
sg60
Nsg61
Nsb(dp2708
sg5
(g18
g7
Ntp2709
Rp2710
(dp2711
g22
(dp2712
sg24
g5
(g2552
g7
Ntp2713
Rp2714
(dp2715
g29
g30
(g2556
tp2716
Rp2717
(dp2718
g2560
g118
sg143
I00
sg186
g118
sg2561
g118
sg2562
g118
sg147
g2563
sg2265
g2266
sg2564
I4
sg149
g150
sg2565
S'max_displacement.1D'
p2719
sg162
g118
sg2566
g118
sg151
g5
(g152
g153
(dp2720
tp2721
Rp2722
(dp2723
g160
S'environ_items'
p2724
sg43
g151
sbsg1996
g118
sg35
g36
sg146
g118
sbsg2278
g2266
sg166
Nsg167
g150
sbsg42
Nsg49
I00
sg44
(dp2725
sg51
Nsg48
Nsg60
Nsg43
S'func_motion_correct_A'
p2726
sg46
g2478
sg50
I00
sg52
Nsg55
I00
sg56
g2726
sg57
Nsg58
(lp2727
sg61
Nsb(dp2728
ssg302
(dp2729
sg304
(dp2730
g2460
(dp2731
g2650
(dp2732
g308
(lp2733
(g146
g2661
tp2734
assg2689
(dp2735
g308
(lp2736
(g146
g162
tp2737
asssg2482
(dp2738
g2670
(dp2739
g308
(lp2740
(g146
g162
tp2741
asssg2501
(dp2742
g2650
(dp2743
g308
(lp2744
(g146
g1953
tp2745
assg2611
(dp2746
g308
(lp2747
(g146
g2267
tp2748
asssg2526
(dp2749
g2650
(dp2750
g308
(lp2751
(g146
g2663
tp2752
asssg2549
(dp2753
g2592
(dp2754
g308
(lp2755
(g146
g162
tp2756
asssg2577
(dp2757
g2482
(dp2758
g308
(lp2759
(g2586
g162
tp2760
asssg2592
(dp2761
g2650
(dp2762
g308
(lp2763
(g146
g2659
tp2764
assg2710
(dp2765
g308
(lp2766
(g146
g2562
tp2767
asssg2611
(dp2768
g2650
(dp2769
g308
(lp2770
(g146
g2358
tp2771
assg2526
(dp2772
g308
(lp2773
(g146
g162
tp2774
assg2460
(dp2775
g308
(lp2776
(g146
g162
tp2777
asssg2631
(dp2778
g2549
(dp2779
g308
(lp2780
(g146
g2562
tp2781
asssg2650
(dp2782
sg2670
(dp2783
g2710
(dp2784
g308
(lp2785
(g146
g162
tp2786
assg2650
(dp2787
g308
(lp2788
(g146
g2356
tp2789
assg2631
(dp2790
g308
(lp2791
(g146
g162
tp2792
assg2549
(dp2793
g308
(lp2794
(g146
g162
tp2795
asssg2689
(dp2796
g2650
(dp2797
g308
(lp2798
(g146
g2660
tp2799
asssg2710
(dp2800
g2650
(dp2801
g308
(lp2802
(g146
g1997
tp2803
a(g2565
g1994
tp2804
a(g2560
g1995
tp2805
a(g1996
g1996
tp2806
assg2611
(dp2807
g308
(lp2808
(g146
g2269
tp2809
assg2501
(dp2810
g308
(lp2811
(g146
g162
tp2812
assssg350
g2730
sg351
(dp2813
g2460
(dp2814
g2611
g2775
ssg2482
(dp2815
g2577
g2758
ssg2501
(dp2816
g2710
g2810
ssg2526
(dp2817
g2611
g2772
ssg2549
(dp2818
g2670
g2793
sg2631
g2779
ssg2577
(dp2819
sg2592
(dp2820
g2549
g2754
ssg2611
(dp2821
g2501
g2746
sg2710
g2807
ssg2631
(dp2822
g2670
g2790
ssg2650
(dp2823
g2460
g2732
sg2501
g2743
sg2611
g2769
sg2526
g2750
sg2592
g2762
sg2670
g2787
sg2689
g2797
sg2710
g2801
ssg2670
(dp2824
g2482
g2739
ssg2689
(dp2825
g2460
g2735
ssg2710
(dp2826
g2670
g2784
sg2592
g2765
sssg359
g2730
sbsg43
g2478
sg46
g1067
sg56
g2478
sg57
g360
((lp2827
(lp2828
g363
ag360
((lp2829
(lp2830
g366
ag363
aa(lp2831
g368
ag369
aa(lp2832
g371
ag372
aa(lp2833
g374
ag375
aa(lp2834
g377
ag378
aa(lp2835
g380
ag381
aa(lp2836
g383
ag384
aa(lp2837
g386
ag387
aatp2838
Rp2839
aa(lp2840
g391
ag360
((lp2841
(lp2842
g366
ag391
aa(lp2843
g395
ag396
aa(lp2844
g398
ag399
aa(lp2845
g401
ag402
aa(lp2846
g404
ag405
aa(lp2847
g407
ag408
aa(lp2848
g410
ag411
aa(lp2849
g413
ag414
aa(lp2850
g416
ag417
aa(lp2851
g419
ag420
aa(lp2852
g422
ag423
aa(lp2853
g425
ag426
aa(lp2854
g428
ag429
aa(lp2855
g431
ag432
aa(lp2856
g434
ag435
aa(lp2857
g437
ag438
aa(lp2858
g440
ag441
aa(lp2859
g443
ag444
aa(lp2860
g446
ag447
aatp2861
Rp2862
aa(lp2863
g451
ag360
((lp2864
(lp2865
g366
ag451
aa(lp2866
g455
ag456
aatp2867
Rp2868
aatp2869
Rp2870
sg61
NsbS'outputspec.example_func'
p2871
tp2872
sg1995
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g18
g7
Ntp2880
Rp2881
(dp2882
g22
(dp2883
sg24
g5
(g1439
g7
Ntp2884
Rp2885
(dp2886
g1443
(lp2887
g162
asg29
g30
(g1446
tp2888
Rp2889
(dp2890
g143
I00
sg35
g36
sg1450
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2891
sg162
g118
sbsg1452
(dp2892
g146
Nssg1455
(lp2893
g146
asg1457
Nsbsg42
Nsg43
S'calc_friston'
p2894
sg44
(dp2895
sg46
S'fristons_parameter_model_0'
p2896
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2894
sg57
Nsg58
(lp2897
sg60
Nsg61
Nsb(dp2898
sg5
(g18
g7
Ntp2899
Rp2900
(dp2901
g22
(dp2902
sg24
g5
(g25
g7
Ntp2903
Rp2904
(dp2905
g29
g30
(g31
tp2906
Rp2907
(dp2908
g35
g36
sS'movement_file'
p2909
g118
sbsg39
(lp2910
g2909
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp2911
sg46
g2896
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp2912
sg60
Nsg61
Nsb(dp2913
sg5
(g18
g7
Ntp2914
Rp2915
(dp2916
g22
(dp2917
sg24
g5
(g25
g7
Ntp2918
Rp2919
(dp2920
g29
g30
(g31
tp2921
Rp2922
(dp2923
g35
g36
sg2909
g118
sbsg39
(lp2924
g2909
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp2925
sg46
g2896
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp2926
sg60
Nsg61
Nsb(dp2927
ssg302
(dp2928
sg304
(dp2929
g2881
(dp2930
g2915
(dp2931
g308
(lp2932
(g146
g2909
tp2933
asssg2900
(dp2934
g2881
(dp2935
g308
(lp2936
(g2909
g162
tp2937
asssg2915
(dp2938
ssg350
g2929
sg351
(dp2939
g2881
(dp2940
g2900
g2935
ssg2900
(dp2941
sg2915
(dp2942
g2881
g2931
sssg359
g2929
sbsg43
g2896
sg46
g1067
sg56
g2896
sg57
g360
((lp2943
(lp2944
g363
ag360
((lp2945
(lp2946
g366
ag363
aa(lp2947
g368
ag369
aa(lp2948
g371
ag372
aa(lp2949
g374
ag375
aa(lp2950
g377
ag378
aa(lp2951
g380
ag381
aa(lp2952
g383
ag384
aa(lp2953
g386
ag387
aatp2954
Rp2955
aa(lp2956
g391
ag360
((lp2957
(lp2958
g366
ag391
aa(lp2959
g395
ag396
aa(lp2960
g398
ag399
aa(lp2961
g401
ag402
aa(lp2962
g404
ag405
aa(lp2963
g407
ag408
aa(lp2964
g410
ag411
aa(lp2965
g413
ag414
aa(lp2966
g416
ag417
aa(lp2967
g419
ag420
aa(lp2968
g422
ag423
aa(lp2969
g425
ag426
aa(lp2970
g428
ag429
aa(lp2971
g431
ag432
aa(lp2972
g434
ag435
aa(lp2973
g437
ag438
aa(lp2974
g440
ag441
aa(lp2975
g443
ag444
aa(lp2976
g446
ag447
aatp2977
Rp2978
aa(lp2979
g451
ag360
((lp2980
(lp2981
g366
ag451
aa(lp2982
g455
ag456
aatp2983
Rp2984
aatp2985
Rp2986
sg61
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g18
g7
Ntp2997
Rp2998
(dp2999
g22
(dp3000
sg24
g5
(g1439
g7
Ntp3001
Rp3002
(dp3003
g1443
(lp3004
g1429
ag1428
ag1487
ag1488
asg29
g30
(g1446
tp3005
Rp3006
(dp3007
g143
I00
sg1487
S't1_edge_on_mean_func_in_t1_a.png'
p3008
sg1429
g118
sg1488
g1493
sg1450
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3009
sg1428
g118
sg35
g36
sbsg1452
(dp3010
g1487
Nssg1455
(lp3011
g1487
asg1457
Nsbsg42
Nsg43
g1516
sg44
(dp3012
sg46
S'montage_anat_0'
p3013
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1516
sg57
Nsg58
(lp3014
sg60
Nsg61
Nsb(dp3015
sg5
(g18
g7
Ntp3016
Rp3017
(dp3018
g22
(dp3019
sg24
g5
(g1439
g7
Ntp3020
Rp3021
(dp3022
g1443
(lp3023
g1445
asg29
g30
(g1446
tp3024
Rp3025
(dp3026
g143
I00
sg1450
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3027
sg1445
g118
sg35
g36
sbsg1452
(dp3028
g1454
Nssg1455
(lp3029
g1454
asg1457
Nsbsg42
Nsg43
g1458
sg44
(dp3030
sg46
g3013
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1458
sg57
Nsg58
(lp3031
sg60
Nsg61
Nsb(dp3032
sg5
(g18
g7
Ntp3033
Rp3034
(dp3035
g22
(dp3036
sg24
g5
(g25
g7
Ntp3037
Rp3038
(dp3039
g29
g30
(g31
tp3040
Rp3041
(dp3042
g35
g36
sg1409
g118
sg1410
g118
sg1411
g118
sg1412
g118
sbsg39
(lp3043
g1410
ag1411
ag1409
ag1412
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp3044
sg46
g3013
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp3045
sg60
Nsg61
Nsb(dp3046
sg5
(g18
g7
Ntp3047
Rp3048
(dp3049
g22
(dp3050
sg24
g5
(g1439
g7
Ntp3051
Rp3052
(dp3053
g1443
(lp3054
g1429
ag1428
ag1487
ag1488
asg29
g30
(g1446
tp3055
Rp3056
(dp3057
g143
I00
sg1487
S't1_edge_on_mean_func_in_t1_s.png'
p3058
sg1429
g118
sg1488
g1493
sg1450
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3059
sg1428
g118
sg35
g36
sbsg1452
(dp3060
g1487
Nssg1455
(lp3061
g1487
asg1457
Nsbsg42
Nsg43
g1497
sg44
(dp3062
sg46
g3013
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1497
sg57
Nsg58
(lp3063
sg60
Nsg61
Nsb(dp3064
sg5
(g18
g7
Ntp3065
Rp3066
(dp3067
g22
(dp3068
sg24
g5
(g25
g7
Ntp3069
Rp3070
(dp3071
g29
g30
(g31
tp3072
Rp3073
(dp3074
g35
g36
sg1428
g118
sg1429
g118
sbsg39
(lp3075
g1428
ag1429
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp3076
sg46
g3013
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp3077
sg60
Nsg61
Nsb(dp3078
sg5
(g18
g7
Ntp3079
Rp3080
(dp3081
g22
(dp3082
sg24
g5
(g1439
g7
Ntp3083
Rp3084
(dp3085
g1443
(lp3086
g1445
asg29
g30
(g1446
tp3087
Rp3088
(dp3089
g143
I00
sg1450
g3027
sg1445
g118
sg35
g36
sbsg1452
(dp3090
g1454
Nssg1455
(lp3091
g1454
asg1457
Nsbsg42
Nsg49
I00
sg44
(dp3092
sg51
Nsg48
Nsg60
Nsg43
g1476
sg46
g3013
sg50
I00
sg52
Nsg55
I00
sg56
g1476
sg57
Nsg58
(lp3093
sg61
Nsb(dp3094
ssg302
(dp3095
sg304
(dp3096
g2998
(dp3097
g3034
(dp3098
g308
(lp3099
(g1487
g1410
tp3100
asssg3017
(dp3101
g3048
(dp3102
g308
(lp3103
(g1454
g1428
tp3104
assg2998
(dp3105
g308
(lp3106
(g1454
g1428
tp3107
assg3034
(dp3108
g308
(lp3109
(g1454
g1409
tp3110
asssg3034
(dp3111
sg3048
(dp3112
g3034
(dp3113
g308
(lp3114
(g1487
g1411
tp3115
asssg3066
(dp3116
g3017
(dp3117
g308
(lp3118
(g1428
g1445
tp3119
assg3080
(dp3120
g308
(lp3121
(g1429
g1445
tp3122
asssg3080
(dp3123
g3048
(dp3124
g308
(lp3125
(g1454
g1429
tp3126
assg2998
(dp3127
g308
(lp3128
(g1454
g1429
tp3129
assg3034
(dp3130
g308
(lp3131
(g1454
g1412
tp3132
assssg350
g3096
sg351
(dp3133
g2998
(dp3134
g3017
g3105
sg3080
g3127
ssg3017
(dp3135
g3066
g3117
ssg3034
(dp3136
g3048
g3113
sg2998
g3098
sg3017
g3108
sg3080
g3130
ssg3048
(dp3137
g3017
g3102
sg3080
g3124
ssg3066
(dp3138
sg3080
(dp3139
g3066
g3120
sssg359
g3096
sbsg43
g3013
sg46
g1067
sg56
g3013
sg57
g360
((lp3140
(lp3141
g363
ag360
((lp3142
(lp3143
g366
ag363
aa(lp3144
g368
ag369
aa(lp3145
g371
ag372
aa(lp3146
g374
ag375
aa(lp3147
g377
ag378
aa(lp3148
g380
ag381
aa(lp3149
g383
ag384
aa(lp3150
g386
ag387
aatp3151
Rp3152
aa(lp3153
g391
ag360
((lp3154
(lp3155
g366
ag391
aa(lp3156
g395
ag396
aa(lp3157
g398
ag399
aa(lp3158
g401
ag402
aa(lp3159
g404
ag405
aa(lp3160
g407
ag408
aa(lp3161
g410
ag411
aa(lp3162
g413
ag414
aa(lp3163
g416
ag417
aa(lp3164
g419
ag420
aa(lp3165
g422
ag423
aa(lp3166
g425
ag426
aa(lp3167
g428
ag429
aa(lp3168
g431
ag432
aa(lp3169
g434
ag435
aa(lp3170
g437
ag438
aa(lp3171
g440
ag441
aa(lp3172
g443
ag444
aa(lp3173
g446
ag447
aatp3174
Rp3175
aa(lp3176
g451
ag360
((lp3177
(lp3178
g366
ag451
aa(lp3179
g455
ag456
aatp3180
Rp3181
aatp3182
Rp3183
sg61
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg1994
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g18
g7
Ntp3201
Rp3202
(dp3203
g22
(dp3204
sg24
g5
(g1439
g7
Ntp3205
Rp3206
(dp3207
g1443
(lp3208
g1445
asg29
g30
(g1446
tp3209
Rp3210
(dp3211
g143
I00
sg1450
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3212
sg1445
g118
sg35
g36
sbsg1452
(dp3213
g1454
Nssg1455
(lp3214
g1454
asg1457
Nsbsg42
Nsg49
I00
sg44
(dp3215
sg51
Nsg48
Nsg60
Nsg43
S'resample_o_gm'
p3216
sg46
S'montage_csf_gm_wm_0'
p3217
sg50
I00
sg52
Nsg55
I00
sg56
g3216
sg57
Nsg58
(lp3218
sg61
Nsb(dp3219
sg5
(g18
g7
Ntp3220
Rp3221
(dp3222
g22
(dp3223
sg24
g5
(g1439
g7
Ntp3224
Rp3225
(dp3226
g1443
(lp3227
S'overlay_csf'
p3228
aS'overlay_wm'
p3229
aS'overlay_gm'
p3230
ag1428
ag1487
asg29
g30
(g1446
tp3231
Rp3232
(dp3233
g143
I00
sg1487
S'montage_csf_gm_wm_s.png'
p3234
sg3230
g118
sg1450
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3235
sg3228
g118
sg3229
g118
sg1428
g118
sg35
g36
sbsg1452
(dp3236
g1487
Nssg1455
(lp3237
g1487
asg1457
Nsbsg42
Nsg43
g1497
sg44
(dp3238
sg46
g3217
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1497
sg57
Nsg58
(lp3239
sg60
Nsg61
Nsb(dp3240
sg5
(g18
g7
Ntp3241
Rp3242
(dp3243
g22
(dp3244
sg24
g5
(g1439
g7
Ntp3245
Rp3246
(dp3247
g1443
(lp3248
g1445
asg29
g30
(g1446
tp3249
Rp3250
(dp3251
g143
I00
sg1450
g3212
sg1445
g118
sg35
g36
sbsg1452
(dp3252
g1454
Nssg1455
(lp3253
g1454
asg1457
Nsbsg42
Nsg43
g1458
sg44
(dp3254
sg46
g3217
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1458
sg57
Nsg58
(lp3255
sg60
Nsg61
Nsb(dp3256
sg5
(g18
g7
Ntp3257
Rp3258
(dp3259
g22
(dp3260
sg24
g5
(g1439
g7
Ntp3261
Rp3262
(dp3263
g1443
(lp3264
g1445
asg29
g30
(g1446
tp3265
Rp3266
(dp3267
g143
I00
sg1450
g3212
sg1445
g118
sg35
g36
sbsg1452
(dp3268
g1454
Nssg1455
(lp3269
g1454
asg1457
Nsbsg42
Nsg49
I00
sg44
(dp3270
sg51
Nsg48
Nsg60
Nsg43
S'resample_o_csf'
p3271
sg46
g3217
sg50
I00
sg52
Nsg55
I00
sg56
g3271
sg57
Nsg58
(lp3272
sg61
Nsb(dp3273
sg5
(g18
g7
Ntp3274
Rp3275
(dp3276
g22
(dp3277
sg24
g5
(g25
g7
Ntp3278
Rp3279
(dp3280
g29
g30
(g31
tp3281
Rp3282
(dp3283
g35
g36
sS'resampled_overlay_csf'
p3284
g118
sS'resampled_overlay_gm'
p3285
g118
sg1410
g118
sg1411
g118
sg1409
g118
sS'resampled_overlay_wm'
p3286
g118
sbsg39
(lp3287
g1410
ag1411
ag1409
ag3284
ag3286
ag3285
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp3288
sg46
g3217
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp3289
sg60
Nsg61
Nsb(dp3290
sg5
(g18
g7
Ntp3291
Rp3292
(dp3293
g22
(dp3294
sg24
g5
(g1439
g7
Ntp3295
Rp3296
(dp3297
g1443
(lp3298
g3228
ag3229
ag3230
ag1428
ag1487
asg29
g30
(g1446
tp3299
Rp3300
(dp3301
g143
I00
sg1487
S'montage_csf_gm_wm_a.png'
p3302
sg3230
g118
sg1450
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3303
sg3228
g118
sg3229
g118
sg1428
g118
sg35
g36
sbsg1452
(dp3304
g1487
Nssg1455
(lp3305
g1487
asg1457
Nsbsg42
Nsg43
g1516
sg44
(dp3306
sg46
g3217
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1516
sg57
Nsg58
(lp3307
sg60
Nsg61
Nsb(dp3308
sg5
(g18
g7
Ntp3309
Rp3310
(dp3311
g22
(dp3312
sg24
g5
(g1439
g7
Ntp3313
Rp3314
(dp3315
g1443
(lp3316
g1445
asg29
g30
(g1446
tp3317
Rp3318
(dp3319
g143
I00
sg1450
g3212
sg1445
g118
sg35
g36
sbsg1452
(dp3320
g1454
Nssg1455
(lp3321
g1454
asg1457
Nsbsg42
Nsg49
I00
sg44
(dp3322
sg51
Nsg48
Nsg60
Nsg43
S'resample_o_wm'
p3323
sg46
g3217
sg50
I00
sg52
Nsg55
I00
sg56
g3323
sg57
Nsg58
(lp3324
sg61
Nsb(dp3325
sg5
(g18
g7
Ntp3326
Rp3327
(dp3328
g22
(dp3329
sg24
g5
(g25
g7
Ntp3330
Rp3331
(dp3332
g29
g30
(g31
tp3333
Rp3334
(dp3335
g35
g36
sg3230
g118
sg1428
g118
sg3228
g118
sg3229
g118
sbsg39
(lp3336
g1428
ag3228
ag3229
ag3230
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp3337
sg46
g3217
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp3338
sg60
Nsg61
Nsb(dp3339
ssg302
(dp3340
sg304
(dp3341
g3202
(dp3342
g3292
(dp3343
g308
(lp3344
(g1454
g3230
tp3345
assg3275
(dp3346
g308
(lp3347
(g1454
g3285
tp3348
assg3221
(dp3349
g308
(lp3350
(g1454
g3230
tp3351
asssg3221
(dp3352
g3275
(dp3353
g308
(lp3354
(g1487
g1411
tp3355
asssg3242
(dp3356
g3292
(dp3357
g308
(lp3358
(g1454
g1428
tp3359
assg3275
(dp3360
g308
(lp3361
(g1454
g1409
tp3362
assg3221
(dp3363
g308
(lp3364
(g1454
g1428
tp3365
asssg3258
(dp3366
g3292
(dp3367
g308
(lp3368
(g1454
g3228
tp3369
assg3275
(dp3370
g308
(lp3371
(g1454
g3284
tp3372
assg3221
(dp3373
g308
(lp3374
(g1454
g3228
tp3375
asssg3275
(dp3376
sg3292
(dp3377
g3275
(dp3378
g308
(lp3379
(g1487
g1410
tp3380
asssg3310
(dp3381
g3292
(dp3382
g308
(lp3383
(g1454
g3229
tp3384
assg3275
(dp3385
g308
(lp3386
(g1454
g3286
tp3387
assg3221
(dp3388
g308
(lp3389
(g1454
g3229
tp3390
asssg3327
(dp3391
g3242
(dp3392
g308
(lp3393
(g1428
g1445
tp3394
assg3310
(dp3395
g308
(lp3396
(g3229
g1445
tp3397
assg3258
(dp3398
g308
(lp3399
(g3228
g1445
tp3400
assg3202
(dp3401
g308
(lp3402
(g3230
g1445
tp3403
assssg350
g3341
sg351
(dp3404
g3202
(dp3405
g3327
g3401
ssg3221
(dp3406
g3242
g3363
sg3310
g3388
sg3258
g3373
sg3202
g3349
ssg3242
(dp3407
g3327
g3392
ssg3258
(dp3408
g3327
g3398
ssg3275
(dp3409
g3202
g3346
sg3242
g3360
sg3258
g3370
sg3292
g3378
sg3310
g3385
sg3221
g3353
ssg3292
(dp3410
g3242
g3357
sg3310
g3382
sg3258
g3367
sg3202
g3343
ssg3310
(dp3411
g3327
g3395
ssg3327
(dp3412
ssg359
g3341
sbsg43
g3217
sg46
g1067
sg56
g3217
sg57
g360
((lp3413
(lp3414
g363
ag360
((lp3415
(lp3416
g366
ag363
aa(lp3417
g368
ag369
aa(lp3418
g371
ag372
aa(lp3419
g374
ag375
aa(lp3420
g377
ag378
aa(lp3421
g380
ag381
aa(lp3422
g383
ag384
aa(lp3423
g386
ag387
aatp3424
Rp3425
aa(lp3426
g391
ag360
((lp3427
(lp3428
g366
ag391
aa(lp3429
g395
ag396
aa(lp3430
g398
ag399
aa(lp3431
g401
ag402
aa(lp3432
g404
ag405
aa(lp3433
g407
ag408
aa(lp3434
g410
ag411
aa(lp3435
g413
ag414
aa(lp3436
g416
ag417
aa(lp3437
g419
ag420
aa(lp3438
g422
ag423
aa(lp3439
g425
ag426
aa(lp3440
g428
ag429
aa(lp3441
g431
ag432
aa(lp3442
g434
ag435
aa(lp3443
g437
ag438
aa(lp3444
g440
ag441
aa(lp3445
g443
ag444
aa(lp3446
g446
ag447
aatp3447
Rp3448
aa(lp3449
g451
ag360
((lp3450
(lp3451
g366
ag451
aa(lp3452
g455
ag456
aatp3453
Rp3454
aatp3455
Rp3456
sg61
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g18
g7
Ntp3466
Rp3467
(dp3468
g22
(dp3469
sg24
g5
(g25
g7
Ntp3470
Rp3471
(dp3472
g29
g30
(g31
tp3473
Rp3474
(dp3475
S'func_to_anat_linear_xfm'
p3476
g118
sg35
g36
sS'anat_func'
p3477
g118
sbsg39
(lp3478
g3476
ag3477
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp3479
sg46
S'func_to_anat_bbreg_0'
p3480
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp3481
sg60
Nsg61
Nsb(dp3482
sg5
(g18
g7
Ntp3483
Rp3484
(dp3485
g22
(dp3486
sg24
g5
(g25
g7
Ntp3487
Rp3488
(dp3489
g29
g30
(g31
tp3490
Rp3491
(dp3492
g35
g36
sS'linear_reg_matrix'
p3493
g118
sS'bbr_schedule'
p3494
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3495
sS'anat_wm_segmentation'
p3496
g118
sS'anat_skull'
p3497
g118
sg2586
g118
sbsg39
(lp3498
g2586
ag3497
ag3493
ag3496
ag3494
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp3499
sg46
g3480
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp3500
sg60
Nsg61
Nsb(dp3501
sg5
(g18
g7
Ntp3502
Rp3503
(dp3504
g22
(dp3505
sg24
g5
(g135
g7
Ntp3506
Rp3507
(dp3508
g29
g30
(g139
tp3509
Rp3510
(dp3511
g143
I00
sg35
g36
sg144
S'-thr 0.5 -bin'
p3512
sg145
g118
sg146
g118
sg147
g118
sg148
g118
sg149
g150
sg151
g5
(g152
g153
(dp3513
g155
g156
stp3514
Rp3515
(dp3516
g160
S'environ_items'
p3517
sg43
g151
sbsg162
g118
sg163
g156
sg164
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'wm_bb_mask'
p3518
sg44
(dp3519
sg46
g3480
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3518
sg57
Nsg58
(lp3520
sg60
Nsg61
Nsb(dp3521
sg5
(g18
g7
Ntp3522
Rp3523
(dp3524
g22
(dp3525
sg24
g5
(g176
g7
Ntp3526
Rp3527
(dp3528
g29
g30
(g180
tp3529
Rp3530
(dp3531
g184
g118
sg35
g36
sg185
g118
sg186
g118
sg187
g118
sg188
g118
sg189
g118
sg190
g118
sg192
g118
sg193
g118
sg194
g118
sg195
g118
sg196
g118
sg197
g118
sg198
g118
sg199
g118
sg200
g118
sg201
g118
sg162
g118
sg202
g118
sg203
g118
sg204
g118
sg205
g118
sg143
I00
sg206
g118
sg207
g118
sg147
g118
sg208
g118
sg209
g118
sg149
g150
sg210
g118
sg211
g118
sg212
g118
sg213
g118
sg214
g118
sg146
g118
sg215
g118
sg216
g118
sg217
g118
sg218
I6
sg219
g118
sg220
g118
sg221
g118
sg222
g118
sg223
g118
sg151
g5
(g152
g153
(dp3532
g155
g156
stp3533
Rp3534
(dp3535
g160
S'environ_items'
p3536
sg43
g151
sbsg229
g118
sg230
g118
sg163
g156
sg231
g118
sg232
g118
sg233
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'bbreg_func_to_anat'
p3537
sg44
(dp3538
sg46
g3480
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3537
sg57
Nsg58
(lp3539
sg60
Nsg61
Nsb(dp3540
ssg302
(dp3541
sg304
(dp3542
g3467
(dp3543
sg3484
(dp3544
g3503
(dp3545
g308
(lp3546
(g3496
g162
tp3547
assg3523
(dp3548
g308
(lp3549
(g3494
g207
tp3550
a(g2586
g162
tp3551
a(g3497
g187
tp3552
a(g3493
g185
tp3553
asssg3503
(dp3554
g3523
(dp3555
g308
(lp3556
((g146
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3557
(ttp3558
g147
tp3559
asssg3523
(dp3560
g3467
(dp3561
g308
(lp3562
(g219
g3476
tp3563
a(g146
g3477
tp3564
assssg350
g3542
sg351
(dp3565
g3467
(dp3566
g3523
g3561
ssg3484
(dp3567
sg3503
(dp3568
g3484
g3545
ssg3523
(dp3569
g3484
g3548
sg3503
g3555
sssg359
g3542
sbsg43
g3480
sg46
g1067
sg56
g3480
sg57
g360
((lp3570
(lp3571
g363
ag360
((lp3572
(lp3573
g366
ag363
aa(lp3574
g368
ag369
aa(lp3575
g371
ag372
aa(lp3576
g374
ag375
aa(lp3577
g377
ag378
aa(lp3578
g380
ag381
aa(lp3579
g383
ag384
aa(lp3580
g386
ag387
aatp3581
Rp3582
aa(lp3583
g391
ag360
((lp3584
(lp3585
g366
ag391
aa(lp3586
g395
ag396
aa(lp3587
g398
ag399
aa(lp3588
g401
ag402
aa(lp3589
g404
ag405
aa(lp3590
g407
ag408
aa(lp3591
g410
ag411
aa(lp3592
g413
ag414
aa(lp3593
g416
ag417
aa(lp3594
g419
ag420
aa(lp3595
g422
ag423
aa(lp3596
g425
ag426
aa(lp3597
g428
ag429
aa(lp3598
g431
ag432
aa(lp3599
g434
ag435
aa(lp3600
g437
ag438
aa(lp3601
g440
ag441
aa(lp3602
g443
ag444
aa(lp3603
g446
ag447
aatp3604
Rp3605
aa(lp3606
g451
ag360
((lp3607
(lp3608
g366
ag451
aa(lp3609
g455
ag456
aatp3610
Rp3611
aatp3612
Rp3613
sg61
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g18
g7
Ntp3620
Rp3621
(dp3622
g22
(dp3623
sg24
g5
(g1439
g7
Ntp3624
Rp3625
(dp3626
g1443
(lp3627
S'measure_file'
p3628
asg29
g30
(g1446
tp3629
Rp3630
(dp3631
g143
I00
sg35
g36
sg1450
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g118
sbsg1452
(dp3633
S'snr_storefl'
p3634
Nssg1455
(lp3635
g3634
asg1457
Nsbsg42
Nsg43
S'snr_val0'
p3636
sg44
(dp3637
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3636
sg57
Nsg58
(lp3638
sg60
Nsg61
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g18
g7
Ntp3648
Rp3649
(dp3650
g22
(dp3651
sg24
g5
(g1439
g7
Ntp3652
Rp3653
(dp3654
g1443
(lp3655
g3628
ag1863
asg29
g30
(g1446
tp3656
Rp3657
(dp3658
g143
I00
sg35
g36
sg1450
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g118
sg1863
S'snr'
p3660
sbsg1452
(dp3661
g1870
Nssg1455
(lp3662
g1870
asg1457
Nsbsg42
Nsg49
I00
sg44
(dp3663
sg51
Nsg48
Nsg60
Nsg43
S'hist_snr_0'
p3664
sg46
g1067
sg50
I00
sg52
Nsg55
I00
sg56
g3664
sg57
Nsg58
(lp3665
sg61
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g18
g7
Ntp3678
Rp3679
(dp3680
g22
(dp3681
sg24
g5
(g1439
g7
Ntp3682
Rp3683
(dp3684
g1443
(lp3685
S'scan'
p3686
aS'rest_dict'
p3687
asg29
g30
(g1446
tp3688
Rp3689
(dp3690
g143
I00
sg3687
(dp3691
S'rest_1_rest'
p3692
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-01/KKI2009-01-fMRI.nii'
p3693
ssg1450
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3694
sg35
g36
sg3686
g118
sbsg1452
(dp3695
g1952
Nssg1455
(lp3696
g1952
asg1457
Nsbsg42
Nsg43
S'selectrest'
p3697
sg44
(dp3698
sg46
S'func_gather_0'
p3699
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3697
sg57
Nsg58
(lp3700
sg60
Nsg61
Nsb(dp3701
sg5
(g18
g7
Ntp3702
Rp3703
(dp3704
g22
(dp3705
sg24
g5
(g25
g7
Ntp3706
Rp3707
(dp3708
g29
g30
(g31
tp3709
Rp3710
(dp3711
g35
g36
sg3686
g118
sS'subject'
p3712
S'849_1790682990'
p3713
sbsg39
(lp3714
g3712
ag3686
asg41
I01
sbsg42
Nsg43
S'inputnode'
p3715
sg44
(dp3716
sg46
g3699
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
(lp3717
(g3686
(lp3718
g3692
atp3719
asg55
I00
sg56
g3715
sg57
Nsg58
(lp3720
sg60
Nsg61
Nsb(dp3721
sg5
(g18
g7
Ntp3722
Rp3723
(dp3724
g22
(dp3725
sg24
g5
(g25
g7
Ntp3726
Rp3727
(dp3728
g29
g30
(g31
tp3729
Rp3730
(dp3731
g35
g36
sg3686
g118
sg1952
g118
sg3712
g118
sbsg39
(lp3732
g3712
ag1952
ag3686
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp3733
sg46
g3699
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp3734
sg60
Nsg61
Nsb(dp3735
ssg302
(dp3736
sg304
(dp3737
g3679
(dp3738
g3723
(dp3739
g308
(lp3740
(g1952
g1952
tp3741
asssg3703
(dp3742
g3679
(dp3743
g308
(lp3744
(g3686
g3686
tp3745
assg3723
(dp3746
g308
(lp3747
(g3712
g3712
tp3748
a(g3686
g3686
tp3749
asssg3723
(dp3750
ssg350
g3737
sg351
(dp3751
g3679
(dp3752
g3703
g3743
ssg3703
(dp3753
sg3723
(dp3754
g3679
g3739
sg3703
g3746
sssg359
g3737
sbsg43
g3699
sg46
g1067
sg56
g3699
sg57
g360
((lp3755
(lp3756
g363
ag360
((lp3757
(lp3758
g366
ag363
aa(lp3759
g368
ag369
aa(lp3760
g371
ag372
aa(lp3761
g374
ag375
aa(lp3762
g377
ag378
aa(lp3763
g380
ag381
aa(lp3764
g383
ag384
aa(lp3765
g386
ag387
aatp3766
Rp3767
aa(lp3768
g391
ag360
((lp3769
(lp3770
g366
ag391
aa(lp3771
g395
ag396
aa(lp3772
g398
ag399
aa(lp3773
g401
ag402
aa(lp3774
g404
ag405
aa(lp3775
g407
ag408
aa(lp3776
g410
ag411
aa(lp3777
g413
ag414
aa(lp3778
g416
ag417
aa(lp3779
g419
ag420
aa(lp3780
g422
ag423
aa(lp3781
g425
ag426
aa(lp3782
g428
ag429
aa(lp3783
g431
ag432
aa(lp3784
g434
ag435
aa(lp3785
g437
ag438
aa(lp3786
g440
ag441
aa(lp3787
g443
ag444
aa(lp3788
g446
ag447
aatp3789
Rp3790
aa(lp3791
g451
ag360
((lp3792
(lp3793
g366
ag451
aa(lp3794
g455
ag456
aatp3795
Rp3796
aatp3797
Rp3798
sg61
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g18
g7
Ntp3808
Rp3809
(dp3810
g22
(dp3811
sg24
g5
(g1145
g7
Ntp3812
Rp3813
(dp3814
g29
g30
(g1149
tp3815
Rp3816
(dp3817
g143
I00
sg1153
g118
sg162
g118
sg1154
g118
sg146
g118
sg216
g118
sg147
g118
sg190
g118
sg1155
g118
sg1156
g1820
sg149
g150
sg151
g5
(g152
g153
(dp3818
g155
g156
stp3819
Rp3820
(dp3821
g160
S'environ_items'
p3822
sg43
g151
sbsg1162
g118
sg1163
g118
sg163
g156
sg1164
g118
sg1165
g118
sg35
g36
sg1166
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'func_mni_fsl_warp_0'
p3823
sg44
(dp3824
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3823
sg57
Nsg58
(lp3825
sg60
Nsg61
Nsbg146
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g18
g7
Ntp3835
Rp3836
(dp3837
g22
(dp3838
sg24
g5
(g25
g7
Ntp3839
Rp3840
(dp3841
g29
g30
(g31
tp3842
Rp3843
(dp3844
g35
g36
sg163
(lp3845
I01
aI01
asg1952
g118
sbsg39
(lp3846
g1952
ag163
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp3847
sg46
S'voxel_timeseries_0'
p3848
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp3849
sg60
Nsg61
Nsb(dp3850
sg5
(g18
g7
Ntp3851
Rp3852
(dp3853
g22
(dp3854
sg24
g5
(g25
g7
Ntp3855
Rp3856
(dp3857
g29
g30
(g31
tp3858
Rp3859
(dp3860
g35
g36
sS'mask_outputs'
p3861
g118
sbsg39
(lp3862
g3861
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp3863
sg46
g3848
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp3864
sg60
Nsg61
Nsb(dp3865
sg5
(g18
g7
Ntp3866
Rp3867
(dp3868
g22
(dp3869
sg24
g5
(g1439
g7
Ntp3870
Rp3871
(dp3872
g1443
(lp3873
S'data_file'
p3874
aS'template'
p3875
ag163
asg29
g30
(g1446
tp3876
Rp3877
(dp3878
g143
I00
sg35
g36
sg3874
g118
sg1450
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3879
sg3875
g118
sg163
g118
sbsg1452
(dp3880
g146
Nssg1455
(lp3881
g146
asg1457
Nsbsg42
Nsg43
S'timeseries_voxel'
p3882
sg44
(dp3883
sg46
g3848
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3882
sg57
Nsg58
(lp3884
sg60
Nsg61
Nsb(dp3885
sg5
(g18
g7
Ntp3886
Rp3887
(dp3888
g22
(dp3889
sg24
g5
(g25
g7
Ntp3890
Rp3891
(dp3892
g29
g30
(g31
tp3893
Rp3894
(dp3895
g35
g36
sg1953
g118
sbsg39
(lp3896
g1953
asg41
I01
sbsg42
Nsg43
S'input_mask'
p3897
sg44
(dp3898
sg46
g3848
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3897
sg57
Nsg58
(lp3899
sg60
Nsg61
Nsb(dp3900
ssg302
(dp3901
sg304
(dp3902
g3836
(dp3903
g3867
(dp3904
g308
(lp3905
(g1952
g3874
tp3906
a(g163
g163
tp3907
asssg3852
(dp3908
sg3867
(dp3909
g3852
(dp3910
g308
(lp3911
(g146
g3861
tp3912
asssg3887
(dp3913
g3867
(dp3914
g308
(lp3915
(g1953
g3875
tp3916
assssg350
g3902
sg351
(dp3917
g3836
(dp3918
sg3852
(dp3919
g3867
g3910
ssg3867
(dp3920
g3836
g3904
sg3887
g3914
ssg3887
(dp3921
ssg359
g3902
sbsg43
g3848
sg46
g1067
sg56
g3848
sg57
g360
((lp3922
(lp3923
g363
ag360
((lp3924
(lp3925
g366
ag363
aa(lp3926
g368
ag369
aa(lp3927
g371
ag372
aa(lp3928
g374
ag375
aa(lp3929
g377
ag378
aa(lp3930
g380
ag381
aa(lp3931
g383
ag384
aa(lp3932
g386
ag387
aatp3933
Rp3934
aa(lp3935
g391
ag360
((lp3936
(lp3937
g366
ag391
aa(lp3938
g395
ag396
aa(lp3939
g398
ag399
aa(lp3940
g401
ag402
aa(lp3941
g404
ag405
aa(lp3942
g407
ag408
aa(lp3943
g410
ag411
aa(lp3944
g413
ag414
aa(lp3945
g416
ag417
aa(lp3946
g419
ag420
aa(lp3947
g422
ag423
aa(lp3948
g425
ag426
aa(lp3949
g428
ag429
aa(lp3950
g431
ag432
aa(lp3951
g434
ag435
aa(lp3952
g437
ag438
aa(lp3953
g440
ag441
aa(lp3954
g443
ag444
aa(lp3955
g446
ag447
aatp3956
Rp3957
aa(lp3958
g451
ag360
((lp3959
(lp3960
g366
ag451
aa(lp3961
g455
ag456
aatp3962
Rp3963
aatp3964
Rp3965
sg61
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g18
g7
Ntp3986
Rp3987
(dp3988
g22
(dp3989
sg24
g5
(g1439
g7
Ntp3990
Rp3991
(dp3992
g1443
(lp3993
g1429
ag1428
ag1487
ag1488
asg29
g30
(g1446
tp3994
Rp3995
(dp3996
g143
I00
sg1487
S'mni_anat_a.png'
p3997
sg1429
g118
sg1488
g1493
sg1450
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3998
sg1428
g118
sg35
g36
sbsg1452
(dp3999
g1487
Nssg1455
(lp4000
g1487
asg1457
Nsbsg42
Nsg43
g1516
sg44
(dp4001
sg46
S'montage_mni_anat_0'
p4002
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1516
sg57
Nsg58
(lp4003
sg60
Nsg61
Nsb(dp4004
sg5
(g18
g7
Ntp4005
Rp4006
(dp4007
g22
(dp4008
sg24
g5
(g25
g7
Ntp4009
Rp4010
(dp4011
g29
g30
(g31
tp4012
Rp4013
(dp4014
g35
g36
sg1428
g118
sg1429
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p4015
sbsg39
(lp4016
g1428
ag1429
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp4017
sg46
g4002
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp4018
sg60
Nsg61
Nsb(dp4019
sg5
(g18
g7
Ntp4020
Rp4021
(dp4022
g22
(dp4023
sg24
g5
(g1439
g7
Ntp4024
Rp4025
(dp4026
g1443
(lp4027
g1445
asg29
g30
(g1446
tp4028
Rp4029
(dp4030
g143
I00
sg1450
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4031
sg1445
g118
sg35
g36
sbsg1452
(dp4032
g1454
Nssg1455
(lp4033
g1454
asg1457
Nsbsg42
Nsg43
g1458
sg44
(dp4034
sg46
g4002
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1458
sg57
Nsg58
(lp4035
sg60
Nsg61
Nsb(dp4036
sg5
(g18
g7
Ntp4037
Rp4038
(dp4039
g22
(dp4040
sg24
g5
(g1439
g7
Ntp4041
Rp4042
(dp4043
g1443
(lp4044
g1429
ag1428
ag1487
ag1488
asg29
g30
(g1446
tp4045
Rp4046
(dp4047
g143
I00
sg1487
S'mni_anat_s.png'
p4048
sg1429
g118
sg1488
g1493
sg1450
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4049
sg1428
g118
sg35
g36
sbsg1452
(dp4050
g1487
Nssg1455
(lp4051
g1487
asg1457
Nsbsg42
Nsg43
g1497
sg44
(dp4052
sg46
g4002
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1497
sg57
Nsg58
(lp4053
sg60
Nsg61
Nsb(dp4054
sg5
(g18
g7
Ntp4055
Rp4056
(dp4057
g22
(dp4058
sg24
g5
(g1439
g7
Ntp4059
Rp4060
(dp4061
g1443
(lp4062
g1445
asg29
g30
(g1446
tp4063
Rp4064
(dp4065
g143
I00
sg1450
g4031
sg1445
g118
sg35
g36
sbsg1452
(dp4066
g1454
Nssg1455
(lp4067
g1454
asg1457
Nsbsg42
Nsg49
I00
sg44
(dp4068
sg51
Nsg48
Nsg60
Nsg43
g1476
sg46
g4002
sg50
I00
sg52
Nsg55
I00
sg56
g1476
sg57
Nsg58
(lp4069
sg61
Nsb(dp4070
sg5
(g18
g7
Ntp4071
Rp4072
(dp4073
g22
(dp4074
sg24
g5
(g25
g7
Ntp4075
Rp4076
(dp4077
g29
g30
(g31
tp4078
Rp4079
(dp4080
g35
g36
sg1409
g118
sg1410
g118
sg1411
g118
sg1412
g118
sbsg39
(lp4081
g1410
ag1411
ag1409
ag1412
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp4082
sg46
g4002
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp4083
sg60
Nsg61
Nsb(dp4084
ssg302
(dp4085
sg304
(dp4086
g3987
(dp4087
g4072
(dp4088
g308
(lp4089
(g1487
g1410
tp4090
asssg4006
(dp4091
g4056
(dp4092
g308
(lp4093
(g1429
g1445
tp4094
assg4021
(dp4095
g308
(lp4096
(g1428
g1445
tp4097
asssg4021
(dp4098
g3987
(dp4099
g308
(lp4100
(g1454
g1428
tp4101
assg4072
(dp4102
g308
(lp4103
(g1454
g1409
tp4104
assg4038
(dp4105
g308
(lp4106
(g1454
g1428
tp4107
asssg4038
(dp4108
g4072
(dp4109
g308
(lp4110
(g1487
g1411
tp4111
asssg4056
(dp4112
g3987
(dp4113
g308
(lp4114
(g1454
g1429
tp4115
assg4072
(dp4116
g308
(lp4117
(g1454
g1412
tp4118
assg4038
(dp4119
g308
(lp4120
(g1454
g1429
tp4121
asssg4072
(dp4122
ssg350
g4086
sg351
(dp4123
g3987
(dp4124
g4056
g4113
sg4021
g4099
ssg4006
(dp4125
sg4021
(dp4126
g4006
g4095
ssg4038
(dp4127
g4056
g4119
sg4021
g4105
ssg4056
(dp4128
g4006
g4092
ssg4072
(dp4129
g4056
g4116
sg4038
g4109
sg4021
g4102
sg3987
g4088
sssg359
g4086
sbsg43
g4002
sg46
g1067
sg56
g4002
sg57
g360
((lp4130
(lp4131
g363
ag360
((lp4132
(lp4133
g366
ag363
aa(lp4134
g368
ag369
aa(lp4135
g371
ag372
aa(lp4136
g374
ag375
aa(lp4137
g377
ag378
aa(lp4138
g380
ag381
aa(lp4139
g383
ag384
aa(lp4140
g386
ag387
aatp4141
Rp4142
aa(lp4143
g391
ag360
((lp4144
(lp4145
g366
ag391
aa(lp4146
g395
ag396
aa(lp4147
g398
ag399
aa(lp4148
g401
ag402
aa(lp4149
g404
ag405
aa(lp4150
g407
ag408
aa(lp4151
g410
ag411
aa(lp4152
g413
ag414
aa(lp4153
g416
ag417
aa(lp4154
g419
ag420
aa(lp4155
g422
ag423
aa(lp4156
g425
ag426
aa(lp4157
g428
ag429
aa(lp4158
g431
ag432
aa(lp4159
g434
ag435
aa(lp4160
g437
ag438
aa(lp4161
g440
ag441
aa(lp4162
g443
ag444
aa(lp4163
g446
ag447
aatp4164
Rp4165
aa(lp4166
g451
ag360
((lp4167
(lp4168
g366
ag451
aa(lp4169
g455
ag456
aatp4170
Rp4171
aatp4172
Rp4173
sg61
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg1997
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g18
g7
Ntp4188
Rp4189
(dp4190
g22
(dp4191
sg24
g5
(g1145
g7
Ntp4192
Rp4193
(dp4194
g29
g30
(g1149
tp4195
Rp4196
(dp4197
g143
I00
sg1153
g118
sg162
g118
sg1154
g118
sg146
g118
sg216
g118
sg147
g118
sg190
S'nn'
p4198
sg1155
g118
sg1156
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg149
g150
sg151
g5
(g152
g153
(dp4200
g155
g156
stp4201
Rp4202
(dp4203
g160
S'environ_items'
p4204
sg43
g151
sbsg1162
g118
sg1163
g118
sg163
g156
sg1164
g118
sg1165
g118
sg35
g36
sg1166
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'func_mni_fsl_warp_mask_0'
p4205
sg44
(dp4206
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4205
sg57
Nsg58
(lp4207
sg60
Nsg61
Nsbg146
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g18
g7
Ntp4217
Rp4218
(dp4219
g22
(dp4220
sg24
g5
(g25
g7
Ntp4221
Rp4222
(dp4223
g29
g30
(g31
tp4224
Rp4225
(dp4226
g35
g36
sg1428
g118
sg1429
g118
sbsg39
(lp4227
g1428
ag1429
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp4228
sg46
S'montage_skull_0'
p4229
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp4230
sg60
Nsg61
Nsb(dp4231
sg5
(g18
g7
Ntp4232
Rp4233
(dp4234
g22
(dp4235
sg24
g5
(g25
g7
Ntp4236
Rp4237
(dp4238
g29
g30
(g31
tp4239
Rp4240
(dp4241
g35
g36
sg1409
g118
sg1410
g118
sg1411
g118
sg1412
g118
sbsg39
(lp4242
g1410
ag1411
ag1409
ag1412
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp4243
sg46
g4229
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp4244
sg60
Nsg61
Nsb(dp4245
sg5
(g18
g7
Ntp4246
Rp4247
(dp4248
g22
(dp4249
sg24
g5
(g1439
g7
Ntp4250
Rp4251
(dp4252
g1443
(lp4253
g1429
ag1428
ag1487
ag1488
asg29
g30
(g1446
tp4254
Rp4255
(dp4256
g143
I00
sg1487
S'skull_vis_a.png'
p4257
sg1429
g118
sg1488
g1493
sg1450
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4258
sg1428
g118
sg35
g36
sbsg1452
(dp4259
g1487
Nssg1455
(lp4260
g1487
asg1457
Nsbsg42
Nsg43
g1516
sg44
(dp4261
sg46
g4229
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1516
sg57
Nsg58
(lp4262
sg60
Nsg61
Nsb(dp4263
sg5
(g18
g7
Ntp4264
Rp4265
(dp4266
g22
(dp4267
sg24
g5
(g1439
g7
Ntp4268
Rp4269
(dp4270
g1443
(lp4271
g1429
ag1428
ag1487
ag1488
asg29
g30
(g1446
tp4272
Rp4273
(dp4274
g143
I00
sg1487
S'skull_vis_s.png'
p4275
sg1429
g118
sg1488
g1493
sg1450
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4276
sg1428
g118
sg35
g36
sbsg1452
(dp4277
g1487
Nssg1455
(lp4278
g1487
asg1457
Nsbsg42
Nsg43
g1497
sg44
(dp4279
sg46
g4229
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1497
sg57
Nsg58
(lp4280
sg60
Nsg61
Nsb(dp4281
sg5
(g18
g7
Ntp4282
Rp4283
(dp4284
g22
(dp4285
sg24
g5
(g1439
g7
Ntp4286
Rp4287
(dp4288
g1443
(lp4289
g1445
asg29
g30
(g1446
tp4290
Rp4291
(dp4292
g143
I00
sg1450
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4293
sg1445
g118
sg35
g36
sbsg1452
(dp4294
g1454
Nssg1455
(lp4295
g1454
asg1457
Nsbsg42
Nsg43
g1458
sg44
(dp4296
sg46
g4229
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1458
sg57
Nsg58
(lp4297
sg60
Nsg61
Nsb(dp4298
sg5
(g18
g7
Ntp4299
Rp4300
(dp4301
g22
(dp4302
sg24
g5
(g1439
g7
Ntp4303
Rp4304
(dp4305
g1443
(lp4306
g1445
asg29
g30
(g1446
tp4307
Rp4308
(dp4309
g143
I00
sg1450
g4293
sg1445
g118
sg35
g36
sbsg1452
(dp4310
g1454
Nssg1455
(lp4311
g1454
asg1457
Nsbsg42
Nsg49
I00
sg44
(dp4312
sg51
Nsg48
Nsg60
Nsg43
g1476
sg46
g4229
sg50
I00
sg52
Nsg55
I00
sg56
g1476
sg57
Nsg58
(lp4313
sg61
Nsb(dp4314
ssg302
(dp4315
sg304
(dp4316
g4218
(dp4317
g4283
(dp4318
g308
(lp4319
(g1428
g1445
tp4320
assg4300
(dp4321
g308
(lp4322
(g1429
g1445
tp4323
asssg4233
(dp4324
sg4247
(dp4325
g4233
(dp4326
g308
(lp4327
(g1487
g1410
tp4328
asssg4265
(dp4329
g4233
(dp4330
g308
(lp4331
(g1487
g1411
tp4332
asssg4283
(dp4333
g4233
(dp4334
g308
(lp4335
(g1454
g1409
tp4336
assg4247
(dp4337
g308
(lp4338
(g1454
g1428
tp4339
assg4265
(dp4340
g308
(lp4341
(g1454
g1428
tp4342
asssg4300
(dp4343
g4233
(dp4344
g308
(lp4345
(g1454
g1412
tp4346
assg4247
(dp4347
g308
(lp4348
(g1454
g1429
tp4349
assg4265
(dp4350
g308
(lp4351
(g1454
g1429
tp4352
assssg350
g4316
sg351
(dp4353
g4218
(dp4354
sg4233
(dp4355
g4283
g4334
sg4265
g4330
sg4300
g4344
sg4247
g4326
ssg4247
(dp4356
g4283
g4337
sg4300
g4347
ssg4265
(dp4357
g4283
g4340
sg4300
g4350
ssg4283
(dp4358
g4218
g4318
ssg4300
(dp4359
g4218
g4321
sssg359
g4316
sbsg43
g4229
sg46
g1067
sg56
g4229
sg57
g360
((lp4360
(lp4361
g363
ag360
((lp4362
(lp4363
g366
ag363
aa(lp4364
g368
ag369
aa(lp4365
g371
ag372
aa(lp4366
g374
ag375
aa(lp4367
g377
ag378
aa(lp4368
g380
ag381
aa(lp4369
g383
ag384
aa(lp4370
g386
ag387
aatp4371
Rp4372
aa(lp4373
g391
ag360
((lp4374
(lp4375
g366
ag391
aa(lp4376
g395
ag396
aa(lp4377
g398
ag399
aa(lp4378
g401
ag402
aa(lp4379
g404
ag405
aa(lp4380
g407
ag408
aa(lp4381
g410
ag411
aa(lp4382
g413
ag414
aa(lp4383
g416
ag417
aa(lp4384
g419
ag420
aa(lp4385
g422
ag423
aa(lp4386
g425
ag426
aa(lp4387
g428
ag429
aa(lp4388
g431
ag432
aa(lp4389
g434
ag435
aa(lp4390
g437
ag438
aa(lp4391
g440
ag441
aa(lp4392
g443
ag444
aa(lp4393
g446
ag447
aatp4394
Rp4395
aa(lp4396
g451
ag360
((lp4397
(lp4398
g366
ag451
aa(lp4399
g455
ag456
aatp4400
Rp4401
aatp4402
Rp4403
sg61
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2661
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2662
(g5
(g18
g7
Ntp4413
Rp4414
(dp4415
g22
(dp4416
sg24
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g29
g30
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g143
I00
sg35
g36
sS'tpattern'
p4425
g118
sg146
g118
sS'tr'
p4426
g118
sg147
g118
sg190
g118
sg2265
g2266
sS'tzero'
p4427
g118
sS'ignore'
p4428
g118
sS'rltplus'
p4429
g118
sg149
g150
sS'tslice'
p4430
g118
sg162
g118
sS'rlt'
p4431
g118
sg151
g5
(g152
g153
(dp4432
tp4433
Rp4434
(dp4435
g160
S'environ_items'
p4436
sg43
g151
sbsbsg2278
g2266
sg166
Nsg167
g150
sbsg42
Nsg43
S'func_slice_timing_correction_0'
p4437
sg44
(dp4438
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4437
sg57
Nsg58
(lp4439
sg60
Nsg61
Nsbg146
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g18
g7
Ntp4449
Rp4450
(dp4451
g22
(dp4452
sg24
g5
(g25
g7
Ntp4453
Rp4454
(dp4455
g29
g30
(g31
tp4456
Rp4457
(dp4458
g35
g36
sS'roi'
p4459
g118
sbsg39
(lp4460
g4459
asg41
I01
sbsg42
Nsg43
S'input_roi'
p4461
sg44
(dp4462
sg46
S'roi_timeseries_0'
p4463
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4461
sg57
Nsg58
(lp4464
sg60
Nsg61
Nsb(dp4465
sg5
(g18
g7
Ntp4466
Rp4467
(dp4468
g22
(dp4469
sg24
g5
(g25
g7
Ntp4470
Rp4471
(dp4472
g29
g30
(g31
tp4473
Rp4474
(dp4475
g35
g36
sg163
(lp4476
I01
aI01
asg1952
g118
sbsg39
(lp4477
g1952
ag163
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp4478
sg46
g4463
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp4479
sg60
Nsg61
Nsb(dp4480
sg5
(g18
g7
Ntp4481
Rp4482
(dp4483
g22
(dp4484
sg24
g5
(g25
g7
Ntp4485
Rp4486
(dp4487
g29
g30
(g31
tp4488
Rp4489
(dp4490
g35
g36
sS'roi_outputs'
p4491
g118
sbsg39
(lp4492
g4491
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp4493
sg46
g4463
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp4494
sg60
Nsg61
Nsb(dp4495
sg5
(g18
g7
Ntp4496
Rp4497
(dp4498
g22
(dp4499
sg24
g5
(g1439
g7
Ntp4500
Rp4501
(dp4502
g1443
(lp4503
g3874
ag3875
ag163
asg29
g30
(g1446
tp4504
Rp4505
(dp4506
g143
I00
sg35
g36
sg3874
g118
sg1450
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4507
sg3875
g118
sg163
g118
sbsg1452
(dp4508
g146
Nssg1455
(lp4509
g146
asg1457
Nsbsg42
Nsg43
S'timeseries_roi'
p4510
sg44
(dp4511
sg46
g4463
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4510
sg57
Nsg58
(lp4512
sg60
Nsg61
Nsb(dp4513
ssg302
(dp4514
sg304
(dp4515
g4450
(dp4516
g4497
(dp4517
g308
(lp4518
(g4459
g3875
tp4519
asssg4467
(dp4520
g4497
(dp4521
g308
(lp4522
(g1952
g3874
tp4523
a(g163
g163
tp4524
asssg4482
(dp4525
sg4497
(dp4526
g4482
(dp4527
g308
(lp4528
(g146
g4491
tp4529
assssg350
g4515
sg351
(dp4530
g4450
(dp4531
sg4467
(dp4532
sg4482
(dp4533
g4497
g4527
ssg4497
(dp4534
g4450
g4517
sg4467
g4521
sssg359
g4515
sbsg43
g4463
sg46
g1067
sg56
g4463
sg57
g360
((lp4535
(lp4536
g363
ag360
((lp4537
(lp4538
g366
ag363
aa(lp4539
g368
ag369
aa(lp4540
g371
ag372
aa(lp4541
g374
ag375
aa(lp4542
g377
ag378
aa(lp4543
g380
ag381
aa(lp4544
g383
ag384
aa(lp4545
g386
ag387
aatp4546
Rp4547
aa(lp4548
g391
ag360
((lp4549
(lp4550
g366
ag391
aa(lp4551
g395
ag396
aa(lp4552
g398
ag399
aa(lp4553
g401
ag402
aa(lp4554
g404
ag405
aa(lp4555
g407
ag408
aa(lp4556
g410
ag411
aa(lp4557
g413
ag414
aa(lp4558
g416
ag417
aa(lp4559
g419
ag420
aa(lp4560
g422
ag423
aa(lp4561
g425
ag426
aa(lp4562
g428
ag429
aa(lp4563
g431
ag432
aa(lp4564
g434
ag435
aa(lp4565
g437
ag438
aa(lp4566
g440
ag441
aa(lp4567
g443
ag444
aa(lp4568
g446
ag447
aatp4569
Rp4570
aa(lp4571
g451
ag360
((lp4572
(lp4573
g366
ag451
aa(lp4574
g455
ag456
aatp4575
Rp4576
aatp4577
Rp4578
sg61
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g18
g7
Ntp4589
Rp4590
(dp4591
g22
(dp4592
sg24
g5
(g25
g7
Ntp4593
Rp4594
(dp4595
g29
g30
(g31
tp4596
Rp4597
(dp4598
g35
g36
sS'regressors'
p4599
g118
sg3712
g118
sbsg39
(lp4600
g3712
ag4599
asg41
I01
sbsg42
Nsg43
g279
sg44
(dp4601
sg46
S'nuisance_0'
p4602
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g279
sg57
Nsg58
(lp4603
sg60
Nsg61
Nsb(dp4604
sg5
(g18
g7
Ntp4605
Rp4606
(dp4607
g22
(dp4608
sg24
g5
(g176
g7
Ntp4609
Rp4610
(dp4611
g29
g30
(g180
tp4612
Rp4613
(dp4614
g184
g118
sg35
g36
sg185
g118
sg186
g118
sg187
g118
sg188
g118
sg189
g118
sg190
g191
sg192
g118
sg193
g118
sg194
g118
sg195
g118
sg196
g118
sg197
g118
sg198
g118
sg199
g118
sg200
g118
sg201
g118
sg162
g118
sg202
g118
sg203
g118
sg204
g118
sg205
g118
sg143
I00
sg206
g118
sg207
g118
sg147
S'-applyisoxfm 2'
p4615
sg208
g118
sg209
g118
sg149
g150
sg210
g118
sg211
g118
sg212
g118
sg213
g118
sg214
g118
sg146
g118
sg215
g118
sg216
g118
sg217
g118
sg218
g118
sg219
g118
sg220
g118
sg221
g118
sg222
g118
sg223
g118
sg151
g5
(g152
g153
(dp4616
g155
g156
stp4617
Rp4618
(dp4619
g160
S'environ_items'
p4620
sg43
g151
sbsg229
g118
sg230
g118
sg163
g156
sg231
g118
sg232
g118
sg233
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'gm_anat_to_2mm_flirt_applyxfm'
p4621
sg44
(dp4622
sg46
g4602
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4621
sg57
Nsg58
(lp4623
sg60
Nsg61
Nsb(dp4624
sg5
(g18
g7
Ntp4625
Rp4626
(dp4627
g22
(dp4628
sg24
g5
(g1439
g7
Ntp4629
Rp4630
(dp4631
g1443
(lp4632
g3712
aS'selector'
p4633
aS'wm_sig_file'
p4634
aS'csf_sig_file'
p4635
aS'gm_sig_file'
p4636
aS'motion_file'
p4637
aS'compcor_ncomponents'
p4638
asg29
g30
(g1446
tp4639
Rp4640
(dp4641
g143
I00
sg35
g36
sg4637
g118
sg4638
g118
sg1450
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4642
sg4635
g118
sg4634
g118
sg4636
g118
sg4633
g118
sg3712
g118
sbsg1452
(dp4643
S'regressors_file'
p4644
NsS'residual_file'
p4645
Nssg1455
(lp4646
g4645
ag4644
asg1457
Nsbsg42
Nsg43
S'residuals'
p4647
sg44
(dp4648
sg46
g4602
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
(lp4649
(g4633
(lp4650
(dp4651
S'global'
p4652
I0
sS'linear'
p4653
I1
sS'wm'
p4654
I0
sS'pc1'
p4655
I0
sS'motion'
p4656
I0
sS'quadratic'
p4657
I1
sS'gm'
p4658
I0
sS'compcor'
p4659
I1
sS'csf'
p4660
I1
satp4661
a(g4638
(lp4662
I5
atp4663
asg55
I00
sg56
g4647
sg57
Nsg58
(lp4664
sg60
Nsg61
Nsb(dp4665
sg5
(g18
g7
Ntp4666
Rp4667
(dp4668
g22
(dp4669
sg24
g5
(g176
g7
Ntp4670
Rp4671
(dp4672
g29
g30
(g180
tp4673
Rp4674
(dp4675
g184
g118
sg35
g36
sg185
g118
sg186
g118
sg187
g118
sg188
g118
sg189
g118
sg190
g191
sg192
g118
sg193
g118
sg194
g118
sg195
g118
sg196
g118
sg197
g118
sg198
g118
sg199
g118
sg200
g118
sg201
g118
sg162
g118
sg202
g118
sg203
g118
sg204
g118
sg205
g118
sg143
I00
sg206
g118
sg207
g118
sg147
g4615
sg208
g118
sg209
g118
sg149
g150
sg210
g118
sg211
g118
sg212
g118
sg213
g118
sg214
g118
sg146
g118
sg215
g118
sg216
g118
sg217
g118
sg218
g118
sg219
g118
sg220
g118
sg221
g118
sg222
g118
sg223
g118
sg151
g5
(g152
g153
(dp4676
g155
g156
stp4677
Rp4678
(dp4679
g160
S'environ_items'
p4680
sg43
g151
sbsg229
g118
sg230
g118
sg163
g156
sg231
g118
sg232
g118
sg233
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'wm_anat_to_2mm_flirt_applyxfm'
p4681
sg44
(dp4682
sg46
g4602
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4681
sg57
Nsg58
(lp4683
sg60
Nsg61
Nsb(dp4684
sg5
(g18
g7
Ntp4685
Rp4686
(dp4687
g22
(dp4688
sg24
g5
(g176
g7
Ntp4689
Rp4690
(dp4691
g29
g30
(g180
tp4692
Rp4693
(dp4694
g184
g118
sg35
g36
sg185
g118
sg186
g118
sg187
g118
sg188
g118
sg189
g118
sg190
g118
sg192
g118
sg193
g118
sg194
g118
sg195
g118
sg196
g118
sg197
g118
sg198
g118
sg199
g118
sg200
g118
sg201
g118
sg162
g118
sg202
g118
sg203
g118
sg204
g118
sg205
g118
sg143
I00
sg206
g118
sg207
g118
sg147
g4615
sg208
g118
sg209
g118
sg149
g150
sg210
g118
sg211
g118
sg212
g118
sg213
g118
sg214
g118
sg146
g118
sg215
g118
sg216
g118
sg217
g118
sg218
g118
sg219
g118
sg220
g118
sg221
g118
sg222
g118
sg223
g118
sg151
g5
(g152
g153
(dp4695
g155
g156
stp4696
Rp4697
(dp4698
g160
S'environ_items'
p4699
sg43
g151
sbsg229
g118
sg230
g118
sg163
g156
sg231
g118
sg232
g118
sg233
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'func_to_2mm_flirt_applyxfm'
p4700
sg44
(dp4701
sg46
g4602
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4700
sg57
Nsg58
(lp4702
sg60
Nsg61
Nsb(dp4703
sg5
(g18
g7
Ntp4704
Rp4705
(dp4706
g22
(dp4707
sg24
g5
(g176
g7
Ntp4708
Rp4709
(dp4710
g29
g30
(g180
tp4711
Rp4712
(dp4713
g184
g118
sg35
g36
sg185
g118
sg186
g118
sg187
g118
sg188
g118
sg189
g118
sg190
g191
sg192
g118
sg193
g118
sg194
g118
sg195
g118
sg196
g118
sg197
g118
sg198
g118
sg199
g118
sg200
g118
sg201
g118
sg162
g118
sg202
g118
sg203
g118
sg204
g118
sg205
g118
sg143
I00
sg206
g118
sg207
g118
sg147
g4615
sg208
g118
sg209
g118
sg149
g150
sg210
g118
sg211
g118
sg212
g118
sg213
g118
sg214
g118
sg146
g118
sg215
g118
sg216
g118
sg217
g118
sg218
g118
sg219
g118
sg220
g118
sg221
g118
sg222
g118
sg223
g118
sg151
g5
(g152
g153
(dp4714
g155
g156
stp4715
Rp4716
(dp4717
g160
S'environ_items'
p4718
sg43
g151
sbsg229
g118
sg230
g118
sg163
g156
sg231
g118
sg232
g118
sg233
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'csf_anat_to_2mm_flirt_applyxfm'
p4719
sg44
(dp4720
sg46
g4602
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4719
sg57
Nsg58
(lp4721
sg60
Nsg61
Nsb(dp4722
sg5
(g18
g7
Ntp4723
Rp4724
(dp4725
g22
(dp4726
sg24
g5
(g25
g7
Ntp4727
Rp4728
(dp4729
g29
g30
(g31
tp4730
Rp4731
(dp4732
S'motion_components'
p4733
g118
sS'anat_to_mni_initial_xfm'
p4734
g118
sS'lat_ventricles_mask'
p4735
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4736
sg483
g118
sS'anat_to_mni_rigid_xfm'
p4737
g118
sg4638
g118
sS'anat_to_mni_affine_xfm'
p4738
g118
sg4633
g118
sg482
g118
sS'template_brain'
p4739
g118
sg3476
g118
sS'mni_to_anat_linear_xfm'
p4740
g118
sg484
g118
sg35
g36
sg3712
g118
sbsg39
(lp4741
g3712
ag482
ag484
ag483
ag4740
ag4734
ag4737
ag4738
ag3476
ag4735
ag4733
ag4633
ag4638
ag4739
asg41
I01
sbsg42
Nsg43
g126
sg44
(dp4742
sg46
g4602
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g126
sg57
Nsg58
(lp4743
sg60
Nsg61
Nsb(dp4744
sg5
(g18
g7
Ntp4745
Rp4746
(dp4747
g22
(dp4748
sg24
g5
(g176
g7
Ntp4749
Rp4750
(dp4751
g29
g30
(g180
tp4752
Rp4753
(dp4754
g184
g118
sg35
g36
sg185
g118
sg186
g118
sg187
g118
sg188
g118
sg189
g118
sg190
g191
sg192
g118
sg193
g118
sg194
g118
sg195
g118
sg196
g118
sg197
g118
sg198
g118
sg199
g118
sg200
g118
sg201
g118
sg162
g118
sg202
g118
sg203
g118
sg204
g118
sg205
g118
sg143
I00
sg206
g118
sg207
g118
sg147
g4615
sg208
g118
sg209
g118
sg149
g150
sg210
g118
sg211
g118
sg212
g118
sg213
g118
sg214
g118
sg146
g118
sg215
g118
sg216
g118
sg217
g118
sg218
g118
sg219
g118
sg220
g118
sg221
g118
sg222
g118
sg223
g118
sg151
g5
(g152
g153
(dp4755
g155
g156
stp4756
Rp4757
(dp4758
g160
S'environ_items'
p4759
sg43
g151
sbsg229
g118
sg230
g118
sg163
g156
sg231
g118
sg232
g118
sg233
g118
sbsg165
g156
sg166
Nsg167
g150
sbsg42
Nsg43
S'ho_mni_to_2mm_flirt_applyxfm'
p4760
sg44
(dp4761
sg46
g4602
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4760
sg57
Nsg58
(lp4762
sg60
Nsg61
Nsb(dp4763
sg5
(g18
g7
Ntp4764
Rp4765
(dp4766
g22
(dp4767
sg24
g5
(g1439
g7
Ntp4768
Rp4769
(dp4770
g1443
(lp4771
g3874
aS'ventricles_mask_file'
p4772
aS'wm_seg_file'
p4773
aS'csf_seg_file'
p4774
aS'gm_seg_file'
p4775
ag73
ag91
ag37
asg29
g30
(g1446
tp4776
Rp4777
(dp4778
g143
I00
sg35
g36
sg73
g118
sg91
g118
sg3874
g118
sg1450
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4779
sg4775
g118
sg4772
g118
sg37
g118
sg4774
g118
sg4773
g118
sbsg1452
(dp4780
S'file_gm'
p4781
NsS'file_wm'
p4782
NsS'file_csf'
p4783
Nssg1455
(lp4784
g4782
ag4783
ag4781
asg1457
Nsbsg42
Nsg43
S'tissue_masks'
p4785
sg44
(dp4786
sg46
g4602
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4785
sg57
Nsg58
(lp4787
sg60
Nsg61
Nsb(dp4788
ssg302
(dp4789
sg304
(dp4790
g4590
(dp4791
sg4606
(dp4792
g4765
(dp4793
g308
(lp4794
(g146
g4775
tp4795
asssg4626
(dp4796
g4590
(dp4797
g308
(lp4798
(g4645
g3712
tp4799
a(g4644
g4599
tp4800
asssg4667
(dp4801
g4765
(dp4802
g308
(lp4803
(g146
g4773
tp4804
asssg4686
(dp4805
g4765
(dp4806
g308
(lp4807
(g146
g3874
tp4808
asssg4705
(dp4809
g4765
(dp4810
g308
(lp4811
(g146
g4774
tp4812
asssg4724
(dp4813
g4606
(dp4814
g308
(lp4815
(g483
g162
tp4816
a(g483
g187
tp4817
assg4626
(dp4818
g308
(lp4819
(g3712
g3712
tp4820
a(g4733
g4637
tp4821
a(g4633
g4633
tp4822
a(g4638
g4638
tp4823
assg4667
(dp4824
g308
(lp4825
(g482
g162
tp4826
a(g482
g187
tp4827
assg4686
(dp4828
g308
(lp4829
(g3712
g162
tp4830
a(g484
g187
tp4831
a(g3476
g185
tp4832
assg4705
(dp4833
g308
(lp4834
(g484
g162
tp4835
a(g484
g187
tp4836
assg4746
(dp4837
g308
(lp4838
(g4740
g185
tp4839
a(g4735
g162
tp4840
a(g484
g187
tp4841
asssg4746
(dp4842
g4765
(dp4843
g308
(lp4844
(g146
g4772
tp4845
asssg4765
(dp4846
g4626
(dp4847
g308
(lp4848
(g4782
g4634
tp4849
a(g4783
g4635
tp4850
a(g4781
g4636
tp4851
assssg350
g4790
sg351
(dp4852
g4590
(dp4853
g4626
g4797
ssg4606
(dp4854
g4724
g4814
ssg4626
(dp4855
g4724
g4818
sg4765
g4847
ssg4667
(dp4856
g4724
g4824
ssg4686
(dp4857
g4724
g4828
ssg4705
(dp4858
g4724
g4833
ssg4724
(dp4859
sg4746
(dp4860
g4724
g4837
ssg4765
(dp4861
g4606
g4793
sg4686
g4806
sg4746
g4843
sg4667
g4802
sg4705
g4810
sssg359
g4790
sbsg43
g4602
sg46
g1067
sg56
g4602
sg57
g360
((lp4862
(lp4863
g363
ag360
((lp4864
(lp4865
g366
ag363
aa(lp4866
g368
ag369
aa(lp4867
g371
ag372
aa(lp4868
g374
ag375
aa(lp4869
g377
ag378
aa(lp4870
g380
ag381
aa(lp4871
g383
ag384
aa(lp4872
g386
ag387
aatp4873
Rp4874
aa(lp4875
g391
ag360
((lp4876
(lp4877
g366
ag391
aa(lp4878
g395
ag396
aa(lp4879
g398
ag399
aa(lp4880
g401
ag402
aa(lp4881
g404
ag405
aa(lp4882
g407
ag408
aa(lp4883
g410
ag411
aa(lp4884
g413
ag414
aa(lp4885
g416
ag417
aa(lp4886
g419
ag420
aa(lp4887
g422
ag423
aa(lp4888
g425
ag426
aa(lp4889
g428
ag429
aa(lp4890
g431
ag432
aa(lp4891
g434
ag435
aa(lp4892
g437
ag438
aa(lp4893
g440
ag441
aa(lp4894
g443
ag444
aa(lp4895
g446
ag447
aatp4896
Rp4897
aa(lp4898
g451
ag360
((lp4899
(lp4900
g366
ag451
aa(lp4901
g455
ag456
aatp4902
Rp4903
aatp4904
Rp4905
sg61
NsbS'outputspec.subject'
p4906
tp4907
sg1938
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg1939
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Running'
p4921
sS'strat_0'
p4922
(lp4923
g2247
ag1138
ag47
ag4437
ag2478
ag2896
aS'func_to_anat_FLIRT_0'
p4924
ag3480
ag1900
ag4602
ag3823
ag4463
ag3848
asg1911
g3713
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1431960662.182462
s.