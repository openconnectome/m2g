(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(cnipype.pipeline.engine
Node
p18
g7
Ntp19
Rp20
(dp21
S'input_source'
p22
(dp23
sS'_interface'
p24
g5
(cnipype.interfaces.utility
IdentityInterface
p25
g7
Ntp26
Rp27
(dp28
S'inputs'
p29
ctraits.traits
__newobj__
p30
(cnipype.interfaces.base
DynamicTraitedSpec
p31
tp32
Rp33
(dp34
S'__traits_version__'
p35
S'4.5.0'
p36
sS'gm_threshold'
p37
(lp38
F0.7
asbsS'_fields'
p39
(lp40
g37
asS'_mandatory_inputs'
p41
I01
sbsS'_result'
p42
NsS'name'
p43
g37
sS'plugin_args'
p44
(dp45
sS'_hierarchy'
p46
S'seg_preproc_0'
p47
sS'itersource'
p48
NsS'run_without_submitting'
p49
I00
sS'synchronize'
p50
I00
sS'parameterization'
p51
NsS'iterables'
p52
(g37
(lp53
F0.7
atp54
sS'_got_inputs'
p55
I00
sS'_id'
p56
g37
sS'config'
p57
NsS'needed_outputs'
p58
(lp59
sS'overwrite'
p60
NsS'base_dir'
p61
Nsb(dp62
sg5
(g18
g7
Ntp63
Rp64
(dp65
g22
(dp66
sg24
g5
(g25
g7
Ntp67
Rp68
(dp69
g29
g30
(g31
tp70
Rp71
(dp72
g35
g36
sS'csf_threshold'
p73
(lp74
F0.96
asbsg39
(lp75
g73
asg41
I01
sbsg42
Nsg43
g73
sg44
(dp76
sg46
g47
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
(g73
(lp77
F0.96
atp78
sg55
I00
sg56
g73
sg57
Nsg58
(lp79
sg60
Nsg61
Nsb(dp80
sg5
(g6
g7
Ntp81
Rp82
(dp83
g11
g5
(g12
g7
Ntp84
Rp85
(dp86
g16
(dp87
g5
(g18
g7
Ntp88
Rp89
(dp90
g22
(dp91
sg24
g5
(g25
g7
Ntp92
Rp93
(dp94
g29
g30
(g31
tp95
Rp96
(dp97
S'standard2highres_rig'
p98
ctraits.trait_base
_Undefined
p99
(tRp100
sg35
g36
sS'standard2highres_init'
p101
g100
sS'tissue_prior'
p102
g100
sS'standard2highres_mat'
p103
g100
sS'brain'
p104
g100
sS'probability_map'
p105
g100
sS'threshold'
p106
g100
sbsg39
(lp107
g102
ag106
ag104
ag105
ag101
ag103
ag98
asg41
I01
sbsg42
Nsg43
S'inputspec'
p108
sg44
(dp109
sg46
S'WM'
p110
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp111
sg60
Nsg61
Nsb(dp112
sg5
(g18
g7
Ntp113
Rp114
(dp115
g22
(dp116
sg24
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p117
g7
Ntp118
Rp119
(dp120
g29
g30
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p121
tp122
Rp123
(dp124
S'ignore_exception'
p125
I00
sg35
g36
sS'op_string'
p126
g100
sS'out_data_type'
p127
g100
sS'out_file'
p128
g100
sS'args'
p129
g100
sS'in_file2'
p130
g100
sS'terminal_output'
p131
S'stream'
p132
sS'environ'
p133
g5
(ctraits.trait_handlers
TraitDictObject
p134
c__builtin__
dict
p135
(dp136
S'FSLOUTPUTTYPE'
p137
S'NIFTI_GZ'
p138
stp139
Rp140
(dp141
S'name_items'
p142
S'environ_items'
p143
sg43
g133
sbsS'in_file'
p144
g100
sS'output_type'
p145
g138
sS'suffix'
p146
g100
sbsS'_output_type'
p147
g138
sS'_environ'
p148
NsS'_terminal_output'
p149
g132
sbsg42
Nsg43
S'binarize_threshold_WM'
p150
sg44
(dp151
sg46
g110
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g150
sg57
Nsg58
(lp152
sg60
Nsg61
Nsb(dp153
sg5
(g18
g7
Ntp154
Rp155
(dp156
g22
(dp157
sg24
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p158
g7
Ntp159
Rp160
(dp161
g29
g30
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p162
tp163
Rp164
(dp165
S'rigid2D'
p166
g100
sg35
g36
sS'in_matrix_file'
p167
g100
sS'verbose'
p168
g100
sS'reference'
p169
g100
sS'padding_size'
p170
g100
sS'sinc_window'
p171
g100
sS'interp'
p172
S'nearestneighbour'
p173
sS'wmnorms'
p174
g100
sS'coarse_search'
p175
g100
sS'no_resample'
p176
g100
sS'sinc_width'
p177
g100
sS'in_weight'
p178
g100
sS'fieldmap'
p179
g100
sS'echospacing'
p180
g100
sS'ref_weight'
p181
g100
sS'apply_isoxfm'
p182
g100
sS'fieldmapmask'
p183
g100
sg144
g100
sS'bbrtype'
p184
g100
sS'no_clamp'
p185
g100
sS'force_scaling'
p186
g100
sS'pedir'
p187
g100
sg125
I00
sS'display_init'
p188
g100
sS'schedule'
p189
g100
sg129
g100
sS'uses_qform'
p190
g100
sS'wmcoords'
p191
g100
sg131
g132
sS'fine_search'
p192
g100
sS'angle_rep'
p193
g100
sS'no_search'
p194
g100
sS'apply_xfm'
p195
I01
sS'wm_seg'
p196
g100
sg128
g100
sS'bbrslope'
p197
g100
sS'datatype'
p198
g100
sS'save_log'
p199
g100
sS'dof'
p200
g100
sS'out_matrix_file'
p201
g100
sS'no_resample_blur'
p202
g100
sS'min_sampling'
p203
g100
sS'cost_func'
p204
g100
sS'cost'
p205
g100
sg133
g5
(g134
g135
(dp206
g137
g138
stp207
Rp208
(dp209
g142
S'environ_items'
p210
sg43
g133
sbsS'searchr_x'
p211
g100
sS'out_log'
p212
g100
sg145
g138
sS'searchr_z'
p213
g100
sS'bins'
p214
g100
sS'searchr_y'
p215
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'WM_prior_mni_to_t1'
p216
sg44
(dp217
sg46
g110
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g216
sg57
Nsg58
(lp218
sg60
Nsg61
Nsb(dp219
sg5
(g18
g7
Ntp220
Rp221
(dp222
g22
(dp223
sg24
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p224
g7
Ntp225
Rp226
(dp227
g29
g30
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p228
tp229
Rp230
(dp231
g125
I00
sS'nan2zeros'
p232
g100
sg126
S'-mas %s '
p233
sg128
g100
sg129
g100
sS'internal_datatype'
p234
g100
sg35
g36
sg131
g132
sg133
g5
(g134
g135
(dp235
g137
g138
stp236
Rp237
(dp238
g142
S'environ_items'
p239
sg43
g133
sbsg144
g100
sg145
g138
sS'output_datatype'
p240
g100
sS'operand_files'
p241
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'overlap_WM_map_with_prior'
p242
sg44
(dp243
sg46
g110
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g242
sg57
Nsg58
(lp244
sg60
Nsg61
Nsb(dp245
sg5
(g18
g7
Ntp246
Rp247
(dp248
g22
(dp249
sg24
g5
(g25
g7
Ntp250
Rp251
(dp252
g29
g30
(g31
tp253
Rp254
(dp255
g35
g36
sS'segment_combo'
p256
g100
sS'segment_mask'
p257
g100
sS'tissueprior_mni2t1'
p258
g100
sS'segment_bin'
p259
g100
sbsg39
(lp260
g258
ag256
ag259
ag257
asg41
I01
sbsg42
Nsg43
S'outputspec'
p261
sg44
(dp262
sg46
g110
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp263
sg60
Nsg61
Nsb(dp264
sg5
(g18
g7
Ntp265
Rp266
(dp267
g22
(dp268
sg24
g5
(g224
g7
Ntp269
Rp270
(dp271
g29
g30
(g228
tp272
Rp273
(dp274
g125
I00
sg232
g100
sg126
g233
sg128
g100
sg129
g100
sg234
g100
sg35
g36
sg131
g132
sg133
g5
(g134
g135
(dp275
g137
g138
stp276
Rp277
(dp278
g142
S'environ_items'
p279
sg43
g133
sbsg144
g100
sg145
g138
sg240
g100
sg241
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'WM_mask'
p280
sg44
(dp281
sg46
g110
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g280
sg57
Nsg58
(lp282
sg60
Nsg61
Nsb(dp283
ssS'graph'
p284
(dp285
sS'succ'
p286
(dp287
g89
(dp288
g155
(dp289
S'connect'
p290
(lp291
(g102
g144
tp292
a(g104
g169
tp293
a(g103
g167
tp294
assg221
(dp295
g290
(lp296
(g105
g144
tp297
assg114
(dp298
g290
(lp299
((g106
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p300
(ttp301
g126
tp302
asssg114
(dp303
g266
(dp304
g290
(lp305
(g128
g144
tp306
assg247
(dp307
g290
(lp308
(g128
g259
tp309
asssg155
(dp310
g266
(dp311
g290
(lp312
(g128
g241
tp313
assg221
(dp314
g290
(lp315
(g128
g241
tp316
assg247
(dp317
g290
(lp318
(g128
g258
tp319
asssg221
(dp320
g247
(dp321
g290
(lp322
(g128
g256
tp323
assg114
(dp324
g290
(lp325
(g128
g144
tp326
asssg247
(dp327
sg266
(dp328
g247
(dp329
g290
(lp330
(g128
g257
tp331
assssS'edge'
p332
g287
sS'pred'
p333
(dp334
g89
(dp335
sg114
(dp336
g89
g298
sg221
g324
ssg155
(dp337
g89
g289
ssg221
(dp338
g89
g295
sg155
g314
ssg247
(dp339
g155
g317
sg221
g321
sg266
g329
sg114
g307
ssg266
(dp340
g155
g311
sg114
g304
sssS'adj'
p341
g287
sbsg43
g110
sg46
g47
sg56
g110
sg57
ccollections
OrderedDict
p342
((lp343
(lp344
S'logging'
p345
ag342
((lp346
(lp347
S'__name__'
p348
ag345
aa(lp349
S'workflow_level'
p350
aS'INFO'
p351
aa(lp352
S'filemanip_level'
p353
aS'INFO'
p354
aa(lp355
S'interface_level'
p356
aS'INFO'
p357
aa(lp358
S'log_to_file'
p359
aS'True'
p360
aa(lp361
S'log_directory'
p362
aS'/mnt/ssd1/data/outputs/CPAC/CPACtest2/outputs/logs/849_2089413811'
p363
aa(lp364
S'log_size'
p365
aS'16384000'
p366
aa(lp367
S'log_rotate'
p368
aS'4'
p369
aatp370
Rp371
aa(lp372
S'execution'
p373
ag342
((lp374
(lp375
g348
ag373
aa(lp376
S'create_report'
p377
aS'true'
p378
aa(lp379
S'crashdump_dir'
p380
aS'/home/eric/Documents/m2g/packages/functional/functional_pipe/loni_wrappers'
p381
aa(lp382
S'display_variable'
p383
aS':1'
p384
aa(lp385
S'hash_method'
p386
aS'timestamp'
p387
aa(lp388
S'job_finished_timeout'
p389
aS'5'
p390
aa(lp391
S'keep_inputs'
p392
aS'false'
p393
aa(lp394
S'local_hash_check'
p395
aS'true'
p396
aa(lp397
S'matplotlib_backend'
p398
aS'Agg'
p399
aa(lp400
S'plugin'
p401
aS'Linear'
p402
aa(lp403
S'remove_node_directories'
p404
aS'false'
p405
aa(lp406
S'remove_unnecessary_outputs'
p407
aS'true'
p408
aa(lp409
S'single_thread_matlab'
p410
aS'true'
p411
aa(lp412
S'stop_on_first_crash'
p413
aS'false'
p414
aa(lp415
S'stop_on_first_rerun'
p416
aS'false'
p417
aa(lp418
S'use_relative_paths'
p419
aS'false'
p420
aa(lp421
S'stop_on_unknown_version'
p422
aS'false'
p423
aa(lp424
S'write_provenance'
p425
aS'false'
p426
aa(lp427
S'parameterize_dirs'
p428
aS'true'
p429
aatp430
Rp431
aa(lp432
S'check'
p433
ag342
((lp434
(lp435
g348
ag433
aa(lp436
S'interval'
p437
aS'1209600'
p438
aatp439
Rp440
aatp441
Rp442
sg61
Nsb(dp443
sg5
(g18
g7
Ntp444
Rp445
(dp446
g22
(dp447
sg24
g5
(g25
g7
Ntp448
Rp449
(dp450
g29
g30
(g31
tp451
Rp452
(dp453
S'partial_volume_files'
p454
g100
sg35
g36
sS'gm_combo'
p455
g100
sS'mixeltype'
p456
g100
sS'csf_mni2t1'
p457
g100
sS'wm_bin'
p458
g100
sS'csf_bin'
p459
g100
sS'probability_maps'
p460
g100
sS'wm_mni2t1'
p461
g100
sS'csf_combo'
p462
g100
sS'wm_combo'
p463
g100
sS'wm_mask'
p464
g100
sS'gm_mask'
p465
g100
sS'csf_mask'
p466
g100
sS'gm_bin'
p467
g100
sS'partial_volume_map'
p468
g100
sS'gm_mni2t1'
p469
g100
sbsg39
(lp470
g457
ag462
ag459
ag466
ag469
ag455
ag467
ag465
ag461
ag463
ag458
ag460
ag456
ag468
ag454
ag464
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp471
sg46
g47
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp472
sg60
Nsg61
Nsb(dp473
sg5
(g18
g7
Ntp474
Rp475
(dp476
g22
(dp477
sg24
g5
(g25
g7
Ntp478
Rp479
(dp480
g29
g30
(g31
tp481
Rp482
(dp483
g35
g36
sS'wm_threshold'
p484
(lp485
F0.96
asbsg39
(lp486
g484
asg41
I01
sbsg42
Nsg43
g484
sg44
(dp487
sg46
g47
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
(g484
(lp488
F0.96
atp489
sg55
I00
sg56
g484
sg57
Nsg58
(lp490
sg60
Nsg61
Nsb(dp491
sg5
(g18
g7
Ntp492
Rp493
(dp494
g22
(dp495
sg24
g5
(g25
g7
Ntp496
Rp497
(dp498
g29
g30
(g31
tp499
Rp500
(dp501
g98
g100
sg35
g36
sg101
g100
sg104
g100
sS'PRIOR_GRAY'
p502
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p503
sg103
g100
sS'PRIOR_CSF'
p504
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p505
sS'PRIOR_WHITE'
p506
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p507
sbsg39
(lp508
g104
ag101
ag103
ag98
ag504
ag502
ag506
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp509
sg46
g47
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp510
sg60
Nsg61
Nsb(dp511
sg5
(g18
g7
Ntp512
Rp513
(dp514
g22
(dp515
sg24
g5
(cnipype.interfaces.fsl.preprocess
FAST
p516
g7
Ntp517
Rp518
(dp519
g29
g30
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p520
tp521
Rp522
(dp523
S'number_classes'
p524
g100
sS'out_basename'
p525
S'segment'
p526
sS'hyper'
p527
g100
sg168
g100
sS'init_seg_smooth'
p528
g100
sS'init_transform'
p529
g100
sS'no_pve'
p530
g100
sS'output_biascorrected'
p531
g100
sS'mixel_smooth'
p532
g100
sS'segments'
p533
I01
sS'iters_afterbias'
p534
g100
sS'bias_lowpass'
p535
g100
sS'other_priors'
p536
g100
sg35
g36
sg125
I00
sS'img_type'
p537
I1
sg129
g100
sg460
I01
sS'manual_seg'
p538
g100
sg131
g132
sS'output_biasfield'
p539
g100
sS'no_bias'
p540
g100
sS'use_priors'
p541
g100
sS'in_files'
p542
g100
sS'segment_iters'
p543
g100
sg133
g5
(g134
g135
(dp544
g137
g138
stp545
Rp546
(dp547
g142
S'environ_items'
p548
sg43
g133
sbsg145
g138
sS'bias_iters'
p549
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
g526
sg44
(dp550
sg46
g47
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g526
sg57
Nsg58
(lp551
sg60
Nsg61
Nsb(dp552
sg5
(g6
g7
Ntp553
Rp554
(dp555
g11
g5
(g12
g7
Ntp556
Rp557
(dp558
g16
(dp559
g5
(g18
g7
Ntp560
Rp561
(dp562
g22
(dp563
sg24
g5
(g158
g7
Ntp564
Rp565
(dp566
g29
g30
(g162
tp567
Rp568
(dp569
g166
g100
sg35
g36
sg167
g100
sg168
g100
sg169
g100
sg170
g100
sg171
g100
sg172
g173
sg174
g100
sg175
g100
sg176
g100
sg177
g100
sg178
g100
sg179
g100
sg180
g100
sg181
g100
sg182
g100
sg183
g100
sg144
g100
sg184
g100
sg185
g100
sg186
g100
sg187
g100
sg125
I00
sg188
g100
sg189
g100
sg129
g100
sg190
g100
sg191
g100
sg131
g132
sg192
g100
sg193
g100
sg194
g100
sg195
I01
sg196
g100
sg128
g100
sg197
g100
sg198
g100
sg199
g100
sg200
g100
sg201
g100
sg202
g100
sg203
g100
sg204
g100
sg205
g100
sg133
g5
(g134
g135
(dp570
g137
g138
stp571
Rp572
(dp573
g142
S'environ_items'
p574
sg43
g133
sbsg211
g100
sg212
g100
sg145
g138
sg213
g100
sg214
g100
sg215
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'GM_prior_mni_to_t1'
p575
sg44
(dp576
sg46
S'GM'
p577
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g575
sg57
Nsg58
(lp578
sg60
Nsg61
Nsb(dp579
sg5
(g18
g7
Ntp580
Rp581
(dp582
g22
(dp583
sg24
g5
(g224
g7
Ntp584
Rp585
(dp586
g29
g30
(g228
tp587
Rp588
(dp589
g125
I00
sg232
g100
sg126
g233
sg128
g100
sg129
g100
sg234
g100
sg35
g36
sg131
g132
sg133
g5
(g134
g135
(dp590
g137
g138
stp591
Rp592
(dp593
g142
S'environ_items'
p594
sg43
g133
sbsg144
g100
sg145
g138
sg240
g100
sg241
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'GM_mask'
p595
sg44
(dp596
sg46
g577
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g595
sg57
Nsg58
(lp597
sg60
Nsg61
Nsb(dp598
sg5
(g18
g7
Ntp599
Rp600
(dp601
g22
(dp602
sg24
g5
(g224
g7
Ntp603
Rp604
(dp605
g29
g30
(g228
tp606
Rp607
(dp608
g125
I00
sg232
g100
sg126
g233
sg128
g100
sg129
g100
sg234
g100
sg35
g36
sg131
g132
sg133
g5
(g134
g135
(dp609
g137
g138
stp610
Rp611
(dp612
g142
S'environ_items'
p613
sg43
g133
sbsg144
g100
sg145
g138
sg240
g100
sg241
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'overlap_GM_map_with_prior'
p614
sg44
(dp615
sg46
g577
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g614
sg57
Nsg58
(lp616
sg60
Nsg61
Nsb(dp617
sg5
(g18
g7
Ntp618
Rp619
(dp620
g22
(dp621
sg24
g5
(g25
g7
Ntp622
Rp623
(dp624
g29
g30
(g31
tp625
Rp626
(dp627
g35
g36
sg256
g100
sg257
g100
sg258
g100
sg259
g100
sbsg39
(lp628
g258
ag256
ag259
ag257
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp629
sg46
g577
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp630
sg60
Nsg61
Nsb(dp631
sg5
(g18
g7
Ntp632
Rp633
(dp634
g22
(dp635
sg24
g5
(g25
g7
Ntp636
Rp637
(dp638
g29
g30
(g31
tp639
Rp640
(dp641
g98
g100
sg35
g36
sg101
g100
sg102
g100
sg103
g100
sg104
g100
sg105
g100
sg106
g100
sbsg39
(lp642
g102
ag106
ag104
ag105
ag101
ag103
ag98
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp643
sg46
g577
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp644
sg60
Nsg61
Nsb(dp645
sg5
(g18
g7
Ntp646
Rp647
(dp648
g22
(dp649
sg24
g5
(g117
g7
Ntp650
Rp651
(dp652
g29
g30
(g121
tp653
Rp654
(dp655
g125
I00
sg35
g36
sg126
g100
sg127
g100
sg128
g100
sg129
g100
sg130
g100
sg131
g132
sg133
g5
(g134
g135
(dp656
g137
g138
stp657
Rp658
(dp659
g142
S'environ_items'
p660
sg43
g133
sbsg144
g100
sg145
g138
sg146
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'binarize_threshold_GM'
p661
sg44
(dp662
sg46
g577
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g661
sg57
Nsg58
(lp663
sg60
Nsg61
Nsb(dp664
ssg284
(dp665
sg286
(dp666
g561
(dp667
g619
(dp668
g290
(lp669
(g128
g258
tp670
assg600
(dp671
g290
(lp672
(g128
g241
tp673
assg581
(dp674
g290
(lp675
(g128
g241
tp676
asssg581
(dp677
g619
(dp678
g290
(lp679
(g128
g257
tp680
asssg600
(dp681
g647
(dp682
g290
(lp683
(g128
g144
tp684
assg619
(dp685
g290
(lp686
(g128
g256
tp687
asssg619
(dp688
sg633
(dp689
g561
(dp690
g290
(lp691
(g102
g144
tp692
a(g104
g169
tp693
a(g103
g167
tp694
assg600
(dp695
g290
(lp696
(g105
g144
tp697
assg647
(dp698
g290
(lp699
((g106
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p700
(ttp701
g126
tp702
asssg647
(dp703
g581
(dp704
g290
(lp705
(g128
g144
tp706
assg619
(dp707
g290
(lp708
(g128
g259
tp709
assssg332
g666
sg333
(dp710
g561
(dp711
g633
g690
ssg581
(dp712
g647
g704
sg561
g674
ssg600
(dp713
g633
g695
sg561
g671
ssg619
(dp714
g561
g668
sg581
g678
sg600
g685
sg647
g707
ssg633
(dp715
sg647
(dp716
g633
g698
sg600
g682
sssg341
g666
sbsg43
g577
sg46
g47
sg56
g577
sg57
g342
((lp717
(lp718
g345
ag342
((lp719
(lp720
g348
ag345
aa(lp721
g350
ag351
aa(lp722
g353
ag354
aa(lp723
g356
ag357
aa(lp724
g359
ag360
aa(lp725
g362
ag363
aa(lp726
g365
ag366
aa(lp727
g368
ag369
aatp728
Rp729
aa(lp730
g373
ag342
((lp731
(lp732
g348
ag373
aa(lp733
g377
ag378
aa(lp734
g380
ag381
aa(lp735
g383
ag384
aa(lp736
g386
ag387
aa(lp737
g389
ag390
aa(lp738
g392
ag393
aa(lp739
g395
ag396
aa(lp740
g398
ag399
aa(lp741
g401
ag402
aa(lp742
g404
ag405
aa(lp743
g407
ag408
aa(lp744
g410
ag411
aa(lp745
g413
ag414
aa(lp746
g416
ag417
aa(lp747
g419
ag420
aa(lp748
g422
ag423
aa(lp749
g425
ag426
aa(lp750
g428
ag429
aatp751
Rp752
aa(lp753
g433
ag342
((lp754
(lp755
g348
ag433
aa(lp756
g437
ag438
aatp757
Rp758
aatp759
Rp760
sg61
Nsb(dp761
sg5
(g6
g7
Ntp762
Rp763
(dp764
g11
g5
(g12
g7
Ntp765
Rp766
(dp767
g16
(dp768
g5
(g18
g7
Ntp769
Rp770
(dp771
g22
(dp772
sg24
g5
(g25
g7
Ntp773
Rp774
(dp775
g29
g30
(g31
tp776
Rp777
(dp778
g35
g36
sg256
g100
sg257
g100
sg258
g100
sg259
g100
sbsg39
(lp779
g258
ag256
ag259
ag257
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp780
sg46
S'CSF'
p781
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp782
sg60
Nsg61
Nsb(dp783
sg5
(g18
g7
Ntp784
Rp785
(dp786
g22
(dp787
sg24
g5
(g25
g7
Ntp788
Rp789
(dp790
g29
g30
(g31
tp791
Rp792
(dp793
g98
g100
sg35
g36
sg101
g100
sg102
g100
sg103
g100
sg104
g100
sg105
g100
sg106
g100
sbsg39
(lp794
g102
ag106
ag104
ag105
ag101
ag103
ag98
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp795
sg46
g781
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp796
sg60
Nsg61
Nsb(dp797
sg5
(g18
g7
Ntp798
Rp799
(dp800
g22
(dp801
sg24
g5
(g158
g7
Ntp802
Rp803
(dp804
g29
g30
(g162
tp805
Rp806
(dp807
g166
g100
sg35
g36
sg167
g100
sg168
g100
sg169
g100
sg170
g100
sg171
g100
sg172
g173
sg174
g100
sg175
g100
sg176
g100
sg177
g100
sg178
g100
sg179
g100
sg180
g100
sg181
g100
sg182
g100
sg183
g100
sg144
g100
sg184
g100
sg185
g100
sg186
g100
sg187
g100
sg125
I00
sg188
g100
sg189
g100
sg129
g100
sg190
g100
sg191
g100
sg131
g132
sg192
g100
sg193
g100
sg194
g100
sg195
I01
sg196
g100
sg128
g100
sg197
g100
sg198
g100
sg199
g100
sg200
g100
sg201
g100
sg202
g100
sg203
g100
sg204
g100
sg205
g100
sg133
g5
(g134
g135
(dp808
g137
g138
stp809
Rp810
(dp811
g142
S'environ_items'
p812
sg43
g133
sbsg211
g100
sg212
g100
sg145
g138
sg213
g100
sg214
g100
sg215
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'CSF_prior_mni_to_t1'
p813
sg44
(dp814
sg46
g781
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g813
sg57
Nsg58
(lp815
sg60
Nsg61
Nsb(dp816
sg5
(g18
g7
Ntp817
Rp818
(dp819
g22
(dp820
sg24
g5
(g224
g7
Ntp821
Rp822
(dp823
g29
g30
(g228
tp824
Rp825
(dp826
g125
I00
sg232
g100
sg126
g233
sg128
g100
sg129
g100
sg234
g100
sg35
g36
sg131
g132
sg133
g5
(g134
g135
(dp827
g137
g138
stp828
Rp829
(dp830
g142
S'environ_items'
p831
sg43
g133
sbsg144
g100
sg145
g138
sg240
g100
sg241
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'overlap_CSF_map_with_prior'
p832
sg44
(dp833
sg46
g781
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g832
sg57
Nsg58
(lp834
sg60
Nsg61
Nsb(dp835
sg5
(g18
g7
Ntp836
Rp837
(dp838
g22
(dp839
sg24
g5
(g117
g7
Ntp840
Rp841
(dp842
g29
g30
(g121
tp843
Rp844
(dp845
g125
I00
sg35
g36
sg126
g100
sg127
g100
sg128
g100
sg129
g100
sg130
g100
sg131
g132
sg133
g5
(g134
g135
(dp846
g137
g138
stp847
Rp848
(dp849
g142
S'environ_items'
p850
sg43
g133
sbsg144
g100
sg145
g138
sg146
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'binarize_threshold_CSF'
p851
sg44
(dp852
sg46
g781
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g851
sg57
Nsg58
(lp853
sg60
Nsg61
Nsb(dp854
sg5
(g18
g7
Ntp855
Rp856
(dp857
g22
(dp858
sg24
g5
(g224
g7
Ntp859
Rp860
(dp861
g29
g30
(g228
tp862
Rp863
(dp864
g125
I00
sg232
g100
sg126
g233
sg128
g100
sg129
g100
sg234
g100
sg35
g36
sg131
g132
sg133
g5
(g134
g135
(dp865
g137
g138
stp866
Rp867
(dp868
g142
S'environ_items'
p869
sg43
g133
sbsg144
g100
sg145
g138
sg240
g100
sg241
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'CSF_mask'
p870
sg44
(dp871
sg46
g781
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g870
sg57
Nsg58
(lp872
sg60
Nsg61
Nsb(dp873
ssg284
(dp874
sg286
(dp875
g770
(dp876
sg785
(dp877
g799
(dp878
g290
(lp879
(g102
g144
tp880
a(g104
g169
tp881
a(g103
g167
tp882
assg818
(dp883
g290
(lp884
(g105
g144
tp885
assg837
(dp886
g290
(lp887
((g106
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p888
(ttp889
g126
tp890
asssg799
(dp891
g770
(dp892
g290
(lp893
(g128
g258
tp894
assg818
(dp895
g290
(lp896
(g128
g241
tp897
assg856
(dp898
g290
(lp899
(g128
g241
tp900
asssg818
(dp901
g837
(dp902
g290
(lp903
(g128
g144
tp904
assg770
(dp905
g290
(lp906
(g128
g256
tp907
asssg837
(dp908
g856
(dp909
g290
(lp910
(g128
g144
tp911
assg770
(dp912
g290
(lp913
(g128
g259
tp914
asssg856
(dp915
g770
(dp916
g290
(lp917
(g128
g257
tp918
assssg332
g875
sg333
(dp919
g770
(dp920
g799
g892
sg818
g905
sg856
g916
sg837
g912
ssg785
(dp921
sg799
(dp922
g785
g878
ssg818
(dp923
g785
g883
sg799
g895
ssg837
(dp924
g785
g886
sg818
g902
ssg856
(dp925
g837
g909
sg799
g898
sssg341
g875
sbsg43
g781
sg46
g47
sg56
g781
sg57
g342
((lp926
(lp927
g345
ag342
((lp928
(lp929
g348
ag345
aa(lp930
g350
ag351
aa(lp931
g353
ag354
aa(lp932
g356
ag357
aa(lp933
g359
ag360
aa(lp934
g362
ag363
aa(lp935
g365
ag366
aa(lp936
g368
ag369
aatp937
Rp938
aa(lp939
g373
ag342
((lp940
(lp941
g348
ag373
aa(lp942
g377
ag378
aa(lp943
g380
ag381
aa(lp944
g383
ag384
aa(lp945
g386
ag387
aa(lp946
g389
ag390
aa(lp947
g392
ag393
aa(lp948
g395
ag396
aa(lp949
g398
ag399
aa(lp950
g401
ag402
aa(lp951
g404
ag405
aa(lp952
g407
ag408
aa(lp953
g410
ag411
aa(lp954
g413
ag414
aa(lp955
g416
ag417
aa(lp956
g419
ag420
aa(lp957
g422
ag423
aa(lp958
g425
ag426
aa(lp959
g428
ag429
aatp960
Rp961
aa(lp962
g433
ag342
((lp963
(lp964
g348
ag433
aa(lp965
g437
ag438
aatp966
Rp967
aatp968
Rp969
sg61
Nsb(dp970
ssg284
(dp971
sg286
(dp972
g20
(dp973
g554
(dp974
g290
(lp975
(g37
S'inputspec.threshold'
p976
tp977
asssg64
(dp978
g763
(dp979
g290
(lp980
(g73
g976
tp981
asssg82
(dp982
g445
(dp983
g290
(lp984
(S'outputspec.tissueprior_mni2t1'
p985
g461
tp986
a(S'outputspec.segment_combo'
p987
g463
tp988
a(S'outputspec.segment_bin'
p989
g458
tp990
a(S'outputspec.segment_mask'
p991
g464
tp992
asssg445
(dp993
sg475
(dp994
g82
(dp995
g290
(lp996
(g484
g976
tp997
asssg493
(dp998
g82
(dp999
g290
(lp1000
(g104
S'inputspec.brain'
p1001
tp1002
a(g506
S'inputspec.tissue_prior'
p1003
tp1004
a(g103
S'inputspec.standard2highres_mat'
p1005
tp1006
assg513
(dp1007
g290
(lp1008
(g104
g542
tp1009
assg554
(dp1010
g290
(lp1011
(g104
g1001
tp1012
a(g502
g1003
tp1013
a(g103
g1005
tp1014
assg763
(dp1015
g290
(lp1016
(g104
g1001
tp1017
a(g504
g1003
tp1018
a(g103
g1005
tp1019
asssg513
(dp1020
g82
(dp1021
g290
(lp1022
((g460
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1023
(ttp1024
S'inputspec.probability_map'
p1025
tp1026
assg445
(dp1027
g290
(lp1028
(g460
g460
tp1029
a(g456
g456
tp1030
a(g454
g454
tp1031
a(g468
g468
tp1032
assg554
(dp1033
g290
(lp1034
((g460
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1035
(ttp1036
g1025
tp1037
assg763
(dp1038
g290
(lp1039
((g460
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1040
(ttp1041
g1025
tp1042
asssg554
(dp1043
g445
(dp1044
g290
(lp1045
(g985
g469
tp1046
a(g987
g455
tp1047
a(g989
g467
tp1048
a(g991
g465
tp1049
asssg763
(dp1050
g445
(dp1051
g290
(lp1052
(g985
g457
tp1053
a(g987
g462
tp1054
a(g989
g459
tp1055
a(g991
g466
tp1056
assssg332
g972
sg333
(dp1057
g20
(dp1058
sg64
(dp1059
sg82
(dp1060
g493
g999
sg513
g1021
sg475
g995
ssg445
(dp1061
g82
g983
sg513
g1027
sg554
g1044
sg763
g1051
ssg475
(dp1062
sg493
(dp1063
sg513
(dp1064
g493
g1007
ssg554
(dp1065
g493
g1010
sg513
g1033
sg20
g974
ssg763
(dp1066
g493
g1015
sg513
g1038
sg64
g979
sssg341
g972
sbsg43
g47
sg46
S'resting_preproc_849_2089413811'
p1067
sg56
g47
sg57
g342
((lp1068
(lp1069
g345
ag342
((lp1070
(lp1071
g348
ag345
aa(lp1072
g350
ag351
aa(lp1073
g353
ag354
aa(lp1074
g356
ag357
aa(lp1075
g359
ag360
aa(lp1076
g362
ag363
aa(lp1077
g365
ag366
aa(lp1078
g368
ag369
aatp1079
Rp1080
aa(lp1081
g373
ag342
((lp1082
(lp1083
g348
ag373
aa(lp1084
g377
ag378
aa(lp1085
g380
ag381
aa(lp1086
g383
ag384
aa(lp1087
g386
ag387
aa(lp1088
g389
ag390
aa(lp1089
g392
ag393
aa(lp1090
g395
ag396
aa(lp1091
g398
ag399
aa(lp1092
g401
ag402
aa(lp1093
g404
ag405
aa(lp1094
g407
ag408
aa(lp1095
g410
ag411
aa(lp1096
g413
ag414
aa(lp1097
g416
ag417
aa(lp1098
g419
ag420
aa(lp1099
g422
ag423
aa(lp1100
g425
ag426
aa(lp1101
g428
ag429
aatp1102
Rp1103
aa(lp1104
g433
ag342
((lp1105
(lp1106
g348
ag433
aa(lp1107
g437
ag438
aatp1108
Rp1109
aatp1110
Rp1111
sg61
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g18
g7
Ntp1122
Rp1123
(dp1124
g22
(dp1125
sg24
g5
(g25
g7
Ntp1126
Rp1127
(dp1128
g29
g30
(g31
tp1129
Rp1130
(dp1131
g35
g36
sS'output_brain'
p1132
g100
sS'nonlinear_xfm'
p1133
g100
sS'invlinear_xfm'
p1134
g100
sS'linear_xfm'
p1135
g100
sbsg39
(lp1136
g1132
ag1135
ag1134
ag1133
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp1137
sg46
S'anat_mni_fnirt_register_0'
p1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp1139
sg60
Nsg61
Nsb(dp1140
sg5
(g18
g7
Ntp1141
Rp1142
(dp1143
g22
(dp1144
sg24
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1145
g7
Ntp1146
Rp1147
(dp1148
g29
g30
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1149
tp1150
Rp1151
(dp1152
g125
I00
sS'supersample'
p1153
g100
sg144
g100
sS'superlevel'
p1154
g100
sg128
g100
sg198
g100
sg129
g100
sg172
g100
sS'field_file'
p1155
g100
sS'ref_file'
p1156
g100
sg131
g132
sg133
g5
(g134
g135
(dp1157
g137
g138
stp1158
Rp1159
(dp1160
g142
S'environ_items'
p1161
sg43
g133
sbsS'premat'
p1162
g100
sS'mask_file'
p1163
g100
sg145
g138
sS'relwarp'
p1164
g100
sS'abswarp'
p1165
g100
sg35
g36
sS'postmat'
p1166
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'brain_warp'
p1167
sg44
(dp1168
sg46
g1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1167
sg57
Nsg58
(lp1169
sg60
Nsg61
Nsb(dp1170
sg5
(g18
g7
Ntp1171
Rp1172
(dp1173
g22
(dp1174
sg24
g5
(g158
g7
Ntp1175
Rp1176
(dp1177
g29
g30
(g162
tp1178
Rp1179
(dp1180
g166
g100
sg35
g36
sg167
g100
sg168
g100
sg169
g100
sg170
g100
sg171
g100
sg172
g100
sg174
g100
sg175
g100
sg176
g100
sg177
g100
sg178
g100
sg179
g100
sg180
g100
sg181
g100
sg182
g100
sg183
g100
sg144
g100
sg184
g100
sg185
g100
sg186
g100
sg187
g100
sg125
I00
sg188
g100
sg189
g100
sg129
g100
sg190
g100
sg191
g100
sg131
g132
sg192
g100
sg193
g100
sg194
g100
sg195
g100
sg196
g100
sg128
g100
sg197
g100
sg198
g100
sg199
g100
sg200
g100
sg201
g100
sg202
g100
sg203
g100
sg204
g100
sg205
S'corratio'
p1181
sg133
g5
(g134
g135
(dp1182
g137
g138
stp1183
Rp1184
(dp1185
g142
S'environ_items'
p1186
sg43
g133
sbsg211
g100
sg212
g100
sg145
g138
sg213
g100
sg214
g100
sg215
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'linear_reg_0'
p1187
sg44
(dp1188
sg46
g1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1187
sg57
Nsg58
(lp1189
sg60
Nsg61
Nsb(dp1190
sg5
(g18
g7
Ntp1191
Rp1192
(dp1193
g22
(dp1194
sg24
g5
(g25
g7
Ntp1195
Rp1196
(dp1197
g29
g30
(g31
tp1198
Rp1199
(dp1200
S'fnirt_config'
p1201
S'T1_2_MNI152_2mm'
p1202
sg35
g36
sS'input_brain'
p1203
g100
sS'reference_skull'
p1204
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1205
sS'reference_brain'
p1206
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1207
sS'input_skull'
p1208
g100
sbsg39
(lp1209
g1203
ag1208
ag1206
ag1204
ag1201
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp1210
sg46
g1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp1211
sg60
Nsg61
Nsb(dp1212
sg5
(g18
g7
Ntp1213
Rp1214
(dp1215
g22
(dp1216
sg24
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1217
g7
Ntp1218
Rp1219
(dp1220
g29
g30
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1221
tp1222
Rp1223
(dp1224
g125
I00
sg35
g36
sg128
g100
sg129
g100
sg130
g100
sS'fix_scale_skew'
p1225
g100
sS'invert_xfm'
p1226
I01
sg131
g132
sS'concat_xfm'
p1227
g100
sg144
g100
sg145
g138
sg133
g5
(g134
g135
(dp1228
g137
g138
stp1229
Rp1230
(dp1231
g142
S'environ_items'
p1232
sg43
g133
sbsbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'inv_linear_reg0_xfm'
p1233
sg44
(dp1234
sg46
g1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1233
sg57
Nsg58
(lp1235
sg60
Nsg61
Nsb(dp1236
sg5
(g18
g7
Ntp1237
Rp1238
(dp1239
g22
(dp1240
sg24
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1241
g7
Ntp1242
Rp1243
(dp1244
g29
g30
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1245
tp1246
Rp1247
(dp1248
g35
g36
sS'derive_from_ref'
p1249
g100
sS'in_intensitymap_file'
p1250
g100
sS'modulatedref_file'
p1251
g100
sS'refmask_val'
p1252
g100
sS'hessian_precision'
p1253
g100
sS'in_fwhm'
p1254
g100
sS'skip_implicit_in_masking'
p1255
g100
sS'inmask_file'
p1256
g100
sS'refmask_file'
p1257
g100
sS'inwarp_file'
p1258
g100
sS'skip_lambda_ssq'
p1259
g100
sS'intensity_mapping_model'
p1260
g100
sS'affine_file'
p1261
g100
sS'apply_inmask'
p1262
g100
sS'spline_order'
p1263
g100
sS'apply_refmask'
p1264
g100
sS'subsampling_scheme'
p1265
g100
sg144
g100
sS'warped_file'
p1266
g100
sS'skip_refmask'
p1267
g100
sg125
I00
sS'ref_fwhm'
p1268
g100
sS'inmask_val'
p1269
g100
sS'config_file'
p1270
g100
sg1155
g100
sg129
g100
sS'apply_intensity_mapping'
p1271
g100
sS'regularization_lambda'
p1272
g100
sg131
g132
sS'regularization_model'
p1273
g100
sS'jacobian_range'
p1274
g100
sS'out_intensitymap_file'
p1275
g100
sS'skip_implicit_ref_masking'
p1276
g100
sg1156
g100
sS'skip_inmask'
p1277
g100
sS'fieldcoeff_file'
p1278
I01
sS'warp_resolution'
p1279
g100
sS'jacobian_file'
p1280
I01
sg133
g5
(g134
g135
(dp1281
g137
g138
stp1282
Rp1283
(dp1284
g142
S'environ_items'
p1285
sg43
g133
sbsS'bias_regularization_lambda'
p1286
g100
sg145
g138
sS'skip_intensity_mapping'
p1287
g100
sS'log_file'
p1288
g100
sS'biasfield_resolution'
p1289
g100
sS'intensity_mapping_order'
p1290
g100
sS'max_nonlin_iter'
p1291
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'nonlinear_reg_1'
p1292
sg44
(dp1293
sg46
g1138
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1292
sg57
Nsg58
(lp1294
sg60
Nsg61
Nsb(dp1295
ssg284
(dp1296
sg286
(dp1297
g1123
(dp1298
sg1142
(dp1299
g1123
(dp1300
g290
(lp1301
(g128
g1132
tp1302
asssg1172
(dp1303
g1238
(dp1304
g290
(lp1305
(g201
g1261
tp1306
assg1123
(dp1307
g290
(lp1308
(g201
g1135
tp1309
assg1214
(dp1310
g290
(lp1311
(g201
g144
tp1312
asssg1192
(dp1313
g1142
(dp1314
g290
(lp1315
(g1203
g144
tp1316
a(g1206
g1156
tp1317
assg1172
(dp1318
g290
(lp1319
(g1203
g144
tp1320
a(g1206
g169
tp1321
assg1238
(dp1322
g290
(lp1323
(g1208
g144
tp1324
a(g1204
g1156
tp1325
a(g1201
g1270
tp1326
asssg1214
(dp1327
g1123
(dp1328
g290
(lp1329
(g128
g1134
tp1330
asssg1238
(dp1331
g1142
(dp1332
g290
(lp1333
(g1278
g1155
tp1334
assg1123
(dp1335
g290
(lp1336
(g1278
g1133
tp1337
assssg332
g1297
sg333
(dp1338
g1123
(dp1339
g1172
g1307
sg1142
g1300
sg1238
g1335
sg1214
g1328
ssg1142
(dp1340
g1192
g1314
sg1238
g1332
ssg1172
(dp1341
g1192
g1318
ssg1192
(dp1342
sg1214
(dp1343
g1172
g1310
ssg1238
(dp1344
g1192
g1322
sg1172
g1304
sssg341
g1297
sbsg43
g1138
sg46
g1067
sg56
g1138
sg57
g342
((lp1345
(lp1346
g345
ag342
((lp1347
(lp1348
g348
ag345
aa(lp1349
g350
ag351
aa(lp1350
g353
ag354
aa(lp1351
g356
ag357
aa(lp1352
g359
ag360
aa(lp1353
g362
ag363
aa(lp1354
g365
ag366
aa(lp1355
g368
ag369
aatp1356
Rp1357
aa(lp1358
g373
ag342
((lp1359
(lp1360
g348
ag373
aa(lp1361
g377
ag378
aa(lp1362
g380
ag381
aa(lp1363
g383
ag384
aa(lp1364
g386
ag387
aa(lp1365
g389
ag390
aa(lp1366
g392
ag393
aa(lp1367
g395
ag396
aa(lp1368
g398
ag399
aa(lp1369
g401
ag402
aa(lp1370
g404
ag405
aa(lp1371
g407
ag408
aa(lp1372
g410
ag411
aa(lp1373
g413
ag414
aa(lp1374
g416
ag417
aa(lp1375
g419
ag420
aa(lp1376
g422
ag423
aa(lp1377
g425
ag426
aa(lp1378
g428
ag429
aatp1379
Rp1380
aa(lp1381
g433
ag342
((lp1382
(lp1383
g348
ag433
aa(lp1384
g437
ag438
aatp1385
Rp1386
aatp1387
Rp1388
sg61
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g18
g7
Ntp1399
Rp1400
(dp1401
g22
(dp1402
sg24
g5
(g25
g7
Ntp1403
Rp1404
(dp1405
g29
g30
(g31
tp1406
Rp1407
(dp1408
g35
g36
sS'underlay'
p1409
g100
sS'overlay'
p1410
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1411
sbsg39
(lp1412
g1409
ag1410
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp1413
sg46
S'montage_mfi_0'
p1414
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp1415
sg60
Nsg61
Nsb(dp1416
sg5
(g18
g7
Ntp1417
Rp1418
(dp1419
g22
(dp1420
sg24
g5
(cnipype.interfaces.utility
Function
p1421
g7
Ntp1422
Rp1423
(dp1424
S'_input_names'
p1425
(lp1426
g1410
ag1409
aS'png_name'
p1427
aS'cbar_name'
p1428
asg29
g30
(cnipype.interfaces.utility
FunctionInputSpec
p1429
tp1430
Rp1431
(dp1432
g125
I00
sg1427
S'MNI_edge_on_mean_func_mni_a.png'
p1433
sg1410
g100
sg1428
S'red'
p1434
sS'function_str'
p1435
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1436
sg1409
g100
sg35
g36
sbsS'_out'
p1437
(dp1438
g1427
NssS'_output_names'
p1439
(lp1440
g1427
asS'imports'
p1441
Nsbsg42
Nsg43
S'montage_a'
p1442
sg44
(dp1443
sg46
g1414
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1442
sg57
Nsg58
(lp1444
sg60
Nsg61
Nsb(dp1445
sg5
(g18
g7
Ntp1446
Rp1447
(dp1448
g22
(dp1449
sg24
g5
(g1421
g7
Ntp1450
Rp1451
(dp1452
g1425
(lp1453
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp1454
Rp1455
(dp1456
g125
I00
sg1427
S'MNI_edge_on_mean_func_mni_s.png'
p1457
sg1410
g100
sg1428
g1434
sg1435
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1458
sg1409
g100
sg35
g36
sbsg1437
(dp1459
g1427
Nssg1439
(lp1460
g1427
asg1441
Nsbsg42
Nsg43
S'montage_s'
p1461
sg44
(dp1462
sg46
g1414
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1461
sg57
Nsg58
(lp1463
sg60
Nsg61
Nsb(dp1464
sg5
(g18
g7
Ntp1465
Rp1466
(dp1467
g22
(dp1468
sg24
g5
(g1421
g7
Ntp1469
Rp1470
(dp1471
g1425
(lp1472
S'file_'
p1473
asg29
g30
(g1429
tp1474
Rp1475
(dp1476
g125
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1477
sg1473
g100
sg35
g36
sbsg1437
(dp1478
S'new_fname'
p1479
Nssg1439
(lp1480
g1479
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp1481
sg51
Nsg48
Nsg60
Nsg43
S'resample_o'
p1482
sg46
g1414
sg50
I00
sg52
Nsg55
I00
sg56
g1482
sg57
Nsg58
(lp1483
sg61
Nsb(dp1484
sg5
(g18
g7
Ntp1485
Rp1486
(dp1487
g22
(dp1488
sg24
g5
(g1421
g7
Ntp1489
Rp1490
(dp1491
g1425
(lp1492
g1473
asg29
g30
(g1429
tp1493
Rp1494
(dp1495
g125
I00
sg1435
g1477
sg1473
g100
sg35
g36
sbsg1437
(dp1496
g1479
Nssg1439
(lp1497
g1479
asg1441
Nsbsg42
Nsg43
S'resample_u'
p1498
sg44
(dp1499
sg46
g1414
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1498
sg57
Nsg58
(lp1500
sg60
Nsg61
Nsb(dp1501
sg5
(g18
g7
Ntp1502
Rp1503
(dp1504
g22
(dp1505
sg24
g5
(g25
g7
Ntp1506
Rp1507
(dp1508
g29
g30
(g31
tp1509
Rp1510
(dp1511
g35
g36
sS'resampled_underlay'
p1512
g100
sS'axial_png'
p1513
g100
sS'sagittal_png'
p1514
g100
sS'resampled_overlay'
p1515
g100
sbsg39
(lp1516
g1513
ag1514
ag1512
ag1515
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp1517
sg46
g1414
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp1518
sg60
Nsg61
Nsb(dp1519
ssg284
(dp1520
sg286
(dp1521
g1400
(dp1522
g1486
(dp1523
g290
(lp1524
(g1409
g1473
tp1525
assg1466
(dp1526
g290
(lp1527
(g1410
g1473
tp1528
asssg1418
(dp1529
g1503
(dp1530
g290
(lp1531
(g1427
g1513
tp1532
asssg1447
(dp1533
g1503
(dp1534
g290
(lp1535
(g1427
g1514
tp1536
asssg1466
(dp1537
g1447
(dp1538
g290
(lp1539
(g1479
g1410
tp1540
assg1418
(dp1541
g290
(lp1542
(g1479
g1410
tp1543
assg1503
(dp1544
g290
(lp1545
(g1479
g1515
tp1546
asssg1486
(dp1547
g1447
(dp1548
g290
(lp1549
(g1479
g1409
tp1550
assg1418
(dp1551
g290
(lp1552
(g1479
g1409
tp1553
assg1503
(dp1554
g290
(lp1555
(g1479
g1512
tp1556
asssg1503
(dp1557
ssg332
g1521
sg333
(dp1558
g1400
(dp1559
sg1418
(dp1560
g1486
g1551
sg1466
g1541
ssg1447
(dp1561
g1486
g1548
sg1466
g1538
ssg1466
(dp1562
g1400
g1526
ssg1486
(dp1563
g1400
g1523
ssg1503
(dp1564
g1486
g1554
sg1447
g1534
sg1466
g1544
sg1418
g1530
sssg341
g1521
sbsg43
g1414
sg46
g1067
sg56
g1414
sg57
g342
((lp1565
(lp1566
g345
ag342
((lp1567
(lp1568
g348
ag345
aa(lp1569
g350
ag351
aa(lp1570
g353
ag354
aa(lp1571
g356
ag357
aa(lp1572
g359
ag360
aa(lp1573
g362
ag363
aa(lp1574
g365
ag366
aa(lp1575
g368
ag369
aatp1576
Rp1577
aa(lp1578
g373
ag342
((lp1579
(lp1580
g348
ag373
aa(lp1581
g377
ag378
aa(lp1582
g380
ag381
aa(lp1583
g383
ag384
aa(lp1584
g386
ag387
aa(lp1585
g389
ag390
aa(lp1586
g392
ag393
aa(lp1587
g395
ag396
aa(lp1588
g398
ag399
aa(lp1589
g401
ag402
aa(lp1590
g404
ag405
aa(lp1591
g407
ag408
aa(lp1592
g410
ag411
aa(lp1593
g413
ag414
aa(lp1594
g416
ag417
aa(lp1595
g419
ag420
aa(lp1596
g422
ag423
aa(lp1597
g425
ag426
aa(lp1598
g428
ag429
aatp1599
Rp1600
aa(lp1601
g433
ag342
((lp1602
(lp1603
g348
ag433
aa(lp1604
g437
ag438
aatp1605
Rp1606
aatp1607
Rp1608
sg61
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g18
g7
Ntp1619
Rp1620
(dp1621
g22
(dp1622
sg24
g5
(g1421
g7
Ntp1623
Rp1624
(dp1625
g1425
(lp1626
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp1627
Rp1628
(dp1629
g125
I00
sg1427
S'snr_s.png'
p1630
sg1410
g100
sg1428
S'red_to_blue'
p1631
sg1435
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1632
sg1409
g100
sg35
g36
sbsg1437
(dp1633
g1427
Nssg1439
(lp1634
g1427
asg1441
Nsbsg42
Nsg43
g1461
sg44
(dp1635
sg46
S'montage_snr_0'
p1636
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1461
sg57
Nsg58
(lp1637
sg60
Nsg61
Nsb(dp1638
sg5
(g18
g7
Ntp1639
Rp1640
(dp1641
g22
(dp1642
sg24
g5
(g25
g7
Ntp1643
Rp1644
(dp1645
g29
g30
(g31
tp1646
Rp1647
(dp1648
g35
g36
sg1512
g100
sg1513
g100
sg1514
g100
sg1515
g100
sbsg39
(lp1649
g1513
ag1514
ag1512
ag1515
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp1650
sg46
g1636
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp1651
sg60
Nsg61
Nsb(dp1652
sg5
(g18
g7
Ntp1653
Rp1654
(dp1655
g22
(dp1656
sg24
g5
(g1421
g7
Ntp1657
Rp1658
(dp1659
g1425
(lp1660
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp1661
Rp1662
(dp1663
g125
I00
sg1427
S'snr_a.png'
p1664
sg1410
g100
sg1428
g1631
sg1435
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1665
sg1409
g100
sg35
g36
sbsg1437
(dp1666
g1427
Nssg1439
(lp1667
g1427
asg1441
Nsbsg42
Nsg43
g1442
sg44
(dp1668
sg46
g1636
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1442
sg57
Nsg58
(lp1669
sg60
Nsg61
Nsb(dp1670
sg5
(g18
g7
Ntp1671
Rp1672
(dp1673
g22
(dp1674
sg24
g5
(g1421
g7
Ntp1675
Rp1676
(dp1677
g1425
(lp1678
g1473
asg29
g30
(g1429
tp1679
Rp1680
(dp1681
g125
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1682
sg1473
g100
sg35
g36
sbsg1437
(dp1683
g1479
Nssg1439
(lp1684
g1479
asg1441
Nsbsg42
Nsg43
g1498
sg44
(dp1685
sg46
g1636
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1498
sg57
Nsg58
(lp1686
sg60
Nsg61
Nsb(dp1687
sg5
(g18
g7
Ntp1688
Rp1689
(dp1690
g22
(dp1691
sg24
g5
(g25
g7
Ntp1692
Rp1693
(dp1694
g29
g30
(g31
tp1695
Rp1696
(dp1697
g35
g36
sg1409
g100
sg1410
g100
sbsg39
(lp1698
g1409
ag1410
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp1699
sg46
g1636
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp1700
sg60
Nsg61
Nsb(dp1701
sg5
(g18
g7
Ntp1702
Rp1703
(dp1704
g22
(dp1705
sg24
g5
(g1421
g7
Ntp1706
Rp1707
(dp1708
g1425
(lp1709
g1473
asg29
g30
(g1429
tp1710
Rp1711
(dp1712
g125
I00
sg1435
g1682
sg1473
g100
sg35
g36
sbsg1437
(dp1713
g1479
Nssg1439
(lp1714
g1479
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp1715
sg51
Nsg48
Nsg60
Nsg43
g1482
sg46
g1636
sg50
I00
sg52
Nsg55
I00
sg56
g1482
sg57
Nsg58
(lp1716
sg61
Nsb(dp1717
ssg284
(dp1718
sg286
(dp1719
g1620
(dp1720
g1640
(dp1721
g290
(lp1722
(g1427
g1514
tp1723
asssg1640
(dp1724
sg1654
(dp1725
g1640
(dp1726
g290
(lp1727
(g1427
g1513
tp1728
asssg1672
(dp1729
g1654
(dp1730
g290
(lp1731
(g1479
g1409
tp1732
assg1640
(dp1733
g290
(lp1734
(g1479
g1512
tp1735
assg1620
(dp1736
g290
(lp1737
(g1479
g1409
tp1738
asssg1689
(dp1739
g1672
(dp1740
g290
(lp1741
(g1409
g1473
tp1742
assg1703
(dp1743
g290
(lp1744
(g1410
g1473
tp1745
asssg1703
(dp1746
g1654
(dp1747
g290
(lp1748
(g1479
g1410
tp1749
assg1640
(dp1750
g290
(lp1751
(g1479
g1515
tp1752
assg1620
(dp1753
g290
(lp1754
(g1479
g1410
tp1755
assssg332
g1719
sg333
(dp1756
g1620
(dp1757
g1672
g1736
sg1703
g1753
ssg1640
(dp1758
g1672
g1733
sg1620
g1721
sg1703
g1750
sg1654
g1726
ssg1654
(dp1759
g1672
g1730
sg1703
g1747
ssg1672
(dp1760
g1689
g1740
ssg1689
(dp1761
sg1703
(dp1762
g1689
g1743
sssg341
g1719
sbsg43
g1636
sg46
g1067
sg56
g1636
sg57
g342
((lp1763
(lp1764
g345
ag342
((lp1765
(lp1766
g348
ag345
aa(lp1767
g350
ag351
aa(lp1768
g353
ag354
aa(lp1769
g356
ag357
aa(lp1770
g359
ag360
aa(lp1771
g362
ag363
aa(lp1772
g365
ag366
aa(lp1773
g368
ag369
aatp1774
Rp1775
aa(lp1776
g373
ag342
((lp1777
(lp1778
g348
ag373
aa(lp1779
g377
ag378
aa(lp1780
g380
ag381
aa(lp1781
g383
ag384
aa(lp1782
g386
ag387
aa(lp1783
g389
ag390
aa(lp1784
g392
ag393
aa(lp1785
g395
ag396
aa(lp1786
g398
ag399
aa(lp1787
g401
ag402
aa(lp1788
g404
ag405
aa(lp1789
g407
ag408
aa(lp1790
g410
ag411
aa(lp1791
g413
ag414
aa(lp1792
g416
ag417
aa(lp1793
g419
ag420
aa(lp1794
g422
ag423
aa(lp1795
g425
ag426
aa(lp1796
g428
ag429
aatp1797
Rp1798
aa(lp1799
g433
ag342
((lp1800
(lp1801
g348
ag433
aa(lp1802
g437
ag438
aatp1803
Rp1804
aatp1805
Rp1806
sg61
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g18
g7
Ntp1810
Rp1811
(dp1812
g22
(dp1813
sg24
g5
(g1145
g7
Ntp1814
Rp1815
(dp1816
g29
g30
(g1149
tp1817
Rp1818
(dp1819
g125
I00
sg1153
g100
sg144
g100
sg1154
g100
sg128
g100
sg198
g100
sg129
g100
sg172
g100
sg1155
g100
sg1156
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg131
g132
sg133
g5
(g134
g135
(dp1821
g137
g138
stp1822
Rp1823
(dp1824
g142
S'environ_items'
p1825
sg43
g133
sbsg1162
g100
sg1163
g100
sg145
g138
sg1164
g100
sg1165
g100
sg35
g36
sg1166
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'mean_func_fsl_warp_0'
p1826
sg44
(dp1827
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1826
sg57
Nsg58
(lp1828
sg60
Nsg61
Nsbg128
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g18
g7
Ntp1831
Rp1832
(dp1833
g22
(dp1834
sg24
g5
(g1421
g7
Ntp1835
Rp1836
(dp1837
g1425
(lp1838
S'motion_parameters'
p1839
asg29
g30
(g1429
tp1840
Rp1841
(dp1842
g125
I00
sg1435
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g100
sg35
g36
sbsg1437
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1439
(lp1847
g1845
ag1846
asg1441
Nsbsg42
Nsg43
S'motion_plt_0'
p1848
sg44
(dp1849
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1848
sg57
Nsg58
(lp1850
sg60
Nsg61
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g18
g7
Ntp1853
Rp1854
(dp1855
g22
(dp1856
sg24
g5
(g1421
g7
Ntp1857
Rp1858
(dp1859
g1425
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg29
g30
(g1429
tp1864
Rp1865
(dp1866
g125
I00
sg35
g36
sg1861
g100
sg1435
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g100
sbsg1437
(dp1869
S'hist_path'
p1870
Nssg1439
(lp1871
g1870
asg1441
Nsbsg42
Nsg43
S'fd_plot_0'
p1872
sg44
(dp1873
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1872
sg57
Nsg58
(lp1874
sg60
Nsg61
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g18
g7
Ntp1884
Rp1885
(dp1886
g22
(dp1887
sg24
g5
(g1421
g7
Ntp1888
Rp1889
(dp1890
g1425
(lp1891
g144
asg29
g30
(g1429
tp1892
Rp1893
(dp1894
g125
I00
sg35
g36
sg1435
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p1895
sg144
g100
sbsg1437
(dp1896
g128
Nssg1439
(lp1897
g128
asg1441
Nsbsg42
Nsg43
S'calculate_FD'
p1898
sg44
(dp1899
sg46
S'gen_motion_stats_0'
p1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1898
sg57
Nsg58
(lp1901
sg60
Nsg61
Nsb(dp1902
sg5
(g18
g7
Ntp1903
Rp1904
(dp1905
g22
(dp1906
sg24
g5
(g1421
g7
Ntp1907
Rp1908
(dp1909
g1425
(lp1910
g144
ag106
aS'exclude_list'
p1911
asg29
g30
(g1429
tp1912
Rp1913
(dp1914
g125
I00
sg1911
g100
sg1435
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1915
sg144
g100
sg106
g100
sg35
g36
sbsg1437
(dp1916
g128
Nssg1439
(lp1917
g128
asg1441
Nsbsg42
Nsg43
S'include_frames'
p1918
sg44
(dp1919
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1918
sg57
Nsg58
(lp1920
sg60
Nsg61
Nsb(dp1921
sg5
(g18
g7
Ntp1922
Rp1923
(dp1924
g22
(dp1925
sg24
g5
(g1421
g7
Ntp1926
Rp1927
(dp1928
g1425
(lp1929
g144
asg29
g30
(g1429
tp1930
Rp1931
(dp1932
g125
I00
sg35
g36
sg1435
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p1933
sg144
g100
sbsg1437
(dp1934
g128
Nssg1439
(lp1935
g128
asg1441
Nsbsg42
Nsg43
S'calculate_FDJ'
p1936
sg44
(dp1937
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1936
sg57
Nsg58
(lp1938
sg60
Nsg61
Nsb(dp1939
sg5
(g18
g7
Ntp1940
Rp1941
(dp1942
g22
(dp1943
sg24
g5
(g1421
g7
Ntp1944
Rp1945
(dp1946
g1425
(lp1947
S'rest'
p1948
aS'mask'
p1949
asg29
g30
(g1429
tp1950
Rp1951
(dp1952
g125
I00
sg1949
g100
sg35
g36
sg1435
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p1953
sg1948
g100
sbsg1437
(dp1954
g128
Nssg1439
(lp1955
g128
asg1441
Nsbsg42
Nsg43
S'cal_DVARS'
p1956
sg44
(dp1957
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1956
sg57
Nsg58
(lp1958
sg60
Nsg61
Nsb(dp1959
sg5
(g18
g7
Ntp1960
Rp1961
(dp1962
g22
(dp1963
sg24
g5
(g1421
g7
Ntp1964
Rp1965
(dp1966
g1425
(lp1967
g144
ag106
aS'frames_before'
p1968
aS'frames_after'
p1969
asg29
g30
(g1429
tp1970
Rp1971
(dp1972
g125
I00
sg1969
g100
sg1435
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1973
sg144
g100
sg106
g100
sg35
g36
sg1968
g100
sbsg1437
(dp1974
g128
Nssg1439
(lp1975
g128
asg1441
Nsbsg42
Nsg43
S'exclude_frames'
p1976
sg44
(dp1977
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1976
sg57
Nsg58
(lp1978
sg60
Nsg61
Nsb(dp1979
sg5
(g18
g7
Ntp1980
Rp1981
(dp1982
g22
(dp1983
sg24
g5
(g1421
g7
Ntp1984
Rp1985
(dp1986
g1425
(lp1987
S'subject_id'
p1988
aS'scan_id'
p1989
aS'movement_parameters'
p1990
aS'max_displacement'
p1991
asg29
g30
(g1429
tp1992
Rp1993
(dp1994
g125
I00
sg1991
g100
sg1989
g100
sg1988
g100
sg1435
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1995
sg1990
g100
sg35
g36
sbsg1437
(dp1996
g128
Nssg1439
(lp1997
g128
asg1441
Nsbsg42
Nsg43
S'calc_motion_parameters'
p1998
sg44
(dp1999
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1998
sg57
Nsg58
(lp2000
sg60
Nsg61
Nsb(dp2001
sg5
(g18
g7
Ntp2002
Rp2003
(dp2004
g22
(dp2005
sg24
g5
(g25
g7
Ntp2006
Rp2007
(dp2008
g29
g30
(g31
tp2009
Rp2010
(dp2011
g35
g36
sS'frames_ex_1D'
p2012
g100
sS'FDJ_1D'
p2013
g100
sS'FD_1D'
p2014
g100
sS'frames_in_1D'
p2015
g100
sS'motion_params'
p2016
g100
sS'power_params'
p2017
g100
sbsg39
(lp2018
g2014
ag2013
ag2012
ag2015
ag2017
ag2016
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp2019
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp2020
sg60
Nsg61
Nsb(dp2021
sg5
(g18
g7
Ntp2022
Rp2023
(dp2024
g22
(dp2025
sg24
g5
(g25
g7
Ntp2026
Rp2027
(dp2028
g29
g30
(g31
tp2029
Rp2030
(dp2031
g1991
g100
sg35
g36
sg1989
g100
sg1988
g100
sg1949
g100
sg1990
g100
sS'oned_matrix_save'
p2032
g100
sS'motion_correct'
p2033
g100
sbsg39
(lp2034
g1988
ag1989
ag1990
ag1991
ag2033
ag1949
ag2032
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp2035
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp2036
sg60
Nsg61
Nsb(dp2037
sg5
(g18
g7
Ntp2038
Rp2039
(dp2040
g22
(dp2041
sg24
g5
(g25
g7
Ntp2042
Rp2043
(dp2044
g29
g30
(g31
tp2045
Rp2046
(dp2047
g106
(lp2048
F0.2
asg35
g36
sS'remove_frames_before'
p2049
I1
sS'remove_frames_after'
p2050
I2
sbsg39
(lp2051
g106
ag2049
ag2050
asg41
I01
sbsg42
Nsg43
S'scrubbing_input'
p2052
sg44
(dp2053
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
(g106
(lp2054
F0.2
atp2055
sg55
I00
sg56
g2052
sg57
Nsg58
(lp2056
sg60
Nsg61
Nsb(dp2057
sg5
(g18
g7
Ntp2058
Rp2059
(dp2060
g22
(dp2061
sg24
g5
(g1421
g7
Ntp2062
Rp2063
(dp2064
g1425
(lp2065
g1988
ag1989
ag2014
ag2013
ag106
aS'DVARS'
p2066
asg29
g30
(g1429
tp2067
Rp2068
(dp2069
g125
I00
sg35
g36
sg1989
g100
sg1988
g100
sg2066
g100
sg1435
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p2070
sg2013
g100
sg2014
g100
sg106
g100
sbsg1437
(dp2071
g128
Nssg1439
(lp2072
g128
asg1441
Nsbsg42
Nsg43
S'calc_power_parameters'
p2073
sg44
(dp2074
sg46
g1900
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2073
sg57
Nsg58
(lp2075
sg60
Nsg61
Nsb(dp2076
ssg284
(dp2077
sg286
(dp2078
g1885
(dp2079
g2059
(dp2080
g290
(lp2081
(g128
g2014
tp2082
assg2003
(dp2083
g290
(lp2084
(g128
g2014
tp2085
assg1904
(dp2086
g290
(lp2087
(g128
g144
tp2088
assg1961
(dp2089
g290
(lp2090
(g128
g144
tp2091
asssg1904
(dp2092
g2003
(dp2093
g290
(lp2094
(g128
g2015
tp2095
asssg1923
(dp2096
g2003
(dp2097
g290
(lp2098
(g128
g2013
tp2099
assg2059
(dp2100
g290
(lp2101
(g128
g2013
tp2102
asssg1941
(dp2103
g2059
(dp2104
g290
(lp2105
(g128
g2066
tp2106
asssg1961
(dp2107
g2003
(dp2108
g290
(lp2109
(g128
g2012
tp2110
assg1904
(dp2111
g290
(lp2112
(g128
g1911
tp2113
asssg1981
(dp2114
g2003
(dp2115
g290
(lp2116
(g128
g2016
tp2117
asssg2003
(dp2118
sg2023
(dp2119
g2059
(dp2120
g290
(lp2121
(g1988
g1988
tp2122
a(g1989
g1989
tp2123
assg1885
(dp2124
g290
(lp2125
(g1990
g144
tp2126
assg1981
(dp2127
g290
(lp2128
(g1988
g1988
tp2129
a(g1989
g1989
tp2130
a(g1990
g1990
tp2131
a(g1991
g1991
tp2132
assg1941
(dp2133
g290
(lp2134
(g2033
g1948
tp2135
a(g1949
g1949
tp2136
assg1923
(dp2137
g290
(lp2138
(g2032
g144
tp2139
asssg2039
(dp2140
g1961
(dp2141
g290
(lp2142
(g106
g106
tp2143
a(g2049
g1968
tp2144
a(g2050
g1969
tp2145
assg2059
(dp2146
g290
(lp2147
(g106
g106
tp2148
assg1904
(dp2149
g290
(lp2150
(g106
g106
tp2151
asssg2059
(dp2152
g2003
(dp2153
g290
(lp2154
(g128
g2017
tp2155
assssg332
g2078
sg333
(dp2156
g1885
(dp2157
g2023
g2124
ssg1904
(dp2158
g1885
g2086
sg2039
g2149
sg1961
g2111
ssg1923
(dp2159
g2023
g2137
ssg1941
(dp2160
g2023
g2133
ssg1961
(dp2161
g1885
g2089
sg2039
g2141
ssg1981
(dp2162
g2023
g2127
ssg2003
(dp2163
g1885
g2083
sg2059
g2153
sg1961
g2108
sg1981
g2115
sg1904
g2093
sg1923
g2097
ssg2023
(dp2164
sg2039
(dp2165
sg2059
(dp2166
g2023
g2120
sg2039
g2146
sg1923
g2100
sg1941
g2104
sg1885
g2080
sssg341
g2078
sbsg43
g1900
sg46
g1067
sg56
g1900
sg57
g342
((lp2167
(lp2168
g345
ag342
((lp2169
(lp2170
g348
ag345
aa(lp2171
g350
ag351
aa(lp2172
g353
ag354
aa(lp2173
g356
ag357
aa(lp2174
g359
ag360
aa(lp2175
g362
ag363
aa(lp2176
g365
ag366
aa(lp2177
g368
ag369
aatp2178
Rp2179
aa(lp2180
g373
ag342
((lp2181
(lp2182
g348
ag373
aa(lp2183
g377
ag378
aa(lp2184
g380
ag381
aa(lp2185
g383
ag384
aa(lp2186
g386
ag387
aa(lp2187
g389
ag390
aa(lp2188
g392
ag393
aa(lp2189
g395
ag396
aa(lp2190
g398
ag399
aa(lp2191
g401
ag402
aa(lp2192
g404
ag405
aa(lp2193
g407
ag408
aa(lp2194
g410
ag411
aa(lp2195
g413
ag414
aa(lp2196
g416
ag417
aa(lp2197
g419
ag420
aa(lp2198
g422
ag423
aa(lp2199
g425
ag426
aa(lp2200
g428
ag429
aatp2201
Rp2202
aa(lp2203
g433
ag342
((lp2204
(lp2205
g348
ag433
aa(lp2206
g437
ag438
aatp2207
Rp2208
aatp2209
Rp2210
sg61
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g18
g7
Ntp2224
Rp2225
(dp2226
g22
(dp2227
sg24
g5
(cnipype.interfaces.afni.preprocess
Refit
p2228
g7
Ntp2229
Rp2230
(dp2231
g29
g30
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2232
tp2233
Rp2234
(dp2235
g125
I00
sg35
g36
sS'deoblique'
p2236
I01
sg129
g100
sS'yorigin'
p2237
g100
sg131
g132
sg133
g5
(g134
g135
(dp2238
tp2239
Rp2240
(dp2241
g142
S'environ_items'
p2242
sg43
g133
sbsg144
g100
sS'xorigin'
p2243
g100
sS'zorigin'
p2244
g100
sbsg148
Nsg149
g132
sbsg42
Nsg49
I00
sg44
(dp2245
sg51
Nsg48
Nsg60
Nsg43
S'anat_deoblique'
p2246
sg46
S'anat_preproc_0'
p2247
sg50
I00
sg52
Nsg55
I00
sg56
g2246
sg57
Nsg58
(lp2248
sg61
Nsb(dp2249
sg5
(g18
g7
Ntp2250
Rp2251
(dp2252
g22
(dp2253
sg24
g5
(cnipype.interfaces.afni.preprocess
Calc
p2254
g7
Ntp2255
Rp2256
(dp2257
g29
g30
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2258
tp2259
Rp2260
(dp2261
S'stop_idx'
p2262
g100
sg125
I00
sg35
g36
sg128
g100
sS'expr'
p2263
S'a*step(b)'
p2264
sg129
g100
sS'outputtype'
p2265
S'NIFTI_GZ'
p2266
sS'in_file_b'
p2267
g100
sS'in_file_c'
p2268
g100
sS'in_file_a'
p2269
g100
sg133
g5
(g134
g135
(dp2270
tp2271
Rp2272
(dp2273
g142
S'environ_items'
p2274
sg43
g133
sbsS'single_idx'
p2275
g100
sS'other'
p2276
g100
sS'start_idx'
p2277
g100
sg131
g132
sbsS'_outputtype'
p2278
g2266
sg148
Nsg149
g132
sbsg42
Nsg49
I00
sg44
(dp2279
sg51
Nsg48
Nsg60
Nsg43
S'anat_brain_only'
p2280
sg46
g2247
sg50
I00
sg52
Nsg55
I00
sg56
g2280
sg57
Nsg58
(lp2281
sg61
Nsb(dp2282
sg5
(g18
g7
Ntp2283
Rp2284
(dp2285
g22
(dp2286
sg24
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2287
g7
Ntp2288
Rp2289
(dp2290
g29
g30
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2291
tp2292
Rp2293
(dp2294
g125
I00
sg35
g36
sg128
g100
sg129
g100
sg2265
S'AFNI'
p2295
sg131
g132
sg133
g5
(g134
g135
(dp2296
tp2297
Rp2298
(dp2299
g142
S'environ_items'
p2300
sg43
g133
sbsg144
g100
sbsg2278
g2295
sg148
Nsg149
g132
sbsg42
Nsg49
I00
sg44
(dp2301
sg51
Nsg48
Nsg60
Nsg43
S'anat_skullstrip'
p2302
sg46
g2247
sg50
I00
sg52
Nsg55
I00
sg56
g2302
sg57
Nsg58
(lp2303
sg61
Nsb(dp2304
sg5
(g18
g7
Ntp2305
Rp2306
(dp2307
g22
(dp2308
sg24
g5
(g25
g7
Ntp2309
Rp2310
(dp2311
g29
g30
(g31
tp2312
Rp2313
(dp2314
g35
g36
sS'anat'
p2315
g100
sbsg39
(lp2316
g2315
asg41
I01
sbsg42
Nsg49
I00
sg44
(dp2317
sg51
Nsg48
Nsg60
Nsg43
g108
sg46
g2247
sg50
I00
sg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp2318
sg61
Nsb(dp2319
sg5
(g18
g7
Ntp2320
Rp2321
(dp2322
g22
(dp2323
sg24
g5
(cnipype.interfaces.afni.preprocess
Resample
p2324
g7
Ntp2325
Rp2326
(dp2327
g29
g30
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2328
tp2329
Rp2330
(dp2331
g125
I00
sg35
g36
sg128
g100
sg129
g100
sg2265
g2266
sS'resample_mode'
p2332
g100
sS'voxel_size'
p2333
g100
sg131
g132
sS'master'
p2334
g100
sg144
g100
sg133
g5
(g134
g135
(dp2335
tp2336
Rp2337
(dp2338
g142
S'environ_items'
p2339
sg43
g133
sbsS'orientation'
p2340
S'RPI'
p2341
sbsg2278
g2266
sg148
Nsg149
g132
sbsg42
Nsg49
I00
sg44
(dp2342
sg51
Nsg48
Nsg60
Nsg43
S'anat_reorient'
p2343
sg46
g2247
sg50
I00
sg52
Nsg55
I00
sg56
g2343
sg57
Nsg58
(lp2344
sg61
Nsb(dp2345
sg5
(g18
g7
Ntp2346
Rp2347
(dp2348
g22
(dp2349
sg24
g5
(g25
g7
Ntp2350
Rp2351
(dp2352
g29
g30
(g31
tp2353
Rp2354
(dp2355
S'reorient'
p2356
g100
sg104
g100
sS'refit'
p2357
g100
sg35
g36
sS'skullstrip'
p2358
g100
sbsg39
(lp2359
g2357
ag2356
ag2358
ag104
asg41
I01
sbsg42
Nsg49
I00
sg44
(dp2360
sg51
Nsg48
Nsg60
Nsg43
g261
sg46
g2247
sg50
I00
sg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp2361
sg61
Nsb(dp2362
ssg286
(dp2363
g2225
(dp2364
g2321
(dp2365
g290
(lp2366
(g128
g144
tp2367
assg2347
(dp2368
g290
(lp2369
(g128
g2357
tp2370
asssg2251
(dp2371
g2347
(dp2372
g290
(lp2373
(g128
g104
tp2374
asssg2284
(dp2375
g2251
(dp2376
g290
(lp2377
(g128
g2267
tp2378
assg2347
(dp2379
g290
(lp2380
(g128
g2358
tp2381
asssg2306
(dp2382
g2225
(dp2383
g290
(lp2384
(g2315
g144
tp2385
asssg2321
(dp2386
g2251
(dp2387
g290
(lp2388
(g128
g2269
tp2389
assg2347
(dp2390
g290
(lp2391
(g128
g2356
tp2392
assg2284
(dp2393
g290
(lp2394
(g128
g144
tp2395
asssg2347
(dp2396
ssg332
g2363
sg333
(dp2397
g2225
(dp2398
g2306
g2383
ssg2251
(dp2399
g2321
g2387
sg2284
g2376
ssg2284
(dp2400
g2321
g2393
ssg2306
(dp2401
sg2321
(dp2402
g2225
g2365
ssg2347
(dp2403
g2251
g2372
sg2284
g2379
sg2225
g2368
sg2321
g2390
sssg284
(dp2404
sg341
g2363
sbsg43
g2247
sg46
g1067
sg56
g2247
sg57
g342
((lp2405
(lp2406
g345
ag342
((lp2407
(lp2408
g348
ag345
aa(lp2409
g350
ag351
aa(lp2410
g353
ag354
aa(lp2411
g356
ag357
aa(lp2412
g359
ag360
aa(lp2413
g362
ag363
aa(lp2414
g365
ag366
aa(lp2415
g368
ag369
aatp2416
Rp2417
aa(lp2418
g373
ag342
((lp2419
(lp2420
g348
ag373
aa(lp2421
g377
ag378
aa(lp2422
g380
ag381
aa(lp2423
g383
ag384
aa(lp2424
g386
ag387
aa(lp2425
g389
ag390
aa(lp2426
g392
ag393
aa(lp2427
g395
ag396
aa(lp2428
g398
ag399
aa(lp2429
g401
ag402
aa(lp2430
g404
ag405
aa(lp2431
g407
ag408
aa(lp2432
g410
ag411
aa(lp2433
g413
ag414
aa(lp2434
g416
ag417
aa(lp2435
g419
ag420
aa(lp2436
g422
ag423
aa(lp2437
g425
ag426
aa(lp2438
g428
ag429
aatp2439
Rp2440
aa(lp2441
g433
ag342
((lp2442
(lp2443
g348
ag433
aa(lp2444
g437
ag438
aatp2445
Rp2446
aatp2447
Rp2448
sg61
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g18
g7
Ntp2459
Rp2460
(dp2461
g22
(dp2462
sg24
g5
(g25
g7
Ntp2463
Rp2464
(dp2465
g29
g30
(g31
tp2466
Rp2467
(dp2468
g1991
g100
sS'motion_correct_ref'
p2469
g100
sg35
g36
sS'preprocessed_mask'
p2470
g100
sg1949
g100
sg2357
g100
sg2358
g100
sg2356
g100
sS'preprocessed'
p2471
g100
sS'slice_time_corrected'
p2472
g100
sg1990
g100
sS'example_func'
p2473
g100
sg2032
g100
sS'reorient_mean'
p2474
g100
sg2033
g100
sbsg39
(lp2475
g2357
ag2356
ag2474
ag2033
ag2469
ag1990
ag1991
ag1949
ag2358
ag2473
ag2471
ag2470
ag2472
ag2032
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp2476
sg46
S'func_preproc_automask_0'
p2477
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp2478
sg60
Nsg61
Nsb(dp2479
sg5
(g18
g7
Ntp2480
Rp2481
(dp2482
g22
(dp2483
sg24
g5
(cnipype.interfaces.afni.preprocess
TStat
p2484
g7
Ntp2485
Rp2486
(dp2487
g29
g30
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2488
tp2489
Rp2490
(dp2491
g125
I00
sg35
g36
sg128
g100
sg129
g100
sg1949
g100
sg2265
g2266
sg131
g132
sg133
g5
(g134
g135
(dp2492
tp2493
Rp2494
(dp2495
g142
S'environ_items'
p2496
sg43
g133
sbsg144
g100
sS'options'
p2497
S'-mean'
p2498
sbsg2278
g2266
sg148
Nsg149
g132
sbsg42
Nsg43
S'func_mean_skullstrip'
p2499
sg44
(dp2500
sg46
g2477
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2499
sg57
Nsg58
(lp2501
sg60
Nsg61
Nsb(dp2502
sg5
(g18
g7
Ntp2503
Rp2504
(dp2505
g22
(dp2506
sg24
g5
(g2228
g7
Ntp2507
Rp2508
(dp2509
g29
g30
(g2232
tp2510
Rp2511
(dp2512
g125
I00
sg35
g36
sg2236
I01
sg129
g100
sg2237
g100
sg131
g132
sg133
g5
(g134
g135
(dp2513
tp2514
Rp2515
(dp2516
g142
S'environ_items'
p2517
sg43
g133
sbsg144
g100
sg2243
g100
sg2244
g100
sbsg148
Nsg149
g132
sbsg42
Nsg43
S'func_deoblique'
p2518
sg44
(dp2519
sg46
g2477
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2518
sg57
Nsg58
(lp2520
sg60
Nsg61
Nsb(dp2521
sg5
(g18
g7
Ntp2522
Rp2523
(dp2524
g22
(dp2525
sg24
g5
(g2484
g7
Ntp2526
Rp2527
(dp2528
g29
g30
(g2488
tp2529
Rp2530
(dp2531
g125
I00
sg35
g36
sg128
g100
sg129
g100
sg1949
g100
sg2265
g2266
sg131
g132
sg133
g5
(g134
g135
(dp2532
tp2533
Rp2534
(dp2535
g142
S'environ_items'
p2536
sg43
g133
sbsg144
g100
sg2497
g2498
sbsg2278
g2266
sg148
Nsg149
g132
sbsg42
Nsg49
I00
sg44
(dp2537
sg51
Nsg48
Nsg60
Nsg43
S'func_get_mean_motion'
p2538
sg46
g2477
sg50
I00
sg52
Nsg55
I00
sg56
g2538
sg57
Nsg58
(lp2539
sg61
Nsb(dp2540
sg5
(g18
g7
Ntp2541
Rp2542
(dp2543
g22
(dp2544
sg24
g5
(cnipype.interfaces.afni.preprocess
Automask
p2545
g7
Ntp2546
Rp2547
(dp2548
g29
g30
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2549
tp2550
Rp2551
(dp2552
g125
I00
sg35
g36
sg129
g100
sS'erode'
p2553
g100
sg128
g100
sS'dilate'
p2554
g100
sS'clfrac'
p2555
g100
sg2265
g2266
sS'brain_file'
p2556
g100
sg131
g132
sg133
g5
(g134
g135
(dp2557
tp2558
Rp2559
(dp2560
g142
S'environ_items'
p2561
sg43
g133
sbsg144
g100
sbsg2278
g2266
sg148
Nsg149
g132
sbsg42
Nsg43
S'func_get_brain_mask'
p2562
sg44
(dp2563
sg46
g2477
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2562
sg57
Nsg58
(lp2564
sg60
Nsg61
Nsb(dp2565
sg5
(g18
g7
Ntp2566
Rp2567
(dp2568
g22
(dp2569
sg24
g5
(g117
g7
Ntp2570
Rp2571
(dp2572
g29
g30
(g121
tp2573
Rp2574
(dp2575
g125
I00
sg35
g36
sg126
S'-ing 10000'
p2576
sg127
S'float'
p2577
sg128
g100
sg129
g100
sg130
g100
sg131
g132
sg133
g5
(g134
g135
(dp2578
g137
g138
stp2579
Rp2580
(dp2581
g142
S'environ_items'
p2582
sg43
g133
sbsg144
g100
sg145
g138
sg146
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'func_normalize'
p2583
sg44
(dp2584
sg46
g2477
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2583
sg57
Nsg58
(lp2585
sg60
Nsg61
Nsb(dp2586
sg5
(g18
g7
Ntp2587
Rp2588
(dp2589
g22
(dp2590
sg24
g5
(g2254
g7
Ntp2591
Rp2592
(dp2593
g29
g30
(g2258
tp2594
Rp2595
(dp2596
g2262
g100
sg125
I00
sg35
g36
sg128
g100
sg2263
S'a*b'
p2597
sg129
g100
sg2265
g2266
sg2267
g100
sg2268
g100
sg2269
g100
sg133
g5
(g134
g135
(dp2598
tp2599
Rp2600
(dp2601
g142
S'environ_items'
p2602
sg43
g133
sbsg2275
g100
sg2276
g100
sg2277
g100
sg131
g132
sbsg2278
g2266
sg148
Nsg149
g132
sbsg42
Nsg43
S'func_edge_detect'
p2603
sg44
(dp2604
sg46
g2477
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2603
sg57
Nsg58
(lp2605
sg60
Nsg61
Nsb(dp2606
sg5
(g18
g7
Ntp2607
Rp2608
(dp2609
g22
(dp2610
sg24
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2611
g7
Ntp2612
Rp2613
(dp2614
g29
g30
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2615
tp2616
Rp2617
(dp2618
S'oned_file'
p2619
g100
sg125
I00
sg168
g100
sS'timeshift'
p2620
g100
sS'basefile'
p2621
g100
sg129
S'-Fourier -twopass'
p2622
sg2265
g2266
sS'zpad'
p2623
I4
sg131
g132
sS'md1d_file'
p2624
g100
sg144
g100
sS'copyorigin'
p2625
g100
sg133
g5
(g134
g135
(dp2626
tp2627
Rp2628
(dp2629
g142
S'environ_items'
p2630
sg43
g133
sbsg2032
g100
sg35
g36
sg128
g100
sbsg2278
g2266
sg148
Nsg149
g132
sbsg42
Nsg43
S'func_motion_correct'
p2631
sg44
(dp2632
sg46
g2477
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2631
sg57
Nsg58
(lp2633
sg60
Nsg61
Nsb(dp2634
sg5
(g18
g7
Ntp2635
Rp2636
(dp2637
g22
(dp2638
sg24
g5
(g117
g7
Ntp2639
Rp2640
(dp2641
g29
g30
(g121
tp2642
Rp2643
(dp2644
g125
I00
sg35
g36
sg126
S'-Tmin -bin'
p2645
sg127
S'char'
p2646
sg128
g100
sg129
g100
sg130
g100
sg131
g132
sg133
g5
(g134
g135
(dp2647
g137
g138
stp2648
Rp2649
(dp2650
g142
S'environ_items'
p2651
sg43
g133
sbsg144
g100
sg145
g138
sg146
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'func_mask_normalize'
p2652
sg44
(dp2653
sg46
g2477
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2652
sg57
Nsg58
(lp2654
sg60
Nsg61
Nsb(dp2655
sg5
(g18
g7
Ntp2656
Rp2657
(dp2658
g22
(dp2659
sg24
g5
(g25
g7
Ntp2660
Rp2661
(dp2662
g29
g30
(g31
tp2663
Rp2664
(dp2665
g35
g36
sS'func'
p2666
g100
sbsg39
(lp2667
g2666
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp2668
sg46
g2477
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp2669
sg60
Nsg61
Nsb(dp2670
sg5
(g18
g7
Ntp2671
Rp2672
(dp2673
g22
(dp2674
sg24
g5
(g2484
g7
Ntp2675
Rp2676
(dp2677
g29
g30
(g2488
tp2678
Rp2679
(dp2680
g125
I00
sg35
g36
sg128
g100
sg129
g100
sg1949
g100
sg2265
g2266
sg131
g132
sg133
g5
(g134
g135
(dp2681
tp2682
Rp2683
(dp2684
g142
S'environ_items'
p2685
sg43
g133
sbsg144
g100
sg2497
g2498
sbsg2278
g2266
sg148
Nsg149
g132
sbsg42
Nsg43
S'func_get_mean_RPI'
p2686
sg44
(dp2687
sg46
g2477
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2686
sg57
Nsg58
(lp2688
sg60
Nsg61
Nsb(dp2689
sg5
(g18
g7
Ntp2690
Rp2691
(dp2692
g22
(dp2693
sg24
g5
(g2324
g7
Ntp2694
Rp2695
(dp2696
g29
g30
(g2328
tp2697
Rp2698
(dp2699
g125
I00
sg35
g36
sg128
g100
sg129
g100
sg2265
g2266
sg2332
g100
sg2333
g100
sg131
g132
sg2334
g100
sg144
g100
sg133
g5
(g134
g135
(dp2700
tp2701
Rp2702
(dp2703
g142
S'environ_items'
p2704
sg43
g133
sbsg2340
g2341
sbsg2278
g2266
sg148
Nsg149
g132
sbsg42
Nsg43
S'func_reorient'
p2705
sg44
(dp2706
sg46
g2477
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2705
sg57
Nsg58
(lp2707
sg60
Nsg61
Nsb(dp2708
sg5
(g18
g7
Ntp2709
Rp2710
(dp2711
g22
(dp2712
sg24
g5
(g2611
g7
Ntp2713
Rp2714
(dp2715
g29
g30
(g2615
tp2716
Rp2717
(dp2718
g2619
g100
sg125
I00
sg168
g100
sg2620
g100
sg2621
g100
sg129
g2622
sg2265
g2266
sg2623
I4
sg131
g132
sg2624
S'max_displacement.1D'
p2719
sg144
g100
sg2625
g100
sg133
g5
(g134
g135
(dp2720
tp2721
Rp2722
(dp2723
g142
S'environ_items'
p2724
sg43
g133
sbsg2032
g100
sg35
g36
sg128
g100
sbsg2278
g2266
sg148
Nsg149
g132
sbsg42
Nsg49
I00
sg44
(dp2725
sg51
Nsg48
Nsg60
Nsg43
S'func_motion_correct_A'
p2726
sg46
g2477
sg50
I00
sg52
Nsg55
I00
sg56
g2726
sg57
Nsg58
(lp2727
sg61
Nsb(dp2728
ssg284
(dp2729
sg286
(dp2730
g2460
(dp2731
sg2481
(dp2732
g2460
(dp2733
g290
(lp2734
(g128
g2473
tp2735
asssg2504
(dp2736
g2691
(dp2737
g290
(lp2738
(g128
g144
tp2739
asssg2523
(dp2740
g2460
(dp2741
g290
(lp2742
(g128
g2469
tp2743
assg2710
(dp2744
g290
(lp2745
(g128
g2621
tp2746
asssg2542
(dp2747
g2460
(dp2748
g290
(lp2749
(g128
g1949
tp2750
assg2588
(dp2751
g290
(lp2752
(g128
g2267
tp2753
asssg2567
(dp2754
g2460
(dp2755
g290
(lp2756
(g128
g2471
tp2757
assg2636
(dp2758
g290
(lp2759
(g128
g144
tp2760
asssg2588
(dp2761
g2460
(dp2762
g290
(lp2763
(g128
g2358
tp2764
assg2481
(dp2765
g290
(lp2766
(g128
g144
tp2767
assg2567
(dp2768
g290
(lp2769
(g128
g144
tp2770
asssg2608
(dp2771
g2523
(dp2772
g290
(lp2773
(g128
g144
tp2774
asssg2636
(dp2775
g2460
(dp2776
g290
(lp2777
(g128
g2470
tp2778
asssg2657
(dp2779
g2504
(dp2780
g290
(lp2781
(g2666
g144
tp2782
asssg2672
(dp2783
g2608
(dp2784
g290
(lp2785
(g128
g2621
tp2786
asssg2691
(dp2787
g2710
(dp2788
g290
(lp2789
(g128
g144
tp2790
assg2460
(dp2791
g290
(lp2792
(g128
g2356
tp2793
assg2672
(dp2794
g290
(lp2795
(g128
g144
tp2796
assg2608
(dp2797
g290
(lp2798
(g128
g144
tp2799
asssg2710
(dp2800
g2460
(dp2801
g290
(lp2802
(g128
g2033
tp2803
a(g2624
g1991
tp2804
a(g2619
g1990
tp2805
a(g2032
g2032
tp2806
assg2588
(dp2807
g290
(lp2808
(g128
g2269
tp2809
assg2542
(dp2810
g290
(lp2811
(g128
g144
tp2812
assssg332
g2730
sg333
(dp2813
g2460
(dp2814
g2523
g2741
sg2636
g2776
sg2567
g2755
sg2542
g2748
sg2588
g2762
sg2481
g2733
sg2691
g2791
sg2710
g2801
ssg2481
(dp2815
g2588
g2765
ssg2504
(dp2816
g2657
g2780
ssg2523
(dp2817
g2608
g2772
ssg2542
(dp2818
g2710
g2810
ssg2567
(dp2819
g2588
g2768
ssg2588
(dp2820
g2542
g2751
sg2710
g2807
ssg2608
(dp2821
g2691
g2797
sg2672
g2784
ssg2636
(dp2822
g2567
g2758
ssg2657
(dp2823
sg2672
(dp2824
g2691
g2794
ssg2691
(dp2825
g2504
g2737
ssg2710
(dp2826
g2691
g2788
sg2523
g2744
sssg341
g2730
sbsg43
g2477
sg46
g1067
sg56
g2477
sg57
g342
((lp2827
(lp2828
g345
ag342
((lp2829
(lp2830
g348
ag345
aa(lp2831
g350
ag351
aa(lp2832
g353
ag354
aa(lp2833
g356
ag357
aa(lp2834
g359
ag360
aa(lp2835
g362
ag363
aa(lp2836
g365
ag366
aa(lp2837
g368
ag369
aatp2838
Rp2839
aa(lp2840
g373
ag342
((lp2841
(lp2842
g348
ag373
aa(lp2843
g377
ag378
aa(lp2844
g380
ag381
aa(lp2845
g383
ag384
aa(lp2846
g386
ag387
aa(lp2847
g389
ag390
aa(lp2848
g392
ag393
aa(lp2849
g395
ag396
aa(lp2850
g398
ag399
aa(lp2851
g401
ag402
aa(lp2852
g404
ag405
aa(lp2853
g407
ag408
aa(lp2854
g410
ag411
aa(lp2855
g413
ag414
aa(lp2856
g416
ag417
aa(lp2857
g419
ag420
aa(lp2858
g422
ag423
aa(lp2859
g425
ag426
aa(lp2860
g428
ag429
aatp2861
Rp2862
aa(lp2863
g433
ag342
((lp2864
(lp2865
g348
ag433
aa(lp2866
g437
ag438
aatp2867
Rp2868
aatp2869
Rp2870
sg61
NsbS'outputspec.example_func'
p2871
tp2872
sg1990
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g18
g7
Ntp2880
Rp2881
(dp2882
g22
(dp2883
sg24
g5
(g25
g7
Ntp2884
Rp2885
(dp2886
g29
g30
(g31
tp2887
Rp2888
(dp2889
g35
g36
sS'movement_file'
p2890
g100
sbsg39
(lp2891
g2890
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp2892
sg46
S'fristons_parameter_model_0'
p2893
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp2894
sg60
Nsg61
Nsb(dp2895
sg5
(g18
g7
Ntp2896
Rp2897
(dp2898
g22
(dp2899
sg24
g5
(g25
g7
Ntp2900
Rp2901
(dp2902
g29
g30
(g31
tp2903
Rp2904
(dp2905
g35
g36
sg2890
g100
sbsg39
(lp2906
g2890
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp2907
sg46
g2893
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp2908
sg60
Nsg61
Nsb(dp2909
sg5
(g18
g7
Ntp2910
Rp2911
(dp2912
g22
(dp2913
sg24
g5
(g1421
g7
Ntp2914
Rp2915
(dp2916
g1425
(lp2917
g144
asg29
g30
(g1429
tp2918
Rp2919
(dp2920
g125
I00
sg35
g36
sg1435
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2921
sg144
g100
sbsg1437
(dp2922
g128
Nssg1439
(lp2923
g128
asg1441
Nsbsg42
Nsg43
S'calc_friston'
p2924
sg44
(dp2925
sg46
g2893
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g2924
sg57
Nsg58
(lp2926
sg60
Nsg61
Nsb(dp2927
ssg284
(dp2928
sg286
(dp2929
g2881
(dp2930
g2911
(dp2931
g290
(lp2932
(g2890
g144
tp2933
asssg2897
(dp2934
sg2911
(dp2935
g2897
(dp2936
g290
(lp2937
(g128
g2890
tp2938
assssg332
g2929
sg333
(dp2939
g2881
(dp2940
sg2897
(dp2941
g2911
g2936
ssg2911
(dp2942
g2881
g2931
sssg341
g2929
sbsg43
g2893
sg46
g1067
sg56
g2893
sg57
g342
((lp2943
(lp2944
g345
ag342
((lp2945
(lp2946
g348
ag345
aa(lp2947
g350
ag351
aa(lp2948
g353
ag354
aa(lp2949
g356
ag357
aa(lp2950
g359
ag360
aa(lp2951
g362
ag363
aa(lp2952
g365
ag366
aa(lp2953
g368
ag369
aatp2954
Rp2955
aa(lp2956
g373
ag342
((lp2957
(lp2958
g348
ag373
aa(lp2959
g377
ag378
aa(lp2960
g380
ag381
aa(lp2961
g383
ag384
aa(lp2962
g386
ag387
aa(lp2963
g389
ag390
aa(lp2964
g392
ag393
aa(lp2965
g395
ag396
aa(lp2966
g398
ag399
aa(lp2967
g401
ag402
aa(lp2968
g404
ag405
aa(lp2969
g407
ag408
aa(lp2970
g410
ag411
aa(lp2971
g413
ag414
aa(lp2972
g416
ag417
aa(lp2973
g419
ag420
aa(lp2974
g422
ag423
aa(lp2975
g425
ag426
aa(lp2976
g428
ag429
aatp2977
Rp2978
aa(lp2979
g433
ag342
((lp2980
(lp2981
g348
ag433
aa(lp2982
g437
ag438
aatp2983
Rp2984
aatp2985
Rp2986
sg61
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g18
g7
Ntp2997
Rp2998
(dp2999
g22
(dp3000
sg24
g5
(g1421
g7
Ntp3001
Rp3002
(dp3003
g1425
(lp3004
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp3005
Rp3006
(dp3007
g125
I00
sg1427
S't1_edge_on_mean_func_in_t1_s.png'
p3008
sg1410
g100
sg1428
g1434
sg1435
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3009
sg1409
g100
sg35
g36
sbsg1437
(dp3010
g1427
Nssg1439
(lp3011
g1427
asg1441
Nsbsg42
Nsg43
g1461
sg44
(dp3012
sg46
S'montage_anat_0'
p3013
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1461
sg57
Nsg58
(lp3014
sg60
Nsg61
Nsb(dp3015
sg5
(g18
g7
Ntp3016
Rp3017
(dp3018
g22
(dp3019
sg24
g5
(g1421
g7
Ntp3020
Rp3021
(dp3022
g1425
(lp3023
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp3024
Rp3025
(dp3026
g125
I00
sg1427
S't1_edge_on_mean_func_in_t1_a.png'
p3027
sg1410
g100
sg1428
g1434
sg1435
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3028
sg1409
g100
sg35
g36
sbsg1437
(dp3029
g1427
Nssg1439
(lp3030
g1427
asg1441
Nsbsg42
Nsg43
g1442
sg44
(dp3031
sg46
g3013
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1442
sg57
Nsg58
(lp3032
sg60
Nsg61
Nsb(dp3033
sg5
(g18
g7
Ntp3034
Rp3035
(dp3036
g22
(dp3037
sg24
g5
(g25
g7
Ntp3038
Rp3039
(dp3040
g29
g30
(g31
tp3041
Rp3042
(dp3043
g35
g36
sg1512
g100
sg1513
g100
sg1514
g100
sg1515
g100
sbsg39
(lp3044
g1513
ag1514
ag1512
ag1515
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp3045
sg46
g3013
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp3046
sg60
Nsg61
Nsb(dp3047
sg5
(g18
g7
Ntp3048
Rp3049
(dp3050
g22
(dp3051
sg24
g5
(g25
g7
Ntp3052
Rp3053
(dp3054
g29
g30
(g31
tp3055
Rp3056
(dp3057
g35
g36
sg1409
g100
sg1410
g100
sbsg39
(lp3058
g1409
ag1410
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp3059
sg46
g3013
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp3060
sg60
Nsg61
Nsb(dp3061
sg5
(g18
g7
Ntp3062
Rp3063
(dp3064
g22
(dp3065
sg24
g5
(g1421
g7
Ntp3066
Rp3067
(dp3068
g1425
(lp3069
g1473
asg29
g30
(g1429
tp3070
Rp3071
(dp3072
g125
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3073
sg1473
g100
sg35
g36
sbsg1437
(dp3074
g1479
Nssg1439
(lp3075
g1479
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp3076
sg51
Nsg48
Nsg60
Nsg43
g1482
sg46
g3013
sg50
I00
sg52
Nsg55
I00
sg56
g1482
sg57
Nsg58
(lp3077
sg61
Nsb(dp3078
sg5
(g18
g7
Ntp3079
Rp3080
(dp3081
g22
(dp3082
sg24
g5
(g1421
g7
Ntp3083
Rp3084
(dp3085
g1425
(lp3086
g1473
asg29
g30
(g1429
tp3087
Rp3088
(dp3089
g125
I00
sg1435
g3073
sg1473
g100
sg35
g36
sbsg1437
(dp3090
g1479
Nssg1439
(lp3091
g1479
asg1441
Nsbsg42
Nsg43
g1498
sg44
(dp3092
sg46
g3013
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1498
sg57
Nsg58
(lp3093
sg60
Nsg61
Nsb(dp3094
ssg284
(dp3095
sg286
(dp3096
g2998
(dp3097
g3035
(dp3098
g290
(lp3099
(g1427
g1514
tp3100
asssg3017
(dp3101
g3035
(dp3102
g290
(lp3103
(g1427
g1513
tp3104
asssg3035
(dp3105
sg3049
(dp3106
g3080
(dp3107
g290
(lp3108
(g1409
g1473
tp3109
assg3063
(dp3110
g290
(lp3111
(g1410
g1473
tp3112
asssg3063
(dp3113
g3017
(dp3114
g290
(lp3115
(g1479
g1410
tp3116
assg3035
(dp3117
g290
(lp3118
(g1479
g1515
tp3119
assg2998
(dp3120
g290
(lp3121
(g1479
g1410
tp3122
asssg3080
(dp3123
g3017
(dp3124
g290
(lp3125
(g1479
g1409
tp3126
assg3035
(dp3127
g290
(lp3128
(g1479
g1512
tp3129
assg2998
(dp3130
g290
(lp3131
(g1479
g1409
tp3132
assssg332
g3096
sg333
(dp3133
g2998
(dp3134
g3080
g3130
sg3063
g3120
ssg3017
(dp3135
g3080
g3124
sg3063
g3114
ssg3035
(dp3136
g3080
g3127
sg2998
g3098
sg3063
g3117
sg3017
g3102
ssg3049
(dp3137
sg3063
(dp3138
g3049
g3110
ssg3080
(dp3139
g3049
g3107
sssg341
g3096
sbsg43
g3013
sg46
g1067
sg56
g3013
sg57
g342
((lp3140
(lp3141
g345
ag342
((lp3142
(lp3143
g348
ag345
aa(lp3144
g350
ag351
aa(lp3145
g353
ag354
aa(lp3146
g356
ag357
aa(lp3147
g359
ag360
aa(lp3148
g362
ag363
aa(lp3149
g365
ag366
aa(lp3150
g368
ag369
aatp3151
Rp3152
aa(lp3153
g373
ag342
((lp3154
(lp3155
g348
ag373
aa(lp3156
g377
ag378
aa(lp3157
g380
ag381
aa(lp3158
g383
ag384
aa(lp3159
g386
ag387
aa(lp3160
g389
ag390
aa(lp3161
g392
ag393
aa(lp3162
g395
ag396
aa(lp3163
g398
ag399
aa(lp3164
g401
ag402
aa(lp3165
g404
ag405
aa(lp3166
g407
ag408
aa(lp3167
g410
ag411
aa(lp3168
g413
ag414
aa(lp3169
g416
ag417
aa(lp3170
g419
ag420
aa(lp3171
g422
ag423
aa(lp3172
g425
ag426
aa(lp3173
g428
ag429
aatp3174
Rp3175
aa(lp3176
g433
ag342
((lp3177
(lp3178
g348
ag433
aa(lp3179
g437
ag438
aatp3180
Rp3181
aatp3182
Rp3183
sg61
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg1991
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g18
g7
Ntp3201
Rp3202
(dp3203
g22
(dp3204
sg24
g5
(g1421
g7
Ntp3205
Rp3206
(dp3207
g1425
(lp3208
g1473
asg29
g30
(g1429
tp3209
Rp3210
(dp3211
g125
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3212
sg1473
g100
sg35
g36
sbsg1437
(dp3213
g1479
Nssg1439
(lp3214
g1479
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp3215
sg51
Nsg48
Nsg60
Nsg43
S'resample_o_gm'
p3216
sg46
S'montage_csf_gm_wm_0'
p3217
sg50
I00
sg52
Nsg55
I00
sg56
g3216
sg57
Nsg58
(lp3218
sg61
Nsb(dp3219
sg5
(g18
g7
Ntp3220
Rp3221
(dp3222
g22
(dp3223
sg24
g5
(g1421
g7
Ntp3224
Rp3225
(dp3226
g1425
(lp3227
g1473
asg29
g30
(g1429
tp3228
Rp3229
(dp3230
g125
I00
sg1435
g3212
sg1473
g100
sg35
g36
sbsg1437
(dp3231
g1479
Nssg1439
(lp3232
g1479
asg1441
Nsbsg42
Nsg43
g1498
sg44
(dp3233
sg46
g3217
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1498
sg57
Nsg58
(lp3234
sg60
Nsg61
Nsb(dp3235
sg5
(g18
g7
Ntp3236
Rp3237
(dp3238
g22
(dp3239
sg24
g5
(g1421
g7
Ntp3240
Rp3241
(dp3242
g1425
(lp3243
g1473
asg29
g30
(g1429
tp3244
Rp3245
(dp3246
g125
I00
sg1435
g3212
sg1473
g100
sg35
g36
sbsg1437
(dp3247
g1479
Nssg1439
(lp3248
g1479
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp3249
sg51
Nsg48
Nsg60
Nsg43
S'resample_o_csf'
p3250
sg46
g3217
sg50
I00
sg52
Nsg55
I00
sg56
g3250
sg57
Nsg58
(lp3251
sg61
Nsb(dp3252
sg5
(g18
g7
Ntp3253
Rp3254
(dp3255
g22
(dp3256
sg24
g5
(g1421
g7
Ntp3257
Rp3258
(dp3259
g1425
(lp3260
S'overlay_csf'
p3261
aS'overlay_wm'
p3262
aS'overlay_gm'
p3263
ag1409
ag1427
asg29
g30
(g1429
tp3264
Rp3265
(dp3266
g125
I00
sg1427
S'montage_csf_gm_wm_s.png'
p3267
sg3263
g100
sg1435
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3268
sg3261
g100
sg3262
g100
sg1409
g100
sg35
g36
sbsg1437
(dp3269
g1427
Nssg1439
(lp3270
g1427
asg1441
Nsbsg42
Nsg43
g1461
sg44
(dp3271
sg46
g3217
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1461
sg57
Nsg58
(lp3272
sg60
Nsg61
Nsb(dp3273
sg5
(g18
g7
Ntp3274
Rp3275
(dp3276
g22
(dp3277
sg24
g5
(g25
g7
Ntp3278
Rp3279
(dp3280
g29
g30
(g31
tp3281
Rp3282
(dp3283
g35
g36
sS'resampled_overlay_csf'
p3284
g100
sS'resampled_overlay_gm'
p3285
g100
sg1513
g100
sg1514
g100
sg1512
g100
sS'resampled_overlay_wm'
p3286
g100
sbsg39
(lp3287
g1513
ag1514
ag1512
ag3284
ag3286
ag3285
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp3288
sg46
g3217
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp3289
sg60
Nsg61
Nsb(dp3290
sg5
(g18
g7
Ntp3291
Rp3292
(dp3293
g22
(dp3294
sg24
g5
(g1421
g7
Ntp3295
Rp3296
(dp3297
g1425
(lp3298
g3261
ag3262
ag3263
ag1409
ag1427
asg29
g30
(g1429
tp3299
Rp3300
(dp3301
g125
I00
sg1427
S'montage_csf_gm_wm_a.png'
p3302
sg3263
g100
sg1435
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3303
sg3261
g100
sg3262
g100
sg1409
g100
sg35
g36
sbsg1437
(dp3304
g1427
Nssg1439
(lp3305
g1427
asg1441
Nsbsg42
Nsg43
g1442
sg44
(dp3306
sg46
g3217
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1442
sg57
Nsg58
(lp3307
sg60
Nsg61
Nsb(dp3308
sg5
(g18
g7
Ntp3309
Rp3310
(dp3311
g22
(dp3312
sg24
g5
(g1421
g7
Ntp3313
Rp3314
(dp3315
g1425
(lp3316
g1473
asg29
g30
(g1429
tp3317
Rp3318
(dp3319
g125
I00
sg1435
g3212
sg1473
g100
sg35
g36
sbsg1437
(dp3320
g1479
Nssg1439
(lp3321
g1479
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp3322
sg51
Nsg48
Nsg60
Nsg43
S'resample_o_wm'
p3323
sg46
g3217
sg50
I00
sg52
Nsg55
I00
sg56
g3323
sg57
Nsg58
(lp3324
sg61
Nsb(dp3325
sg5
(g18
g7
Ntp3326
Rp3327
(dp3328
g22
(dp3329
sg24
g5
(g25
g7
Ntp3330
Rp3331
(dp3332
g29
g30
(g31
tp3333
Rp3334
(dp3335
g35
g36
sg3263
g100
sg1409
g100
sg3261
g100
sg3262
g100
sbsg39
(lp3336
g1409
ag3261
ag3262
ag3263
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp3337
sg46
g3217
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp3338
sg60
Nsg61
Nsb(dp3339
ssg284
(dp3340
sg286
(dp3341
g3202
(dp3342
g3292
(dp3343
g290
(lp3344
(g1479
g3263
tp3345
assg3275
(dp3346
g290
(lp3347
(g1479
g3285
tp3348
assg3254
(dp3349
g290
(lp3350
(g1479
g3263
tp3351
asssg3221
(dp3352
g3292
(dp3353
g290
(lp3354
(g1479
g1409
tp3355
assg3275
(dp3356
g290
(lp3357
(g1479
g1512
tp3358
assg3254
(dp3359
g290
(lp3360
(g1479
g1409
tp3361
asssg3237
(dp3362
g3292
(dp3363
g290
(lp3364
(g1479
g3261
tp3365
assg3275
(dp3366
g290
(lp3367
(g1479
g3284
tp3368
assg3254
(dp3369
g290
(lp3370
(g1479
g3261
tp3371
asssg3254
(dp3372
g3275
(dp3373
g290
(lp3374
(g1427
g1514
tp3375
asssg3275
(dp3376
sg3292
(dp3377
g3275
(dp3378
g290
(lp3379
(g1427
g1513
tp3380
asssg3310
(dp3381
g3292
(dp3382
g290
(lp3383
(g1479
g3262
tp3384
assg3275
(dp3385
g290
(lp3386
(g1479
g3286
tp3387
assg3254
(dp3388
g290
(lp3389
(g1479
g3262
tp3390
asssg3327
(dp3391
g3221
(dp3392
g290
(lp3393
(g1409
g1473
tp3394
assg3310
(dp3395
g290
(lp3396
(g3262
g1473
tp3397
assg3237
(dp3398
g290
(lp3399
(g3261
g1473
tp3400
assg3202
(dp3401
g290
(lp3402
(g3263
g1473
tp3403
assssg332
g3341
sg333
(dp3404
g3202
(dp3405
g3327
g3401
ssg3221
(dp3406
g3327
g3392
ssg3237
(dp3407
g3327
g3398
ssg3254
(dp3408
g3221
g3359
sg3310
g3388
sg3237
g3369
sg3202
g3349
ssg3275
(dp3409
g3202
g3346
sg3292
g3378
sg3237
g3366
sg3221
g3356
sg3310
g3385
sg3254
g3373
ssg3292
(dp3410
g3221
g3353
sg3310
g3382
sg3237
g3363
sg3202
g3343
ssg3310
(dp3411
g3327
g3395
ssg3327
(dp3412
ssg341
g3341
sbsg43
g3217
sg46
g1067
sg56
g3217
sg57
g342
((lp3413
(lp3414
g345
ag342
((lp3415
(lp3416
g348
ag345
aa(lp3417
g350
ag351
aa(lp3418
g353
ag354
aa(lp3419
g356
ag357
aa(lp3420
g359
ag360
aa(lp3421
g362
ag363
aa(lp3422
g365
ag366
aa(lp3423
g368
ag369
aatp3424
Rp3425
aa(lp3426
g373
ag342
((lp3427
(lp3428
g348
ag373
aa(lp3429
g377
ag378
aa(lp3430
g380
ag381
aa(lp3431
g383
ag384
aa(lp3432
g386
ag387
aa(lp3433
g389
ag390
aa(lp3434
g392
ag393
aa(lp3435
g395
ag396
aa(lp3436
g398
ag399
aa(lp3437
g401
ag402
aa(lp3438
g404
ag405
aa(lp3439
g407
ag408
aa(lp3440
g410
ag411
aa(lp3441
g413
ag414
aa(lp3442
g416
ag417
aa(lp3443
g419
ag420
aa(lp3444
g422
ag423
aa(lp3445
g425
ag426
aa(lp3446
g428
ag429
aatp3447
Rp3448
aa(lp3449
g433
ag342
((lp3450
(lp3451
g348
ag433
aa(lp3452
g437
ag438
aatp3453
Rp3454
aatp3455
Rp3456
sg61
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g18
g7
Ntp3466
Rp3467
(dp3468
g22
(dp3469
sg24
g5
(g25
g7
Ntp3470
Rp3471
(dp3472
g29
g30
(g31
tp3473
Rp3474
(dp3475
S'func_to_anat_linear_xfm'
p3476
g100
sg35
g36
sS'anat_func'
p3477
g100
sbsg39
(lp3478
g3476
ag3477
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp3479
sg46
S'func_to_anat_bbreg_0'
p3480
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp3481
sg60
Nsg61
Nsb(dp3482
sg5
(g18
g7
Ntp3483
Rp3484
(dp3485
g22
(dp3486
sg24
g5
(g117
g7
Ntp3487
Rp3488
(dp3489
g29
g30
(g121
tp3490
Rp3491
(dp3492
g125
I00
sg35
g36
sg126
S'-thr 0.5 -bin'
p3493
sg127
g100
sg128
g100
sg129
g100
sg130
g100
sg131
g132
sg133
g5
(g134
g135
(dp3494
g137
g138
stp3495
Rp3496
(dp3497
g142
S'environ_items'
p3498
sg43
g133
sbsg144
g100
sg145
g138
sg146
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'wm_bb_mask'
p3499
sg44
(dp3500
sg46
g3480
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3499
sg57
Nsg58
(lp3501
sg60
Nsg61
Nsb(dp3502
sg5
(g18
g7
Ntp3503
Rp3504
(dp3505
g22
(dp3506
sg24
g5
(g25
g7
Ntp3507
Rp3508
(dp3509
g29
g30
(g31
tp3510
Rp3511
(dp3512
g35
g36
sS'linear_reg_matrix'
p3513
g100
sS'bbr_schedule'
p3514
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3515
sS'anat_wm_segmentation'
p3516
g100
sS'anat_skull'
p3517
g100
sg2666
g100
sbsg39
(lp3518
g2666
ag3517
ag3513
ag3516
ag3514
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp3519
sg46
g3480
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp3520
sg60
Nsg61
Nsb(dp3521
sg5
(g18
g7
Ntp3522
Rp3523
(dp3524
g22
(dp3525
sg24
g5
(g158
g7
Ntp3526
Rp3527
(dp3528
g29
g30
(g162
tp3529
Rp3530
(dp3531
g166
g100
sg35
g36
sg167
g100
sg168
g100
sg169
g100
sg170
g100
sg171
g100
sg172
g100
sg174
g100
sg175
g100
sg176
g100
sg177
g100
sg178
g100
sg179
g100
sg180
g100
sg181
g100
sg182
g100
sg183
g100
sg144
g100
sg184
g100
sg185
g100
sg186
g100
sg187
g100
sg125
I00
sg188
g100
sg189
g100
sg129
g100
sg190
g100
sg191
g100
sg131
g132
sg192
g100
sg193
g100
sg194
g100
sg195
g100
sg196
g100
sg128
g100
sg197
g100
sg198
g100
sg199
g100
sg200
I6
sg201
g100
sg202
g100
sg203
g100
sg204
g100
sg205
g100
sg133
g5
(g134
g135
(dp3532
g137
g138
stp3533
Rp3534
(dp3535
g142
S'environ_items'
p3536
sg43
g133
sbsg211
g100
sg212
g100
sg145
g138
sg213
g100
sg214
g100
sg215
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'bbreg_func_to_anat'
p3537
sg44
(dp3538
sg46
g3480
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3537
sg57
Nsg58
(lp3539
sg60
Nsg61
Nsb(dp3540
ssg284
(dp3541
sg286
(dp3542
g3467
(dp3543
sg3484
(dp3544
g3523
(dp3545
g290
(lp3546
((g128
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3547
(ttp3548
g129
tp3549
asssg3504
(dp3550
g3484
(dp3551
g290
(lp3552
(g3516
g144
tp3553
assg3523
(dp3554
g290
(lp3555
(g3514
g189
tp3556
a(g2666
g144
tp3557
a(g3517
g169
tp3558
a(g3513
g167
tp3559
asssg3523
(dp3560
g3467
(dp3561
g290
(lp3562
(g201
g3476
tp3563
a(g128
g3477
tp3564
assssg332
g3542
sg333
(dp3565
g3467
(dp3566
g3523
g3561
ssg3484
(dp3567
g3504
g3551
ssg3504
(dp3568
sg3523
(dp3569
g3484
g3545
sg3504
g3554
sssg341
g3542
sbsg43
g3480
sg46
g1067
sg56
g3480
sg57
g342
((lp3570
(lp3571
g345
ag342
((lp3572
(lp3573
g348
ag345
aa(lp3574
g350
ag351
aa(lp3575
g353
ag354
aa(lp3576
g356
ag357
aa(lp3577
g359
ag360
aa(lp3578
g362
ag363
aa(lp3579
g365
ag366
aa(lp3580
g368
ag369
aatp3581
Rp3582
aa(lp3583
g373
ag342
((lp3584
(lp3585
g348
ag373
aa(lp3586
g377
ag378
aa(lp3587
g380
ag381
aa(lp3588
g383
ag384
aa(lp3589
g386
ag387
aa(lp3590
g389
ag390
aa(lp3591
g392
ag393
aa(lp3592
g395
ag396
aa(lp3593
g398
ag399
aa(lp3594
g401
ag402
aa(lp3595
g404
ag405
aa(lp3596
g407
ag408
aa(lp3597
g410
ag411
aa(lp3598
g413
ag414
aa(lp3599
g416
ag417
aa(lp3600
g419
ag420
aa(lp3601
g422
ag423
aa(lp3602
g425
ag426
aa(lp3603
g428
ag429
aatp3604
Rp3605
aa(lp3606
g433
ag342
((lp3607
(lp3608
g348
ag433
aa(lp3609
g437
ag438
aatp3610
Rp3611
aatp3612
Rp3613
sg61
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g18
g7
Ntp3620
Rp3621
(dp3622
g22
(dp3623
sg24
g5
(g1421
g7
Ntp3624
Rp3625
(dp3626
g1425
(lp3627
S'measure_file'
p3628
asg29
g30
(g1429
tp3629
Rp3630
(dp3631
g125
I00
sg35
g36
sg1435
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g100
sbsg1437
(dp3633
S'snr_storefl'
p3634
Nssg1439
(lp3635
g3634
asg1441
Nsbsg42
Nsg43
S'snr_val0'
p3636
sg44
(dp3637
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3636
sg57
Nsg58
(lp3638
sg60
Nsg61
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g18
g7
Ntp3648
Rp3649
(dp3650
g22
(dp3651
sg24
g5
(g1421
g7
Ntp3652
Rp3653
(dp3654
g1425
(lp3655
g3628
ag1863
asg29
g30
(g1429
tp3656
Rp3657
(dp3658
g125
I00
sg35
g36
sg1435
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g100
sg1863
S'snr'
p3660
sbsg1437
(dp3661
g1870
Nssg1439
(lp3662
g1870
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp3663
sg51
Nsg48
Nsg60
Nsg43
S'hist_snr_0'
p3664
sg46
g1067
sg50
I00
sg52
Nsg55
I00
sg56
g3664
sg57
Nsg58
(lp3665
sg61
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g18
g7
Ntp3678
Rp3679
(dp3680
g22
(dp3681
sg24
g5
(g25
g7
Ntp3682
Rp3683
(dp3684
g29
g30
(g31
tp3685
Rp3686
(dp3687
g35
g36
sS'scan'
p3688
g100
sS'subject'
p3689
S'849_2089413811'
p3690
sbsg39
(lp3691
g3689
ag3688
asg41
I01
sbsg42
Nsg43
S'inputnode'
p3692
sg44
(dp3693
sg46
S'func_gather_0'
p3694
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
(lp3695
(g3688
(lp3696
S'rest_1_rest'
p3697
atp3698
asg55
I00
sg56
g3692
sg57
Nsg58
(lp3699
sg60
Nsg61
Nsb(dp3700
sg5
(g18
g7
Ntp3701
Rp3702
(dp3703
g22
(dp3704
sg24
g5
(g25
g7
Ntp3705
Rp3706
(dp3707
g29
g30
(g31
tp3708
Rp3709
(dp3710
g35
g36
sg3688
g100
sg1948
g100
sg3689
g100
sbsg39
(lp3711
g3689
ag1948
ag3688
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp3712
sg46
g3694
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp3713
sg60
Nsg61
Nsb(dp3714
sg5
(g18
g7
Ntp3715
Rp3716
(dp3717
g22
(dp3718
sg24
g5
(g1421
g7
Ntp3719
Rp3720
(dp3721
g1425
(lp3722
g3688
aS'rest_dict'
p3723
asg29
g30
(g1429
tp3724
Rp3725
(dp3726
g125
I00
sg3723
(dp3727
g3697
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-01/KKI2009-01-fMRI.nii'
p3728
ssg1435
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3729
sg35
g36
sg3688
g100
sbsg1437
(dp3730
g1948
Nssg1439
(lp3731
g1948
asg1441
Nsbsg42
Nsg43
S'selectrest'
p3732
sg44
(dp3733
sg46
g3694
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3732
sg57
Nsg58
(lp3734
sg60
Nsg61
Nsb(dp3735
ssg284
(dp3736
sg286
(dp3737
g3679
(dp3738
g3716
(dp3739
g290
(lp3740
(g3688
g3688
tp3741
assg3702
(dp3742
g290
(lp3743
(g3689
g3689
tp3744
a(g3688
g3688
tp3745
asssg3702
(dp3746
sg3716
(dp3747
g3702
(dp3748
g290
(lp3749
(g1948
g1948
tp3750
assssg332
g3737
sg333
(dp3751
g3679
(dp3752
sg3702
(dp3753
g3679
g3742
sg3716
g3748
ssg3716
(dp3754
g3679
g3739
sssg341
g3737
sbsg43
g3694
sg46
g1067
sg56
g3694
sg57
g342
((lp3755
(lp3756
g345
ag342
((lp3757
(lp3758
g348
ag345
aa(lp3759
g350
ag351
aa(lp3760
g353
ag354
aa(lp3761
g356
ag357
aa(lp3762
g359
ag360
aa(lp3763
g362
ag363
aa(lp3764
g365
ag366
aa(lp3765
g368
ag369
aatp3766
Rp3767
aa(lp3768
g373
ag342
((lp3769
(lp3770
g348
ag373
aa(lp3771
g377
ag378
aa(lp3772
g380
ag381
aa(lp3773
g383
ag384
aa(lp3774
g386
ag387
aa(lp3775
g389
ag390
aa(lp3776
g392
ag393
aa(lp3777
g395
ag396
aa(lp3778
g398
ag399
aa(lp3779
g401
ag402
aa(lp3780
g404
ag405
aa(lp3781
g407
ag408
aa(lp3782
g410
ag411
aa(lp3783
g413
ag414
aa(lp3784
g416
ag417
aa(lp3785
g419
ag420
aa(lp3786
g422
ag423
aa(lp3787
g425
ag426
aa(lp3788
g428
ag429
aatp3789
Rp3790
aa(lp3791
g433
ag342
((lp3792
(lp3793
g348
ag433
aa(lp3794
g437
ag438
aatp3795
Rp3796
aatp3797
Rp3798
sg61
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g18
g7
Ntp3808
Rp3809
(dp3810
g22
(dp3811
sg24
g5
(g1145
g7
Ntp3812
Rp3813
(dp3814
g29
g30
(g1149
tp3815
Rp3816
(dp3817
g125
I00
sg1153
g100
sg144
g100
sg1154
g100
sg128
g100
sg198
g100
sg129
g100
sg172
g100
sg1155
g100
sg1156
g1820
sg131
g132
sg133
g5
(g134
g135
(dp3818
g137
g138
stp3819
Rp3820
(dp3821
g142
S'environ_items'
p3822
sg43
g133
sbsg1162
g100
sg1163
g100
sg145
g138
sg1164
g100
sg1165
g100
sg35
g36
sg1166
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'func_mni_fsl_warp_0'
p3823
sg44
(dp3824
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3823
sg57
Nsg58
(lp3825
sg60
Nsg61
Nsbg128
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g18
g7
Ntp3835
Rp3836
(dp3837
g22
(dp3838
sg24
g5
(g25
g7
Ntp3839
Rp3840
(dp3841
g29
g30
(g31
tp3842
Rp3843
(dp3844
g35
g36
sg145
(lp3845
I01
aI01
asg1948
g100
sbsg39
(lp3846
g1948
ag145
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp3847
sg46
S'voxel_timeseries_0'
p3848
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp3849
sg60
Nsg61
Nsb(dp3850
sg5
(g18
g7
Ntp3851
Rp3852
(dp3853
g22
(dp3854
sg24
g5
(g25
g7
Ntp3855
Rp3856
(dp3857
g29
g30
(g31
tp3858
Rp3859
(dp3860
g35
g36
sS'mask_outputs'
p3861
g100
sbsg39
(lp3862
g3861
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp3863
sg46
g3848
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp3864
sg60
Nsg61
Nsb(dp3865
sg5
(g18
g7
Ntp3866
Rp3867
(dp3868
g22
(dp3869
sg24
g5
(g1421
g7
Ntp3870
Rp3871
(dp3872
g1425
(lp3873
S'data_file'
p3874
aS'template'
p3875
ag145
asg29
g30
(g1429
tp3876
Rp3877
(dp3878
g125
I00
sg35
g36
sg3874
g100
sg1435
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3879
sg3875
g100
sg145
g100
sbsg1437
(dp3880
g128
Nssg1439
(lp3881
g128
asg1441
Nsbsg42
Nsg43
S'timeseries_voxel'
p3882
sg44
(dp3883
sg46
g3848
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3882
sg57
Nsg58
(lp3884
sg60
Nsg61
Nsb(dp3885
sg5
(g18
g7
Ntp3886
Rp3887
(dp3888
g22
(dp3889
sg24
g5
(g25
g7
Ntp3890
Rp3891
(dp3892
g29
g30
(g31
tp3893
Rp3894
(dp3895
g35
g36
sg1949
g100
sbsg39
(lp3896
g1949
asg41
I01
sbsg42
Nsg43
S'input_mask'
p3897
sg44
(dp3898
sg46
g3848
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g3897
sg57
Nsg58
(lp3899
sg60
Nsg61
Nsb(dp3900
ssg284
(dp3901
sg286
(dp3902
g3836
(dp3903
g3867
(dp3904
g290
(lp3905
(g1948
g3874
tp3906
a(g145
g145
tp3907
asssg3852
(dp3908
sg3867
(dp3909
g3852
(dp3910
g290
(lp3911
(g128
g3861
tp3912
asssg3887
(dp3913
g3867
(dp3914
g290
(lp3915
(g1949
g3875
tp3916
assssg332
g3902
sg333
(dp3917
g3836
(dp3918
sg3852
(dp3919
g3867
g3910
ssg3867
(dp3920
g3836
g3904
sg3887
g3914
ssg3887
(dp3921
ssg341
g3902
sbsg43
g3848
sg46
g1067
sg56
g3848
sg57
g342
((lp3922
(lp3923
g345
ag342
((lp3924
(lp3925
g348
ag345
aa(lp3926
g350
ag351
aa(lp3927
g353
ag354
aa(lp3928
g356
ag357
aa(lp3929
g359
ag360
aa(lp3930
g362
ag363
aa(lp3931
g365
ag366
aa(lp3932
g368
ag369
aatp3933
Rp3934
aa(lp3935
g373
ag342
((lp3936
(lp3937
g348
ag373
aa(lp3938
g377
ag378
aa(lp3939
g380
ag381
aa(lp3940
g383
ag384
aa(lp3941
g386
ag387
aa(lp3942
g389
ag390
aa(lp3943
g392
ag393
aa(lp3944
g395
ag396
aa(lp3945
g398
ag399
aa(lp3946
g401
ag402
aa(lp3947
g404
ag405
aa(lp3948
g407
ag408
aa(lp3949
g410
ag411
aa(lp3950
g413
ag414
aa(lp3951
g416
ag417
aa(lp3952
g419
ag420
aa(lp3953
g422
ag423
aa(lp3954
g425
ag426
aa(lp3955
g428
ag429
aatp3956
Rp3957
aa(lp3958
g433
ag342
((lp3959
(lp3960
g348
ag433
aa(lp3961
g437
ag438
aatp3962
Rp3963
aatp3964
Rp3965
sg61
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g18
g7
Ntp3986
Rp3987
(dp3988
g22
(dp3989
sg24
g5
(g1421
g7
Ntp3990
Rp3991
(dp3992
g1425
(lp3993
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp3994
Rp3995
(dp3996
g125
I00
sg1427
S'mni_anat_a.png'
p3997
sg1410
g100
sg1428
g1434
sg1435
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3998
sg1409
g100
sg35
g36
sbsg1437
(dp3999
g1427
Nssg1439
(lp4000
g1427
asg1441
Nsbsg42
Nsg43
g1442
sg44
(dp4001
sg46
S'montage_mni_anat_0'
p4002
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1442
sg57
Nsg58
(lp4003
sg60
Nsg61
Nsb(dp4004
sg5
(g18
g7
Ntp4005
Rp4006
(dp4007
g22
(dp4008
sg24
g5
(g1421
g7
Ntp4009
Rp4010
(dp4011
g1425
(lp4012
g1473
asg29
g30
(g1429
tp4013
Rp4014
(dp4015
g125
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4016
sg1473
g100
sg35
g36
sbsg1437
(dp4017
g1479
Nssg1439
(lp4018
g1479
asg1441
Nsbsg42
Nsg43
g1498
sg44
(dp4019
sg46
g4002
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1498
sg57
Nsg58
(lp4020
sg60
Nsg61
Nsb(dp4021
sg5
(g18
g7
Ntp4022
Rp4023
(dp4024
g22
(dp4025
sg24
g5
(g25
g7
Ntp4026
Rp4027
(dp4028
g29
g30
(g31
tp4029
Rp4030
(dp4031
g35
g36
sg1409
g100
sg1410
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p4032
sbsg39
(lp4033
g1409
ag1410
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp4034
sg46
g4002
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp4035
sg60
Nsg61
Nsb(dp4036
sg5
(g18
g7
Ntp4037
Rp4038
(dp4039
g22
(dp4040
sg24
g5
(g1421
g7
Ntp4041
Rp4042
(dp4043
g1425
(lp4044
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp4045
Rp4046
(dp4047
g125
I00
sg1427
S'mni_anat_s.png'
p4048
sg1410
g100
sg1428
g1434
sg1435
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4049
sg1409
g100
sg35
g36
sbsg1437
(dp4050
g1427
Nssg1439
(lp4051
g1427
asg1441
Nsbsg42
Nsg43
g1461
sg44
(dp4052
sg46
g4002
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1461
sg57
Nsg58
(lp4053
sg60
Nsg61
Nsb(dp4054
sg5
(g18
g7
Ntp4055
Rp4056
(dp4057
g22
(dp4058
sg24
g5
(g1421
g7
Ntp4059
Rp4060
(dp4061
g1425
(lp4062
g1473
asg29
g30
(g1429
tp4063
Rp4064
(dp4065
g125
I00
sg1435
g4016
sg1473
g100
sg35
g36
sbsg1437
(dp4066
g1479
Nssg1439
(lp4067
g1479
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp4068
sg51
Nsg48
Nsg60
Nsg43
g1482
sg46
g4002
sg50
I00
sg52
Nsg55
I00
sg56
g1482
sg57
Nsg58
(lp4069
sg61
Nsb(dp4070
sg5
(g18
g7
Ntp4071
Rp4072
(dp4073
g22
(dp4074
sg24
g5
(g25
g7
Ntp4075
Rp4076
(dp4077
g29
g30
(g31
tp4078
Rp4079
(dp4080
g35
g36
sg1512
g100
sg1513
g100
sg1514
g100
sg1515
g100
sbsg39
(lp4081
g1513
ag1514
ag1512
ag1515
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp4082
sg46
g4002
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp4083
sg60
Nsg61
Nsb(dp4084
ssg284
(dp4085
sg286
(dp4086
g3987
(dp4087
g4072
(dp4088
g290
(lp4089
(g1427
g1513
tp4090
asssg4006
(dp4091
g3987
(dp4092
g290
(lp4093
(g1479
g1409
tp4094
assg4072
(dp4095
g290
(lp4096
(g1479
g1512
tp4097
assg4038
(dp4098
g290
(lp4099
(g1479
g1409
tp4100
asssg4023
(dp4101
g4056
(dp4102
g290
(lp4103
(g1410
g1473
tp4104
assg4006
(dp4105
g290
(lp4106
(g1409
g1473
tp4107
asssg4038
(dp4108
g4072
(dp4109
g290
(lp4110
(g1427
g1514
tp4111
asssg4056
(dp4112
g3987
(dp4113
g290
(lp4114
(g1479
g1410
tp4115
assg4072
(dp4116
g290
(lp4117
(g1479
g1515
tp4118
assg4038
(dp4119
g290
(lp4120
(g1479
g1410
tp4121
asssg4072
(dp4122
ssg332
g4086
sg333
(dp4123
g3987
(dp4124
g4056
g4113
sg4006
g4092
ssg4006
(dp4125
g4023
g4105
ssg4023
(dp4126
sg4038
(dp4127
g4056
g4119
sg4006
g4098
ssg4056
(dp4128
g4023
g4102
ssg4072
(dp4129
g4038
g4109
sg4056
g4116
sg4006
g4095
sg3987
g4088
sssg341
g4086
sbsg43
g4002
sg46
g1067
sg56
g4002
sg57
g342
((lp4130
(lp4131
g345
ag342
((lp4132
(lp4133
g348
ag345
aa(lp4134
g350
ag351
aa(lp4135
g353
ag354
aa(lp4136
g356
ag357
aa(lp4137
g359
ag360
aa(lp4138
g362
ag363
aa(lp4139
g365
ag366
aa(lp4140
g368
ag369
aatp4141
Rp4142
aa(lp4143
g373
ag342
((lp4144
(lp4145
g348
ag373
aa(lp4146
g377
ag378
aa(lp4147
g380
ag381
aa(lp4148
g383
ag384
aa(lp4149
g386
ag387
aa(lp4150
g389
ag390
aa(lp4151
g392
ag393
aa(lp4152
g395
ag396
aa(lp4153
g398
ag399
aa(lp4154
g401
ag402
aa(lp4155
g404
ag405
aa(lp4156
g407
ag408
aa(lp4157
g410
ag411
aa(lp4158
g413
ag414
aa(lp4159
g416
ag417
aa(lp4160
g419
ag420
aa(lp4161
g422
ag423
aa(lp4162
g425
ag426
aa(lp4163
g428
ag429
aatp4164
Rp4165
aa(lp4166
g433
ag342
((lp4167
(lp4168
g348
ag433
aa(lp4169
g437
ag438
aatp4170
Rp4171
aatp4172
Rp4173
sg61
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg2033
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g18
g7
Ntp4188
Rp4189
(dp4190
g22
(dp4191
sg24
g5
(g1145
g7
Ntp4192
Rp4193
(dp4194
g29
g30
(g1149
tp4195
Rp4196
(dp4197
g125
I00
sg1153
g100
sg144
g100
sg1154
g100
sg128
g100
sg198
g100
sg129
g100
sg172
S'nn'
p4198
sg1155
g100
sg1156
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg131
g132
sg133
g5
(g134
g135
(dp4200
g137
g138
stp4201
Rp4202
(dp4203
g142
S'environ_items'
p4204
sg43
g133
sbsg1162
g100
sg1163
g100
sg145
g138
sg1164
g100
sg1165
g100
sg35
g36
sg1166
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'func_mni_fsl_warp_mask_0'
p4205
sg44
(dp4206
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4205
sg57
Nsg58
(lp4207
sg60
Nsg61
Nsbg128
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g18
g7
Ntp4217
Rp4218
(dp4219
g22
(dp4220
sg24
g5
(g1421
g7
Ntp4221
Rp4222
(dp4223
g1425
(lp4224
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp4225
Rp4226
(dp4227
g125
I00
sg1427
S'skull_vis_a.png'
p4228
sg1410
g100
sg1428
g1434
sg1435
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4229
sg1409
g100
sg35
g36
sbsg1437
(dp4230
g1427
Nssg1439
(lp4231
g1427
asg1441
Nsbsg42
Nsg43
g1442
sg44
(dp4232
sg46
S'montage_skull_0'
p4233
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1442
sg57
Nsg58
(lp4234
sg60
Nsg61
Nsb(dp4235
sg5
(g18
g7
Ntp4236
Rp4237
(dp4238
g22
(dp4239
sg24
g5
(g1421
g7
Ntp4240
Rp4241
(dp4242
g1425
(lp4243
g1473
asg29
g30
(g1429
tp4244
Rp4245
(dp4246
g125
I00
sg1435
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4247
sg1473
g100
sg35
g36
sbsg1437
(dp4248
g1479
Nssg1439
(lp4249
g1479
asg1441
Nsbsg42
Nsg49
I00
sg44
(dp4250
sg51
Nsg48
Nsg60
Nsg43
g1482
sg46
g4233
sg50
I00
sg52
Nsg55
I00
sg56
g1482
sg57
Nsg58
(lp4251
sg61
Nsb(dp4252
sg5
(g18
g7
Ntp4253
Rp4254
(dp4255
g22
(dp4256
sg24
g5
(g1421
g7
Ntp4257
Rp4258
(dp4259
g1425
(lp4260
g1410
ag1409
ag1427
ag1428
asg29
g30
(g1429
tp4261
Rp4262
(dp4263
g125
I00
sg1427
S'skull_vis_s.png'
p4264
sg1410
g100
sg1428
g1434
sg1435
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4265
sg1409
g100
sg35
g36
sbsg1437
(dp4266
g1427
Nssg1439
(lp4267
g1427
asg1441
Nsbsg42
Nsg43
g1461
sg44
(dp4268
sg46
g4233
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1461
sg57
Nsg58
(lp4269
sg60
Nsg61
Nsb(dp4270
sg5
(g18
g7
Ntp4271
Rp4272
(dp4273
g22
(dp4274
sg24
g5
(g25
g7
Ntp4275
Rp4276
(dp4277
g29
g30
(g31
tp4278
Rp4279
(dp4280
g35
g36
sg1512
g100
sg1513
g100
sg1514
g100
sg1515
g100
sbsg39
(lp4281
g1513
ag1514
ag1512
ag1515
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp4282
sg46
g4233
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp4283
sg60
Nsg61
Nsb(dp4284
sg5
(g18
g7
Ntp4285
Rp4286
(dp4287
g22
(dp4288
sg24
g5
(g1421
g7
Ntp4289
Rp4290
(dp4291
g1425
(lp4292
g1473
asg29
g30
(g1429
tp4293
Rp4294
(dp4295
g125
I00
sg1435
g4247
sg1473
g100
sg35
g36
sbsg1437
(dp4296
g1479
Nssg1439
(lp4297
g1479
asg1441
Nsbsg42
Nsg43
g1498
sg44
(dp4298
sg46
g4233
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g1498
sg57
Nsg58
(lp4299
sg60
Nsg61
Nsb(dp4300
sg5
(g18
g7
Ntp4301
Rp4302
(dp4303
g22
(dp4304
sg24
g5
(g25
g7
Ntp4305
Rp4306
(dp4307
g29
g30
(g31
tp4308
Rp4309
(dp4310
g35
g36
sg1409
g100
sg1410
g100
sbsg39
(lp4311
g1409
ag1410
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp4312
sg46
g4233
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp4313
sg60
Nsg61
Nsb(dp4314
ssg284
(dp4315
sg286
(dp4316
g4218
(dp4317
g4272
(dp4318
g290
(lp4319
(g1427
g1513
tp4320
asssg4237
(dp4321
g4272
(dp4322
g290
(lp4323
(g1479
g1515
tp4324
assg4218
(dp4325
g290
(lp4326
(g1479
g1410
tp4327
assg4254
(dp4328
g290
(lp4329
(g1479
g1410
tp4330
asssg4254
(dp4331
g4272
(dp4332
g290
(lp4333
(g1427
g1514
tp4334
asssg4272
(dp4335
sg4286
(dp4336
g4272
(dp4337
g290
(lp4338
(g1479
g1512
tp4339
assg4218
(dp4340
g290
(lp4341
(g1479
g1409
tp4342
assg4254
(dp4343
g290
(lp4344
(g1479
g1409
tp4345
asssg4302
(dp4346
g4286
(dp4347
g290
(lp4348
(g1409
g1473
tp4349
assg4237
(dp4350
g290
(lp4351
(g1410
g1473
tp4352
assssg332
g4316
sg333
(dp4353
g4218
(dp4354
g4286
g4340
sg4237
g4325
ssg4237
(dp4355
g4302
g4350
ssg4254
(dp4356
g4286
g4343
sg4237
g4328
ssg4272
(dp4357
g4254
g4332
sg4286
g4337
sg4237
g4322
sg4218
g4318
ssg4286
(dp4358
g4302
g4347
ssg4302
(dp4359
ssg341
g4316
sbsg43
g4233
sg46
g1067
sg56
g4233
sg57
g342
((lp4360
(lp4361
g345
ag342
((lp4362
(lp4363
g348
ag345
aa(lp4364
g350
ag351
aa(lp4365
g353
ag354
aa(lp4366
g356
ag357
aa(lp4367
g359
ag360
aa(lp4368
g362
ag363
aa(lp4369
g365
ag366
aa(lp4370
g368
ag369
aatp4371
Rp4372
aa(lp4373
g373
ag342
((lp4374
(lp4375
g348
ag373
aa(lp4376
g377
ag378
aa(lp4377
g380
ag381
aa(lp4378
g383
ag384
aa(lp4379
g386
ag387
aa(lp4380
g389
ag390
aa(lp4381
g392
ag393
aa(lp4382
g395
ag396
aa(lp4383
g398
ag399
aa(lp4384
g401
ag402
aa(lp4385
g404
ag405
aa(lp4386
g407
ag408
aa(lp4387
g410
ag411
aa(lp4388
g413
ag414
aa(lp4389
g416
ag417
aa(lp4390
g419
ag420
aa(lp4391
g422
ag423
aa(lp4392
g425
ag426
aa(lp4393
g428
ag429
aatp4394
Rp4395
aa(lp4396
g433
ag342
((lp4397
(lp4398
g348
ag433
aa(lp4399
g437
ag438
aatp4400
Rp4401
aatp4402
Rp4403
sg61
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2471
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2472
(g5
(g18
g7
Ntp4413
Rp4414
(dp4415
g22
(dp4416
sg24
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g29
g30
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g125
I00
sg35
g36
sS'tpattern'
p4425
g100
sg128
g100
sS'tr'
p4426
g100
sg129
g100
sg172
g100
sg2265
g2266
sS'tzero'
p4427
g100
sS'ignore'
p4428
g100
sS'rltplus'
p4429
g100
sg131
g132
sS'tslice'
p4430
g100
sg144
g100
sS'rlt'
p4431
g100
sg133
g5
(g134
g135
(dp4432
tp4433
Rp4434
(dp4435
g142
S'environ_items'
p4436
sg43
g133
sbsbsg2278
g2266
sg148
Nsg149
g132
sbsg42
Nsg43
S'func_slice_timing_correction_0'
p4437
sg44
(dp4438
sg46
g1067
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4437
sg57
Nsg58
(lp4439
sg60
Nsg61
Nsbg128
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g18
g7
Ntp4449
Rp4450
(dp4451
g22
(dp4452
sg24
g5
(g25
g7
Ntp4453
Rp4454
(dp4455
g29
g30
(g31
tp4456
Rp4457
(dp4458
g35
g36
sS'roi'
p4459
g100
sbsg39
(lp4460
g4459
asg41
I01
sbsg42
Nsg43
S'input_roi'
p4461
sg44
(dp4462
sg46
S'roi_timeseries_0'
p4463
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4461
sg57
Nsg58
(lp4464
sg60
Nsg61
Nsb(dp4465
sg5
(g18
g7
Ntp4466
Rp4467
(dp4468
g22
(dp4469
sg24
g5
(g25
g7
Ntp4470
Rp4471
(dp4472
g29
g30
(g31
tp4473
Rp4474
(dp4475
g35
g36
sg145
(lp4476
I01
aI01
asg1948
g100
sbsg39
(lp4477
g1948
ag145
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp4478
sg46
g4463
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp4479
sg60
Nsg61
Nsb(dp4480
sg5
(g18
g7
Ntp4481
Rp4482
(dp4483
g22
(dp4484
sg24
g5
(g25
g7
Ntp4485
Rp4486
(dp4487
g29
g30
(g31
tp4488
Rp4489
(dp4490
g35
g36
sS'roi_outputs'
p4491
g100
sbsg39
(lp4492
g4491
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp4493
sg46
g4463
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp4494
sg60
Nsg61
Nsb(dp4495
sg5
(g18
g7
Ntp4496
Rp4497
(dp4498
g22
(dp4499
sg24
g5
(g1421
g7
Ntp4500
Rp4501
(dp4502
g1425
(lp4503
g3874
ag3875
ag145
asg29
g30
(g1429
tp4504
Rp4505
(dp4506
g125
I00
sg35
g36
sg3874
g100
sg1435
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4507
sg3875
g100
sg145
g100
sbsg1437
(dp4508
g128
Nssg1439
(lp4509
g128
asg1441
Nsbsg42
Nsg43
S'timeseries_roi'
p4510
sg44
(dp4511
sg46
g4463
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4510
sg57
Nsg58
(lp4512
sg60
Nsg61
Nsb(dp4513
ssg284
(dp4514
sg286
(dp4515
g4450
(dp4516
g4497
(dp4517
g290
(lp4518
(g4459
g3875
tp4519
asssg4467
(dp4520
g4497
(dp4521
g290
(lp4522
(g1948
g3874
tp4523
a(g145
g145
tp4524
asssg4482
(dp4525
sg4497
(dp4526
g4482
(dp4527
g290
(lp4528
(g128
g4491
tp4529
assssg332
g4515
sg333
(dp4530
g4450
(dp4531
sg4467
(dp4532
sg4482
(dp4533
g4497
g4527
ssg4497
(dp4534
g4450
g4517
sg4467
g4521
sssg341
g4515
sbsg43
g4463
sg46
g1067
sg56
g4463
sg57
g342
((lp4535
(lp4536
g345
ag342
((lp4537
(lp4538
g348
ag345
aa(lp4539
g350
ag351
aa(lp4540
g353
ag354
aa(lp4541
g356
ag357
aa(lp4542
g359
ag360
aa(lp4543
g362
ag363
aa(lp4544
g365
ag366
aa(lp4545
g368
ag369
aatp4546
Rp4547
aa(lp4548
g373
ag342
((lp4549
(lp4550
g348
ag373
aa(lp4551
g377
ag378
aa(lp4552
g380
ag381
aa(lp4553
g383
ag384
aa(lp4554
g386
ag387
aa(lp4555
g389
ag390
aa(lp4556
g392
ag393
aa(lp4557
g395
ag396
aa(lp4558
g398
ag399
aa(lp4559
g401
ag402
aa(lp4560
g404
ag405
aa(lp4561
g407
ag408
aa(lp4562
g410
ag411
aa(lp4563
g413
ag414
aa(lp4564
g416
ag417
aa(lp4565
g419
ag420
aa(lp4566
g422
ag423
aa(lp4567
g425
ag426
aa(lp4568
g428
ag429
aatp4569
Rp4570
aa(lp4571
g433
ag342
((lp4572
(lp4573
g348
ag433
aa(lp4574
g437
ag438
aatp4575
Rp4576
aatp4577
Rp4578
sg61
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g18
g7
Ntp4589
Rp4590
(dp4591
g22
(dp4592
sg24
g5
(g158
g7
Ntp4593
Rp4594
(dp4595
g29
g30
(g162
tp4596
Rp4597
(dp4598
g166
g100
sg35
g36
sg167
g100
sg168
g100
sg169
g100
sg170
g100
sg171
g100
sg172
g173
sg174
g100
sg175
g100
sg176
g100
sg177
g100
sg178
g100
sg179
g100
sg180
g100
sg181
g100
sg182
g100
sg183
g100
sg144
g100
sg184
g100
sg185
g100
sg186
g100
sg187
g100
sg125
I00
sg188
g100
sg189
g100
sg129
S'-applyisoxfm 2'
p4599
sg190
g100
sg191
g100
sg131
g132
sg192
g100
sg193
g100
sg194
g100
sg195
g100
sg196
g100
sg128
g100
sg197
g100
sg198
g100
sg199
g100
sg200
g100
sg201
g100
sg202
g100
sg203
g100
sg204
g100
sg205
g100
sg133
g5
(g134
g135
(dp4600
g137
g138
stp4601
Rp4602
(dp4603
g142
S'environ_items'
p4604
sg43
g133
sbsg211
g100
sg212
g100
sg145
g138
sg213
g100
sg214
g100
sg215
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'wm_anat_to_2mm_flirt_applyxfm'
p4605
sg44
(dp4606
sg46
S'nuisance_0'
p4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4605
sg57
Nsg58
(lp4608
sg60
Nsg61
Nsb(dp4609
sg5
(g18
g7
Ntp4610
Rp4611
(dp4612
g22
(dp4613
sg24
g5
(g25
g7
Ntp4614
Rp4615
(dp4616
g29
g30
(g31
tp4617
Rp4618
(dp4619
S'motion_components'
p4620
g100
sS'anat_to_mni_initial_xfm'
p4621
g100
sS'lat_ventricles_mask'
p4622
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4623
sg465
g100
sS'anat_to_mni_rigid_xfm'
p4624
g100
sS'compcor_ncomponents'
p4625
g100
sS'anat_to_mni_affine_xfm'
p4626
g100
sS'selector'
p4627
g100
sg464
g100
sS'template_brain'
p4628
g100
sg3476
g100
sS'mni_to_anat_linear_xfm'
p4629
g100
sg466
g100
sg35
g36
sg3689
g100
sbsg39
(lp4630
g3689
ag464
ag466
ag465
ag4629
ag4621
ag4624
ag4626
ag3476
ag4622
ag4620
ag4627
ag4625
ag4628
asg41
I01
sbsg42
Nsg43
g108
sg44
(dp4631
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g108
sg57
Nsg58
(lp4632
sg60
Nsg61
Nsb(dp4633
sg5
(g18
g7
Ntp4634
Rp4635
(dp4636
g22
(dp4637
sg24
g5
(g158
g7
Ntp4638
Rp4639
(dp4640
g29
g30
(g162
tp4641
Rp4642
(dp4643
g166
g100
sg35
g36
sg167
g100
sg168
g100
sg169
g100
sg170
g100
sg171
g100
sg172
g173
sg174
g100
sg175
g100
sg176
g100
sg177
g100
sg178
g100
sg179
g100
sg180
g100
sg181
g100
sg182
g100
sg183
g100
sg144
g100
sg184
g100
sg185
g100
sg186
g100
sg187
g100
sg125
I00
sg188
g100
sg189
g100
sg129
g4599
sg190
g100
sg191
g100
sg131
g132
sg192
g100
sg193
g100
sg194
g100
sg195
g100
sg196
g100
sg128
g100
sg197
g100
sg198
g100
sg199
g100
sg200
g100
sg201
g100
sg202
g100
sg203
g100
sg204
g100
sg205
g100
sg133
g5
(g134
g135
(dp4644
g137
g138
stp4645
Rp4646
(dp4647
g142
S'environ_items'
p4648
sg43
g133
sbsg211
g100
sg212
g100
sg145
g138
sg213
g100
sg214
g100
sg215
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'csf_anat_to_2mm_flirt_applyxfm'
p4649
sg44
(dp4650
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4649
sg57
Nsg58
(lp4651
sg60
Nsg61
Nsb(dp4652
sg5
(g18
g7
Ntp4653
Rp4654
(dp4655
g22
(dp4656
sg24
g5
(g158
g7
Ntp4657
Rp4658
(dp4659
g29
g30
(g162
tp4660
Rp4661
(dp4662
g166
g100
sg35
g36
sg167
g100
sg168
g100
sg169
g100
sg170
g100
sg171
g100
sg172
g173
sg174
g100
sg175
g100
sg176
g100
sg177
g100
sg178
g100
sg179
g100
sg180
g100
sg181
g100
sg182
g100
sg183
g100
sg144
g100
sg184
g100
sg185
g100
sg186
g100
sg187
g100
sg125
I00
sg188
g100
sg189
g100
sg129
g4599
sg190
g100
sg191
g100
sg131
g132
sg192
g100
sg193
g100
sg194
g100
sg195
g100
sg196
g100
sg128
g100
sg197
g100
sg198
g100
sg199
g100
sg200
g100
sg201
g100
sg202
g100
sg203
g100
sg204
g100
sg205
g100
sg133
g5
(g134
g135
(dp4663
g137
g138
stp4664
Rp4665
(dp4666
g142
S'environ_items'
p4667
sg43
g133
sbsg211
g100
sg212
g100
sg145
g138
sg213
g100
sg214
g100
sg215
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'gm_anat_to_2mm_flirt_applyxfm'
p4668
sg44
(dp4669
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4668
sg57
Nsg58
(lp4670
sg60
Nsg61
Nsb(dp4671
sg5
(g18
g7
Ntp4672
Rp4673
(dp4674
g22
(dp4675
sg24
g5
(g1421
g7
Ntp4676
Rp4677
(dp4678
g1425
(lp4679
g3689
ag4627
aS'wm_sig_file'
p4680
aS'csf_sig_file'
p4681
aS'gm_sig_file'
p4682
aS'motion_file'
p4683
ag4625
asg29
g30
(g1429
tp4684
Rp4685
(dp4686
g125
I00
sg35
g36
sg4683
g100
sg4625
g100
sg1435
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4687
sg4681
g100
sg4680
g100
sg4682
g100
sg4627
g100
sg3689
g100
sbsg1437
(dp4688
S'regressors_file'
p4689
NsS'residual_file'
p4690
Nssg1439
(lp4691
g4690
ag4689
asg1441
Nsbsg42
Nsg43
S'residuals'
p4692
sg44
(dp4693
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
(lp4694
(g4627
(lp4695
(dp4696
S'global'
p4697
I0
sS'linear'
p4698
I1
sS'wm'
p4699
I0
sS'pc1'
p4700
I0
sS'motion'
p4701
I0
sS'quadratic'
p4702
I1
sS'gm'
p4703
I0
sS'compcor'
p4704
I1
sS'csf'
p4705
I1
satp4706
a(g4625
(lp4707
I5
atp4708
asg55
I00
sg56
g4692
sg57
Nsg58
(lp4709
sg60
Nsg61
Nsb(dp4710
sg5
(g18
g7
Ntp4711
Rp4712
(dp4713
g22
(dp4714
sg24
g5
(g158
g7
Ntp4715
Rp4716
(dp4717
g29
g30
(g162
tp4718
Rp4719
(dp4720
g166
g100
sg35
g36
sg167
g100
sg168
g100
sg169
g100
sg170
g100
sg171
g100
sg172
g100
sg174
g100
sg175
g100
sg176
g100
sg177
g100
sg178
g100
sg179
g100
sg180
g100
sg181
g100
sg182
g100
sg183
g100
sg144
g100
sg184
g100
sg185
g100
sg186
g100
sg187
g100
sg125
I00
sg188
g100
sg189
g100
sg129
g4599
sg190
g100
sg191
g100
sg131
g132
sg192
g100
sg193
g100
sg194
g100
sg195
g100
sg196
g100
sg128
g100
sg197
g100
sg198
g100
sg199
g100
sg200
g100
sg201
g100
sg202
g100
sg203
g100
sg204
g100
sg205
g100
sg133
g5
(g134
g135
(dp4721
g137
g138
stp4722
Rp4723
(dp4724
g142
S'environ_items'
p4725
sg43
g133
sbsg211
g100
sg212
g100
sg145
g138
sg213
g100
sg214
g100
sg215
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'func_to_2mm_flirt_applyxfm'
p4726
sg44
(dp4727
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4726
sg57
Nsg58
(lp4728
sg60
Nsg61
Nsb(dp4729
sg5
(g18
g7
Ntp4730
Rp4731
(dp4732
g22
(dp4733
sg24
g5
(g1421
g7
Ntp4734
Rp4735
(dp4736
g1425
(lp4737
g3874
aS'ventricles_mask_file'
p4738
aS'wm_seg_file'
p4739
aS'csf_seg_file'
p4740
aS'gm_seg_file'
p4741
ag484
ag73
ag37
asg29
g30
(g1429
tp4742
Rp4743
(dp4744
g125
I00
sg35
g36
sg484
g100
sg73
g100
sg3874
g100
sg1435
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4745
sg4741
g100
sg4738
g100
sg37
g100
sg4740
g100
sg4739
g100
sbsg1437
(dp4746
S'file_gm'
p4747
NsS'file_wm'
p4748
NsS'file_csf'
p4749
Nssg1439
(lp4750
g4748
ag4749
ag4747
asg1441
Nsbsg42
Nsg43
S'tissue_masks'
p4751
sg44
(dp4752
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4751
sg57
Nsg58
(lp4753
sg60
Nsg61
Nsb(dp4754
sg5
(g18
g7
Ntp4755
Rp4756
(dp4757
g22
(dp4758
sg24
g5
(g158
g7
Ntp4759
Rp4760
(dp4761
g29
g30
(g162
tp4762
Rp4763
(dp4764
g166
g100
sg35
g36
sg167
g100
sg168
g100
sg169
g100
sg170
g100
sg171
g100
sg172
g173
sg174
g100
sg175
g100
sg176
g100
sg177
g100
sg178
g100
sg179
g100
sg180
g100
sg181
g100
sg182
g100
sg183
g100
sg144
g100
sg184
g100
sg185
g100
sg186
g100
sg187
g100
sg125
I00
sg188
g100
sg189
g100
sg129
g4599
sg190
g100
sg191
g100
sg131
g132
sg192
g100
sg193
g100
sg194
g100
sg195
g100
sg196
g100
sg128
g100
sg197
g100
sg198
g100
sg199
g100
sg200
g100
sg201
g100
sg202
g100
sg203
g100
sg204
g100
sg205
g100
sg133
g5
(g134
g135
(dp4765
g137
g138
stp4766
Rp4767
(dp4768
g142
S'environ_items'
p4769
sg43
g133
sbsg211
g100
sg212
g100
sg145
g138
sg213
g100
sg214
g100
sg215
g100
sbsg147
g138
sg148
Nsg149
g132
sbsg42
Nsg43
S'ho_mni_to_2mm_flirt_applyxfm'
p4770
sg44
(dp4771
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g4770
sg57
Nsg58
(lp4772
sg60
Nsg61
Nsb(dp4773
sg5
(g18
g7
Ntp4774
Rp4775
(dp4776
g22
(dp4777
sg24
g5
(g25
g7
Ntp4778
Rp4779
(dp4780
g29
g30
(g31
tp4781
Rp4782
(dp4783
g35
g36
sS'regressors'
p4784
g100
sg3689
g100
sbsg39
(lp4785
g3689
ag4784
asg41
I01
sbsg42
Nsg43
g261
sg44
(dp4786
sg46
g4607
sg48
Nsg49
I00
sg50
I00
sg51
Nsg52
Nsg55
I00
sg56
g261
sg57
Nsg58
(lp4787
sg60
Nsg61
Nsb(dp4788
ssg284
(dp4789
sg286
(dp4790
g4590
(dp4791
g4731
(dp4792
g290
(lp4793
(g128
g4739
tp4794
asssg4611
(dp4795
g4590
(dp4796
g290
(lp4797
(g464
g144
tp4798
a(g464
g169
tp4799
assg4635
(dp4800
g290
(lp4801
(g466
g144
tp4802
a(g466
g169
tp4803
assg4654
(dp4804
g290
(lp4805
(g465
g144
tp4806
a(g465
g169
tp4807
assg4673
(dp4808
g290
(lp4809
(g3689
g3689
tp4810
a(g4620
g4683
tp4811
a(g4627
g4627
tp4812
a(g4625
g4625
tp4813
assg4712
(dp4814
g290
(lp4815
(g3689
g144
tp4816
a(g466
g169
tp4817
a(g3476
g167
tp4818
assg4756
(dp4819
g290
(lp4820
(g4629
g167
tp4821
a(g4622
g144
tp4822
a(g466
g169
tp4823
asssg4635
(dp4824
g4731
(dp4825
g290
(lp4826
(g128
g4740
tp4827
asssg4654
(dp4828
g4731
(dp4829
g290
(lp4830
(g128
g4741
tp4831
asssg4673
(dp4832
g4775
(dp4833
g290
(lp4834
(g4690
g3689
tp4835
a(g4689
g4784
tp4836
asssg4712
(dp4837
g4731
(dp4838
g290
(lp4839
(g128
g3874
tp4840
asssg4731
(dp4841
g4673
(dp4842
g290
(lp4843
(g4748
g4680
tp4844
a(g4749
g4681
tp4845
a(g4747
g4682
tp4846
asssg4756
(dp4847
g4731
(dp4848
g290
(lp4849
(g128
g4738
tp4850
asssg4775
(dp4851
ssg332
g4790
sg333
(dp4852
g4590
(dp4853
g4611
g4796
ssg4611
(dp4854
sg4635
(dp4855
g4611
g4800
ssg4654
(dp4856
g4611
g4804
ssg4673
(dp4857
g4611
g4808
sg4731
g4842
ssg4712
(dp4858
g4611
g4814
ssg4731
(dp4859
g4654
g4829
sg4712
g4838
sg4756
g4848
sg4635
g4825
sg4590
g4792
ssg4756
(dp4860
g4611
g4819
ssg4775
(dp4861
g4673
g4833
sssg341
g4790
sbsg43
g4607
sg46
g1067
sg56
g4607
sg57
g342
((lp4862
(lp4863
g345
ag342
((lp4864
(lp4865
g348
ag345
aa(lp4866
g350
ag351
aa(lp4867
g353
ag354
aa(lp4868
g356
ag357
aa(lp4869
g359
ag360
aa(lp4870
g362
ag363
aa(lp4871
g365
ag366
aa(lp4872
g368
ag369
aatp4873
Rp4874
aa(lp4875
g373
ag342
((lp4876
(lp4877
g348
ag373
aa(lp4878
g377
ag378
aa(lp4879
g380
ag381
aa(lp4880
g383
ag384
aa(lp4881
g386
ag387
aa(lp4882
g389
ag390
aa(lp4883
g392
ag393
aa(lp4884
g395
ag396
aa(lp4885
g398
ag399
aa(lp4886
g401
ag402
aa(lp4887
g404
ag405
aa(lp4888
g407
ag408
aa(lp4889
g410
ag411
aa(lp4890
g413
ag414
aa(lp4891
g416
ag417
aa(lp4892
g419
ag420
aa(lp4893
g422
ag423
aa(lp4894
g425
ag426
aa(lp4895
g428
ag429
aatp4896
Rp4897
aa(lp4898
g433
ag342
((lp4899
(lp4900
g348
ag433
aa(lp4901
g437
ag438
aatp4902
Rp4903
aatp4904
Rp4905
sg61
NsbS'outputspec.subject'
p4906
tp4907
sg2016
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg2017
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Running'
p4921
sS'strat_0'
p4922
(lp4923
g2247
ag1138
ag47
ag4437
ag2477
ag2893
aS'func_to_anat_FLIRT_0'
p4924
ag3480
ag1900
ag4607
ag3823
ag4463
ag3848
asg1988
g3690
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1431962352.989651
s.