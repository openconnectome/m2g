(dp0
S'resource_pool'
p1
(lp2
(dp3
S'anatomical_gm_mask'
p4
(ccopy_reg
_reconstructor
p5
(cnipype.pipeline.engine
Workflow
p6
c__builtin__
object
p7
Ntp8
Rp9
(dp10
S'_graph'
p11
g5
(cnetworkx.classes.digraph
DiGraph
p12
g7
Ntp13
Rp14
(dp15
S'node'
p16
(dp17
g5
(cnipype.pipeline.engine
Node
p18
g7
Ntp19
Rp20
(dp21
S'input_source'
p22
(dp23
sS'_interface'
p24
g5
(cnipype.interfaces.utility
IdentityInterface
p25
g7
Ntp26
Rp27
(dp28
S'inputs'
p29
ctraits.traits
__newobj__
p30
(cnipype.interfaces.base
DynamicTraitedSpec
p31
tp32
Rp33
(dp34
S'partial_volume_files'
p35
ctraits.trait_base
_Undefined
p36
(tRp37
sS'__traits_version__'
p38
S'4.5.0'
p39
sS'gm_combo'
p40
g37
sS'mixeltype'
p41
g37
sS'csf_mni2t1'
p42
g37
sS'wm_bin'
p43
g37
sS'csf_bin'
p44
g37
sS'probability_maps'
p45
g37
sS'wm_mni2t1'
p46
g37
sS'csf_combo'
p47
g37
sS'wm_combo'
p48
g37
sS'wm_mask'
p49
g37
sS'gm_mask'
p50
g37
sS'csf_mask'
p51
g37
sS'gm_bin'
p52
g37
sS'partial_volume_map'
p53
g37
sS'gm_mni2t1'
p54
g37
sbsS'_fields'
p55
(lp56
g42
ag47
ag44
ag51
ag54
ag40
ag52
ag50
ag46
ag48
ag43
ag45
ag41
ag53
ag35
ag49
asS'_mandatory_inputs'
p57
I01
sbsS'_result'
p58
NsS'name'
p59
S'outputspec'
p60
sS'plugin_args'
p61
(dp62
sS'_hierarchy'
p63
S'seg_preproc_0'
p64
sS'itersource'
p65
NsS'run_without_submitting'
p66
I00
sS'synchronize'
p67
I00
sS'parameterization'
p68
NsS'iterables'
p69
NsS'_got_inputs'
p70
I00
sS'_id'
p71
g60
sS'config'
p72
NsS'needed_outputs'
p73
(lp74
sS'overwrite'
p75
NsS'base_dir'
p76
Nsb(dp77
sg5
(g18
g7
Ntp78
Rp79
(dp80
g22
(dp81
sg24
g5
(g25
g7
Ntp82
Rp83
(dp84
g29
g30
(g31
tp85
Rp86
(dp87
g38
g39
sS'csf_threshold'
p88
(lp89
F0.96
asbsg55
(lp90
g88
asg57
I01
sbsg58
Nsg59
g88
sg61
(dp91
sg63
g64
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
(g88
(lp92
F0.96
atp93
sg70
I00
sg71
g88
sg72
Nsg73
(lp94
sg75
Nsg76
Nsb(dp95
sg5
(g18
g7
Ntp96
Rp97
(dp98
g22
(dp99
sg24
g5
(g25
g7
Ntp100
Rp101
(dp102
g29
g30
(g31
tp103
Rp104
(dp105
g38
g39
sS'wm_threshold'
p106
(lp107
F0.96
asbsg55
(lp108
g106
asg57
I01
sbsg58
Nsg59
g106
sg61
(dp109
sg63
g64
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
(g106
(lp110
F0.96
atp111
sg70
I00
sg71
g106
sg72
Nsg73
(lp112
sg75
Nsg76
Nsb(dp113
sg5
(g18
g7
Ntp114
Rp115
(dp116
g22
(dp117
sg24
g5
(g25
g7
Ntp118
Rp119
(dp120
g29
g30
(g31
tp121
Rp122
(dp123
S'standard2highres_rig'
p124
g37
sg38
g39
sS'standard2highres_init'
p125
g37
sS'brain'
p126
g37
sS'PRIOR_GRAY'
p127
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_gray_bin.nii.gz'
p128
sS'standard2highres_mat'
p129
g37
sS'PRIOR_CSF'
p130
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_csf_bin.nii.gz'
p131
sS'PRIOR_WHITE'
p132
S'/home/eric/cpac_image_resources/tissuepriors/2mm/avg152T1_white_bin.nii.gz'
p133
sbsg55
(lp134
g126
ag125
ag129
ag124
ag130
ag127
ag132
asg57
I01
sbsg58
Nsg59
S'inputspec'
p135
sg61
(dp136
sg63
g64
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp137
sg75
Nsg76
Nsb(dp138
sg5
(g6
g7
Ntp139
Rp140
(dp141
g11
g5
(g12
g7
Ntp142
Rp143
(dp144
g16
(dp145
g5
(g18
g7
Ntp146
Rp147
(dp148
g22
(dp149
sg24
g5
(cnipype.interfaces.fsl.utils
ImageMaths
p150
g7
Ntp151
Rp152
(dp153
g29
g30
(cnipype.interfaces.fsl.utils
ImageMathsInputSpec
p154
tp155
Rp156
(dp157
S'ignore_exception'
p158
I00
sg38
g39
sS'op_string'
p159
g37
sS'out_data_type'
p160
g37
sS'out_file'
p161
g37
sS'args'
p162
g37
sS'in_file2'
p163
g37
sS'terminal_output'
p164
S'stream'
p165
sS'environ'
p166
g5
(ctraits.trait_handlers
TraitDictObject
p167
c__builtin__
dict
p168
(dp169
S'FSLOUTPUTTYPE'
p170
S'NIFTI_GZ'
p171
stp172
Rp173
(dp174
S'name_items'
p175
S'environ_items'
p176
sg59
g166
sbsS'in_file'
p177
g37
sS'output_type'
p178
g171
sS'suffix'
p179
g37
sbsS'_output_type'
p180
g171
sS'_environ'
p181
NsS'_terminal_output'
p182
g165
sbsg58
Nsg59
S'binarize_threshold_WM'
p183
sg61
(dp184
sg63
S'WM'
p185
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g183
sg72
Nsg73
(lp186
sg75
Nsg76
Nsb(dp187
sg5
(g18
g7
Ntp188
Rp189
(dp190
g22
(dp191
sg24
g5
(cnipype.interfaces.fsl.preprocess
FLIRT
p192
g7
Ntp193
Rp194
(dp195
g29
g30
(cnipype.interfaces.fsl.preprocess
FLIRTInputSpec
p196
tp197
Rp198
(dp199
S'rigid2D'
p200
g37
sg38
g39
sS'in_matrix_file'
p201
g37
sS'verbose'
p202
g37
sS'reference'
p203
g37
sS'padding_size'
p204
g37
sS'sinc_window'
p205
g37
sS'interp'
p206
S'nearestneighbour'
p207
sS'wmnorms'
p208
g37
sS'coarse_search'
p209
g37
sS'no_resample'
p210
g37
sS'sinc_width'
p211
g37
sS'in_weight'
p212
g37
sS'fieldmap'
p213
g37
sS'echospacing'
p214
g37
sS'ref_weight'
p215
g37
sS'apply_isoxfm'
p216
g37
sS'fieldmapmask'
p217
g37
sg177
g37
sS'bbrtype'
p218
g37
sS'no_clamp'
p219
g37
sS'force_scaling'
p220
g37
sS'pedir'
p221
g37
sg158
I00
sS'display_init'
p222
g37
sS'schedule'
p223
g37
sg162
g37
sS'uses_qform'
p224
g37
sS'wmcoords'
p225
g37
sg164
g165
sS'fine_search'
p226
g37
sS'angle_rep'
p227
g37
sS'no_search'
p228
g37
sS'apply_xfm'
p229
I01
sS'wm_seg'
p230
g37
sg161
g37
sS'bbrslope'
p231
g37
sS'datatype'
p232
g37
sS'save_log'
p233
g37
sS'dof'
p234
g37
sS'out_matrix_file'
p235
g37
sS'no_resample_blur'
p236
g37
sS'min_sampling'
p237
g37
sS'cost_func'
p238
g37
sS'cost'
p239
g37
sg166
g5
(g167
g168
(dp240
g170
g171
stp241
Rp242
(dp243
g175
S'environ_items'
p244
sg59
g166
sbsS'searchr_x'
p245
g37
sS'out_log'
p246
g37
sg178
g171
sS'searchr_z'
p247
g37
sS'bins'
p248
g37
sS'searchr_y'
p249
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'WM_prior_mni_to_t1'
p250
sg61
(dp251
sg63
g185
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g250
sg72
Nsg73
(lp252
sg75
Nsg76
Nsb(dp253
sg5
(g18
g7
Ntp254
Rp255
(dp256
g22
(dp257
sg24
g5
(cnipype.interfaces.fsl.maths
MultiImageMaths
p258
g7
Ntp259
Rp260
(dp261
g29
g30
(cnipype.interfaces.fsl.maths
MultiImageMathsInput
p262
tp263
Rp264
(dp265
g158
I00
sS'nan2zeros'
p266
g37
sg159
S'-mas %s '
p267
sg161
g37
sg162
g37
sS'internal_datatype'
p268
g37
sg38
g39
sg164
g165
sg166
g5
(g167
g168
(dp269
g170
g171
stp270
Rp271
(dp272
g175
S'environ_items'
p273
sg59
g166
sbsg177
g37
sg178
g171
sS'output_datatype'
p274
g37
sS'operand_files'
p275
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'overlap_WM_map_with_prior'
p276
sg61
(dp277
sg63
g185
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g276
sg72
Nsg73
(lp278
sg75
Nsg76
Nsb(dp279
sg5
(g18
g7
Ntp280
Rp281
(dp282
g22
(dp283
sg24
g5
(g25
g7
Ntp284
Rp285
(dp286
g29
g30
(g31
tp287
Rp288
(dp289
g38
g39
sS'segment_combo'
p290
g37
sS'segment_mask'
p291
g37
sS'tissueprior_mni2t1'
p292
g37
sS'segment_bin'
p293
g37
sbsg55
(lp294
g292
ag290
ag293
ag291
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp295
sg63
g185
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp296
sg75
Nsg76
Nsb(dp297
sg5
(g18
g7
Ntp298
Rp299
(dp300
g22
(dp301
sg24
g5
(g258
g7
Ntp302
Rp303
(dp304
g29
g30
(g262
tp305
Rp306
(dp307
g158
I00
sg266
g37
sg159
g267
sg161
g37
sg162
g37
sg268
g37
sg38
g39
sg164
g165
sg166
g5
(g167
g168
(dp308
g170
g171
stp309
Rp310
(dp311
g175
S'environ_items'
p312
sg59
g166
sbsg177
g37
sg178
g171
sg274
g37
sg275
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'WM_mask'
p313
sg61
(dp314
sg63
g185
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g313
sg72
Nsg73
(lp315
sg75
Nsg76
Nsb(dp316
sg5
(g18
g7
Ntp317
Rp318
(dp319
g22
(dp320
sg24
g5
(g25
g7
Ntp321
Rp322
(dp323
g29
g30
(g31
tp324
Rp325
(dp326
g124
g37
sg38
g39
sg125
g37
sS'tissue_prior'
p327
g37
sg129
g37
sg126
g37
sS'probability_map'
p328
g37
sS'threshold'
p329
g37
sbsg55
(lp330
g327
ag329
ag126
ag328
ag125
ag129
ag124
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp331
sg63
g185
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp332
sg75
Nsg76
Nsb(dp333
ssS'graph'
p334
(dp335
sS'succ'
p336
(dp337
g147
(dp338
g299
(dp339
S'connect'
p340
(lp341
(g161
g177
tp342
assg281
(dp343
g340
(lp344
(g161
g293
tp345
asssg189
(dp346
g299
(dp347
g340
(lp348
(g161
g275
tp349
assg255
(dp350
g340
(lp351
(g161
g275
tp352
assg281
(dp353
g340
(lp354
(g161
g292
tp355
asssg255
(dp356
g281
(dp357
g340
(lp358
(g161
g290
tp359
assg147
(dp360
g340
(lp361
(g161
g177
tp362
asssg281
(dp363
sg299
(dp364
g281
(dp365
g340
(lp366
(g161
g291
tp367
asssg318
(dp368
g189
(dp369
g340
(lp370
(g327
g177
tp371
a(g126
g203
tp372
a(g129
g201
tp373
assg255
(dp374
g340
(lp375
(g328
g177
tp376
assg147
(dp377
g340
(lp378
((g329
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p379
(ttp380
g159
tp381
assssS'edge'
p382
g337
sS'pred'
p383
(dp384
g147
(dp385
g255
g360
sg318
g377
ssg189
(dp386
g318
g369
ssg255
(dp387
g189
g350
sg318
g374
ssg281
(dp388
g299
g365
sg189
g353
sg255
g357
sg147
g343
ssg299
(dp389
g189
g347
sg147
g339
ssg318
(dp390
ssS'adj'
p391
g337
sbsg59
g185
sg63
g64
sg71
g185
sg72
ccollections
OrderedDict
p392
((lp393
(lp394
S'logging'
p395
ag392
((lp396
(lp397
S'__name__'
p398
ag395
aa(lp399
S'workflow_level'
p400
aS'INFO'
p401
aa(lp402
S'filemanip_level'
p403
aS'INFO'
p404
aa(lp405
S'interface_level'
p406
aS'INFO'
p407
aa(lp408
S'log_to_file'
p409
aS'True'
p410
aa(lp411
S'log_directory'
p412
aS'/mnt/ssd1/data/outputs/CPAC/CPAC_test1/outputs/logs/42_2924850236'
p413
aa(lp414
S'log_size'
p415
aS'16384000'
p416
aa(lp417
S'log_rotate'
p418
aS'4'
p419
aatp420
Rp421
aa(lp422
S'execution'
p423
ag392
((lp424
(lp425
g398
ag423
aa(lp426
S'create_report'
p427
aS'true'
p428
aa(lp429
S'crashdump_dir'
p430
aS'/home/eric/Documents/m2g/packages/functional/CPAC_sub_lists'
p431
aa(lp432
S'display_variable'
p433
aS':1'
p434
aa(lp435
S'hash_method'
p436
aS'timestamp'
p437
aa(lp438
S'job_finished_timeout'
p439
aS'5'
p440
aa(lp441
S'keep_inputs'
p442
aS'false'
p443
aa(lp444
S'local_hash_check'
p445
aS'true'
p446
aa(lp447
S'matplotlib_backend'
p448
aS'Agg'
p449
aa(lp450
S'plugin'
p451
aS'Linear'
p452
aa(lp453
S'remove_node_directories'
p454
aS'false'
p455
aa(lp456
S'remove_unnecessary_outputs'
p457
aS'true'
p458
aa(lp459
S'single_thread_matlab'
p460
aS'true'
p461
aa(lp462
S'stop_on_first_crash'
p463
aS'false'
p464
aa(lp465
S'stop_on_first_rerun'
p466
aS'false'
p467
aa(lp468
S'use_relative_paths'
p469
aS'false'
p470
aa(lp471
S'stop_on_unknown_version'
p472
aS'false'
p473
aa(lp474
S'write_provenance'
p475
aS'false'
p476
aa(lp477
S'parameterize_dirs'
p478
aS'true'
p479
aatp480
Rp481
aa(lp482
S'check'
p483
ag392
((lp484
(lp485
g398
ag483
aa(lp486
S'interval'
p487
aS'1209600'
p488
aatp489
Rp490
aatp491
Rp492
sg76
Nsb(dp493
sg5
(g6
g7
Ntp494
Rp495
(dp496
g11
g5
(g12
g7
Ntp497
Rp498
(dp499
g16
(dp500
g5
(g18
g7
Ntp501
Rp502
(dp503
g22
(dp504
sg24
g5
(g150
g7
Ntp505
Rp506
(dp507
g29
g30
(g154
tp508
Rp509
(dp510
g158
I00
sg38
g39
sg159
g37
sg160
g37
sg161
g37
sg162
g37
sg163
g37
sg164
g165
sg166
g5
(g167
g168
(dp511
g170
g171
stp512
Rp513
(dp514
g175
S'environ_items'
p515
sg59
g166
sbsg177
g37
sg178
g171
sg179
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'binarize_threshold_GM'
p516
sg61
(dp517
sg63
S'GM'
p518
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g516
sg72
Nsg73
(lp519
sg75
Nsg76
Nsb(dp520
sg5
(g18
g7
Ntp521
Rp522
(dp523
g22
(dp524
sg24
g5
(g25
g7
Ntp525
Rp526
(dp527
g29
g30
(g31
tp528
Rp529
(dp530
g124
g37
sg38
g39
sg125
g37
sg327
g37
sg129
g37
sg126
g37
sg328
g37
sg329
g37
sbsg55
(lp531
g327
ag329
ag126
ag328
ag125
ag129
ag124
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp532
sg63
g518
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp533
sg75
Nsg76
Nsb(dp534
sg5
(g18
g7
Ntp535
Rp536
(dp537
g22
(dp538
sg24
g5
(g25
g7
Ntp539
Rp540
(dp541
g29
g30
(g31
tp542
Rp543
(dp544
g38
g39
sg290
g37
sg291
g37
sg292
g37
sg293
g37
sbsg55
(lp545
g292
ag290
ag293
ag291
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp546
sg63
g518
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp547
sg75
Nsg76
Nsb(dp548
sg5
(g18
g7
Ntp549
Rp550
(dp551
g22
(dp552
sg24
g5
(g258
g7
Ntp553
Rp554
(dp555
g29
g30
(g262
tp556
Rp557
(dp558
g158
I00
sg266
g37
sg159
g267
sg161
g37
sg162
g37
sg268
g37
sg38
g39
sg164
g165
sg166
g5
(g167
g168
(dp559
g170
g171
stp560
Rp561
(dp562
g175
S'environ_items'
p563
sg59
g166
sbsg177
g37
sg178
g171
sg274
g37
sg275
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'GM_mask'
p564
sg61
(dp565
sg63
g518
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g564
sg72
Nsg73
(lp566
sg75
Nsg76
Nsb(dp567
sg5
(g18
g7
Ntp568
Rp569
(dp570
g22
(dp571
sg24
g5
(g258
g7
Ntp572
Rp573
(dp574
g29
g30
(g262
tp575
Rp576
(dp577
g158
I00
sg266
g37
sg159
g267
sg161
g37
sg162
g37
sg268
g37
sg38
g39
sg164
g165
sg166
g5
(g167
g168
(dp578
g170
g171
stp579
Rp580
(dp581
g175
S'environ_items'
p582
sg59
g166
sbsg177
g37
sg178
g171
sg274
g37
sg275
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'overlap_GM_map_with_prior'
p583
sg61
(dp584
sg63
g518
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g583
sg72
Nsg73
(lp585
sg75
Nsg76
Nsb(dp586
sg5
(g18
g7
Ntp587
Rp588
(dp589
g22
(dp590
sg24
g5
(g192
g7
Ntp591
Rp592
(dp593
g29
g30
(g196
tp594
Rp595
(dp596
g200
g37
sg38
g39
sg201
g37
sg202
g37
sg203
g37
sg204
g37
sg205
g37
sg206
g207
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg217
g37
sg177
g37
sg218
g37
sg219
g37
sg220
g37
sg221
g37
sg158
I00
sg222
g37
sg223
g37
sg162
g37
sg224
g37
sg225
g37
sg164
g165
sg226
g37
sg227
g37
sg228
g37
sg229
I01
sg230
g37
sg161
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg235
g37
sg236
g37
sg237
g37
sg238
g37
sg239
g37
sg166
g5
(g167
g168
(dp597
g170
g171
stp598
Rp599
(dp600
g175
S'environ_items'
p601
sg59
g166
sbsg245
g37
sg246
g37
sg178
g171
sg247
g37
sg248
g37
sg249
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'GM_prior_mni_to_t1'
p602
sg61
(dp603
sg63
g518
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g602
sg72
Nsg73
(lp604
sg75
Nsg76
Nsb(dp605
ssg334
(dp606
sg336
(dp607
g502
(dp608
g550
(dp609
g340
(lp610
(g161
g177
tp611
assg536
(dp612
g340
(lp613
(g161
g293
tp614
asssg522
(dp615
g569
(dp616
g340
(lp617
(g328
g177
tp618
assg588
(dp619
g340
(lp620
(g327
g177
tp621
a(g126
g203
tp622
a(g129
g201
tp623
assg502
(dp624
g340
(lp625
((g329
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p626
(ttp627
g159
tp628
asssg536
(dp629
sg550
(dp630
g536
(dp631
g340
(lp632
(g161
g291
tp633
asssg569
(dp634
g502
(dp635
g340
(lp636
(g161
g177
tp637
assg536
(dp638
g340
(lp639
(g161
g290
tp640
asssg588
(dp641
g569
(dp642
g340
(lp643
(g161
g275
tp644
assg536
(dp645
g340
(lp646
(g161
g292
tp647
assg550
(dp648
g340
(lp649
(g161
g275
tp650
assssg382
g607
sg383
(dp651
g502
(dp652
g569
g635
sg522
g624
ssg522
(dp653
sg536
(dp654
g569
g638
sg550
g631
sg588
g645
sg502
g612
ssg550
(dp655
g502
g609
sg588
g648
ssg569
(dp656
g522
g616
sg588
g642
ssg588
(dp657
g522
g619
sssg391
g607
sbsg59
g518
sg63
g64
sg71
g518
sg72
g392
((lp658
(lp659
g395
ag392
((lp660
(lp661
g398
ag395
aa(lp662
g400
ag401
aa(lp663
g403
ag404
aa(lp664
g406
ag407
aa(lp665
g409
ag410
aa(lp666
g412
ag413
aa(lp667
g415
ag416
aa(lp668
g418
ag419
aatp669
Rp670
aa(lp671
g423
ag392
((lp672
(lp673
g398
ag423
aa(lp674
g427
ag428
aa(lp675
g430
ag431
aa(lp676
g433
ag434
aa(lp677
g436
ag437
aa(lp678
g439
ag440
aa(lp679
g442
ag443
aa(lp680
g445
ag446
aa(lp681
g448
ag449
aa(lp682
g451
ag452
aa(lp683
g454
ag455
aa(lp684
g457
ag458
aa(lp685
g460
ag461
aa(lp686
g463
ag464
aa(lp687
g466
ag467
aa(lp688
g469
ag470
aa(lp689
g472
ag473
aa(lp690
g475
ag476
aa(lp691
g478
ag479
aatp692
Rp693
aa(lp694
g483
ag392
((lp695
(lp696
g398
ag483
aa(lp697
g487
ag488
aatp698
Rp699
aatp700
Rp701
sg76
Nsb(dp702
sg5
(g18
g7
Ntp703
Rp704
(dp705
g22
(dp706
sg24
g5
(cnipype.interfaces.fsl.preprocess
FAST
p707
g7
Ntp708
Rp709
(dp710
g29
g30
(cnipype.interfaces.fsl.preprocess
FASTInputSpec
p711
tp712
Rp713
(dp714
S'number_classes'
p715
g37
sS'out_basename'
p716
S'segment'
p717
sS'hyper'
p718
g37
sg202
g37
sS'init_seg_smooth'
p719
g37
sS'init_transform'
p720
g37
sS'no_pve'
p721
g37
sS'output_biascorrected'
p722
g37
sS'mixel_smooth'
p723
g37
sS'segments'
p724
I01
sS'iters_afterbias'
p725
g37
sS'bias_lowpass'
p726
g37
sS'other_priors'
p727
g37
sg38
g39
sg158
I00
sS'img_type'
p728
I1
sg162
g37
sg45
I01
sS'manual_seg'
p729
g37
sg164
g165
sS'output_biasfield'
p730
g37
sS'no_bias'
p731
g37
sS'use_priors'
p732
g37
sS'in_files'
p733
g37
sS'segment_iters'
p734
g37
sg166
g5
(g167
g168
(dp735
g170
g171
stp736
Rp737
(dp738
g175
S'environ_items'
p739
sg59
g166
sbsg178
g171
sS'bias_iters'
p740
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
g717
sg61
(dp741
sg63
g64
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g717
sg72
Nsg73
(lp742
sg75
Nsg76
Nsb(dp743
sg5
(g18
g7
Ntp744
Rp745
(dp746
g22
(dp747
sg24
g5
(g25
g7
Ntp748
Rp749
(dp750
g29
g30
(g31
tp751
Rp752
(dp753
g38
g39
sS'gm_threshold'
p754
(lp755
F0.7
asbsg55
(lp756
g754
asg57
I01
sbsg58
Nsg59
g754
sg61
(dp757
sg63
g64
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
(g754
(lp758
F0.7
atp759
sg70
I00
sg71
g754
sg72
Nsg73
(lp760
sg75
Nsg76
Nsb(dp761
sg5
(g6
g7
Ntp762
Rp763
(dp764
g11
g5
(g12
g7
Ntp765
Rp766
(dp767
g16
(dp768
g5
(g18
g7
Ntp769
Rp770
(dp771
g22
(dp772
sg24
g5
(g150
g7
Ntp773
Rp774
(dp775
g29
g30
(g154
tp776
Rp777
(dp778
g158
I00
sg38
g39
sg159
g37
sg160
g37
sg161
g37
sg162
g37
sg163
g37
sg164
g165
sg166
g5
(g167
g168
(dp779
g170
g171
stp780
Rp781
(dp782
g175
S'environ_items'
p783
sg59
g166
sbsg177
g37
sg178
g171
sg179
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'binarize_threshold_CSF'
p784
sg61
(dp785
sg63
S'CSF'
p786
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g784
sg72
Nsg73
(lp787
sg75
Nsg76
Nsb(dp788
sg5
(g18
g7
Ntp789
Rp790
(dp791
g22
(dp792
sg24
g5
(g25
g7
Ntp793
Rp794
(dp795
g29
g30
(g31
tp796
Rp797
(dp798
g124
g37
sg38
g39
sg125
g37
sg327
g37
sg129
g37
sg126
g37
sg328
g37
sg329
g37
sbsg55
(lp799
g327
ag329
ag126
ag328
ag125
ag129
ag124
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp800
sg63
g786
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp801
sg75
Nsg76
Nsb(dp802
sg5
(g18
g7
Ntp803
Rp804
(dp805
g22
(dp806
sg24
g5
(g258
g7
Ntp807
Rp808
(dp809
g29
g30
(g262
tp810
Rp811
(dp812
g158
I00
sg266
g37
sg159
g267
sg161
g37
sg162
g37
sg268
g37
sg38
g39
sg164
g165
sg166
g5
(g167
g168
(dp813
g170
g171
stp814
Rp815
(dp816
g175
S'environ_items'
p817
sg59
g166
sbsg177
g37
sg178
g171
sg274
g37
sg275
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'overlap_CSF_map_with_prior'
p818
sg61
(dp819
sg63
g786
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g818
sg72
Nsg73
(lp820
sg75
Nsg76
Nsb(dp821
sg5
(g18
g7
Ntp822
Rp823
(dp824
g22
(dp825
sg24
g5
(g192
g7
Ntp826
Rp827
(dp828
g29
g30
(g196
tp829
Rp830
(dp831
g200
g37
sg38
g39
sg201
g37
sg202
g37
sg203
g37
sg204
g37
sg205
g37
sg206
g207
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg217
g37
sg177
g37
sg218
g37
sg219
g37
sg220
g37
sg221
g37
sg158
I00
sg222
g37
sg223
g37
sg162
g37
sg224
g37
sg225
g37
sg164
g165
sg226
g37
sg227
g37
sg228
g37
sg229
I01
sg230
g37
sg161
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg235
g37
sg236
g37
sg237
g37
sg238
g37
sg239
g37
sg166
g5
(g167
g168
(dp832
g170
g171
stp833
Rp834
(dp835
g175
S'environ_items'
p836
sg59
g166
sbsg245
g37
sg246
g37
sg178
g171
sg247
g37
sg248
g37
sg249
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'CSF_prior_mni_to_t1'
p837
sg61
(dp838
sg63
g786
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g837
sg72
Nsg73
(lp839
sg75
Nsg76
Nsb(dp840
sg5
(g18
g7
Ntp841
Rp842
(dp843
g22
(dp844
sg24
g5
(g25
g7
Ntp845
Rp846
(dp847
g29
g30
(g31
tp848
Rp849
(dp850
g38
g39
sg290
g37
sg291
g37
sg292
g37
sg293
g37
sbsg55
(lp851
g292
ag290
ag293
ag291
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp852
sg63
g786
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp853
sg75
Nsg76
Nsb(dp854
sg5
(g18
g7
Ntp855
Rp856
(dp857
g22
(dp858
sg24
g5
(g258
g7
Ntp859
Rp860
(dp861
g29
g30
(g262
tp862
Rp863
(dp864
g158
I00
sg266
g37
sg159
g267
sg161
g37
sg162
g37
sg268
g37
sg38
g39
sg164
g165
sg166
g5
(g167
g168
(dp865
g170
g171
stp866
Rp867
(dp868
g175
S'environ_items'
p869
sg59
g166
sbsg177
g37
sg178
g171
sg274
g37
sg275
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'CSF_mask'
p870
sg61
(dp871
sg63
g786
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g870
sg72
Nsg73
(lp872
sg75
Nsg76
Nsb(dp873
ssg334
(dp874
sg336
(dp875
g770
(dp876
g842
(dp877
g340
(lp878
(g161
g293
tp879
assg856
(dp880
g340
(lp881
(g161
g177
tp882
asssg790
(dp883
g823
(dp884
g340
(lp885
(g327
g177
tp886
a(g126
g203
tp887
a(g129
g201
tp888
assg804
(dp889
g340
(lp890
(g328
g177
tp891
assg770
(dp892
g340
(lp893
((g329
S'S"def form_threshold_string(threshold):\\n    return \'-thr %f -bin \' % (threshold)\\n"\n.'
p894
(ttp895
g159
tp896
asssg804
(dp897
g770
(dp898
g340
(lp899
(g161
g177
tp900
assg842
(dp901
g340
(lp902
(g161
g290
tp903
asssg823
(dp904
g842
(dp905
g340
(lp906
(g161
g292
tp907
assg804
(dp908
g340
(lp909
(g161
g275
tp910
assg856
(dp911
g340
(lp912
(g161
g275
tp913
asssg842
(dp914
sg856
(dp915
g842
(dp916
g340
(lp917
(g161
g291
tp918
assssg382
g875
sg383
(dp919
g770
(dp920
g790
g892
sg804
g898
ssg790
(dp921
sg804
(dp922
g790
g889
sg823
g908
ssg823
(dp923
g790
g884
ssg842
(dp924
g823
g905
sg856
g916
sg804
g901
sg770
g877
ssg856
(dp925
g770
g880
sg823
g911
sssg391
g875
sbsg59
g786
sg63
g64
sg71
g786
sg72
g392
((lp926
(lp927
g395
ag392
((lp928
(lp929
g398
ag395
aa(lp930
g400
ag401
aa(lp931
g403
ag404
aa(lp932
g406
ag407
aa(lp933
g409
ag410
aa(lp934
g412
ag413
aa(lp935
g415
ag416
aa(lp936
g418
ag419
aatp937
Rp938
aa(lp939
g423
ag392
((lp940
(lp941
g398
ag423
aa(lp942
g427
ag428
aa(lp943
g430
ag431
aa(lp944
g433
ag434
aa(lp945
g436
ag437
aa(lp946
g439
ag440
aa(lp947
g442
ag443
aa(lp948
g445
ag446
aa(lp949
g448
ag449
aa(lp950
g451
ag452
aa(lp951
g454
ag455
aa(lp952
g457
ag458
aa(lp953
g460
ag461
aa(lp954
g463
ag464
aa(lp955
g466
ag467
aa(lp956
g469
ag470
aa(lp957
g472
ag473
aa(lp958
g475
ag476
aa(lp959
g478
ag479
aatp960
Rp961
aa(lp962
g483
ag392
((lp963
(lp964
g398
ag483
aa(lp965
g487
ag488
aatp966
Rp967
aatp968
Rp969
sg76
Nsb(dp970
ssg334
(dp971
sg336
(dp972
g20
(dp973
sg79
(dp974
g763
(dp975
g340
(lp976
(g88
S'inputspec.threshold'
p977
tp978
asssg97
(dp979
g140
(dp980
g340
(lp981
(g106
g977
tp982
asssg115
(dp983
g140
(dp984
g340
(lp985
(g126
S'inputspec.brain'
p986
tp987
a(g132
S'inputspec.tissue_prior'
p988
tp989
a(g129
S'inputspec.standard2highres_mat'
p990
tp991
assg495
(dp992
g340
(lp993
(g126
g986
tp994
a(g127
g988
tp995
a(g129
g990
tp996
assg704
(dp997
g340
(lp998
(g126
g733
tp999
assg763
(dp1000
g340
(lp1001
(g126
g986
tp1002
a(g130
g988
tp1003
a(g129
g990
tp1004
asssg140
(dp1005
g20
(dp1006
g340
(lp1007
(S'outputspec.tissueprior_mni2t1'
p1008
g46
tp1009
a(S'outputspec.segment_combo'
p1010
g48
tp1011
a(S'outputspec.segment_bin'
p1012
g43
tp1013
a(S'outputspec.segment_mask'
p1014
g49
tp1015
asssg495
(dp1016
g20
(dp1017
g340
(lp1018
(g1008
g54
tp1019
a(g1010
g40
tp1020
a(g1012
g52
tp1021
a(g1014
g50
tp1022
asssg704
(dp1023
g20
(dp1024
g340
(lp1025
(g45
g45
tp1026
a(g41
g41
tp1027
a(g35
g35
tp1028
a(g53
g53
tp1029
assg495
(dp1030
g340
(lp1031
((g45
S'S\'def pick_wm_1(probability_maps):\\n\\n    """\\n    Returns the gray matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_1.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_1.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1032
(ttp1033
S'inputspec.probability_map'
p1034
tp1035
assg763
(dp1036
g340
(lp1037
((g45
S'S\'def pick_wm_0(probability_maps):\\n\\n    """\\n    Returns the csf probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_0.nii.gz is returned\\n\\n    """\\n\\n    import sys\\n    import os\\n\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_0.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1038
(ttp1039
g1034
tp1040
assg140
(dp1041
g340
(lp1042
((g45
S'S\'def pick_wm_2(probability_maps):\\n\\n    """\\n    Returns the white matter probability map from the list of segmented probability maps\\n\\n    Parameters\\n    ----------\\n\\n    probability_maps : list (string)\\n        List of Probability Maps\\n\\n    Returns\\n    -------\\n\\n    file : string\\n        Path to segment_prob_2.nii.gz is returned\\n\\n    """\\n    import sys\\n    import os\\n    if(isinstance(probability_maps, list)):\\n\\n        if(len(probability_maps) == 1):\\n            probability_maps = probability_maps[0]\\n        for file in probability_maps:\\n            print file\\n            if file.endswith("prob_2.nii.gz"):\\n\\n                return file\\n    return None\\n\'\n.'
p1043
(ttp1044
g1034
tp1045
asssg745
(dp1046
g495
(dp1047
g340
(lp1048
(g754
g977
tp1049
asssg763
(dp1050
g20
(dp1051
g340
(lp1052
(g1008
g42
tp1053
a(g1010
g47
tp1054
a(g1012
g44
tp1055
a(g1014
g51
tp1056
assssg382
g972
sg383
(dp1057
g20
(dp1058
g140
g1006
sg495
g1017
sg704
g1024
sg763
g1051
ssg79
(dp1059
sg97
(dp1060
sg115
(dp1061
sg140
(dp1062
g97
g980
sg115
g984
sg704
g1041
ssg495
(dp1063
g745
g1047
sg115
g992
sg704
g1030
ssg704
(dp1064
g115
g997
ssg745
(dp1065
sg763
(dp1066
g79
g975
sg115
g1000
sg704
g1036
sssg391
g972
sbsg59
g64
sg63
S'resting_preproc_42_2924850236'
p1067
sg71
g64
sg72
g392
((lp1068
(lp1069
g395
ag392
((lp1070
(lp1071
g398
ag395
aa(lp1072
g400
ag401
aa(lp1073
g403
ag404
aa(lp1074
g406
ag407
aa(lp1075
g409
ag410
aa(lp1076
g412
ag413
aa(lp1077
g415
ag416
aa(lp1078
g418
ag419
aatp1079
Rp1080
aa(lp1081
g423
ag392
((lp1082
(lp1083
g398
ag423
aa(lp1084
g427
ag428
aa(lp1085
g430
ag431
aa(lp1086
g433
ag434
aa(lp1087
g436
ag437
aa(lp1088
g439
ag440
aa(lp1089
g442
ag443
aa(lp1090
g445
ag446
aa(lp1091
g448
ag449
aa(lp1092
g451
ag452
aa(lp1093
g454
ag455
aa(lp1094
g457
ag458
aa(lp1095
g460
ag461
aa(lp1096
g463
ag464
aa(lp1097
g466
ag467
aa(lp1098
g469
ag470
aa(lp1099
g472
ag473
aa(lp1100
g475
ag476
aa(lp1101
g478
ag479
aatp1102
Rp1103
aa(lp1104
g483
ag392
((lp1105
(lp1106
g398
ag483
aa(lp1107
g487
ag488
aatp1108
Rp1109
aatp1110
Rp1111
sg76
NsbS'outputspec.gm_mask'
p1112
tp1113
sS'anatomical_to_mni_linear_xfm'
p1114
(g5
(g6
g7
Ntp1115
Rp1116
(dp1117
g11
g5
(g12
g7
Ntp1118
Rp1119
(dp1120
g16
(dp1121
g5
(g18
g7
Ntp1122
Rp1123
(dp1124
g22
(dp1125
sg24
g5
(g25
g7
Ntp1126
Rp1127
(dp1128
g29
g30
(g31
tp1129
Rp1130
(dp1131
g38
g39
sS'output_brain'
p1132
g37
sS'nonlinear_xfm'
p1133
g37
sS'invlinear_xfm'
p1134
g37
sS'linear_xfm'
p1135
g37
sbsg55
(lp1136
g1132
ag1135
ag1134
ag1133
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp1137
sg63
S'anat_mni_fnirt_register_0'
p1138
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp1139
sg75
Nsg76
Nsb(dp1140
sg5
(g18
g7
Ntp1141
Rp1142
(dp1143
g22
(dp1144
sg24
g5
(g192
g7
Ntp1145
Rp1146
(dp1147
g29
g30
(g196
tp1148
Rp1149
(dp1150
g200
g37
sg38
g39
sg201
g37
sg202
g37
sg203
g37
sg204
g37
sg205
g37
sg206
g37
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg217
g37
sg177
g37
sg218
g37
sg219
g37
sg220
g37
sg221
g37
sg158
I00
sg222
g37
sg223
g37
sg162
g37
sg224
g37
sg225
g37
sg164
g165
sg226
g37
sg227
g37
sg228
g37
sg229
g37
sg230
g37
sg161
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg235
g37
sg236
g37
sg237
g37
sg238
g37
sg239
S'corratio'
p1151
sg166
g5
(g167
g168
(dp1152
g170
g171
stp1153
Rp1154
(dp1155
g175
S'environ_items'
p1156
sg59
g166
sbsg245
g37
sg246
g37
sg178
g171
sg247
g37
sg248
g37
sg249
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'linear_reg_0'
p1157
sg61
(dp1158
sg63
g1138
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1157
sg72
Nsg73
(lp1159
sg75
Nsg76
Nsb(dp1160
sg5
(g18
g7
Ntp1161
Rp1162
(dp1163
g22
(dp1164
sg24
g5
(cnipype.interfaces.fsl.preprocess
ApplyWarp
p1165
g7
Ntp1166
Rp1167
(dp1168
g29
g30
(cnipype.interfaces.fsl.preprocess
ApplyWarpInputSpec
p1169
tp1170
Rp1171
(dp1172
g158
I00
sS'supersample'
p1173
g37
sg177
g37
sS'superlevel'
p1174
g37
sg161
g37
sg232
g37
sg162
g37
sg206
g37
sS'field_file'
p1175
g37
sS'ref_file'
p1176
g37
sg164
g165
sg166
g5
(g167
g168
(dp1177
g170
g171
stp1178
Rp1179
(dp1180
g175
S'environ_items'
p1181
sg59
g166
sbsS'premat'
p1182
g37
sS'mask_file'
p1183
g37
sg178
g171
sS'relwarp'
p1184
g37
sS'abswarp'
p1185
g37
sg38
g39
sS'postmat'
p1186
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'brain_warp'
p1187
sg61
(dp1188
sg63
g1138
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1187
sg72
Nsg73
(lp1189
sg75
Nsg76
Nsb(dp1190
sg5
(g18
g7
Ntp1191
Rp1192
(dp1193
g22
(dp1194
sg24
g5
(cnipype.interfaces.fsl.preprocess
FNIRT
p1195
g7
Ntp1196
Rp1197
(dp1198
g29
g30
(cnipype.interfaces.fsl.preprocess
FNIRTInputSpec
p1199
tp1200
Rp1201
(dp1202
g38
g39
sS'derive_from_ref'
p1203
g37
sS'in_intensitymap_file'
p1204
g37
sS'modulatedref_file'
p1205
g37
sS'refmask_val'
p1206
g37
sS'hessian_precision'
p1207
g37
sS'in_fwhm'
p1208
g37
sS'skip_implicit_in_masking'
p1209
g37
sS'inmask_file'
p1210
g37
sS'refmask_file'
p1211
g37
sS'inwarp_file'
p1212
g37
sS'skip_lambda_ssq'
p1213
g37
sS'intensity_mapping_model'
p1214
g37
sS'affine_file'
p1215
g37
sS'apply_inmask'
p1216
g37
sS'spline_order'
p1217
g37
sS'apply_refmask'
p1218
g37
sS'subsampling_scheme'
p1219
g37
sg177
g37
sS'warped_file'
p1220
g37
sS'skip_refmask'
p1221
g37
sg158
I00
sS'ref_fwhm'
p1222
g37
sS'inmask_val'
p1223
g37
sS'config_file'
p1224
g37
sg1175
g37
sg162
g37
sS'apply_intensity_mapping'
p1225
g37
sS'regularization_lambda'
p1226
g37
sg164
g165
sS'regularization_model'
p1227
g37
sS'jacobian_range'
p1228
g37
sS'out_intensitymap_file'
p1229
g37
sS'skip_implicit_ref_masking'
p1230
g37
sg1176
g37
sS'skip_inmask'
p1231
g37
sS'fieldcoeff_file'
p1232
I01
sS'warp_resolution'
p1233
g37
sS'jacobian_file'
p1234
I01
sg166
g5
(g167
g168
(dp1235
g170
g171
stp1236
Rp1237
(dp1238
g175
S'environ_items'
p1239
sg59
g166
sbsS'bias_regularization_lambda'
p1240
g37
sg178
g171
sS'skip_intensity_mapping'
p1241
g37
sS'log_file'
p1242
g37
sS'biasfield_resolution'
p1243
g37
sS'intensity_mapping_order'
p1244
g37
sS'max_nonlin_iter'
p1245
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'nonlinear_reg_1'
p1246
sg61
(dp1247
sg63
g1138
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1246
sg72
Nsg73
(lp1248
sg75
Nsg76
Nsb(dp1249
sg5
(g18
g7
Ntp1250
Rp1251
(dp1252
g22
(dp1253
sg24
g5
(cnipype.interfaces.fsl.utils
ConvertXFM
p1254
g7
Ntp1255
Rp1256
(dp1257
g29
g30
(cnipype.interfaces.fsl.utils
ConvertXFMInputSpec
p1258
tp1259
Rp1260
(dp1261
g158
I00
sg38
g39
sg161
g37
sg162
g37
sg163
g37
sS'fix_scale_skew'
p1262
g37
sS'invert_xfm'
p1263
I01
sg164
g165
sS'concat_xfm'
p1264
g37
sg177
g37
sg178
g171
sg166
g5
(g167
g168
(dp1265
g170
g171
stp1266
Rp1267
(dp1268
g175
S'environ_items'
p1269
sg59
g166
sbsbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'inv_linear_reg0_xfm'
p1270
sg61
(dp1271
sg63
g1138
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1270
sg72
Nsg73
(lp1272
sg75
Nsg76
Nsb(dp1273
sg5
(g18
g7
Ntp1274
Rp1275
(dp1276
g22
(dp1277
sg24
g5
(g25
g7
Ntp1278
Rp1279
(dp1280
g29
g30
(g31
tp1281
Rp1282
(dp1283
S'fnirt_config'
p1284
S'T1_2_MNI152_2mm'
p1285
sg38
g39
sS'input_brain'
p1286
g37
sS'reference_skull'
p1287
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p1288
sS'reference_brain'
p1289
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1290
sS'input_skull'
p1291
g37
sbsg55
(lp1292
g1286
ag1291
ag1289
ag1287
ag1284
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp1293
sg63
g1138
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp1294
sg75
Nsg76
Nsb(dp1295
ssg334
(dp1296
sg336
(dp1297
g1123
(dp1298
sg1142
(dp1299
g1251
(dp1300
g340
(lp1301
(g235
g177
tp1302
assg1192
(dp1303
g340
(lp1304
(g235
g1215
tp1305
assg1123
(dp1306
g340
(lp1307
(g235
g1135
tp1308
asssg1162
(dp1309
g1123
(dp1310
g340
(lp1311
(g161
g1132
tp1312
asssg1192
(dp1313
g1162
(dp1314
g340
(lp1315
(g1232
g1175
tp1316
assg1123
(dp1317
g340
(lp1318
(g1232
g1133
tp1319
asssg1251
(dp1320
g1123
(dp1321
g340
(lp1322
(g161
g1134
tp1323
asssg1275
(dp1324
g1162
(dp1325
g340
(lp1326
(g1286
g177
tp1327
a(g1289
g1176
tp1328
assg1142
(dp1329
g340
(lp1330
(g1286
g177
tp1331
a(g1289
g203
tp1332
assg1192
(dp1333
g340
(lp1334
(g1291
g177
tp1335
a(g1287
g1176
tp1336
a(g1284
g1224
tp1337
assssg382
g1297
sg383
(dp1338
g1123
(dp1339
g1162
g1310
sg1192
g1317
sg1142
g1306
sg1251
g1321
ssg1142
(dp1340
g1275
g1329
ssg1162
(dp1341
g1275
g1325
sg1192
g1314
ssg1192
(dp1342
g1275
g1333
sg1142
g1303
ssg1251
(dp1343
g1142
g1300
ssg1275
(dp1344
ssg391
g1297
sbsg59
g1138
sg63
g1067
sg71
g1138
sg72
g392
((lp1345
(lp1346
g395
ag392
((lp1347
(lp1348
g398
ag395
aa(lp1349
g400
ag401
aa(lp1350
g403
ag404
aa(lp1351
g406
ag407
aa(lp1352
g409
ag410
aa(lp1353
g412
ag413
aa(lp1354
g415
ag416
aa(lp1355
g418
ag419
aatp1356
Rp1357
aa(lp1358
g423
ag392
((lp1359
(lp1360
g398
ag423
aa(lp1361
g427
ag428
aa(lp1362
g430
ag431
aa(lp1363
g433
ag434
aa(lp1364
g436
ag437
aa(lp1365
g439
ag440
aa(lp1366
g442
ag443
aa(lp1367
g445
ag446
aa(lp1368
g448
ag449
aa(lp1369
g451
ag452
aa(lp1370
g454
ag455
aa(lp1371
g457
ag458
aa(lp1372
g460
ag461
aa(lp1373
g463
ag464
aa(lp1374
g466
ag467
aa(lp1375
g469
ag470
aa(lp1376
g472
ag473
aa(lp1377
g475
ag476
aa(lp1378
g478
ag479
aatp1379
Rp1380
aa(lp1381
g483
ag392
((lp1382
(lp1383
g398
ag483
aa(lp1384
g487
ag488
aatp1385
Rp1386
aatp1387
Rp1388
sg76
NsbS'outputspec.linear_xfm'
p1389
tp1390
sS'qc___mean_func_with_mni_edge_s'
p1391
(g5
(g6
g7
Ntp1392
Rp1393
(dp1394
g11
g5
(g12
g7
Ntp1395
Rp1396
(dp1397
g16
(dp1398
g5
(g18
g7
Ntp1399
Rp1400
(dp1401
g22
(dp1402
sg24
g5
(g25
g7
Ntp1403
Rp1404
(dp1405
g29
g30
(g31
tp1406
Rp1407
(dp1408
g38
g39
sS'underlay'
p1409
g37
sS'overlay'
p1410
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p1411
sbsg55
(lp1412
g1409
ag1410
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp1413
sg63
S'montage_mfi_0'
p1414
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp1415
sg75
Nsg76
Nsb(dp1416
sg5
(g18
g7
Ntp1417
Rp1418
(dp1419
g22
(dp1420
sg24
g5
(g25
g7
Ntp1421
Rp1422
(dp1423
g29
g30
(g31
tp1424
Rp1425
(dp1426
g38
g39
sS'resampled_underlay'
p1427
g37
sS'axial_png'
p1428
g37
sS'sagittal_png'
p1429
g37
sS'resampled_overlay'
p1430
g37
sbsg55
(lp1431
g1428
ag1429
ag1427
ag1430
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp1432
sg63
g1414
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp1433
sg75
Nsg76
Nsb(dp1434
sg5
(g18
g7
Ntp1435
Rp1436
(dp1437
g22
(dp1438
sg24
g5
(cnipype.interfaces.utility
Function
p1439
g7
Ntp1440
Rp1441
(dp1442
S'_input_names'
p1443
(lp1444
g1410
ag1409
aS'png_name'
p1445
aS'cbar_name'
p1446
asg29
g30
(cnipype.interfaces.utility
FunctionInputSpec
p1447
tp1448
Rp1449
(dp1450
g158
I00
sg1445
S'MNI_edge_on_mean_func_mni_a.png'
p1451
sg1410
g37
sg1446
S'red'
p1452
sS'function_str'
p1453
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1454
sg1409
g37
sg38
g39
sbsS'_out'
p1455
(dp1456
g1445
NssS'_output_names'
p1457
(lp1458
g1445
asS'imports'
p1459
Nsbsg58
Nsg59
S'montage_a'
p1460
sg61
(dp1461
sg63
g1414
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1460
sg72
Nsg73
(lp1462
sg75
Nsg76
Nsb(dp1463
sg5
(g18
g7
Ntp1464
Rp1465
(dp1466
g22
(dp1467
sg24
g5
(g1439
g7
Ntp1468
Rp1469
(dp1470
g1443
(lp1471
S'file_'
p1472
asg29
g30
(g1447
tp1473
Rp1474
(dp1475
g158
I00
sg1453
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1476
sg1472
g37
sg38
g39
sbsg1455
(dp1477
S'new_fname'
p1478
Nssg1457
(lp1479
g1478
asg1459
Nsbsg58
Nsg59
S'resample_u'
p1480
sg61
(dp1481
sg63
g1414
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1480
sg72
Nsg73
(lp1482
sg75
Nsg76
Nsb(dp1483
sg5
(g18
g7
Ntp1484
Rp1485
(dp1486
g22
(dp1487
sg24
g5
(g1439
g7
Ntp1488
Rp1489
(dp1490
g1443
(lp1491
g1410
ag1409
ag1445
ag1446
asg29
g30
(g1447
tp1492
Rp1493
(dp1494
g158
I00
sg1445
S'MNI_edge_on_mean_func_mni_s.png'
p1495
sg1410
g37
sg1446
g1452
sg1453
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1496
sg1409
g37
sg38
g39
sbsg1455
(dp1497
g1445
Nssg1457
(lp1498
g1445
asg1459
Nsbsg58
Nsg59
S'montage_s'
p1499
sg61
(dp1500
sg63
g1414
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1499
sg72
Nsg73
(lp1501
sg75
Nsg76
Nsb(dp1502
sg5
(g18
g7
Ntp1503
Rp1504
(dp1505
g22
(dp1506
sg24
g5
(g1439
g7
Ntp1507
Rp1508
(dp1509
g1443
(lp1510
g1472
asg29
g30
(g1447
tp1511
Rp1512
(dp1513
g158
I00
sg1453
g1476
sg1472
g37
sg38
g39
sbsg1455
(dp1514
g1478
Nssg1457
(lp1515
g1478
asg1459
Nsbsg58
Nsg66
I00
sg61
(dp1516
sg68
Nsg65
Nsg75
Nsg59
S'resample_o'
p1517
sg63
g1414
sg67
I00
sg69
Nsg70
I00
sg71
g1517
sg72
Nsg73
(lp1518
sg76
Nsb(dp1519
ssg334
(dp1520
sg336
(dp1521
g1400
(dp1522
g1504
(dp1523
g340
(lp1524
(g1410
g1472
tp1525
assg1465
(dp1526
g340
(lp1527
(g1409
g1472
tp1528
asssg1418
(dp1529
sg1436
(dp1530
g1418
(dp1531
g340
(lp1532
(g1445
g1428
tp1533
asssg1465
(dp1534
g1418
(dp1535
g340
(lp1536
(g1478
g1427
tp1537
assg1436
(dp1538
g340
(lp1539
(g1478
g1409
tp1540
assg1485
(dp1541
g340
(lp1542
(g1478
g1409
tp1543
asssg1485
(dp1544
g1418
(dp1545
g340
(lp1546
(g1445
g1429
tp1547
asssg1504
(dp1548
g1418
(dp1549
g340
(lp1550
(g1478
g1430
tp1551
assg1436
(dp1552
g340
(lp1553
(g1478
g1410
tp1554
assg1485
(dp1555
g340
(lp1556
(g1478
g1410
tp1557
assssg382
g1521
sg383
(dp1558
g1400
(dp1559
sg1418
(dp1560
g1504
g1549
sg1485
g1545
sg1465
g1535
sg1436
g1531
ssg1436
(dp1561
g1504
g1552
sg1465
g1538
ssg1465
(dp1562
g1400
g1526
ssg1485
(dp1563
g1504
g1555
sg1465
g1541
ssg1504
(dp1564
g1400
g1523
sssg391
g1521
sbsg59
g1414
sg63
g1067
sg71
g1414
sg72
g392
((lp1565
(lp1566
g395
ag392
((lp1567
(lp1568
g398
ag395
aa(lp1569
g400
ag401
aa(lp1570
g403
ag404
aa(lp1571
g406
ag407
aa(lp1572
g409
ag410
aa(lp1573
g412
ag413
aa(lp1574
g415
ag416
aa(lp1575
g418
ag419
aatp1576
Rp1577
aa(lp1578
g423
ag392
((lp1579
(lp1580
g398
ag423
aa(lp1581
g427
ag428
aa(lp1582
g430
ag431
aa(lp1583
g433
ag434
aa(lp1584
g436
ag437
aa(lp1585
g439
ag440
aa(lp1586
g442
ag443
aa(lp1587
g445
ag446
aa(lp1588
g448
ag449
aa(lp1589
g451
ag452
aa(lp1590
g454
ag455
aa(lp1591
g457
ag458
aa(lp1592
g460
ag461
aa(lp1593
g463
ag464
aa(lp1594
g466
ag467
aa(lp1595
g469
ag470
aa(lp1596
g472
ag473
aa(lp1597
g475
ag476
aa(lp1598
g478
ag479
aatp1599
Rp1600
aa(lp1601
g483
ag392
((lp1602
(lp1603
g398
ag483
aa(lp1604
g487
ag488
aatp1605
Rp1606
aatp1607
Rp1608
sg76
NsbS'outputspec.sagittal_png'
p1609
tp1610
sS'qc___snr_a'
p1611
(g5
(g6
g7
Ntp1612
Rp1613
(dp1614
g11
g5
(g12
g7
Ntp1615
Rp1616
(dp1617
g16
(dp1618
g5
(g18
g7
Ntp1619
Rp1620
(dp1621
g22
(dp1622
sg24
g5
(g1439
g7
Ntp1623
Rp1624
(dp1625
g1443
(lp1626
g1410
ag1409
ag1445
ag1446
asg29
g30
(g1447
tp1627
Rp1628
(dp1629
g158
I00
sg1445
S'snr_a.png'
p1630
sg1410
g37
sg1446
S'red_to_blue'
p1631
sg1453
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1632
sg1409
g37
sg38
g39
sbsg1455
(dp1633
g1445
Nssg1457
(lp1634
g1445
asg1459
Nsbsg58
Nsg59
g1460
sg61
(dp1635
sg63
S'montage_snr_0'
p1636
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1460
sg72
Nsg73
(lp1637
sg75
Nsg76
Nsb(dp1638
sg5
(g18
g7
Ntp1639
Rp1640
(dp1641
g22
(dp1642
sg24
g5
(g1439
g7
Ntp1643
Rp1644
(dp1645
g1443
(lp1646
g1410
ag1409
ag1445
ag1446
asg29
g30
(g1447
tp1647
Rp1648
(dp1649
g158
I00
sg1445
S'snr_s.png'
p1650
sg1410
g37
sg1446
g1631
sg1453
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p1651
sg1409
g37
sg38
g39
sbsg1455
(dp1652
g1445
Nssg1457
(lp1653
g1445
asg1459
Nsbsg58
Nsg59
g1499
sg61
(dp1654
sg63
g1636
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1499
sg72
Nsg73
(lp1655
sg75
Nsg76
Nsb(dp1656
sg5
(g18
g7
Ntp1657
Rp1658
(dp1659
g22
(dp1660
sg24
g5
(g1439
g7
Ntp1661
Rp1662
(dp1663
g1443
(lp1664
g1472
asg29
g30
(g1447
tp1665
Rp1666
(dp1667
g158
I00
sg1453
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p1668
sg1472
g37
sg38
g39
sbsg1455
(dp1669
g1478
Nssg1457
(lp1670
g1478
asg1459
Nsbsg58
Nsg59
g1480
sg61
(dp1671
sg63
g1636
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1480
sg72
Nsg73
(lp1672
sg75
Nsg76
Nsb(dp1673
sg5
(g18
g7
Ntp1674
Rp1675
(dp1676
g22
(dp1677
sg24
g5
(g25
g7
Ntp1678
Rp1679
(dp1680
g29
g30
(g31
tp1681
Rp1682
(dp1683
g38
g39
sg1409
g37
sg1410
g37
sbsg55
(lp1684
g1409
ag1410
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp1685
sg63
g1636
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp1686
sg75
Nsg76
Nsb(dp1687
sg5
(g18
g7
Ntp1688
Rp1689
(dp1690
g22
(dp1691
sg24
g5
(g25
g7
Ntp1692
Rp1693
(dp1694
g29
g30
(g31
tp1695
Rp1696
(dp1697
g38
g39
sg1427
g37
sg1428
g37
sg1429
g37
sg1430
g37
sbsg55
(lp1698
g1428
ag1429
ag1427
ag1430
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp1699
sg63
g1636
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp1700
sg75
Nsg76
Nsb(dp1701
sg5
(g18
g7
Ntp1702
Rp1703
(dp1704
g22
(dp1705
sg24
g5
(g1439
g7
Ntp1706
Rp1707
(dp1708
g1443
(lp1709
g1472
asg29
g30
(g1447
tp1710
Rp1711
(dp1712
g158
I00
sg1453
g1668
sg1472
g37
sg38
g39
sbsg1455
(dp1713
g1478
Nssg1457
(lp1714
g1478
asg1459
Nsbsg58
Nsg66
I00
sg61
(dp1715
sg68
Nsg65
Nsg75
Nsg59
g1517
sg63
g1636
sg67
I00
sg69
Nsg70
I00
sg71
g1517
sg72
Nsg73
(lp1716
sg76
Nsb(dp1717
ssg334
(dp1718
sg336
(dp1719
g1620
(dp1720
g1689
(dp1721
g340
(lp1722
(g1445
g1428
tp1723
asssg1640
(dp1724
g1689
(dp1725
g340
(lp1726
(g1445
g1429
tp1727
asssg1658
(dp1728
g1620
(dp1729
g340
(lp1730
(g1478
g1409
tp1731
assg1689
(dp1732
g340
(lp1733
(g1478
g1427
tp1734
assg1640
(dp1735
g340
(lp1736
(g1478
g1409
tp1737
asssg1675
(dp1738
g1658
(dp1739
g340
(lp1740
(g1409
g1472
tp1741
assg1703
(dp1742
g340
(lp1743
(g1410
g1472
tp1744
asssg1689
(dp1745
sg1703
(dp1746
g1620
(dp1747
g340
(lp1748
(g1478
g1410
tp1749
assg1689
(dp1750
g340
(lp1751
(g1478
g1430
tp1752
assg1640
(dp1753
g340
(lp1754
(g1478
g1410
tp1755
assssg382
g1719
sg383
(dp1756
g1620
(dp1757
g1658
g1729
sg1703
g1747
ssg1640
(dp1758
g1658
g1735
sg1703
g1753
ssg1658
(dp1759
g1675
g1739
ssg1675
(dp1760
sg1689
(dp1761
g1658
g1732
sg1640
g1725
sg1703
g1750
sg1620
g1721
ssg1703
(dp1762
g1675
g1742
sssg391
g1719
sbsg59
g1636
sg63
g1067
sg71
g1636
sg72
g392
((lp1763
(lp1764
g395
ag392
((lp1765
(lp1766
g398
ag395
aa(lp1767
g400
ag401
aa(lp1768
g403
ag404
aa(lp1769
g406
ag407
aa(lp1770
g409
ag410
aa(lp1771
g412
ag413
aa(lp1772
g415
ag416
aa(lp1773
g418
ag419
aatp1774
Rp1775
aa(lp1776
g423
ag392
((lp1777
(lp1778
g398
ag423
aa(lp1779
g427
ag428
aa(lp1780
g430
ag431
aa(lp1781
g433
ag434
aa(lp1782
g436
ag437
aa(lp1783
g439
ag440
aa(lp1784
g442
ag443
aa(lp1785
g445
ag446
aa(lp1786
g448
ag449
aa(lp1787
g451
ag452
aa(lp1788
g454
ag455
aa(lp1789
g457
ag458
aa(lp1790
g460
ag461
aa(lp1791
g463
ag464
aa(lp1792
g466
ag467
aa(lp1793
g469
ag470
aa(lp1794
g472
ag473
aa(lp1795
g475
ag476
aa(lp1796
g478
ag479
aatp1797
Rp1798
aa(lp1799
g483
ag392
((lp1800
(lp1801
g398
ag483
aa(lp1802
g487
ag488
aatp1803
Rp1804
aatp1805
Rp1806
sg76
NsbS'outputspec.axial_png'
p1807
tp1808
sS'mean_functional_in_mni'
p1809
(g5
(g18
g7
Ntp1810
Rp1811
(dp1812
g22
(dp1813
sg24
g5
(g1165
g7
Ntp1814
Rp1815
(dp1816
g29
g30
(g1169
tp1817
Rp1818
(dp1819
g158
I00
sg1173
g37
sg177
g37
sg1174
g37
sg161
g37
sg232
g37
sg162
g37
sg206
g37
sg1175
g37
sg1176
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz'
p1820
sg164
g165
sg166
g5
(g167
g168
(dp1821
g170
g171
stp1822
Rp1823
(dp1824
g175
S'environ_items'
p1825
sg59
g166
sbsg1182
g37
sg1183
g37
sg178
g171
sg1184
g37
sg1185
g37
sg38
g39
sg1186
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'mean_func_fsl_warp_0'
p1826
sg61
(dp1827
sg63
g1067
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1826
sg72
Nsg73
(lp1828
sg75
Nsg76
Nsbg161
tp1829
sS'qc___movement_rot_plot'
p1830
(g5
(g18
g7
Ntp1831
Rp1832
(dp1833
g22
(dp1834
sg24
g5
(g1439
g7
Ntp1835
Rp1836
(dp1837
g1443
(lp1838
S'motion_parameters'
p1839
asg29
g30
(g1447
tp1840
Rp1841
(dp1842
g158
I00
sg1453
S'S\'def gen_motion_plt(motion_parameters):\\n\\n    """\\n    Function to Generate Matplotlib plot for motion.\\n    Separate plots for Translation and Rotation are generated.\\n\\n    Parameters\\n    ----------\\n\\n    motion_parameters: string\\n                    Motion Parameters file\\n\\n    Returns\\n    -------\\n\\n    translation_plot : string\\n        path to translation plot\\n\\n    rotation_plot : string\\n        path to rotation plot\\n\\n    """\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    from matplotlib import pyplot as plt\\n    import math\\n    import os\\n\\n    png_name1 = \\\'motion_trans_plot.png\\\'\\n    png_name2 = \\\'motion_rot_plot.png\\\'\\n    data = np.loadtxt(motion_parameters)\\n\\n    data_t = data.T\\n\\n    translation_plot = None\\n    rotation_plot = None\\n\\n    titles1 = [\\\'x\\\', \\\'y\\\', \\\'z\\\']\\n    titles2 = [\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\']\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[0])\\n    plt.plot(data_t[1])\\n    plt.plot(data_t[2])\\n    plt.legend([\\\'x\\\', \\\'y\\\', \\\'z\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Translation (mm)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name1))\\n\\n    plt.close()\\n\\n    for i in range(3, 6):\\n\\n        for j in range(len(data_t[i])):\\n\\n            data_t[i][j] = math.degrees(data_t[i][j])\\n\\n    plt.gca().set_color_cycle([\\\'red\\\', \\\'green\\\', \\\'blue\\\'])\\n    plt.plot(data_t[3])\\n    plt.plot(data_t[4])\\n    plt.plot(data_t[5])\\n    plt.legend([\\\'roll\\\', \\\'pitch\\\', \\\'yaw\\\'], loc=\\\'upper right\\\')\\n    plt.ylabel(\\\'Rotation (degrees)\\\')\\n    plt.xlabel(\\\'Volume\\\')\\n\\n\\n    plt.savefig(os.path.join(os.getcwd(), png_name2))\\n\\n    plt.close()\\n\\n    translation_plot = os.path.join(os.getcwd(), png_name1)\\n    rotation_plot = os.path.join(os.getcwd(), png_name2)\\n\\n    return translation_plot, rotation_plot\\n\'\n.'
p1843
sg1839
g37
sg38
g39
sbsg1455
(dp1844
S'translation_plot'
p1845
NsS'rotation_plot'
p1846
Nssg1457
(lp1847
g1845
ag1846
asg1459
Nsbsg58
Nsg59
S'motion_plt_0'
p1848
sg61
(dp1849
sg63
g1067
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1848
sg72
Nsg73
(lp1850
sg75
Nsg76
Nsbg1846
tp1851
sS'qc___fd_plot'
p1852
(g5
(g18
g7
Ntp1853
Rp1854
(dp1855
g22
(dp1856
sg24
g5
(g1439
g7
Ntp1857
Rp1858
(dp1859
g1443
(lp1860
S'arr'
p1861
aS'ex_vol'
p1862
aS'measure'
p1863
asg29
g30
(g1447
tp1864
Rp1865
(dp1866
g158
I00
sg38
g39
sg1861
g37
sg1453
S'S\'def gen_plot_png(arr, ex_vol, measure):\\n\\n    """\\n    Generate Motion FD Plot. Shows which volumes were dropped.\\n\\n    Parameters\\n    ----------\\n\\n    arr : list\\n        Frame wise Displacements\\n\\n    ex_vol : list\\n        Volumes excluded\\n\\n    measure : string\\n        Label of the Measure\\n\\n\\n    Returns\\n    -------\\n\\n    png_name : string\\n            path to the generated plot png\\n    """\\n\\n\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from matplotlib import pyplot\\n    matplotlib.rcParams.update({\\\'font.size\\\': 8})\\n    import matplotlib.cm as cm\\n    import numpy as np\\n    import os\\n\\n\\n    arr = np.loadtxt(arr)\\n    try:\\n        ex_vol = np.genfromtxt(ex_vol, delimiter=\\\',\\\', dtype=int)\\n        ex_vol = ex_vol[ex_vol > 0]\\n    except:\\n        ex_vol = []\\n    arr = arr[1:]\\n    del_el = [x for x in ex_vol if x < len(arr)]\\n\\n    ex_vol = np.array(del_el)\\n\\n\\n    fig = pyplot.figure(figsize=(10, 6))\\n    pyplot.plot([i for i in xrange(len(arr))], arr, \\\'-\\\')\\n    fig.suptitle(\\\'%s plot with Mean %s = %0.4f\\\' % (measure, measure, arr.mean()))\\n    if measure == \\\'FD\\\' and len(ex_vol) > 0:\\n\\n        pyplot.scatter(ex_vol, arr[ex_vol], c="red", zorder=2)\\n\\n        for x in ex_vol:\\n            pyplot.annotate(\\\'( %d , %0.3f)\\\' % (x, arr[x]), xy=(x, arr[x]), arrowprops=dict(facecolor=\\\'black\\\', shrink=0.0))\\n\\n    pyplot.xlabel(\\\'Volumes\\\')\\n    pyplot.ylabel(\\\'%s\\\' % measure)\\n    png_name = os.path.join(os.getcwd(), \\\'%s_plot.png\\\' % measure)\\n    fig.savefig(os.path.join(os.getcwd(), png_name))\\n    pyplot.close()\\n    matplotlib.rcdefaults()\\n    return png_name\\n\'\n.'
p1867
sg1863
S'FD'
p1868
sg1862
g37
sbsg1455
(dp1869
S'hist_path'
p1870
Nssg1457
(lp1871
g1870
asg1459
Nsbsg58
Nsg59
S'fd_plot_0'
p1872
sg61
(dp1873
sg63
g1067
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1872
sg72
Nsg73
(lp1874
sg75
Nsg76
Nsbg1870
tp1875
sS'scrubbing_frames_included'
p1876
(g5
(g6
g7
Ntp1877
Rp1878
(dp1879
g11
g5
(g12
g7
Ntp1880
Rp1881
(dp1882
g16
(dp1883
g5
(g18
g7
Ntp1884
Rp1885
(dp1886
g22
(dp1887
sg24
g5
(g25
g7
Ntp1888
Rp1889
(dp1890
g29
g30
(g31
tp1891
Rp1892
(dp1893
g329
(lp1894
F0.2
asg38
g39
sS'remove_frames_before'
p1895
I1
sS'remove_frames_after'
p1896
I2
sbsg55
(lp1897
g329
ag1895
ag1896
asg57
I01
sbsg58
Nsg59
S'scrubbing_input'
p1898
sg61
(dp1899
sg63
S'gen_motion_stats_0'
p1900
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
(g329
(lp1901
F0.2
atp1902
sg70
I00
sg71
g1898
sg72
Nsg73
(lp1903
sg75
Nsg76
Nsb(dp1904
sg5
(g18
g7
Ntp1905
Rp1906
(dp1907
g22
(dp1908
sg24
g5
(g1439
g7
Ntp1909
Rp1910
(dp1911
g1443
(lp1912
S'rest'
p1913
aS'mask'
p1914
asg29
g30
(g1447
tp1915
Rp1916
(dp1917
g158
I00
sg1914
g37
sg38
g39
sg1453
S'S\'def calculate_DVARS(rest, mask):\\n    """\\n    Method to calculate DVARS as per\\n    power\\\'s method\\n\\n    Parameters\\n    ----------\\n    rest : string (nifti file)\\n        path to motion correct functional data\\n    mask : string (nifti file)\\n        path to brain only mask for functional data\\n\\n    Returns\\n    -------\\n    out_file : string (numpy mat file)\\n        path to file containing  array of DVARS \\n        calculation for each voxel\\n    """\\n\\n    import numpy as np\\n    import nibabel as nib\\n    import os\\n\\n    out_file = os.path.join(os.getcwd(), \\\'DVARS.npy\\\')\\n\\n    rest_data = nib.load(rest).get_data().astype(np.float32)\\n    mask_data = nib.load(mask).get_data().astype(\\\'bool\\\')\\n\\n    #square of relative intensity value for each voxel across\\n    #every timepoint \\n    data = np.square(np.diff(rest_data, axis = 3))\\n    #applying mask, getting the data in the brain only\\n    data = data[mask_data]\\n    #square root and mean across all timepoints inside mask\\n    DVARS = np.sqrt(np.mean(data, axis=0))\\n\\n\\n    np.save(out_file, DVARS)\\n\\n    return out_file\\n\'\n.'
p1918
sg1913
g37
sbsg1455
(dp1919
g161
Nssg1457
(lp1920
g161
asg1459
Nsbsg58
Nsg59
S'cal_DVARS'
p1921
sg61
(dp1922
sg63
g1900
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1921
sg72
Nsg73
(lp1923
sg75
Nsg76
Nsb(dp1924
sg5
(g18
g7
Ntp1925
Rp1926
(dp1927
g22
(dp1928
sg24
g5
(g1439
g7
Ntp1929
Rp1930
(dp1931
g1443
(lp1932
S'subject_id'
p1933
aS'scan_id'
p1934
aS'FD_1D'
p1935
aS'FDJ_1D'
p1936
ag329
aS'DVARS'
p1937
asg29
g30
(g1447
tp1938
Rp1939
(dp1940
g158
I00
sg38
g39
sg1934
g37
sg1933
g37
sg1937
g37
sg1453
S'S\'def gen_power_parameters(subject_id, scan_id, FD_1D, FDJ_1D, DVARS, threshold = 1.0):\\n\\n    """\\n    Method to generate Power parameters for scrubbing\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    FD_ID: string \\n        framewise displacement(FD as per power et al., 2012) file path\\n    FDJ_ID: string \\n        framewise displacement(FD as per jenkinson et al., 2002) file path\\n    threshold : float\\n        scrubbing threshold set in the configuration\\n        by default the value is set to 1.0\\n    DVARS : string \\n        path to numpy file containing DVARS\\n\\n    Returns\\n    -------\\n    out_file : string (csv file)\\n        path to csv file containing all the pow parameters \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'pow_params.txt\\\')\\n\\n    f= open(out_file,\\\'w\\\')\\n    print >>f, "Subject,Scan,MeanFD,NumFD_greater_than_%.2f," \\\\\\n    "rootMeanSquareFD,FDquartile(top1/4thFD),PercentFD_greater_than_%.2f," \\\\\\n     "MeanDVARS, MeanFD_Jenkinson"%(threshold,threshold)\\n\\n    f.write("%s," % subject_id)\\n    f.write("%s," % scan_id)\\n\\n    data= loadtxt(FD_1D)\\n    #Mean (across time/frames) of the absolute values \\n    #for Framewise Displacement (FD)\\n    meanFD  = np.mean(data)\\n    f.write(\\\'%.4f,\\\' % meanFD)\\n\\n    #Number of frames (time points) where movement \\n    #(FD) exceeded threshold\\n    numFD = float(data[data >threshold].size)\\n    f.write(\\\'%.4f,\\\' % numFD)\\n\\n    #Root mean square (RMS; across time/frames) \\n    #of the absolute values for FD\\n    rmsFD = np.sqrt(np.mean(data))\\n    f.write(\\\'%.4f,\\\' % rmsFD)\\n\\n    #Mean of the top quartile of FD is $FDquartile\\n    quat=int(len(data)/4)\\n    FDquartile=np.mean(np.sort(data)[::-1][:quat])\\n    f.write(\\\'%.4f,\\\' % FDquartile)\\n\\n    ##NUMBER OF FRAMES >threshold FD as percentage of total num frames\\n    count = np.float(data[data>threshold].size)\\n    percentFD = (count*100/(len(data)+1))\\n    f.write(\\\'%.4f,\\\' %percentFD)\\n\\n    #Mean DVARS \\n    meanDVARS = np.mean(np.load(DVARS))\\n    f.write(\\\'%.4f,\\\' % meanDVARS)\\n\\n    #Mean FD Jenkinson\\n    meanFD_Jenkinson = np.mean(loadtxt(FDJ_1D))\\n    f.write(\\\'%.4f,\\\' % meanFD_Jenkinson)\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1941
sg1936
g37
sg1935
g37
sg329
g37
sbsg1455
(dp1942
g161
Nssg1457
(lp1943
g161
asg1459
Nsbsg58
Nsg59
S'calc_power_parameters'
p1944
sg61
(dp1945
sg63
g1900
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1944
sg72
Nsg73
(lp1946
sg75
Nsg76
Nsb(dp1947
sg5
(g18
g7
Ntp1948
Rp1949
(dp1950
g22
(dp1951
sg24
g5
(g1439
g7
Ntp1952
Rp1953
(dp1954
g1443
(lp1955
g1933
ag1934
aS'movement_parameters'
p1956
aS'max_displacement'
p1957
asg29
g30
(g1447
tp1958
Rp1959
(dp1960
g158
I00
sg1957
g37
sg1934
g37
sg1933
g37
sg1453
S'S\'def gen_motion_parameters(subject_id, scan_id, movement_parameters, max_displacement):\\n    """\\n    Method to calculate all the movement parameters\\n\\n    Parameters\\n    ----------\\n    subject_id : string\\n        subject name or id\\n    scan_id : string\\n        scan name or id\\n    max_displacement : string \\n        path of file with maximum displacement (in mm) for brain voxels in each volume    \\n    movement_parameters : string \\n        path of 1D file containing six movement/motion parameters(3 Translation, \\n        3 Rotations) in different columns (roll pitch yaw dS  dL  dP)\\n\\n    Returns \\n    -------\\n    out_file : string \\n        path to csv file contianing various motion parameters\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n    import re\\n\\n    out_file = os.path.join(os.getcwd(), \\\'motion_parameters.txt\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #f.write(str(os.getcwd()))   ### work\\n    print >>f, "Subject,Scan,Mean_Relative_RMS_Displacement," \\\\\\n        "Max_Relative_RMS_Displacement,Movements_gt_threshold,"\\\\\\n        "Mean_Relative_Mean_Rotation,Mean_Relative_Maxdisp,Max_Relative_Maxdisp," \\\\\\n        "Max_Abs_Maxdisp,Max Relative_Roll,Max_Relative_Pitch," \\\\\\n        "Max_Relative_Yaw,Max_Relative_dS-I,Max_Relative_dL-R," \\\\\\n        "Max_Relative_dP-A,Mean_Relative_Roll,Mean_Relative_Pitch,Mean_Relative_Yaw," \\\\\\n        "Mean_Relative_dS-I,Mean_Relative_dL-R,Mean_Relative_dP-A,Max_Abs_Roll," \\\\\\n        "Max_Abs_Pitch,Max_Abs_Yaw,Max_Abs_dS-I,Max_Abs_dL-R,Max_Abs_dP-A," \\\\\\n        "Mean_Abs_Roll,Mean_Abs_Pitch,Mean_Abs_Yaw,Mean_Abs_dS-I,Mean_Abs_dL-R,Mean_Abs_dP-A"\\n\\n\\n    f.write("%s," % (subject_id))\\n    f.write("%s," % (scan_id))\\n\\n    arr = np.genfromtxt(movement_parameters)\\n    arr = arr.T\\n\\n    ##Relative RMS of translation\\n    rms = np.sqrt(arr[3]*arr[3] + arr[4]*arr[4] + arr[5]*arr[5])\\n    diff = np.diff(rms)\\n    MEANrms = np.mean(abs(diff))\\n    f.write("%.3f," % (MEANrms))\\n\\n    #Max Relative RMS Displacement\\n    MAXrms = np.max(abs(diff))\\n    f.write("%.3f," % (MAXrms))\\n\\n    ##NUMBER OF relative RMS movements >0.1mm\\n    NUMmove = np.sum(abs(diff) > 0.1)\\n    f.write("%.3f," % (NUMmove))\\n\\n    ##Mean of mean relative rotation (params 1-3)\\n    MEANrot = np.mean(np.abs(np.diff((abs(arr[0])+ abs(arr[1])+ abs(arr[2]))/3 ) ) )\\n    f.write("%.3f," % (MEANrot))\\n\\n    file = open(max_displacement, \\\'r\\\')\\n    lines = file.readlines()\\n    file.close()\\n    list1 = []\\n\\n    #remove any other information aother than matrix from\\n    #max displacement file. afni adds infomration to the file\\n    for l in lines:\\n        if re.match("^\\\\d+?\\\\.\\\\d+?$", l.strip()):\\n            list1.append(float(l.strip()))\\n\\n    arr2 = np.array(list1, dtype=\\\'float\\\')\\n\\n    #Mean Relative Maxdisp\\n    mean = np.mean(np.diff(arr2))\\n    f.write("%.3f," % (mean))\\n\\n    #Max Relative Maxdisp\\n    relMAX = np.max(abs(np.diff(arr2)))\\n    f.write("%.3f," % (relMAX))\\n\\n    #Max Abs Maxdisp\\n    MAX= np.max(arr2)\\n    f.write("%.3f," %(MAX))\\n\\n    #Max Relative Roll,Max Relative Pitch,\\n    #Max Relative Yaw,Max Relative dS-I,\\n    #Max Relative dL-R,Max Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(np.diff(arr[i])))))\\n\\n    #Mean Relative Roll,Mean Relative Pitch,\\n    #Mean Relative Yaw,Mean Relative dS-I,\\n    #Mean Relative dL-R,Mean Relative dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(np.diff(arr[i]))))\\n\\n    #Max Abs Roll,Max Abs Pitch,Max Abs Yaw,\\n    #Max Abs dS-I,Max Abs dL-R,Max Abs dP-A\\n    for i in range(6):\\n        f.write("%.6f," %(np.max(abs(arr[i]))))\\n\\n    #Mean Abs Roll,Mean Abs Pitch,Mean Abs Yaw,\\n    #Mean Abs dS-I,Mean Abs dL-R,Mean Abs dP-A \\n    for i in range(6):\\n        f.write("%.6f," %(np.mean(abs(arr[i]))))\\n\\n    f.close()\\n    return out_file\\n\'\n.'
p1961
sg1956
g37
sg38
g39
sbsg1455
(dp1962
g161
Nssg1457
(lp1963
g161
asg1459
Nsbsg58
Nsg59
S'calc_motion_parameters'
p1964
sg61
(dp1965
sg63
g1900
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1964
sg72
Nsg73
(lp1966
sg75
Nsg76
Nsb(dp1967
sg5
(g18
g7
Ntp1968
Rp1969
(dp1970
g22
(dp1971
sg24
g5
(g1439
g7
Ntp1972
Rp1973
(dp1974
g1443
(lp1975
g177
ag329
aS'frames_before'
p1976
aS'frames_after'
p1977
asg29
g30
(g1447
tp1978
Rp1979
(dp1980
g158
I00
sg1977
g37
sg1453
S'S\'def set_frames_ex(in_file, threshold, \\n                  frames_before=1, frames_after=2):\\n    """\\n    Method to calculate Number of frames that would be censored \\n    ("scrubbed") by removing the offending time frames \\n    (i.e., those exceeding FD threshold), the preceding frame, \\n    and the two subsequent frames\\n\\n    Parameters\\n    ----------\\n    in_file : a string \\n        framewise displacement(FD) file path\\n    threshold : a float\\n         scrubbing threshold value set in configuration file\\n    frames_before : an integer\\n        number of frames preceding the offending time frame\\n        by default value is 1\\n    frames_after : an integer\\n        number of frames following the offending time frame\\n        by default value is 2\\n\\n    Returns\\n    -------\\n    out_file : string\\n        path to file containing offending time frames\\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_ex.1D\\\')\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    extra_indices = []\\n\\n    indices = [i[0] for i in (np.argwhere(data >= threshold)).tolist()]\\n    #print "initial indices-->", indices\\n\\n    for i in indices:\\n\\n        #remove preceding frames\\n        if i > 0 :\\n            count = 1\\n            while count <= frames_before:\\n                extra_indices.append(i-count)\\n                count+=1\\n\\n        #remove following frames\\n        count = 1\\n        while count <= frames_after:\\n            extra_indices.append(i+count)\\n            count+=1\\n\\n    indices = list(set(indices) | set(extra_indices))\\n    indices.sort()\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    #print "indices preceding and following -->", \\\\\\n    #      set(extra_indices)\\n    #print "final indices -->", indices\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p1981
sg177
g37
sg329
g37
sg38
g39
sg1976
g37
sbsg1455
(dp1982
g161
Nssg1457
(lp1983
g161
asg1459
Nsbsg58
Nsg59
S'exclude_frames'
p1984
sg61
(dp1985
sg63
g1900
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1984
sg72
Nsg73
(lp1986
sg75
Nsg76
Nsb(dp1987
sg5
(g18
g7
Ntp1988
Rp1989
(dp1990
g22
(dp1991
sg24
g5
(g25
g7
Ntp1992
Rp1993
(dp1994
g29
g30
(g31
tp1995
Rp1996
(dp1997
g1957
g37
sg38
g39
sg1934
g37
sg1933
g37
sg1914
g37
sg1956
g37
sS'oned_matrix_save'
p1998
g37
sS'motion_correct'
p1999
g37
sbsg55
(lp2000
g1933
ag1934
ag1956
ag1957
ag1999
ag1914
ag1998
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp2001
sg63
g1900
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp2002
sg75
Nsg76
Nsb(dp2003
sg5
(g18
g7
Ntp2004
Rp2005
(dp2006
g22
(dp2007
sg24
g5
(g1439
g7
Ntp2008
Rp2009
(dp2010
g1443
(lp2011
g177
asg29
g30
(g1447
tp2012
Rp2013
(dp2014
g158
I00
sg38
g39
sg1453
S'S\'def calculate_FD_P(in_file):\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Power et al., 2012)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    import os\\n    import numpy as np\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD.1D\\\') \\n\\n    lines = open(in_file, \\\'r\\\').readlines()\\n    rows = [[float(x) for x in line.split()] for line in lines]\\n    cols = np.array([list(col) for col in zip(*rows)])\\n\\n    translations = np.transpose(np.abs(np.diff(cols[0:3, :])))\\n    rotations = np.transpose(np.abs(np.diff(cols[3:6, :])))\\n\\n    FD_power = np.sum(translations, axis = 1) + (50*3.141/180)*np.sum(rotations, axis =1)\\n\\n    #FD is zero for the first time point\\n    FD_power = np.insert(FD_power, 0, 0)\\n\\n    np.savetxt(out_file, FD_power)\\n\\n    return out_file\\n\'\n.'
p2015
sg177
g37
sbsg1455
(dp2016
g161
Nssg1457
(lp2017
g161
asg1459
Nsbsg58
Nsg59
S'calculate_FD'
p2018
sg61
(dp2019
sg63
g1900
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2018
sg72
Nsg73
(lp2020
sg75
Nsg76
Nsb(dp2021
sg5
(g18
g7
Ntp2022
Rp2023
(dp2024
g22
(dp2025
sg24
g5
(g25
g7
Ntp2026
Rp2027
(dp2028
g29
g30
(g31
tp2029
Rp2030
(dp2031
g38
g39
sS'frames_ex_1D'
p2032
g37
sg1936
g37
sg1935
g37
sS'frames_in_1D'
p2033
g37
sS'motion_params'
p2034
g37
sS'power_params'
p2035
g37
sbsg55
(lp2036
g1935
ag1936
ag2032
ag2033
ag2035
ag2034
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp2037
sg63
g1900
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp2038
sg75
Nsg76
Nsb(dp2039
sg5
(g18
g7
Ntp2040
Rp2041
(dp2042
g22
(dp2043
sg24
g5
(g1439
g7
Ntp2044
Rp2045
(dp2046
g1443
(lp2047
g177
asg29
g30
(g1447
tp2048
Rp2049
(dp2050
g158
I00
sg38
g39
sg1453
S'S\'def calculate_FD_J(in_file):\\n\\n    \\\'\\\'\\\'\\n    @ Krsna\\n    May 2013\\n    compute \\n    1) Jenkinson FD from 3dvolreg\\\'s *.affmat12.1D file from -1Dmatrix_save option\\n\\n    input: subject ID, rest_number, name of 6 parameter motion correction file (an output of 3dvolreg)\\n    output: FD_J.1D file\\n    Assumptions:    1) subject is available in BASE_DIR\\n    2) 3dvolreg is already performed and the 1D motion parameter and 1D_matrix file file is present in sub?/rest_? called as --->\\\'lfo_mc_affmat.1D\\\'\\n\\n    \\\'\\\'\\\'\\n\\n    import numpy as np\\n    import os\\n    import sys\\n    import math\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters; in_file : string\\n    Returns; out_file : string\\n    NOTE: infile should have one 3dvolreg affine matrix in one row - NOT the motion parameters\\n\\n    """\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_J.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n    #print in_file\\n    pm_ = np.genfromtxt(in_file)\\n\\n    pm = np.zeros((pm_.shape[0],pm_.shape[1]+4))\\n    pm[:,:12]=pm_\\n    pm[:,12:]=[0.0, 0.0, 0.0, 1.0]\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\tT_rb = np.matrix(pm[i].reshape(4,4)) # making use of the fact that the order of aff12 matrix is "row-by-row"\\n\\n\\tif flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.8f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n\\n\\n\\n\\n    """\\n    Method to calculate Framewise Displacement (FD) calculations\\n    (Jenkinson et al., 2002)\\n\\n    Parameters\\n    ----------\\n    in_file : string\\n        movement parameters vector file path\\n\\n    Returns\\n    -------\\n    out_file : string\\n        Frame -wise displalcement mat \\n        file path\\n\\n    """\\n\\n    \\\'\\\'\\\'\\n    import os\\n    import numpy as np\\n    import math\\n\\n    out_file = os.path.join(os.getcwd(), \\\'FD_jenkinson.1D\\\')\\n\\n    f = open(out_file, \\\'w\\\')\\n\\n    pm = np.loadtxt(in_file)\\n\\n    flag = 0\\n\\n    #The default radius (as in FSL) of a sphere represents the brain\\n    rmax = 80.0\\n\\n    #rigid body transformation matrix \\n    T_rb_prev = np.matrix(np.eye(4))\\n\\n    for i in range(0, pm.shape[0]):\\n\\n        t1 = np.matrix([[1,0,0,pm[i][0]], [0,1,0, pm[i][1]], [0,0,1,pm[i][2]], [0,0,0,1]] )\\n        t2 = np.matrix([[1,0,0,0], [0, math.cos(pm[i][3]), math.sin(pm[i][3]),0], [0, - math.sin(pm[i][3]), math.cos(pm[i][3]), 0], [0,0,0,1]])\\n        t3 = np.matrix([[math.cos(pm[i][4]), 0, math.sin(pm[i][4]),0], [0,1,0,0], [-math.sin(pm[i][4]), 0, math.cos(pm[i][4]), 0], [0,0,0,1]])\\n        t4 = np.matrix([[math.cos(pm[i][5]), math.sin(pm[i][5]), 0, 0], [-math.sin(pm[i][5]), math.cos(pm[i][5]), 0, 0], [0,0,1,0], [0,0,0,1]])\\n        T_rb  = np.dot(np.dot(t1,t2), np.dot(t3,t4))\\n\\n        if flag == 0:\\n            flag = 1\\n            # first timepoint\\n            print >> f, 0 \\n        else:\\n            M = np.dot(T_rb, T_rb_prev.I) - np.eye(4)\\n            A = M[0:3, 0:3]\\n            b = M[0:3, 3]\\n\\n            FD_J = math.sqrt((rmax*rmax/5)*np.trace(np.dot(A.T, A)) + np.dot(b.T, b))\\n            print >> f, \\\'%.4f\\\'%FD_J\\n\\n        T_rb_prev = T_rb\\n\\n    f.close()\\n\\n    return out_file\\n    \\\'\\\'\\\'\\n\'\n.'
p2051
sg177
g37
sbsg1455
(dp2052
g161
Nssg1457
(lp2053
g161
asg1459
Nsbsg58
Nsg59
S'calculate_FDJ'
p2054
sg61
(dp2055
sg63
g1900
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2054
sg72
Nsg73
(lp2056
sg75
Nsg76
Nsb(dp2057
sg5
(g18
g7
Ntp2058
Rp2059
(dp2060
g22
(dp2061
sg24
g5
(g1439
g7
Ntp2062
Rp2063
(dp2064
g1443
(lp2065
g177
ag329
aS'exclude_list'
p2066
asg29
g30
(g1447
tp2067
Rp2068
(dp2069
g158
I00
sg2066
g37
sg1453
S'S\'def set_frames_in(in_file, threshold, exclude_list):\\n\\n    """\\n     Method to Calculate  the frames that are left\\n     after censoring for scrubbing.\\n\\n     Parameters\\n     ----------\\n     in_file : string\\n        framewise displacement(FD) file path\\n     threshold : float\\n        scrubbing thereshold set in configuration file\\n     exclude_list : string\\n        path of file containing sensored timepoints\\n\\n     Returns\\n     -------\\n     out_file : string \\n        path of file containing remaining uncensored timepoints \\n    """\\n\\n    import os\\n    import numpy as np\\n    from numpy import loadtxt\\n\\n    out_file = os.path.join(os.getcwd(), \\\'frames_in.1D\\\')\\n\\n    data = loadtxt(in_file)\\n    #masking zeroth timepoint value as 0, since the mean displacment value for\\n    #zeroth timepoint cannot be calculated, as there is no timepoint before it\\n    data[0] = 0\\n\\n    indices = [i[0] for i in (np.argwhere(data < threshold)).tolist()]\\n\\n    indx = []\\n    f = open(exclude_list, \\\'r\\\')\\n    line = f.readline()\\n    if line:\\n        line = line.strip(\\\',\\\')\\n        indx = map(int, line.split(","))\\n    f.close()\\n    print indx\\n\\n    if indx:\\n        indices = list(set(indices) - set(indx))\\n\\n    f = open(out_file, \\\'a\\\')\\n\\n    for idx in indices:\\n        f.write(\\\'%s,\\\' % int(idx))\\n\\n    f.close()\\n\\n    return out_file\\n\'\n.'
p2070
sg177
g37
sg329
g37
sg38
g39
sbsg1455
(dp2071
g161
Nssg1457
(lp2072
g161
asg1459
Nsbsg58
Nsg59
S'include_frames'
p2073
sg61
(dp2074
sg63
g1900
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2073
sg72
Nsg73
(lp2075
sg75
Nsg76
Nsb(dp2076
ssg334
(dp2077
sg336
(dp2078
g1885
(dp2079
g1969
(dp2080
g340
(lp2081
(g329
g329
tp2082
a(g1895
g1976
tp2083
a(g1896
g1977
tp2084
assg2059
(dp2085
g340
(lp2086
(g329
g329
tp2087
assg1926
(dp2088
g340
(lp2089
(g329
g329
tp2090
asssg1906
(dp2091
g1926
(dp2092
g340
(lp2093
(g161
g1937
tp2094
asssg1926
(dp2095
g2023
(dp2096
g340
(lp2097
(g161
g2035
tp2098
asssg1949
(dp2099
g2023
(dp2100
g340
(lp2101
(g161
g2034
tp2102
asssg1969
(dp2103
g2023
(dp2104
g340
(lp2105
(g161
g2032
tp2106
assg2059
(dp2107
g340
(lp2108
(g161
g2066
tp2109
asssg1989
(dp2110
g1906
(dp2111
g340
(lp2112
(g1999
g1913
tp2113
a(g1914
g1914
tp2114
assg2041
(dp2115
g340
(lp2116
(g1998
g177
tp2117
assg1926
(dp2118
g340
(lp2119
(g1933
g1933
tp2120
a(g1934
g1934
tp2121
assg1949
(dp2122
g340
(lp2123
(g1933
g1933
tp2124
a(g1934
g1934
tp2125
a(g1956
g1956
tp2126
a(g1957
g1957
tp2127
assg2005
(dp2128
g340
(lp2129
(g1956
g177
tp2130
asssg2005
(dp2131
g2023
(dp2132
g340
(lp2133
(g161
g1935
tp2134
assg1926
(dp2135
g340
(lp2136
(g161
g1935
tp2137
assg2059
(dp2138
g340
(lp2139
(g161
g177
tp2140
assg1969
(dp2141
g340
(lp2142
(g161
g177
tp2143
asssg2023
(dp2144
sg2041
(dp2145
g2023
(dp2146
g340
(lp2147
(g161
g1936
tp2148
assg1926
(dp2149
g340
(lp2150
(g161
g1936
tp2151
asssg2059
(dp2152
g2023
(dp2153
g340
(lp2154
(g161
g2033
tp2155
assssg382
g2078
sg383
(dp2156
g1885
(dp2157
sg1906
(dp2158
g1989
g2111
ssg1926
(dp2159
g1885
g2088
sg1906
g2092
sg2041
g2149
sg1989
g2118
sg2005
g2135
ssg1949
(dp2160
g1989
g2122
ssg1969
(dp2161
g2005
g2141
sg1885
g2080
ssg1989
(dp2162
sg2005
(dp2163
g1989
g2128
ssg2023
(dp2164
g2041
g2146
sg1926
g2096
sg1969
g2104
sg2005
g2132
sg1949
g2100
sg2059
g2153
ssg2041
(dp2165
g1989
g2115
ssg2059
(dp2166
g2005
g2138
sg1969
g2107
sg1885
g2085
sssg391
g2078
sbsg59
g1900
sg63
g1067
sg71
g1900
sg72
g392
((lp2167
(lp2168
g395
ag392
((lp2169
(lp2170
g398
ag395
aa(lp2171
g400
ag401
aa(lp2172
g403
ag404
aa(lp2173
g406
ag407
aa(lp2174
g409
ag410
aa(lp2175
g412
ag413
aa(lp2176
g415
ag416
aa(lp2177
g418
ag419
aatp2178
Rp2179
aa(lp2180
g423
ag392
((lp2181
(lp2182
g398
ag423
aa(lp2183
g427
ag428
aa(lp2184
g430
ag431
aa(lp2185
g433
ag434
aa(lp2186
g436
ag437
aa(lp2187
g439
ag440
aa(lp2188
g442
ag443
aa(lp2189
g445
ag446
aa(lp2190
g448
ag449
aa(lp2191
g451
ag452
aa(lp2192
g454
ag455
aa(lp2193
g457
ag458
aa(lp2194
g460
ag461
aa(lp2195
g463
ag464
aa(lp2196
g466
ag467
aa(lp2197
g469
ag470
aa(lp2198
g472
ag473
aa(lp2199
g475
ag476
aa(lp2200
g478
ag479
aatp2201
Rp2202
aa(lp2203
g483
ag392
((lp2204
(lp2205
g398
ag483
aa(lp2206
g487
ag488
aatp2207
Rp2208
aatp2209
Rp2210
sg76
NsbS'outputspec.frames_in_1D'
p2211
tp2212
sS'anatomical_wm_mask'
p2213
(g9
S'outputspec.wm_mask'
p2214
tp2215
sS'anatomical_brain'
p2216
(g5
(g6
g7
Ntp2217
Rp2218
(dp2219
g11
g5
(g12
g7
Ntp2220
Rp2221
(dp2222
g16
(dp2223
g5
(g18
g7
Ntp2224
Rp2225
(dp2226
g22
(dp2227
sg24
g5
(cnipype.interfaces.afni.preprocess
Calc
p2228
g7
Ntp2229
Rp2230
(dp2231
g29
g30
(cnipype.interfaces.afni.preprocess
CalcInputSpec
p2232
tp2233
Rp2234
(dp2235
S'stop_idx'
p2236
g37
sg158
I00
sg38
g39
sg161
g37
sS'expr'
p2237
S'a*step(b)'
p2238
sg162
g37
sS'outputtype'
p2239
S'NIFTI_GZ'
p2240
sS'in_file_b'
p2241
g37
sS'in_file_c'
p2242
g37
sS'in_file_a'
p2243
g37
sg166
g5
(g167
g168
(dp2244
tp2245
Rp2246
(dp2247
g175
S'environ_items'
p2248
sg59
g166
sbsS'single_idx'
p2249
g37
sS'other'
p2250
g37
sS'start_idx'
p2251
g37
sg164
g165
sbsS'_outputtype'
p2252
g2240
sg181
Nsg182
g165
sbsg58
Nsg66
I00
sg61
(dp2253
sg68
Nsg65
Nsg75
Nsg59
S'anat_brain_only'
p2254
sg63
S'anat_preproc_0'
p2255
sg67
I00
sg69
Nsg70
I00
sg71
g2254
sg72
Nsg73
(lp2256
sg76
Nsb(dp2257
sg5
(g18
g7
Ntp2258
Rp2259
(dp2260
g22
(dp2261
sg24
g5
(cnipype.interfaces.afni.preprocess
Refit
p2262
g7
Ntp2263
Rp2264
(dp2265
g29
g30
(cnipype.interfaces.afni.preprocess
RefitInputSpec
p2266
tp2267
Rp2268
(dp2269
g158
I00
sg38
g39
sS'deoblique'
p2270
I01
sg162
g37
sS'yorigin'
p2271
g37
sg164
g165
sg166
g5
(g167
g168
(dp2272
tp2273
Rp2274
(dp2275
g175
S'environ_items'
p2276
sg59
g166
sbsg177
g37
sS'xorigin'
p2277
g37
sS'zorigin'
p2278
g37
sbsg181
Nsg182
g165
sbsg58
Nsg66
I00
sg61
(dp2279
sg68
Nsg65
Nsg75
Nsg59
S'anat_deoblique'
p2280
sg63
g2255
sg67
I00
sg69
Nsg70
I00
sg71
g2280
sg72
Nsg73
(lp2281
sg76
Nsb(dp2282
sg5
(g18
g7
Ntp2283
Rp2284
(dp2285
g22
(dp2286
sg24
g5
(cnipype.interfaces.afni.preprocess
SkullStrip
p2287
g7
Ntp2288
Rp2289
(dp2290
g29
g30
(cnipype.interfaces.afni.preprocess
SkullStripInputSpec
p2291
tp2292
Rp2293
(dp2294
g158
I00
sg38
g39
sg161
g37
sg162
g37
sg2239
S'AFNI'
p2295
sg164
g165
sg166
g5
(g167
g168
(dp2296
tp2297
Rp2298
(dp2299
g175
S'environ_items'
p2300
sg59
g166
sbsg177
g37
sbsg2252
g2295
sg181
Nsg182
g165
sbsg58
Nsg66
I00
sg61
(dp2301
sg68
Nsg65
Nsg75
Nsg59
S'anat_skullstrip'
p2302
sg63
g2255
sg67
I00
sg69
Nsg70
I00
sg71
g2302
sg72
Nsg73
(lp2303
sg76
Nsb(dp2304
sg5
(g18
g7
Ntp2305
Rp2306
(dp2307
g22
(dp2308
sg24
g5
(g25
g7
Ntp2309
Rp2310
(dp2311
g29
g30
(g31
tp2312
Rp2313
(dp2314
g38
g39
sS'anat'
p2315
g37
sbsg55
(lp2316
g2315
asg57
I01
sbsg58
Nsg66
I00
sg61
(dp2317
sg68
Nsg65
Nsg75
Nsg59
g135
sg63
g2255
sg67
I00
sg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp2318
sg76
Nsb(dp2319
sg5
(g18
g7
Ntp2320
Rp2321
(dp2322
g22
(dp2323
sg24
g5
(cnipype.interfaces.afni.preprocess
Resample
p2324
g7
Ntp2325
Rp2326
(dp2327
g29
g30
(cnipype.interfaces.afni.preprocess
ResampleInputSpec
p2328
tp2329
Rp2330
(dp2331
g158
I00
sg38
g39
sg161
g37
sg162
g37
sg2239
g2240
sS'resample_mode'
p2332
g37
sS'voxel_size'
p2333
g37
sg164
g165
sS'master'
p2334
g37
sg177
g37
sg166
g5
(g167
g168
(dp2335
tp2336
Rp2337
(dp2338
g175
S'environ_items'
p2339
sg59
g166
sbsS'orientation'
p2340
S'RPI'
p2341
sbsg2252
g2240
sg181
Nsg182
g165
sbsg58
Nsg66
I00
sg61
(dp2342
sg68
Nsg65
Nsg75
Nsg59
S'anat_reorient'
p2343
sg63
g2255
sg67
I00
sg69
Nsg70
I00
sg71
g2343
sg72
Nsg73
(lp2344
sg76
Nsb(dp2345
sg5
(g18
g7
Ntp2346
Rp2347
(dp2348
g22
(dp2349
sg24
g5
(g25
g7
Ntp2350
Rp2351
(dp2352
g29
g30
(g31
tp2353
Rp2354
(dp2355
S'reorient'
p2356
g37
sg126
g37
sS'refit'
p2357
g37
sg38
g39
sS'skullstrip'
p2358
g37
sbsg55
(lp2359
g2357
ag2356
ag2358
ag126
asg57
I01
sbsg58
Nsg66
I00
sg61
(dp2360
sg68
Nsg65
Nsg75
Nsg59
g60
sg63
g2255
sg67
I00
sg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp2361
sg76
Nsb(dp2362
ssg336
(dp2363
g2225
(dp2364
g2347
(dp2365
g340
(lp2366
(g161
g126
tp2367
asssg2259
(dp2368
g2321
(dp2369
g340
(lp2370
(g161
g177
tp2371
assg2347
(dp2372
g340
(lp2373
(g161
g2357
tp2374
asssg2284
(dp2375
g2225
(dp2376
g340
(lp2377
(g161
g2241
tp2378
assg2347
(dp2379
g340
(lp2380
(g161
g2358
tp2381
asssg2306
(dp2382
g2259
(dp2383
g340
(lp2384
(g2315
g177
tp2385
asssg2321
(dp2386
g2225
(dp2387
g340
(lp2388
(g161
g2243
tp2389
assg2347
(dp2390
g340
(lp2391
(g161
g2356
tp2392
assg2284
(dp2393
g340
(lp2394
(g161
g177
tp2395
asssg2347
(dp2396
ssg382
g2363
sg383
(dp2397
g2225
(dp2398
g2321
g2387
sg2284
g2376
ssg2259
(dp2399
g2306
g2383
ssg2284
(dp2400
g2321
g2393
ssg2306
(dp2401
sg2321
(dp2402
g2259
g2369
ssg2347
(dp2403
g2225
g2365
sg2284
g2379
sg2259
g2372
sg2321
g2390
sssg334
(dp2404
sg391
g2363
sbsg59
g2255
sg63
g1067
sg71
g2255
sg72
g392
((lp2405
(lp2406
g395
ag392
((lp2407
(lp2408
g398
ag395
aa(lp2409
g400
ag401
aa(lp2410
g403
ag404
aa(lp2411
g406
ag407
aa(lp2412
g409
ag410
aa(lp2413
g412
ag413
aa(lp2414
g415
ag416
aa(lp2415
g418
ag419
aatp2416
Rp2417
aa(lp2418
g423
ag392
((lp2419
(lp2420
g398
ag423
aa(lp2421
g427
ag428
aa(lp2422
g430
ag431
aa(lp2423
g433
ag434
aa(lp2424
g436
ag437
aa(lp2425
g439
ag440
aa(lp2426
g442
ag443
aa(lp2427
g445
ag446
aa(lp2428
g448
ag449
aa(lp2429
g451
ag452
aa(lp2430
g454
ag455
aa(lp2431
g457
ag458
aa(lp2432
g460
ag461
aa(lp2433
g463
ag464
aa(lp2434
g466
ag467
aa(lp2435
g469
ag470
aa(lp2436
g472
ag473
aa(lp2437
g475
ag476
aa(lp2438
g478
ag479
aatp2439
Rp2440
aa(lp2441
g483
ag392
((lp2442
(lp2443
g398
ag483
aa(lp2444
g487
ag488
aatp2445
Rp2446
aatp2447
Rp2448
sg76
NsbS'outputspec.brain'
p2449
tp2450
sS'mean_functional'
p2451
(g5
(g6
g7
Ntp2452
Rp2453
(dp2454
g11
g5
(g12
g7
Ntp2455
Rp2456
(dp2457
g16
(dp2458
g5
(g18
g7
Ntp2459
Rp2460
(dp2461
g22
(dp2462
sg24
g5
(cnipype.interfaces.afni.preprocess
Volreg
p2463
g7
Ntp2464
Rp2465
(dp2466
g29
g30
(cnipype.interfaces.afni.preprocess
VolregInputSpec
p2467
tp2468
Rp2469
(dp2470
S'oned_file'
p2471
g37
sg158
I00
sg202
g37
sS'timeshift'
p2472
g37
sS'basefile'
p2473
g37
sg162
S'-Fourier -twopass'
p2474
sg2239
g2240
sS'zpad'
p2475
I4
sg164
g165
sS'md1d_file'
p2476
S'max_displacement.1D'
p2477
sg177
g37
sS'copyorigin'
p2478
g37
sg166
g5
(g167
g168
(dp2479
tp2480
Rp2481
(dp2482
g175
S'environ_items'
p2483
sg59
g166
sbsg1998
g37
sg38
g39
sg161
g37
sbsg2252
g2240
sg181
Nsg182
g165
sbsg58
Nsg66
I00
sg61
(dp2484
sg68
Nsg65
Nsg75
Nsg59
S'func_motion_correct_A'
p2485
sg63
S'func_preproc_automask_0'
p2486
sg67
I00
sg69
Nsg70
I00
sg71
g2485
sg72
Nsg73
(lp2487
sg76
Nsb(dp2488
sg5
(g18
g7
Ntp2489
Rp2490
(dp2491
g22
(dp2492
sg24
g5
(g2463
g7
Ntp2493
Rp2494
(dp2495
g29
g30
(g2467
tp2496
Rp2497
(dp2498
g2471
g37
sg158
I00
sg202
g37
sg2472
g37
sg2473
g37
sg162
g2474
sg2239
g2240
sg2475
I4
sg164
g165
sg2476
g37
sg177
g37
sg2478
g37
sg166
g5
(g167
g168
(dp2499
tp2500
Rp2501
(dp2502
g175
S'environ_items'
p2503
sg59
g166
sbsg1998
g37
sg38
g39
sg161
g37
sbsg2252
g2240
sg181
Nsg182
g165
sbsg58
Nsg59
S'func_motion_correct'
p2504
sg61
(dp2505
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2504
sg72
Nsg73
(lp2506
sg75
Nsg76
Nsb(dp2507
sg5
(g18
g7
Ntp2508
Rp2509
(dp2510
g22
(dp2511
sg24
g5
(g150
g7
Ntp2512
Rp2513
(dp2514
g29
g30
(g154
tp2515
Rp2516
(dp2517
g158
I00
sg38
g39
sg159
S'-ing 10000'
p2518
sg160
S'float'
p2519
sg161
g37
sg162
g37
sg163
g37
sg164
g165
sg166
g5
(g167
g168
(dp2520
g170
g171
stp2521
Rp2522
(dp2523
g175
S'environ_items'
p2524
sg59
g166
sbsg177
g37
sg178
g171
sg179
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'func_normalize'
p2525
sg61
(dp2526
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2525
sg72
Nsg73
(lp2527
sg75
Nsg76
Nsb(dp2528
sg5
(g18
g7
Ntp2529
Rp2530
(dp2531
g22
(dp2532
sg24
g5
(cnipype.interfaces.afni.preprocess
TStat
p2533
g7
Ntp2534
Rp2535
(dp2536
g29
g30
(cnipype.interfaces.afni.preprocess
TStatInputSpec
p2537
tp2538
Rp2539
(dp2540
g158
I00
sg38
g39
sg161
g37
sg162
g37
sg1914
g37
sg2239
g2240
sg164
g165
sg166
g5
(g167
g168
(dp2541
tp2542
Rp2543
(dp2544
g175
S'environ_items'
p2545
sg59
g166
sbsg177
g37
sS'options'
p2546
S'-mean'
p2547
sbsg2252
g2240
sg181
Nsg182
g165
sbsg58
Nsg59
S'func_mean_skullstrip'
p2548
sg61
(dp2549
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2548
sg72
Nsg73
(lp2550
sg75
Nsg76
Nsb(dp2551
sg5
(g18
g7
Ntp2552
Rp2553
(dp2554
g22
(dp2555
sg24
g5
(g25
g7
Ntp2556
Rp2557
(dp2558
g29
g30
(g31
tp2559
Rp2560
(dp2561
g1957
g37
sS'motion_correct_ref'
p2562
g37
sg38
g39
sS'preprocessed_mask'
p2563
g37
sg1914
g37
sg2357
g37
sg2358
g37
sg2356
g37
sS'preprocessed'
p2564
g37
sS'slice_time_corrected'
p2565
g37
sg1956
g37
sS'example_func'
p2566
g37
sg1998
g37
sS'reorient_mean'
p2567
g37
sg1999
g37
sbsg55
(lp2568
g2357
ag2356
ag2567
ag1999
ag2562
ag1956
ag1957
ag1914
ag2358
ag2566
ag2564
ag2563
ag2565
ag1998
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp2569
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp2570
sg75
Nsg76
Nsb(dp2571
sg5
(g18
g7
Ntp2572
Rp2573
(dp2574
g22
(dp2575
sg24
g5
(cnipype.interfaces.afni.preprocess
Automask
p2576
g7
Ntp2577
Rp2578
(dp2579
g29
g30
(cnipype.interfaces.afni.preprocess
AutomaskInputSpec
p2580
tp2581
Rp2582
(dp2583
g158
I00
sg38
g39
sg162
g37
sS'erode'
p2584
g37
sg161
g37
sS'dilate'
p2585
g37
sS'clfrac'
p2586
g37
sg2239
g2240
sS'brain_file'
p2587
g37
sg164
g165
sg166
g5
(g167
g168
(dp2588
tp2589
Rp2590
(dp2591
g175
S'environ_items'
p2592
sg59
g166
sbsg177
g37
sbsg2252
g2240
sg181
Nsg182
g165
sbsg58
Nsg59
S'func_get_brain_mask'
p2593
sg61
(dp2594
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2593
sg72
Nsg73
(lp2595
sg75
Nsg76
Nsb(dp2596
sg5
(g18
g7
Ntp2597
Rp2598
(dp2599
g22
(dp2600
sg24
g5
(g25
g7
Ntp2601
Rp2602
(dp2603
g29
g30
(g31
tp2604
Rp2605
(dp2606
g38
g39
sS'func'
p2607
g37
sbsg55
(lp2608
g2607
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp2609
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp2610
sg75
Nsg76
Nsb(dp2611
sg5
(g18
g7
Ntp2612
Rp2613
(dp2614
g22
(dp2615
sg24
g5
(g2533
g7
Ntp2616
Rp2617
(dp2618
g29
g30
(g2537
tp2619
Rp2620
(dp2621
g158
I00
sg38
g39
sg161
g37
sg162
g37
sg1914
g37
sg2239
g2240
sg164
g165
sg166
g5
(g167
g168
(dp2622
tp2623
Rp2624
(dp2625
g175
S'environ_items'
p2626
sg59
g166
sbsg177
g37
sg2546
g2547
sbsg2252
g2240
sg181
Nsg182
g165
sbsg58
Nsg66
I00
sg61
(dp2627
sg68
Nsg65
Nsg75
Nsg59
S'func_get_mean_motion'
p2628
sg63
g2486
sg67
I00
sg69
Nsg70
I00
sg71
g2628
sg72
Nsg73
(lp2629
sg76
Nsb(dp2630
sg5
(g18
g7
Ntp2631
Rp2632
(dp2633
g22
(dp2634
sg24
g5
(g150
g7
Ntp2635
Rp2636
(dp2637
g29
g30
(g154
tp2638
Rp2639
(dp2640
g158
I00
sg38
g39
sg159
S'-Tmin -bin'
p2641
sg160
S'char'
p2642
sg161
g37
sg162
g37
sg163
g37
sg164
g165
sg166
g5
(g167
g168
(dp2643
g170
g171
stp2644
Rp2645
(dp2646
g175
S'environ_items'
p2647
sg59
g166
sbsg177
g37
sg178
g171
sg179
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'func_mask_normalize'
p2648
sg61
(dp2649
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2648
sg72
Nsg73
(lp2650
sg75
Nsg76
Nsb(dp2651
sg5
(g18
g7
Ntp2652
Rp2653
(dp2654
g22
(dp2655
sg24
g5
(g2262
g7
Ntp2656
Rp2657
(dp2658
g29
g30
(g2266
tp2659
Rp2660
(dp2661
g158
I00
sg38
g39
sg2270
I01
sg162
g37
sg2271
g37
sg164
g165
sg166
g5
(g167
g168
(dp2662
tp2663
Rp2664
(dp2665
g175
S'environ_items'
p2666
sg59
g166
sbsg177
g37
sg2277
g37
sg2278
g37
sbsg181
Nsg182
g165
sbsg58
Nsg59
S'func_deoblique'
p2667
sg61
(dp2668
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2667
sg72
Nsg73
(lp2669
sg75
Nsg76
Nsb(dp2670
sg5
(g18
g7
Ntp2671
Rp2672
(dp2673
g22
(dp2674
sg24
g5
(g2533
g7
Ntp2675
Rp2676
(dp2677
g29
g30
(g2537
tp2678
Rp2679
(dp2680
g158
I00
sg38
g39
sg161
g37
sg162
g37
sg1914
g37
sg2239
g2240
sg164
g165
sg166
g5
(g167
g168
(dp2681
tp2682
Rp2683
(dp2684
g175
S'environ_items'
p2685
sg59
g166
sbsg177
g37
sg2546
g2547
sbsg2252
g2240
sg181
Nsg182
g165
sbsg58
Nsg59
S'func_get_mean_RPI'
p2686
sg61
(dp2687
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2686
sg72
Nsg73
(lp2688
sg75
Nsg76
Nsb(dp2689
sg5
(g18
g7
Ntp2690
Rp2691
(dp2692
g22
(dp2693
sg24
g5
(g2324
g7
Ntp2694
Rp2695
(dp2696
g29
g30
(g2328
tp2697
Rp2698
(dp2699
g158
I00
sg38
g39
sg161
g37
sg162
g37
sg2239
g2240
sg2332
g37
sg2333
g37
sg164
g165
sg2334
g37
sg177
g37
sg166
g5
(g167
g168
(dp2700
tp2701
Rp2702
(dp2703
g175
S'environ_items'
p2704
sg59
g166
sbsg2340
g2341
sbsg2252
g2240
sg181
Nsg182
g165
sbsg58
Nsg59
S'func_reorient'
p2705
sg61
(dp2706
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2705
sg72
Nsg73
(lp2707
sg75
Nsg76
Nsb(dp2708
sg5
(g18
g7
Ntp2709
Rp2710
(dp2711
g22
(dp2712
sg24
g5
(g2228
g7
Ntp2713
Rp2714
(dp2715
g29
g30
(g2232
tp2716
Rp2717
(dp2718
g2236
g37
sg158
I00
sg38
g39
sg161
g37
sg2237
S'a*b'
p2719
sg162
g37
sg2239
g2240
sg2241
g37
sg2242
g37
sg2243
g37
sg166
g5
(g167
g168
(dp2720
tp2721
Rp2722
(dp2723
g175
S'environ_items'
p2724
sg59
g166
sbsg2249
g37
sg2250
g37
sg2251
g37
sg164
g165
sbsg2252
g2240
sg181
Nsg182
g165
sbsg58
Nsg59
S'func_edge_detect'
p2725
sg61
(dp2726
sg63
g2486
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2725
sg72
Nsg73
(lp2727
sg75
Nsg76
Nsb(dp2728
ssg334
(dp2729
sg336
(dp2730
g2460
(dp2731
g2710
(dp2732
g340
(lp2733
(g161
g2243
tp2734
assg2553
(dp2735
g340
(lp2736
(g161
g1999
tp2737
a(g2476
g1957
tp2738
a(g2471
g1956
tp2739
a(g1998
g1998
tp2740
assg2573
(dp2741
g340
(lp2742
(g161
g177
tp2743
asssg2490
(dp2744
g2613
(dp2745
g340
(lp2746
(g161
g177
tp2747
asssg2509
(dp2748
g2632
(dp2749
g340
(lp2750
(g161
g177
tp2751
assg2553
(dp2752
g340
(lp2753
(g161
g2564
tp2754
asssg2530
(dp2755
g2553
(dp2756
g340
(lp2757
(g161
g2566
tp2758
asssg2553
(dp2759
sg2573
(dp2760
g2553
(dp2761
g340
(lp2762
(g161
g1914
tp2763
assg2710
(dp2764
g340
(lp2765
(g161
g2241
tp2766
asssg2598
(dp2767
g2653
(dp2768
g340
(lp2769
(g2607
g177
tp2770
asssg2613
(dp2771
g2460
(dp2772
g340
(lp2773
(g161
g2473
tp2774
assg2553
(dp2775
g340
(lp2776
(g161
g2562
tp2777
asssg2632
(dp2778
g2553
(dp2779
g340
(lp2780
(g161
g2563
tp2781
asssg2653
(dp2782
g2691
(dp2783
g340
(lp2784
(g161
g177
tp2785
asssg2672
(dp2786
g2490
(dp2787
g340
(lp2788
(g161
g2473
tp2789
asssg2691
(dp2790
g2672
(dp2791
g340
(lp2792
(g161
g177
tp2793
assg2460
(dp2794
g340
(lp2795
(g161
g177
tp2796
assg2553
(dp2797
g340
(lp2798
(g161
g2356
tp2799
assg2490
(dp2800
g340
(lp2801
(g161
g177
tp2802
asssg2710
(dp2803
g2530
(dp2804
g340
(lp2805
(g161
g177
tp2806
assg2553
(dp2807
g340
(lp2808
(g161
g2358
tp2809
assg2509
(dp2810
g340
(lp2811
(g161
g177
tp2812
assssg382
g2730
sg383
(dp2813
g2460
(dp2814
g2691
g2794
sg2613
g2772
ssg2490
(dp2815
g2672
g2787
sg2691
g2800
ssg2509
(dp2816
g2710
g2810
ssg2530
(dp2817
g2710
g2804
ssg2553
(dp2818
g2460
g2735
sg2632
g2779
sg2573
g2761
sg2509
g2752
sg2530
g2756
sg2710
g2807
sg2691
g2797
sg2613
g2775
ssg2573
(dp2819
g2460
g2741
ssg2598
(dp2820
sg2613
(dp2821
g2490
g2745
ssg2632
(dp2822
g2509
g2749
ssg2653
(dp2823
g2598
g2768
ssg2672
(dp2824
g2691
g2791
ssg2691
(dp2825
g2653
g2783
ssg2710
(dp2826
g2460
g2732
sg2573
g2764
sssg391
g2730
sbsg59
g2486
sg63
g1067
sg71
g2486
sg72
g392
((lp2827
(lp2828
g395
ag392
((lp2829
(lp2830
g398
ag395
aa(lp2831
g400
ag401
aa(lp2832
g403
ag404
aa(lp2833
g406
ag407
aa(lp2834
g409
ag410
aa(lp2835
g412
ag413
aa(lp2836
g415
ag416
aa(lp2837
g418
ag419
aatp2838
Rp2839
aa(lp2840
g423
ag392
((lp2841
(lp2842
g398
ag423
aa(lp2843
g427
ag428
aa(lp2844
g430
ag431
aa(lp2845
g433
ag434
aa(lp2846
g436
ag437
aa(lp2847
g439
ag440
aa(lp2848
g442
ag443
aa(lp2849
g445
ag446
aa(lp2850
g448
ag449
aa(lp2851
g451
ag452
aa(lp2852
g454
ag455
aa(lp2853
g457
ag458
aa(lp2854
g460
ag461
aa(lp2855
g463
ag464
aa(lp2856
g466
ag467
aa(lp2857
g469
ag470
aa(lp2858
g472
ag473
aa(lp2859
g475
ag476
aa(lp2860
g478
ag479
aatp2861
Rp2862
aa(lp2863
g483
ag392
((lp2864
(lp2865
g398
ag483
aa(lp2866
g487
ag488
aatp2867
Rp2868
aatp2869
Rp2870
sg76
NsbS'outputspec.example_func'
p2871
tp2872
sg1956
(g5
(g6
g7
Ntp2873
Rp2874
(dp2875
g11
g5
(g12
g7
Ntp2876
Rp2877
(dp2878
g16
(dp2879
g5
(g18
g7
Ntp2880
Rp2881
(dp2882
g22
(dp2883
sg24
g5
(g25
g7
Ntp2884
Rp2885
(dp2886
g29
g30
(g31
tp2887
Rp2888
(dp2889
g38
g39
sS'movement_file'
p2890
g37
sbsg55
(lp2891
g2890
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp2892
sg63
S'fristons_parameter_model_0'
p2893
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp2894
sg75
Nsg76
Nsb(dp2895
sg5
(g18
g7
Ntp2896
Rp2897
(dp2898
g22
(dp2899
sg24
g5
(g1439
g7
Ntp2900
Rp2901
(dp2902
g1443
(lp2903
g177
asg29
g30
(g1447
tp2904
Rp2905
(dp2906
g158
I00
sg38
g39
sg1453
S'S\'def calc_friston_twenty_four(in_file):\\n    """\\n    Method to calculate friston twenty four parameters\\n\\n    Parameters\\n    ----------\\n    in_file: string\\n        input movement parameters file from motion correction\\n\\n    Returns\\n    -------\\n    new_file: string\\n        output 1D file containing 24 parameter values\\n\\n    """\\n\\n    import numpy as np\\n    import os\\n\\n    new_data = None\\n\\n    data = np.genfromtxt(in_file)\\n\\n    data_squared = data ** 2\\n\\n    new_data = np.concatenate((data, data_squared), axis=1)\\n\\n    data_roll = np.roll(data, 1, axis=0)\\n\\n    data_roll[0] = 0\\n\\n    new_data = np.concatenate((new_data, data_roll), axis=1)\\n\\n    data_roll_squared = data_roll ** 2\\n\\n    new_data = np.concatenate((new_data, data_roll_squared), axis=1)\\n\\n    new_file = os.path.join(os.getcwd(), \\\'fristons_twenty_four.1D\\\')\\n    np.savetxt(new_file, new_data, fmt=\\\'%0.8f\\\', delimiter=\\\' \\\')\\n\\n    return new_file\\n\'\n.'
p2907
sg177
g37
sbsg1455
(dp2908
g161
Nssg1457
(lp2909
g161
asg1459
Nsbsg58
Nsg59
S'calc_friston'
p2910
sg61
(dp2911
sg63
g2893
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g2910
sg72
Nsg73
(lp2912
sg75
Nsg76
Nsb(dp2913
sg5
(g18
g7
Ntp2914
Rp2915
(dp2916
g22
(dp2917
sg24
g5
(g25
g7
Ntp2918
Rp2919
(dp2920
g29
g30
(g31
tp2921
Rp2922
(dp2923
g38
g39
sg2890
g37
sbsg55
(lp2924
g2890
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp2925
sg63
g2893
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp2926
sg75
Nsg76
Nsb(dp2927
ssg334
(dp2928
sg336
(dp2929
g2881
(dp2930
g2897
(dp2931
g340
(lp2932
(g2890
g177
tp2933
asssg2897
(dp2934
g2915
(dp2935
g340
(lp2936
(g161
g2890
tp2937
asssg2915
(dp2938
ssg382
g2929
sg383
(dp2939
g2881
(dp2940
sg2897
(dp2941
g2881
g2931
ssg2915
(dp2942
g2897
g2935
sssg391
g2929
sbsg59
g2893
sg63
g1067
sg71
g2893
sg72
g392
((lp2943
(lp2944
g395
ag392
((lp2945
(lp2946
g398
ag395
aa(lp2947
g400
ag401
aa(lp2948
g403
ag404
aa(lp2949
g406
ag407
aa(lp2950
g409
ag410
aa(lp2951
g412
ag413
aa(lp2952
g415
ag416
aa(lp2953
g418
ag419
aatp2954
Rp2955
aa(lp2956
g423
ag392
((lp2957
(lp2958
g398
ag423
aa(lp2959
g427
ag428
aa(lp2960
g430
ag431
aa(lp2961
g433
ag434
aa(lp2962
g436
ag437
aa(lp2963
g439
ag440
aa(lp2964
g442
ag443
aa(lp2965
g445
ag446
aa(lp2966
g448
ag449
aa(lp2967
g451
ag452
aa(lp2968
g454
ag455
aa(lp2969
g457
ag458
aa(lp2970
g460
ag461
aa(lp2971
g463
ag464
aa(lp2972
g466
ag467
aa(lp2973
g469
ag470
aa(lp2974
g472
ag473
aa(lp2975
g475
ag476
aa(lp2976
g478
ag479
aatp2977
Rp2978
aa(lp2979
g483
ag392
((lp2980
(lp2981
g398
ag483
aa(lp2982
g487
ag488
aatp2983
Rp2984
aatp2985
Rp2986
sg76
NsbS'outputspec.movement_file'
p2987
tp2988
sS'qc___mean_func_with_t1_edge_s'
p2989
(g5
(g6
g7
Ntp2990
Rp2991
(dp2992
g11
g5
(g12
g7
Ntp2993
Rp2994
(dp2995
g16
(dp2996
g5
(g18
g7
Ntp2997
Rp2998
(dp2999
g22
(dp3000
sg24
g5
(g25
g7
Ntp3001
Rp3002
(dp3003
g29
g30
(g31
tp3004
Rp3005
(dp3006
g38
g39
sg1409
g37
sg1410
g37
sbsg55
(lp3007
g1409
ag1410
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp3008
sg63
S'montage_anat_0'
p3009
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp3010
sg75
Nsg76
Nsb(dp3011
sg5
(g18
g7
Ntp3012
Rp3013
(dp3014
g22
(dp3015
sg24
g5
(g25
g7
Ntp3016
Rp3017
(dp3018
g29
g30
(g31
tp3019
Rp3020
(dp3021
g38
g39
sg1427
g37
sg1428
g37
sg1429
g37
sg1430
g37
sbsg55
(lp3022
g1428
ag1429
ag1427
ag1430
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp3023
sg63
g3009
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp3024
sg75
Nsg76
Nsb(dp3025
sg5
(g18
g7
Ntp3026
Rp3027
(dp3028
g22
(dp3029
sg24
g5
(g1439
g7
Ntp3030
Rp3031
(dp3032
g1443
(lp3033
g1472
asg29
g30
(g1447
tp3034
Rp3035
(dp3036
g158
I00
sg1453
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3037
sg1472
g37
sg38
g39
sbsg1455
(dp3038
g1478
Nssg1457
(lp3039
g1478
asg1459
Nsbsg58
Nsg66
I00
sg61
(dp3040
sg68
Nsg65
Nsg75
Nsg59
g1517
sg63
g3009
sg67
I00
sg69
Nsg70
I00
sg71
g1517
sg72
Nsg73
(lp3041
sg76
Nsb(dp3042
sg5
(g18
g7
Ntp3043
Rp3044
(dp3045
g22
(dp3046
sg24
g5
(g1439
g7
Ntp3047
Rp3048
(dp3049
g1443
(lp3050
g1472
asg29
g30
(g1447
tp3051
Rp3052
(dp3053
g158
I00
sg1453
g3037
sg1472
g37
sg38
g39
sbsg1455
(dp3054
g1478
Nssg1457
(lp3055
g1478
asg1459
Nsbsg58
Nsg59
g1480
sg61
(dp3056
sg63
g3009
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1480
sg72
Nsg73
(lp3057
sg75
Nsg76
Nsb(dp3058
sg5
(g18
g7
Ntp3059
Rp3060
(dp3061
g22
(dp3062
sg24
g5
(g1439
g7
Ntp3063
Rp3064
(dp3065
g1443
(lp3066
g1410
ag1409
ag1445
ag1446
asg29
g30
(g1447
tp3067
Rp3068
(dp3069
g158
I00
sg1445
S't1_edge_on_mean_func_in_t1_a.png'
p3070
sg1410
g37
sg1446
g1452
sg1453
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3071
sg1409
g37
sg38
g39
sbsg1455
(dp3072
g1445
Nssg1457
(lp3073
g1445
asg1459
Nsbsg58
Nsg59
g1460
sg61
(dp3074
sg63
g3009
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1460
sg72
Nsg73
(lp3075
sg75
Nsg76
Nsb(dp3076
sg5
(g18
g7
Ntp3077
Rp3078
(dp3079
g22
(dp3080
sg24
g5
(g1439
g7
Ntp3081
Rp3082
(dp3083
g1443
(lp3084
g1410
ag1409
ag1445
ag1446
asg29
g30
(g1447
tp3085
Rp3086
(dp3087
g158
I00
sg1445
S't1_edge_on_mean_func_in_t1_s.png'
p3088
sg1410
g37
sg1446
g1452
sg1453
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p3089
sg1409
g37
sg38
g39
sbsg1455
(dp3090
g1445
Nssg1457
(lp3091
g1445
asg1459
Nsbsg58
Nsg59
g1499
sg61
(dp3092
sg63
g3009
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1499
sg72
Nsg73
(lp3093
sg75
Nsg76
Nsb(dp3094
ssg334
(dp3095
sg336
(dp3096
g2998
(dp3097
g3044
(dp3098
g340
(lp3099
(g1409
g1472
tp3100
assg3027
(dp3101
g340
(lp3102
(g1410
g1472
tp3103
asssg3013
(dp3104
sg3027
(dp3105
g3060
(dp3106
g340
(lp3107
(g1478
g1410
tp3108
assg3078
(dp3109
g340
(lp3110
(g1478
g1410
tp3111
assg3013
(dp3112
g340
(lp3113
(g1478
g1430
tp3114
asssg3044
(dp3115
g3060
(dp3116
g340
(lp3117
(g1478
g1409
tp3118
assg3078
(dp3119
g340
(lp3120
(g1478
g1409
tp3121
assg3013
(dp3122
g340
(lp3123
(g1478
g1427
tp3124
asssg3060
(dp3125
g3013
(dp3126
g340
(lp3127
(g1445
g1428
tp3128
asssg3078
(dp3129
g3013
(dp3130
g340
(lp3131
(g1445
g1429
tp3132
assssg382
g3096
sg383
(dp3133
g2998
(dp3134
sg3013
(dp3135
g3060
g3126
sg3044
g3122
sg3078
g3130
sg3027
g3112
ssg3027
(dp3136
g2998
g3101
ssg3044
(dp3137
g2998
g3098
ssg3060
(dp3138
g3044
g3116
sg3027
g3106
ssg3078
(dp3139
g3044
g3119
sg3027
g3109
sssg391
g3096
sbsg59
g3009
sg63
g1067
sg71
g3009
sg72
g392
((lp3140
(lp3141
g395
ag392
((lp3142
(lp3143
g398
ag395
aa(lp3144
g400
ag401
aa(lp3145
g403
ag404
aa(lp3146
g406
ag407
aa(lp3147
g409
ag410
aa(lp3148
g412
ag413
aa(lp3149
g415
ag416
aa(lp3150
g418
ag419
aatp3151
Rp3152
aa(lp3153
g423
ag392
((lp3154
(lp3155
g398
ag423
aa(lp3156
g427
ag428
aa(lp3157
g430
ag431
aa(lp3158
g433
ag434
aa(lp3159
g436
ag437
aa(lp3160
g439
ag440
aa(lp3161
g442
ag443
aa(lp3162
g445
ag446
aa(lp3163
g448
ag449
aa(lp3164
g451
ag452
aa(lp3165
g454
ag455
aa(lp3166
g457
ag458
aa(lp3167
g460
ag461
aa(lp3168
g463
ag464
aa(lp3169
g466
ag467
aa(lp3170
g469
ag470
aa(lp3171
g472
ag473
aa(lp3172
g475
ag476
aa(lp3173
g478
ag479
aatp3174
Rp3175
aa(lp3176
g483
ag392
((lp3177
(lp3178
g398
ag483
aa(lp3179
g487
ag488
aatp3180
Rp3181
aatp3182
Rp3183
sg76
Nsbg1609
tp3184
sS'seg_partial_volume_map'
p3185
(g9
S'outputspec.partial_volume_map'
p3186
tp3187
sg1957
(g2453
S'outputspec.max_displacement'
p3188
tp3189
sS'seg_mixeltype'
p3190
(g9
S'outputspec.mixeltype'
p3191
tp3192
sS'qc___csf_gm_wm_s'
p3193
(g5
(g6
g7
Ntp3194
Rp3195
(dp3196
g11
g5
(g12
g7
Ntp3197
Rp3198
(dp3199
g16
(dp3200
g5
(g18
g7
Ntp3201
Rp3202
(dp3203
g22
(dp3204
sg24
g5
(g1439
g7
Ntp3205
Rp3206
(dp3207
g1443
(lp3208
S'overlay_csf'
p3209
aS'overlay_wm'
p3210
aS'overlay_gm'
p3211
ag1409
ag1445
asg29
g30
(g1447
tp3212
Rp3213
(dp3214
g158
I00
sg1445
S'montage_csf_gm_wm_s.png'
p3215
sg3211
g37
sg1453
S'S\'def montage_gm_wm_csf_sagittal(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import matplotlib.cm as cm\\n    import nibabel as nb\\n\\n    Y = nb.load(underlay).get_data()\\n    x1, x2 = determine_start_and_end(Y, \\\'sagittal\\\', 0.0001)\\n    spacing = get_spacing(6, 3, x2 - x1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = x1\\n    for i in range(6*3):\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[zz, :, :]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = x1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= x2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[zz, :, :]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[zz, :, :]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[zz, :, :]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3216
sg3209
g37
sg3210
g37
sg1409
g37
sg38
g39
sbsg1455
(dp3217
g1445
Nssg1457
(lp3218
g1445
asg1459
Nsbsg58
Nsg59
g1499
sg61
(dp3219
sg63
S'montage_csf_gm_wm_0'
p3220
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1499
sg72
Nsg73
(lp3221
sg75
Nsg76
Nsb(dp3222
sg5
(g18
g7
Ntp3223
Rp3224
(dp3225
g22
(dp3226
sg24
g5
(g1439
g7
Ntp3227
Rp3228
(dp3229
g1443
(lp3230
g1472
asg29
g30
(g1447
tp3231
Rp3232
(dp3233
g158
I00
sg1453
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p3234
sg1472
g37
sg38
g39
sbsg1455
(dp3235
g1478
Nssg1457
(lp3236
g1478
asg1459
Nsbsg58
Nsg66
I00
sg61
(dp3237
sg68
Nsg65
Nsg75
Nsg59
S'resample_o_csf'
p3238
sg63
g3220
sg67
I00
sg69
Nsg70
I00
sg71
g3238
sg72
Nsg73
(lp3239
sg76
Nsb(dp3240
sg5
(g18
g7
Ntp3241
Rp3242
(dp3243
g22
(dp3244
sg24
g5
(g1439
g7
Ntp3245
Rp3246
(dp3247
g1443
(lp3248
g3209
ag3210
ag3211
ag1409
ag1445
asg29
g30
(g1447
tp3249
Rp3250
(dp3251
g158
I00
sg1445
S'montage_csf_gm_wm_a.png'
p3252
sg3211
g37
sg1453
S'S\'def montage_gm_wm_csf_axial(overlay_csf, overlay_wm, overlay_gm, underlay, png_name):\\n\\n    """\\n    Draws Montage using GM WM and CSF overlays on Anatomical brain in Sagittal Direction\\n\\n    Parameters\\n    ----------\\n\\n    overlay_csf : string\\n            Nifi file CSF MAP\\n\\n    overlay_wm : string\\n            Nifti file WM MAP\\n\\n    overlay_gm : string\\n            Nifti file GM MAP\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n\\n    import os\\n    import matplotlib\\n    import commands\\n#    matplotlib.use(\\\'Agg\\\')\\n    from CPAC.qc.utils import determine_start_and_end, get_spacing\\n    import numpy as np\\n    ###\\n    try:\\n        from mpl_toolkits.axes_grid1 import ImageGrid   \\n    except:\\n        from mpl_toolkits.axes_grid import ImageGrid\\n    import matplotlib.pyplot as plt\\n    import matplotlib.colors as col\\n    import nibabel as nb\\n    import matplotlib.cm as cm\\n\\n    Y = nb.load(underlay).get_data()\\n    z1, z2 = determine_start_and_end(Y, \\\'axial\\\', 0.0001)\\n    spacing = get_spacing(6, 3, z2 - z1)\\n    X_csf = nb.load(overlay_csf).get_data()\\n    X_wm = nb.load(overlay_wm).get_data()\\n    X_gm = nb.load(overlay_gm).get_data()\\n    X_csf = X_csf.astype(np.float16)\\n    X_wm = X_wm.astype(np.float16)\\n    X_gm = X_gm.astype(np.float16)\\n    Y = Y.astype(np.float16)\\n\\n    max_csf = np.nanmax(np.abs(X_csf.flatten()))\\n    X_csf[X_csf != 0.0] = max_csf\\n    max_wm = np.nanmax(np.abs(X_wm.flatten()))\\n    X_wm[X_wm != 0.0] = max_wm\\n    max_gm = np.nanmax(np.abs(X_gm.flatten()))\\n    X_gm[X_gm != 0.0] = max_gm\\n    x, y, z = Y.shape\\n    fig = plt.figure(1)\\n    max_ = np.max(np.abs(Y))\\n    grid = ImageGrid(fig, 111, nrows_ncols=(3, 6), share_all=True, aspect=True, cbar_mode="None", direction="row")\\n\\n    zz = z1\\n    for i in range(6*3):\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(Y[:, :, zz]), cmap=cm.Greys_r)\\n        zz += spacing\\n\\n    x, y, z = X_csf.shape\\n    X_csf[X_csf == 0.0] = np.nan\\n    X_wm[X_wm == 0.0] = np.nan\\n    X_gm[X_gm == 0.0] = np.nan\\n    print \\\'~~\\\', max_\\n\\n\\n    zz = z1\\n    im = None\\n    for i in range(6*3):\\n\\n\\n        if zz >= z2:\\n            break\\n\\n        im = grid[i].imshow(np.rot90(X_csf[:, :, zz]), cmap=cm.get_cmap(\\\'green\\\'), alpha=0.82, vmin=0, vmax=max_csf)   ###\\n        im = grid[i].imshow(np.rot90(X_wm[:, :, zz]), cmap=cm.get_cmap(\\\'blue\\\'), alpha=0.82, vmin=0, vmax=max_wm)\\n        im = grid[i].imshow(np.rot90(X_gm[:, :, zz]), cmap=cm.get_cmap(\\\'red\\\'), alpha=0.82, vmin=0, vmax=max_gm)   \\n\\n        grid[i].axes.get_xaxis().set_visible(False)\\n        grid[i].axes.get_yaxis().set_visible(False)\\n        zz += spacing\\n\\n    cbar = grid.cbar_axes[0].colorbar(im)\\n\\n#    plt.show()\\n    plt.axis("off")\\n    png_name = os.path.join(os.getcwd(), png_name)\\n    plt.savefig(png_name, dpi=200, bbox_inches=\\\'tight\\\')\\n    plt.close()\\n\\n    return png_name\\n\'\n.'
p3253
sg3209
g37
sg3210
g37
sg1409
g37
sg38
g39
sbsg1455
(dp3254
g1445
Nssg1457
(lp3255
g1445
asg1459
Nsbsg58
Nsg59
g1460
sg61
(dp3256
sg63
g3220
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1460
sg72
Nsg73
(lp3257
sg75
Nsg76
Nsb(dp3258
sg5
(g18
g7
Ntp3259
Rp3260
(dp3261
g22
(dp3262
sg24
g5
(g25
g7
Ntp3263
Rp3264
(dp3265
g29
g30
(g31
tp3266
Rp3267
(dp3268
g38
g39
sS'resampled_overlay_csf'
p3269
g37
sS'resampled_overlay_gm'
p3270
g37
sg1428
g37
sg1429
g37
sg1427
g37
sS'resampled_overlay_wm'
p3271
g37
sbsg55
(lp3272
g1428
ag1429
ag1427
ag3269
ag3271
ag3270
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp3273
sg63
g3220
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp3274
sg75
Nsg76
Nsb(dp3275
sg5
(g18
g7
Ntp3276
Rp3277
(dp3278
g22
(dp3279
sg24
g5
(g1439
g7
Ntp3280
Rp3281
(dp3282
g1443
(lp3283
g1472
asg29
g30
(g1447
tp3284
Rp3285
(dp3286
g158
I00
sg1453
g3234
sg1472
g37
sg38
g39
sbsg1455
(dp3287
g1478
Nssg1457
(lp3288
g1478
asg1459
Nsbsg58
Nsg66
I00
sg61
(dp3289
sg68
Nsg65
Nsg75
Nsg59
S'resample_o_gm'
p3290
sg63
g3220
sg67
I00
sg69
Nsg70
I00
sg71
g3290
sg72
Nsg73
(lp3291
sg76
Nsb(dp3292
sg5
(g18
g7
Ntp3293
Rp3294
(dp3295
g22
(dp3296
sg24
g5
(g1439
g7
Ntp3297
Rp3298
(dp3299
g1443
(lp3300
g1472
asg29
g30
(g1447
tp3301
Rp3302
(dp3303
g158
I00
sg1453
g3234
sg1472
g37
sg38
g39
sbsg1455
(dp3304
g1478
Nssg1457
(lp3305
g1478
asg1459
Nsbsg58
Nsg66
I00
sg61
(dp3306
sg68
Nsg65
Nsg75
Nsg59
S'resample_o_wm'
p3307
sg63
g3220
sg67
I00
sg69
Nsg70
I00
sg71
g3307
sg72
Nsg73
(lp3308
sg76
Nsb(dp3309
sg5
(g18
g7
Ntp3310
Rp3311
(dp3312
g22
(dp3313
sg24
g5
(g1439
g7
Ntp3314
Rp3315
(dp3316
g1443
(lp3317
g1472
asg29
g30
(g1447
tp3318
Rp3319
(dp3320
g158
I00
sg1453
g3234
sg1472
g37
sg38
g39
sbsg1455
(dp3321
g1478
Nssg1457
(lp3322
g1478
asg1459
Nsbsg58
Nsg59
g1480
sg61
(dp3323
sg63
g3220
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1480
sg72
Nsg73
(lp3324
sg75
Nsg76
Nsb(dp3325
sg5
(g18
g7
Ntp3326
Rp3327
(dp3328
g22
(dp3329
sg24
g5
(g25
g7
Ntp3330
Rp3331
(dp3332
g29
g30
(g31
tp3333
Rp3334
(dp3335
g38
g39
sg3211
g37
sg1409
g37
sg3209
g37
sg3210
g37
sbsg55
(lp3336
g1409
ag3209
ag3210
ag3211
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp3337
sg63
g3220
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp3338
sg75
Nsg76
Nsb(dp3339
ssg334
(dp3340
sg336
(dp3341
g3202
(dp3342
g3260
(dp3343
g340
(lp3344
(g1445
g1429
tp3345
asssg3224
(dp3346
g3242
(dp3347
g340
(lp3348
(g1478
g3209
tp3349
assg3260
(dp3350
g340
(lp3351
(g1478
g3269
tp3352
assg3202
(dp3353
g340
(lp3354
(g1478
g3209
tp3355
asssg3242
(dp3356
g3260
(dp3357
g340
(lp3358
(g1445
g1428
tp3359
asssg3260
(dp3360
sg3277
(dp3361
g3242
(dp3362
g340
(lp3363
(g1478
g3211
tp3364
assg3260
(dp3365
g340
(lp3366
(g1478
g3270
tp3367
assg3202
(dp3368
g340
(lp3369
(g1478
g3211
tp3370
asssg3294
(dp3371
g3242
(dp3372
g340
(lp3373
(g1478
g3210
tp3374
assg3260
(dp3375
g340
(lp3376
(g1478
g3271
tp3377
assg3202
(dp3378
g340
(lp3379
(g1478
g3210
tp3380
asssg3311
(dp3381
g3242
(dp3382
g340
(lp3383
(g1478
g1409
tp3384
assg3260
(dp3385
g340
(lp3386
(g1478
g1427
tp3387
assg3202
(dp3388
g340
(lp3389
(g1478
g1409
tp3390
asssg3327
(dp3391
g3311
(dp3392
g340
(lp3393
(g1409
g1472
tp3394
assg3294
(dp3395
g340
(lp3396
(g3210
g1472
tp3397
assg3224
(dp3398
g340
(lp3399
(g3209
g1472
tp3400
assg3277
(dp3401
g340
(lp3402
(g3211
g1472
tp3403
assssg382
g3341
sg383
(dp3404
g3202
(dp3405
g3311
g3388
sg3294
g3378
sg3224
g3353
sg3277
g3368
ssg3224
(dp3406
g3327
g3398
ssg3242
(dp3407
g3311
g3382
sg3294
g3372
sg3224
g3347
sg3277
g3362
ssg3260
(dp3408
g3224
g3350
sg3277
g3365
sg3311
g3385
sg3294
g3375
sg3242
g3357
sg3202
g3343
ssg3277
(dp3409
g3327
g3401
ssg3294
(dp3410
g3327
g3395
ssg3311
(dp3411
g3327
g3392
ssg3327
(dp3412
ssg391
g3341
sbsg59
g3220
sg63
g1067
sg71
g3220
sg72
g392
((lp3413
(lp3414
g395
ag392
((lp3415
(lp3416
g398
ag395
aa(lp3417
g400
ag401
aa(lp3418
g403
ag404
aa(lp3419
g406
ag407
aa(lp3420
g409
ag410
aa(lp3421
g412
ag413
aa(lp3422
g415
ag416
aa(lp3423
g418
ag419
aatp3424
Rp3425
aa(lp3426
g423
ag392
((lp3427
(lp3428
g398
ag423
aa(lp3429
g427
ag428
aa(lp3430
g430
ag431
aa(lp3431
g433
ag434
aa(lp3432
g436
ag437
aa(lp3433
g439
ag440
aa(lp3434
g442
ag443
aa(lp3435
g445
ag446
aa(lp3436
g448
ag449
aa(lp3437
g451
ag452
aa(lp3438
g454
ag455
aa(lp3439
g457
ag458
aa(lp3440
g460
ag461
aa(lp3441
g463
ag464
aa(lp3442
g466
ag467
aa(lp3443
g469
ag470
aa(lp3444
g472
ag473
aa(lp3445
g475
ag476
aa(lp3446
g478
ag479
aatp3447
Rp3448
aa(lp3449
g483
ag392
((lp3450
(lp3451
g398
ag483
aa(lp3452
g487
ag488
aatp3453
Rp3454
aatp3455
Rp3456
sg76
Nsbg1609
tp3457
sS'functional_to_anat_linear_xfm'
p3458
(g5
(g6
g7
Ntp3459
Rp3460
(dp3461
g11
g5
(g12
g7
Ntp3462
Rp3463
(dp3464
g16
(dp3465
g5
(g18
g7
Ntp3466
Rp3467
(dp3468
g22
(dp3469
sg24
g5
(g25
g7
Ntp3470
Rp3471
(dp3472
g29
g30
(g31
tp3473
Rp3474
(dp3475
g38
g39
sS'linear_reg_matrix'
p3476
g37
sS'bbr_schedule'
p3477
S'/mrimages/src/cpac/fsl/etc/flirtsch/bbr.sch'
p3478
sS'anat_wm_segmentation'
p3479
g37
sS'anat_skull'
p3480
g37
sg2607
g37
sbsg55
(lp3481
g2607
ag3480
ag3476
ag3479
ag3477
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp3482
sg63
S'func_to_anat_bbreg_0'
p3483
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp3484
sg75
Nsg76
Nsb(dp3485
sg5
(g18
g7
Ntp3486
Rp3487
(dp3488
g22
(dp3489
sg24
g5
(g25
g7
Ntp3490
Rp3491
(dp3492
g29
g30
(g31
tp3493
Rp3494
(dp3495
S'func_to_anat_linear_xfm'
p3496
g37
sg38
g39
sS'anat_func'
p3497
g37
sbsg55
(lp3498
g3496
ag3497
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp3499
sg63
g3483
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp3500
sg75
Nsg76
Nsb(dp3501
sg5
(g18
g7
Ntp3502
Rp3503
(dp3504
g22
(dp3505
sg24
g5
(g150
g7
Ntp3506
Rp3507
(dp3508
g29
g30
(g154
tp3509
Rp3510
(dp3511
g158
I00
sg38
g39
sg159
S'-thr 0.5 -bin'
p3512
sg160
g37
sg161
g37
sg162
g37
sg163
g37
sg164
g165
sg166
g5
(g167
g168
(dp3513
g170
g171
stp3514
Rp3515
(dp3516
g175
S'environ_items'
p3517
sg59
g166
sbsg177
g37
sg178
g171
sg179
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'wm_bb_mask'
p3518
sg61
(dp3519
sg63
g3483
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g3518
sg72
Nsg73
(lp3520
sg75
Nsg76
Nsb(dp3521
sg5
(g18
g7
Ntp3522
Rp3523
(dp3524
g22
(dp3525
sg24
g5
(g192
g7
Ntp3526
Rp3527
(dp3528
g29
g30
(g196
tp3529
Rp3530
(dp3531
g200
g37
sg38
g39
sg201
g37
sg202
g37
sg203
g37
sg204
g37
sg205
g37
sg206
g37
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg217
g37
sg177
g37
sg218
g37
sg219
g37
sg220
g37
sg221
g37
sg158
I00
sg222
g37
sg223
g37
sg162
g37
sg224
g37
sg225
g37
sg164
g165
sg226
g37
sg227
g37
sg228
g37
sg229
g37
sg230
g37
sg161
g37
sg231
g37
sg232
g37
sg233
g37
sg234
I6
sg235
g37
sg236
g37
sg237
g37
sg238
g37
sg239
g37
sg166
g5
(g167
g168
(dp3532
g170
g171
stp3533
Rp3534
(dp3535
g175
S'environ_items'
p3536
sg59
g166
sbsg245
g37
sg246
g37
sg178
g171
sg247
g37
sg248
g37
sg249
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'bbreg_func_to_anat'
p3537
sg61
(dp3538
sg63
g3483
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g3537
sg72
Nsg73
(lp3539
sg75
Nsg76
Nsb(dp3540
ssg334
(dp3541
sg336
(dp3542
g3467
(dp3543
g3523
(dp3544
g340
(lp3545
(g3477
g223
tp3546
a(g2607
g177
tp3547
a(g3480
g203
tp3548
a(g3476
g201
tp3549
assg3503
(dp3550
g340
(lp3551
(g3479
g177
tp3552
asssg3487
(dp3553
sg3503
(dp3554
g3523
(dp3555
g340
(lp3556
((g161
S'S"def bbreg_args(bbreg_target):\\n    return \'-cost bbr -wmseg \' + bbreg_target\\n"\n.'
p3557
(ttp3558
g162
tp3559
asssg3523
(dp3560
g3487
(dp3561
g340
(lp3562
(g235
g3496
tp3563
a(g161
g3497
tp3564
assssg382
g3542
sg383
(dp3565
g3467
(dp3566
sg3487
(dp3567
g3523
g3561
ssg3503
(dp3568
g3467
g3550
ssg3523
(dp3569
g3467
g3544
sg3503
g3555
sssg391
g3542
sbsg59
g3483
sg63
g1067
sg71
g3483
sg72
g392
((lp3570
(lp3571
g395
ag392
((lp3572
(lp3573
g398
ag395
aa(lp3574
g400
ag401
aa(lp3575
g403
ag404
aa(lp3576
g406
ag407
aa(lp3577
g409
ag410
aa(lp3578
g412
ag413
aa(lp3579
g415
ag416
aa(lp3580
g418
ag419
aatp3581
Rp3582
aa(lp3583
g423
ag392
((lp3584
(lp3585
g398
ag423
aa(lp3586
g427
ag428
aa(lp3587
g430
ag431
aa(lp3588
g433
ag434
aa(lp3589
g436
ag437
aa(lp3590
g439
ag440
aa(lp3591
g442
ag443
aa(lp3592
g445
ag446
aa(lp3593
g448
ag449
aa(lp3594
g451
ag452
aa(lp3595
g454
ag455
aa(lp3596
g457
ag458
aa(lp3597
g460
ag461
aa(lp3598
g463
ag464
aa(lp3599
g466
ag467
aa(lp3600
g469
ag470
aa(lp3601
g472
ag473
aa(lp3602
g475
ag476
aa(lp3603
g478
ag479
aatp3604
Rp3605
aa(lp3606
g483
ag392
((lp3607
(lp3608
g398
ag483
aa(lp3609
g487
ag488
aatp3610
Rp3611
aatp3612
Rp3613
sg76
NsbS'outputspec.func_to_anat_linear_xfm'
p3614
tp3615
sS'seg_partial_volume_files'
p3616
(g9
S'outputspec.partial_volume_files'
p3617
tp3618
sS'qc___snr_val'
p3619
(g5
(g18
g7
Ntp3620
Rp3621
(dp3622
g22
(dp3623
sg24
g5
(g1439
g7
Ntp3624
Rp3625
(dp3626
g1443
(lp3627
S'measure_file'
p3628
asg29
g30
(g1447
tp3629
Rp3630
(dp3631
g158
I00
sg38
g39
sg1453
S'S\'def cal_snr_val(measure_file):\\n\\n    """\\n    Calculate average snr value for snr image.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n        path to input nifti file\\n\\n\\n    Returns\\n    -------\\n\\n    avg_snr_file : string\\n\\n        a text file store average snr value\\n\\n    """\\n\\n    import numpy.ma as ma\\n    import nibabel as nb\\n    import os\\n\\n    data = nb.load(measure_file).get_data()\\n    data_flat = data.flatten()\\n    data_no0 = data_flat[data_flat > 0]\\n    snr_val = ma.mean(data_no0)\\n\\n    avg_snr_file = os.path.join(os.getcwd(), \\\'average_snr_file.txt\\\')\\n    f = open(avg_snr_file, \\\'w\\\')\\n    f.write(str(snr_val) + \\\'\\\\n\\\')\\n\\n    #f.write(str(measure_file) + \\\'\\\\n\\\')\\n    #f.write(str(avg_snr_file) + \\\'\\\\n\\\')\\n\\n    f.close()\\n\\n    return avg_snr_file\\n\'\n.'
p3632
sg3628
g37
sbsg1455
(dp3633
S'snr_storefl'
p3634
Nssg1457
(lp3635
g3634
asg1459
Nsbsg58
Nsg59
S'snr_val0'
p3636
sg61
(dp3637
sg63
g1067
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g3636
sg72
Nsg73
(lp3638
sg75
Nsg76
Nsbg3634
tp3639
sS'functional_preprocessed_mask'
p3640
(g2453
S'outputspec.preprocessed_mask'
p3641
tp3642
sS'qc___mean_func_with_t1_edge_a'
p3643
(g2991
g1807
tp3644
sS'qc___movement_trans_plot'
p3645
(g1832
g1845
tp3646
sS'qc___snr_hist'
p3647
(g5
(g18
g7
Ntp3648
Rp3649
(dp3650
g22
(dp3651
sg24
g5
(g1439
g7
Ntp3652
Rp3653
(dp3654
g1443
(lp3655
g3628
ag1863
asg29
g30
(g1447
tp3656
Rp3657
(dp3658
g158
I00
sg38
g39
sg1453
S'S\'def gen_histogram(measure_file, measure):\\n\\n    """\\n    Generates Histogram Image of intensities for a given input\\n    nifti file.\\n\\n    Parameters\\n    ----------\\n\\n    measure_file : string\\n\\n                path to input nifti file\\n\\n    measure : string\\n\\n        Name of the measure label in the plot\\n\\n\\n    Returns\\n    -------\\n\\n    hist_path : string\\n\\n        Path to the generated histogram png\\n\\n    """\\n    hist_path = None\\n\\n    from CPAC.qc.utils import make_histogram\\n    import os\\n    m_ = measure\\n    if isinstance(measure_file, list):\\n        hist_path = []\\n        for file_ in measure_file:\\n            measure = m_\\n            if \\\'sca_roi\\\' in measure.lower():\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'ROI_number_\\\')[1]\\n                fname = \\\'SCA_ROI_Number_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n            if \\\'temporal_regression_sca\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'z_maps_roi_\\\')[1]\\n                fname = \\\'z_maps_roi_\\\' + fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'temporal_dual_regression\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n                fname = fname.split(\\\'map_z_\\\')[1]\\n                fname = \\\'map_z_\\\'+ fname.split(\\\'_\\\')[0]\\n                measure = fname\\n\\n            if \\\'centrality\\\' in measure.lower():\\n\\n                fname = os.path.basename(os.path.splitext(os.path.splitext(file_)[0])[0])\\n\\n                if \\\'centrality_\\\' in fname:\\n                    type_, fname = fname.split(\\\'centrality_\\\')\\n                    fname = type_ + \\\'centrality_\\\' + fname.split(\\\'_\\\')[0]\\n                    measure = fname\\n                elif \\\'lFCD_\\\' in fname:\\n                    fname = \\\'lFCD_\\\' + fname.split(\\\'_\\\')[1]\\n                    measure = fname\\n\\n            hist_path.append(make_histogram(file_, measure))\\n\\n    else:\\n\\n        print "measure_file: ", measure_file\\n        print "measure: ", measure\\n\\n        hist_path = make_histogram(measure_file, measure)\\n\\n    return hist_path\\n\'\n.'
p3659
sg3628
g37
sg1863
S'snr'
p3660
sbsg1455
(dp3661
g1870
Nssg1457
(lp3662
g1870
asg1459
Nsbsg58
Nsg66
I00
sg61
(dp3663
sg68
Nsg65
Nsg75
Nsg59
S'hist_snr_0'
p3664
sg63
g1067
sg67
I00
sg69
Nsg70
I00
sg71
g3664
sg72
Nsg73
(lp3665
sg76
Nsbg1870
tp3666
sS'frame_wise_displacement'
p3667
(g1878
S'outputspec.FD_1D'
p3668
tp3669
sS'raw_functional'
p3670
(g5
(g6
g7
Ntp3671
Rp3672
(dp3673
g11
g5
(g12
g7
Ntp3674
Rp3675
(dp3676
g16
(dp3677
g5
(g18
g7
Ntp3678
Rp3679
(dp3680
g22
(dp3681
sg24
g5
(g1439
g7
Ntp3682
Rp3683
(dp3684
g1443
(lp3685
S'scan'
p3686
aS'rest_dict'
p3687
asg29
g30
(g1447
tp3688
Rp3689
(dp3690
g158
I00
sg3687
(dp3691
S'rest_1_rest'
p3692
S'/mnt/ssd1/data/inputs/KKI2009/KKI2009-28/KKI2009-28-fMRI.nii'
p3693
ssg1453
S"S'def get_rest(scan, rest_dict):\\n    return rest_dict[scan]\\n'\n."
p3694
sg38
g39
sg3686
g37
sbsg1455
(dp3695
g1913
Nssg1457
(lp3696
g1913
asg1459
Nsbsg58
Nsg59
S'selectrest'
p3697
sg61
(dp3698
sg63
S'func_gather_0'
p3699
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g3697
sg72
Nsg73
(lp3700
sg75
Nsg76
Nsb(dp3701
sg5
(g18
g7
Ntp3702
Rp3703
(dp3704
g22
(dp3705
sg24
g5
(g25
g7
Ntp3706
Rp3707
(dp3708
g29
g30
(g31
tp3709
Rp3710
(dp3711
g38
g39
sg3686
g37
sS'subject'
p3712
S'42_2924850236'
p3713
sbsg55
(lp3714
g3712
ag3686
asg57
I01
sbsg58
Nsg59
S'inputnode'
p3715
sg61
(dp3716
sg63
g3699
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
(lp3717
(g3686
(lp3718
g3692
atp3719
asg70
I00
sg71
g3715
sg72
Nsg73
(lp3720
sg75
Nsg76
Nsb(dp3721
sg5
(g18
g7
Ntp3722
Rp3723
(dp3724
g22
(dp3725
sg24
g5
(g25
g7
Ntp3726
Rp3727
(dp3728
g29
g30
(g31
tp3729
Rp3730
(dp3731
g38
g39
sg3686
g37
sg1913
g37
sg3712
g37
sbsg55
(lp3732
g3712
ag1913
ag3686
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp3733
sg63
g3699
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp3734
sg75
Nsg76
Nsb(dp3735
ssg334
(dp3736
sg336
(dp3737
g3679
(dp3738
g3723
(dp3739
g340
(lp3740
(g1913
g1913
tp3741
asssg3703
(dp3742
g3679
(dp3743
g340
(lp3744
(g3686
g3686
tp3745
assg3723
(dp3746
g340
(lp3747
(g3712
g3712
tp3748
a(g3686
g3686
tp3749
asssg3723
(dp3750
ssg382
g3737
sg383
(dp3751
g3679
(dp3752
g3703
g3743
ssg3703
(dp3753
sg3723
(dp3754
g3679
g3739
sg3703
g3746
sssg391
g3737
sbsg59
g3699
sg63
g1067
sg71
g3699
sg72
g392
((lp3755
(lp3756
g395
ag392
((lp3757
(lp3758
g398
ag395
aa(lp3759
g400
ag401
aa(lp3760
g403
ag404
aa(lp3761
g406
ag407
aa(lp3762
g409
ag410
aa(lp3763
g412
ag413
aa(lp3764
g415
ag416
aa(lp3765
g418
ag419
aatp3766
Rp3767
aa(lp3768
g423
ag392
((lp3769
(lp3770
g398
ag423
aa(lp3771
g427
ag428
aa(lp3772
g430
ag431
aa(lp3773
g433
ag434
aa(lp3774
g436
ag437
aa(lp3775
g439
ag440
aa(lp3776
g442
ag443
aa(lp3777
g445
ag446
aa(lp3778
g448
ag449
aa(lp3779
g451
ag452
aa(lp3780
g454
ag455
aa(lp3781
g457
ag458
aa(lp3782
g460
ag461
aa(lp3783
g463
ag464
aa(lp3784
g466
ag467
aa(lp3785
g469
ag470
aa(lp3786
g472
ag473
aa(lp3787
g475
ag476
aa(lp3788
g478
ag479
aatp3789
Rp3790
aa(lp3791
g483
ag392
((lp3792
(lp3793
g398
ag483
aa(lp3794
g487
ag488
aatp3795
Rp3796
aatp3797
Rp3798
sg76
NsbS'outputspec.rest'
p3799
tp3800
sS'mni_to_anatomical_linear_xfm'
p3801
(g1116
S'outputspec.invlinear_xfm'
p3802
tp3803
sS'seg_probability_maps'
p3804
(g9
S'outputspec.probability_maps'
p3805
tp3806
sS'functional_mni'
p3807
(g5
(g18
g7
Ntp3808
Rp3809
(dp3810
g22
(dp3811
sg24
g5
(g1165
g7
Ntp3812
Rp3813
(dp3814
g29
g30
(g1169
tp3815
Rp3816
(dp3817
g158
I00
sg1173
g37
sg177
g37
sg1174
g37
sg161
g37
sg232
g37
sg162
g37
sg206
g37
sg1175
g37
sg1176
g1820
sg164
g165
sg166
g5
(g167
g168
(dp3818
g170
g171
stp3819
Rp3820
(dp3821
g175
S'environ_items'
p3822
sg59
g166
sbsg1182
g37
sg1183
g37
sg178
g171
sg1184
g37
sg1185
g37
sg38
g39
sg1186
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'func_mni_fsl_warp_0'
p3823
sg61
(dp3824
sg63
g1067
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g3823
sg72
Nsg73
(lp3825
sg75
Nsg76
Nsbg161
tp3826
sS'voxel_timeseries'
p3827
(g5
(g6
g7
Ntp3828
Rp3829
(dp3830
g11
g5
(g12
g7
Ntp3831
Rp3832
(dp3833
g16
(dp3834
g5
(g18
g7
Ntp3835
Rp3836
(dp3837
g22
(dp3838
sg24
g5
(g1439
g7
Ntp3839
Rp3840
(dp3841
g1443
(lp3842
S'data_file'
p3843
aS'template'
p3844
ag178
asg29
g30
(g1447
tp3845
Rp3846
(dp3847
g158
I00
sg38
g39
sg3843
g37
sg1453
S'S\'def gen_voxel_timeseries(data_file,\\n                         template,\\n                         output_type):\\n    """\\n    Method to extract timeseries for each voxel\\n    in the data that is present in the input mask\\n\\n    Parameters\\n    ----------\\n    datafile : string (nifti file)\\n        path to input functional data\\n    template : string (nifti file) \\n        path to input mask in functional native space\\n    output_type :list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv \\n        format\\n\\n    Returns\\n    -------\\n    out_list : list of files\\n        Based on ouput_type options method returns a list containing \\n        path to npz and csv file having timeseries of each voxel in \\n        the data that is present in the input mask.The row header \\n        corresponds to voxel\\\'s xyz cordinates and column headers corresponds \\n        to the volume index in the csv. By default it outputs afni compatible \\n        1D file with mean of timeseries of voxels across timepoints.\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import numpy as np\\n    import csv\\n    import os\\n\\n    unit = nib.load(template)\\n    unit_data = unit.get_data()\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    header_data = datafile.get_header()\\n    qform = header_data.get_qform()\\n    sorted_list = []\\n    vol_dict = {}\\n    out_list = []\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and mask should have same shape\\\')\\n\\n\\n\\n    tmp_file = os.path.splitext(\\n                  os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.1D\\\')\\n    f = open(oneD_file, \\\'wt\\\')\\n\\n    x, y, z = unit_data.shape\\n\\n    node_array = img_data[unit_data != 0]\\n    node_array = node_array.T\\n    time_points = node_array.shape[0]\\n    for t in range(0, time_points):\\n        str = \\\'vol %s\\\' % (t)\\n        vol_dict[str] = node_array[t]\\n        print >> f, np.round(np.mean(node_array[t]), 6)\\n        val = node_array[t].tolist()\\n        val.insert(0, t)\\n        sorted_list.append(val)\\n\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    if output_type[0]:\\n        csv_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.csv\\\')\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                            quoting=csv.QUOTE_MINIMAL)\\n        one = np.array([1])\\n        headers = [\\\'volume/xyz\\\']\\n        cordinates = np.argwhere(unit_data != 0)\\n        for val in range(np.alen(cordinates)):\\n            ijk_mat = np.concatenate([cordinates[val], one])\\n            ijk_mat = ijk_mat.T\\n            product = np.dot(qform, ijk_mat)\\n            val = tuple(product.tolist()[0:3])\\n            headers.append(val)\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    if output_type[1]:\\n        numpy_file = os.path.abspath(\\\'mask_\\\' + tmp_file + \\\'.npz\\\')\\n        np.savez(numpy_file, **dict(vol_dict))\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p3848
sg3844
g37
sg178
g37
sbsg1455
(dp3849
g161
Nssg1457
(lp3850
g161
asg1459
Nsbsg58
Nsg59
S'timeseries_voxel'
p3851
sg61
(dp3852
sg63
S'voxel_timeseries_0'
p3853
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g3851
sg72
Nsg73
(lp3854
sg75
Nsg76
Nsb(dp3855
sg5
(g18
g7
Ntp3856
Rp3857
(dp3858
g22
(dp3859
sg24
g5
(g25
g7
Ntp3860
Rp3861
(dp3862
g29
g30
(g31
tp3863
Rp3864
(dp3865
g38
g39
sS'mask_outputs'
p3866
g37
sbsg55
(lp3867
g3866
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp3868
sg63
g3853
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp3869
sg75
Nsg76
Nsb(dp3870
sg5
(g18
g7
Ntp3871
Rp3872
(dp3873
g22
(dp3874
sg24
g5
(g25
g7
Ntp3875
Rp3876
(dp3877
g29
g30
(g31
tp3878
Rp3879
(dp3880
g38
g39
sg178
(lp3881
I01
aI01
asg1913
g37
sbsg55
(lp3882
g1913
ag178
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp3883
sg63
g3853
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp3884
sg75
Nsg76
Nsb(dp3885
sg5
(g18
g7
Ntp3886
Rp3887
(dp3888
g22
(dp3889
sg24
g5
(g25
g7
Ntp3890
Rp3891
(dp3892
g29
g30
(g31
tp3893
Rp3894
(dp3895
g38
g39
sg1914
g37
sbsg55
(lp3896
g1914
asg57
I01
sbsg58
Nsg59
S'input_mask'
p3897
sg61
(dp3898
sg63
g3853
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g3897
sg72
Nsg73
(lp3899
sg75
Nsg76
Nsb(dp3900
ssg334
(dp3901
sg336
(dp3902
g3836
(dp3903
g3857
(dp3904
g340
(lp3905
(g161
g3866
tp3906
asssg3857
(dp3907
sg3872
(dp3908
g3836
(dp3909
g340
(lp3910
(g1913
g3843
tp3911
a(g178
g178
tp3912
asssg3887
(dp3913
g3836
(dp3914
g340
(lp3915
(g1914
g3844
tp3916
assssg382
g3902
sg383
(dp3917
g3836
(dp3918
g3872
g3909
sg3887
g3914
ssg3857
(dp3919
g3836
g3904
ssg3872
(dp3920
sg3887
(dp3921
ssg391
g3902
sbsg59
g3853
sg63
g1067
sg71
g3853
sg72
g392
((lp3922
(lp3923
g395
ag392
((lp3924
(lp3925
g398
ag395
aa(lp3926
g400
ag401
aa(lp3927
g403
ag404
aa(lp3928
g406
ag407
aa(lp3929
g409
ag410
aa(lp3930
g412
ag413
aa(lp3931
g415
ag416
aa(lp3932
g418
ag419
aatp3933
Rp3934
aa(lp3935
g423
ag392
((lp3936
(lp3937
g398
ag423
aa(lp3938
g427
ag428
aa(lp3939
g430
ag431
aa(lp3940
g433
ag434
aa(lp3941
g436
ag437
aa(lp3942
g439
ag440
aa(lp3943
g442
ag443
aa(lp3944
g445
ag446
aa(lp3945
g448
ag449
aa(lp3946
g451
ag452
aa(lp3947
g454
ag455
aa(lp3948
g457
ag458
aa(lp3949
g460
ag461
aa(lp3950
g463
ag464
aa(lp3951
g466
ag467
aa(lp3952
g469
ag470
aa(lp3953
g472
ag473
aa(lp3954
g475
ag476
aa(lp3955
g478
ag479
aatp3956
Rp3957
aa(lp3958
g483
ag392
((lp3959
(lp3960
g398
ag483
aa(lp3961
g487
ag488
aatp3962
Rp3963
aatp3964
Rp3965
sg76
NsbS'outputspec.mask_outputs'
p3966
tp3967
sS'anatomical_csf_mask'
p3968
(g9
S'outputspec.csf_mask'
p3969
tp3970
sS'qc___mean_func_with_mni_edge_a'
p3971
(g1393
g1807
tp3972
sS'qc___csf_gm_wm_a'
p3973
(g3195
g1807
tp3974
sS'scrubbing_frames_excluded'
p3975
(g1878
S'outputspec.frames_ex_1D'
p3976
tp3977
sS'qc___mni_normalized_anatomical_s'
p3978
(g5
(g6
g7
Ntp3979
Rp3980
(dp3981
g11
g5
(g12
g7
Ntp3982
Rp3983
(dp3984
g16
(dp3985
g5
(g18
g7
Ntp3986
Rp3987
(dp3988
g22
(dp3989
sg24
g5
(g25
g7
Ntp3990
Rp3991
(dp3992
g29
g30
(g31
tp3993
Rp3994
(dp3995
g38
g39
sg1409
g37
sg1410
S'/mrimages/src/cpac/anaconda/lib/python2.7/site-packages/CPAC/resources/templates/MNI152_Edge_AllTissues.nii.gz'
p3996
sbsg55
(lp3997
g1409
ag1410
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp3998
sg63
S'montage_mni_anat_0'
p3999
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp4000
sg75
Nsg76
Nsb(dp4001
sg5
(g18
g7
Ntp4002
Rp4003
(dp4004
g22
(dp4005
sg24
g5
(g1439
g7
Ntp4006
Rp4007
(dp4008
g1443
(lp4009
g1410
ag1409
ag1445
ag1446
asg29
g30
(g1447
tp4010
Rp4011
(dp4012
g158
I00
sg1445
S'mni_anat_s.png'
p4013
sg1410
g37
sg1446
g1452
sg1453
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4014
sg1409
g37
sg38
g39
sbsg1455
(dp4015
g1445
Nssg1457
(lp4016
g1445
asg1459
Nsbsg58
Nsg59
g1499
sg61
(dp4017
sg63
g3999
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1499
sg72
Nsg73
(lp4018
sg75
Nsg76
Nsb(dp4019
sg5
(g18
g7
Ntp4020
Rp4021
(dp4022
g22
(dp4023
sg24
g5
(g1439
g7
Ntp4024
Rp4025
(dp4026
g1443
(lp4027
g1472
asg29
g30
(g1447
tp4028
Rp4029
(dp4030
g158
I00
sg1453
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4031
sg1472
g37
sg38
g39
sbsg1455
(dp4032
g1478
Nssg1457
(lp4033
g1478
asg1459
Nsbsg58
Nsg59
g1480
sg61
(dp4034
sg63
g3999
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1480
sg72
Nsg73
(lp4035
sg75
Nsg76
Nsb(dp4036
sg5
(g18
g7
Ntp4037
Rp4038
(dp4039
g22
(dp4040
sg24
g5
(g1439
g7
Ntp4041
Rp4042
(dp4043
g1443
(lp4044
g1410
ag1409
ag1445
ag1446
asg29
g30
(g1447
tp4045
Rp4046
(dp4047
g158
I00
sg1445
S'mni_anat_a.png'
p4048
sg1410
g37
sg1446
g1452
sg1453
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4049
sg1409
g37
sg38
g39
sbsg1455
(dp4050
g1445
Nssg1457
(lp4051
g1445
asg1459
Nsbsg58
Nsg59
g1460
sg61
(dp4052
sg63
g3999
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1460
sg72
Nsg73
(lp4053
sg75
Nsg76
Nsb(dp4054
sg5
(g18
g7
Ntp4055
Rp4056
(dp4057
g22
(dp4058
sg24
g5
(g1439
g7
Ntp4059
Rp4060
(dp4061
g1443
(lp4062
g1472
asg29
g30
(g1447
tp4063
Rp4064
(dp4065
g158
I00
sg1453
g4031
sg1472
g37
sg38
g39
sbsg1455
(dp4066
g1478
Nssg1457
(lp4067
g1478
asg1459
Nsbsg58
Nsg66
I00
sg61
(dp4068
sg68
Nsg65
Nsg75
Nsg59
g1517
sg63
g3999
sg67
I00
sg69
Nsg70
I00
sg71
g1517
sg72
Nsg73
(lp4069
sg76
Nsb(dp4070
sg5
(g18
g7
Ntp4071
Rp4072
(dp4073
g22
(dp4074
sg24
g5
(g25
g7
Ntp4075
Rp4076
(dp4077
g29
g30
(g31
tp4078
Rp4079
(dp4080
g38
g39
sg1427
g37
sg1428
g37
sg1429
g37
sg1430
g37
sbsg55
(lp4081
g1428
ag1429
ag1427
ag1430
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp4082
sg63
g3999
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp4083
sg75
Nsg76
Nsb(dp4084
ssg334
(dp4085
sg336
(dp4086
g3987
(dp4087
g4056
(dp4088
g340
(lp4089
(g1410
g1472
tp4090
assg4021
(dp4091
g340
(lp4092
(g1409
g1472
tp4093
asssg4003
(dp4094
g4072
(dp4095
g340
(lp4096
(g1445
g1429
tp4097
asssg4021
(dp4098
g4038
(dp4099
g340
(lp4100
(g1478
g1409
tp4101
assg4072
(dp4102
g340
(lp4103
(g1478
g1427
tp4104
assg4003
(dp4105
g340
(lp4106
(g1478
g1409
tp4107
asssg4038
(dp4108
g4072
(dp4109
g340
(lp4110
(g1445
g1428
tp4111
asssg4056
(dp4112
g4038
(dp4113
g340
(lp4114
(g1478
g1410
tp4115
assg4072
(dp4116
g340
(lp4117
(g1478
g1430
tp4118
assg4003
(dp4119
g340
(lp4120
(g1478
g1410
tp4121
asssg4072
(dp4122
ssg382
g4086
sg383
(dp4123
g3987
(dp4124
sg4003
(dp4125
g4056
g4119
sg4021
g4105
ssg4021
(dp4126
g3987
g4091
ssg4038
(dp4127
g4056
g4113
sg4021
g4099
ssg4056
(dp4128
g3987
g4088
ssg4072
(dp4129
g4056
g4116
sg4003
g4095
sg4021
g4102
sg4038
g4109
sssg391
g4086
sbsg59
g3999
sg63
g1067
sg71
g3999
sg72
g392
((lp4130
(lp4131
g395
ag392
((lp4132
(lp4133
g398
ag395
aa(lp4134
g400
ag401
aa(lp4135
g403
ag404
aa(lp4136
g406
ag407
aa(lp4137
g409
ag410
aa(lp4138
g412
ag413
aa(lp4139
g415
ag416
aa(lp4140
g418
ag419
aatp4141
Rp4142
aa(lp4143
g423
ag392
((lp4144
(lp4145
g398
ag423
aa(lp4146
g427
ag428
aa(lp4147
g430
ag431
aa(lp4148
g433
ag434
aa(lp4149
g436
ag437
aa(lp4150
g439
ag440
aa(lp4151
g442
ag443
aa(lp4152
g445
ag446
aa(lp4153
g448
ag449
aa(lp4154
g451
ag452
aa(lp4155
g454
ag455
aa(lp4156
g457
ag458
aa(lp4157
g460
ag461
aa(lp4158
g463
ag464
aa(lp4159
g466
ag467
aa(lp4160
g469
ag470
aa(lp4161
g472
ag473
aa(lp4162
g475
ag476
aa(lp4163
g478
ag479
aatp4164
Rp4165
aa(lp4166
g483
ag392
((lp4167
(lp4168
g398
ag483
aa(lp4169
g487
ag488
aatp4170
Rp4171
aatp4172
Rp4173
sg76
Nsbg1609
tp4174
sS'mean_functional_in_anat'
p4175
(g3460
S'outputspec.anat_func'
p4176
tp4177
sS'anatomical_to_mni_nonlinear_xfm'
p4178
(g1116
S'outputspec.nonlinear_xfm'
p4179
tp4180
sg1999
(g2453
S'outputspec.motion_correct'
p4181
tp4182
sS'qc___snr_s'
p4183
(g1613
g1609
tp4184
sS'qc___mni_normalized_anatomical_a'
p4185
(g3980
g1807
tp4186
sS'functional_brain_mask_to_standard'
p4187
(g5
(g18
g7
Ntp4188
Rp4189
(dp4190
g22
(dp4191
sg24
g5
(g1165
g7
Ntp4192
Rp4193
(dp4194
g29
g30
(g1169
tp4195
Rp4196
(dp4197
g158
I00
sg1173
g37
sg177
g37
sg1174
g37
sg161
g37
sg232
g37
sg162
g37
sg206
S'nn'
p4198
sg1175
g37
sg1176
S'/mrimages/src/cpac/fsl/data/standard/MNI152_T1_2mm.nii.gz'
p4199
sg164
g165
sg166
g5
(g167
g168
(dp4200
g170
g171
stp4201
Rp4202
(dp4203
g175
S'environ_items'
p4204
sg59
g166
sbsg1182
g37
sg1183
g37
sg178
g171
sg1184
g37
sg1185
g37
sg38
g39
sg1186
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'func_mni_fsl_warp_mask_0'
p4205
sg61
(dp4206
sg63
g1067
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4205
sg72
Nsg73
(lp4207
sg75
Nsg76
Nsbg161
tp4208
sS'qc___skullstrip_vis_a'
p4209
(g5
(g6
g7
Ntp4210
Rp4211
(dp4212
g11
g5
(g12
g7
Ntp4213
Rp4214
(dp4215
g16
(dp4216
g5
(g18
g7
Ntp4217
Rp4218
(dp4219
g22
(dp4220
sg24
g5
(g25
g7
Ntp4221
Rp4222
(dp4223
g29
g30
(g31
tp4224
Rp4225
(dp4226
g38
g39
sg1427
g37
sg1428
g37
sg1429
g37
sg1430
g37
sbsg55
(lp4227
g1428
ag1429
ag1427
ag1430
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp4228
sg63
S'montage_skull_0'
p4229
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp4230
sg75
Nsg76
Nsb(dp4231
sg5
(g18
g7
Ntp4232
Rp4233
(dp4234
g22
(dp4235
sg24
g5
(g1439
g7
Ntp4236
Rp4237
(dp4238
g1443
(lp4239
g1410
ag1409
ag1445
ag1446
asg29
g30
(g1447
tp4240
Rp4241
(dp4242
g158
I00
sg1445
S'skull_vis_a.png'
p4243
sg1410
g37
sg1446
g1452
sg1453
S'S\'def montage_axial(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Axial Direction\\n    calls make_montage_axial\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_axial\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_axial(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n    else:\\n\\n        pngs = make_montage_axial(overlay, underlay, png_name, cbar_name)\\n\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4244
sg1409
g37
sg38
g39
sbsg1455
(dp4245
g1445
Nssg1457
(lp4246
g1445
asg1459
Nsbsg58
Nsg59
g1460
sg61
(dp4247
sg63
g4229
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1460
sg72
Nsg73
(lp4248
sg75
Nsg76
Nsb(dp4249
sg5
(g18
g7
Ntp4250
Rp4251
(dp4252
g22
(dp4253
sg24
g5
(g1439
g7
Ntp4254
Rp4255
(dp4256
g1443
(lp4257
g1472
asg29
g30
(g1447
tp4258
Rp4259
(dp4260
g158
I00
sg1453
S'S\'def resample_1mm(file_):\\n\\n    """\\n    Calls make_resample_1mm which resamples file to 1mm space\\n\\n    Parameters\\n    ----------\\n\\n    file_ : string\\n        path to the scan\\n\\n    Returns\\n    -------\\n\\n    new_fname : string\\n        path to 1mm resampled nifti file\\n\\n    """\\n\\n    from CPAC.qc.utils import make_resample_1mm\\n\\n    new_fname = None\\n    if isinstance(file_, list):\\n        new_fname = []\\n\\n        for f in file_:\\n\\n            new_fname.append(make_resample_1mm(f))\\n\\n    else:\\n        new_fname = make_resample_1mm(file_)\\n\\n    return new_fname\\n\'\n.'
p4261
sg1472
g37
sg38
g39
sbsg1455
(dp4262
g1478
Nssg1457
(lp4263
g1478
asg1459
Nsbsg58
Nsg59
g1480
sg61
(dp4264
sg63
g4229
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1480
sg72
Nsg73
(lp4265
sg75
Nsg76
Nsb(dp4266
sg5
(g18
g7
Ntp4267
Rp4268
(dp4269
g22
(dp4270
sg24
g5
(g25
g7
Ntp4271
Rp4272
(dp4273
g29
g30
(g31
tp4274
Rp4275
(dp4276
g38
g39
sg1409
g37
sg1410
g37
sbsg55
(lp4277
g1409
ag1410
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp4278
sg63
g4229
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp4279
sg75
Nsg76
Nsb(dp4280
sg5
(g18
g7
Ntp4281
Rp4282
(dp4283
g22
(dp4284
sg24
g5
(g1439
g7
Ntp4285
Rp4286
(dp4287
g1443
(lp4288
g1472
asg29
g30
(g1447
tp4289
Rp4290
(dp4291
g158
I00
sg1453
g4261
sg1472
g37
sg38
g39
sbsg1455
(dp4292
g1478
Nssg1457
(lp4293
g1478
asg1459
Nsbsg58
Nsg66
I00
sg61
(dp4294
sg68
Nsg65
Nsg75
Nsg59
g1517
sg63
g4229
sg67
I00
sg69
Nsg70
I00
sg71
g1517
sg72
Nsg73
(lp4295
sg76
Nsb(dp4296
sg5
(g18
g7
Ntp4297
Rp4298
(dp4299
g22
(dp4300
sg24
g5
(g1439
g7
Ntp4301
Rp4302
(dp4303
g1443
(lp4304
g1410
ag1409
ag1445
ag1446
asg29
g30
(g1447
tp4305
Rp4306
(dp4307
g158
I00
sg1445
S'skull_vis_s.png'
p4308
sg1410
g37
sg1446
g1452
sg1453
S'S\'def montage_sagittal(overlay, underlay, png_name, cbar_name):\\n\\n    """\\n    Draws Montage using overlay on Anatomical brain in Sagittal Direction\\n    calls make_montage_sagittal\\n\\n    Parameters\\n    ----------\\n\\n    overlay : string\\n            Nifi file\\n\\n    underlay : string\\n            Nifti for Anatomical Brain\\n\\n    cbar_name : string\\n            name of the cbar \\n\\n    png_name : string\\n            Proposed name of the montage plot\\n\\n    Returns\\n    -------\\n\\n    png_name : Path to generated PNG\\n\\n    """\\n    import os\\n    from CPAC.qc.utils import make_montage_sagittal\\n    pngs = None\\n    if isinstance(overlay, list):\\n        pngs = []\\n\\n        for ov in overlay:\\n            fname = os.path.basename(os.path.splitext(os.path.splitext(ov)[0])[0])\\n            pngs.append(make_montage_sagittal(ov, underlay, fname + \\\'_\\\' + png_name, cbar_name))\\n\\n    else:\\n\\n        pngs = make_montage_sagittal(overlay, underlay, png_name, cbar_name)\\n    png_name = pngs\\n\\n    return png_name\\n\'\n.'
p4309
sg1409
g37
sg38
g39
sbsg1455
(dp4310
g1445
Nssg1457
(lp4311
g1445
asg1459
Nsbsg58
Nsg59
g1499
sg61
(dp4312
sg63
g4229
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g1499
sg72
Nsg73
(lp4313
sg75
Nsg76
Nsb(dp4314
ssg334
(dp4315
sg336
(dp4316
g4218
(dp4317
sg4233
(dp4318
g4218
(dp4319
g340
(lp4320
(g1445
g1428
tp4321
asssg4251
(dp4322
g4233
(dp4323
g340
(lp4324
(g1478
g1409
tp4325
assg4298
(dp4326
g340
(lp4327
(g1478
g1409
tp4328
assg4218
(dp4329
g340
(lp4330
(g1478
g1427
tp4331
asssg4268
(dp4332
g4251
(dp4333
g340
(lp4334
(g1409
g1472
tp4335
assg4282
(dp4336
g340
(lp4337
(g1410
g1472
tp4338
asssg4282
(dp4339
g4233
(dp4340
g340
(lp4341
(g1478
g1410
tp4342
assg4298
(dp4343
g340
(lp4344
(g1478
g1410
tp4345
assg4218
(dp4346
g340
(lp4347
(g1478
g1430
tp4348
asssg4298
(dp4349
g4218
(dp4350
g340
(lp4351
(g1445
g1429
tp4352
assssg382
g4316
sg383
(dp4353
g4218
(dp4354
g4298
g4350
sg4233
g4319
sg4251
g4329
sg4282
g4346
ssg4233
(dp4355
g4251
g4323
sg4282
g4340
ssg4251
(dp4356
g4268
g4333
ssg4268
(dp4357
sg4282
(dp4358
g4268
g4336
ssg4298
(dp4359
g4251
g4326
sg4282
g4343
sssg391
g4316
sbsg59
g4229
sg63
g1067
sg71
g4229
sg72
g392
((lp4360
(lp4361
g395
ag392
((lp4362
(lp4363
g398
ag395
aa(lp4364
g400
ag401
aa(lp4365
g403
ag404
aa(lp4366
g406
ag407
aa(lp4367
g409
ag410
aa(lp4368
g412
ag413
aa(lp4369
g415
ag416
aa(lp4370
g418
ag419
aatp4371
Rp4372
aa(lp4373
g423
ag392
((lp4374
(lp4375
g398
ag423
aa(lp4376
g427
ag428
aa(lp4377
g430
ag431
aa(lp4378
g433
ag434
aa(lp4379
g436
ag437
aa(lp4380
g439
ag440
aa(lp4381
g442
ag443
aa(lp4382
g445
ag446
aa(lp4383
g448
ag449
aa(lp4384
g451
ag452
aa(lp4385
g454
ag455
aa(lp4386
g457
ag458
aa(lp4387
g460
ag461
aa(lp4388
g463
ag464
aa(lp4389
g466
ag467
aa(lp4390
g469
ag470
aa(lp4391
g472
ag473
aa(lp4392
g475
ag476
aa(lp4393
g478
ag479
aatp4394
Rp4395
aa(lp4396
g483
ag392
((lp4397
(lp4398
g398
ag483
aa(lp4399
g487
ag488
aatp4400
Rp4401
aatp4402
Rp4403
sg76
Nsbg1807
tp4404
sS'coordinate_transformation'
p4405
(g2453
S'outputspec.oned_matrix_save'
p4406
tp4407
sS'functional_brain_mask'
p4408
(g2453
S'outputspec.mask'
p4409
tp4410
sg2564
(g2453
S'outputspec.preprocessed'
p4411
tp4412
sg2565
(g5
(g18
g7
Ntp4413
Rp4414
(dp4415
g22
(dp4416
sg24
g5
(cnipype.interfaces.afni.preprocess
TShift
p4417
g7
Ntp4418
Rp4419
(dp4420
g29
g30
(cnipype.interfaces.afni.preprocess
TShiftInputSpec
p4421
tp4422
Rp4423
(dp4424
g158
I00
sg38
g39
sS'tpattern'
p4425
g37
sg161
g37
sS'tr'
p4426
g37
sg162
g37
sg206
g37
sg2239
g2240
sS'tzero'
p4427
g37
sS'ignore'
p4428
g37
sS'rltplus'
p4429
g37
sg164
g165
sS'tslice'
p4430
g37
sg177
g37
sS'rlt'
p4431
g37
sg166
g5
(g167
g168
(dp4432
tp4433
Rp4434
(dp4435
g175
S'environ_items'
p4436
sg59
g166
sbsbsg2252
g2240
sg181
Nsg182
g165
sbsg58
Nsg59
S'func_slice_timing_correction_0'
p4437
sg61
(dp4438
sg63
g1067
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4437
sg72
Nsg73
(lp4439
sg75
Nsg76
Nsbg161
tp4440
sS'roi_timeseries'
p4441
(g5
(g6
g7
Ntp4442
Rp4443
(dp4444
g11
g5
(g12
g7
Ntp4445
Rp4446
(dp4447
g16
(dp4448
g5
(g18
g7
Ntp4449
Rp4450
(dp4451
g22
(dp4452
sg24
g5
(g25
g7
Ntp4453
Rp4454
(dp4455
g29
g30
(g31
tp4456
Rp4457
(dp4458
g38
g39
sS'roi_outputs'
p4459
g37
sbsg55
(lp4460
g4459
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp4461
sg63
S'roi_timeseries_0'
p4462
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp4463
sg75
Nsg76
Nsb(dp4464
sg5
(g18
g7
Ntp4465
Rp4466
(dp4467
g22
(dp4468
sg24
g5
(g25
g7
Ntp4469
Rp4470
(dp4471
g29
g30
(g31
tp4472
Rp4473
(dp4474
g38
g39
sS'roi'
p4475
g37
sbsg55
(lp4476
g4475
asg57
I01
sbsg58
Nsg59
S'input_roi'
p4477
sg61
(dp4478
sg63
g4462
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4477
sg72
Nsg73
(lp4479
sg75
Nsg76
Nsb(dp4480
sg5
(g18
g7
Ntp4481
Rp4482
(dp4483
g22
(dp4484
sg24
g5
(g25
g7
Ntp4485
Rp4486
(dp4487
g29
g30
(g31
tp4488
Rp4489
(dp4490
g38
g39
sg178
(lp4491
I01
aI01
asg1913
g37
sbsg55
(lp4492
g1913
ag178
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp4493
sg63
g4462
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp4494
sg75
Nsg76
Nsb(dp4495
sg5
(g18
g7
Ntp4496
Rp4497
(dp4498
g22
(dp4499
sg24
g5
(g1439
g7
Ntp4500
Rp4501
(dp4502
g1443
(lp4503
g3843
ag3844
ag178
asg29
g30
(g1447
tp4504
Rp4505
(dp4506
g158
I00
sg38
g39
sg3843
g37
sg1453
S'S\'def gen_roi_timeseries(data_file,\\n                       template,\\n                       output_type):\\n    """\\n    Method to extract mean of voxel across\\n    all timepoints for each node in roi mask\\n\\n    Parameters\\n    ----------\\n    datafile : string\\n        path to input functional data\\n    template : string\\n        path to input roi mask in functional native space\\n    output_type : list\\n        list of two boolean values suggesting\\n        the output types - numpy npz file and csv\\n        format\\n\\n    Returns\\n    -------\\n    out_list : list\\n        list of 1D file, txt file, csv file and/or npz file containing\\n        mean timeseries for each scan corresponding\\n        to each node in roi mask\\n\\n    Raises\\n    ------\\n    Exception\\n\\n    """\\n    import nibabel as nib\\n    import csv\\n    import numpy as np\\n    import os\\n    import shutil\\n\\n    unit_data = nib.load(template).get_data()\\n    # Cast as rounded-up integer\\n    unit_data = np.int64(np.ceil(unit_data))\\n    datafile = nib.load(data_file)\\n    img_data = datafile.get_data()\\n    vol = img_data.shape[3]\\n\\n    if unit_data.shape != img_data.shape[:3]:\\n        raise Exception(\\\'Invalid Shape Error.\\\'\\\\\\n                        \\\'Please check the voxel dimensions.\\\'\\\\\\n                        \\\'Data and roi should have\\\'\\\\\\n                        \\\'same shape\\\')\\n\\n    nodes = np.unique(unit_data).tolist()\\n    sorted_list = []\\n    node_dict = {}\\n    out_list = []\\n\\n\\n    # extracting filename from input template\\n    tmp_file = os.path.splitext(\\n                    os.path.basename(template))[0]\\n    tmp_file = os.path.splitext(tmp_file)[0]\\n    oneD_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.1D\\\')\\n    txt_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.txt\\\')\\n    csv_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.csv\\\')\\n    numpy_file = os.path.abspath(\\\'roi_\\\' + tmp_file + \\\'.npz\\\')\\n\\n    nodes.sort()\\n    for n in nodes:\\n        if n > 0:\\n            node_array = img_data[unit_data == n]\\n            node_str = \\\'node_%s\\\' % (n)\\n            avg = np.mean(node_array, axis=0)\\n            avg = np.round(avg, 6)\\n            list1 = [n] + avg.tolist()\\n            sorted_list.append(list1)\\n            node_dict[node_str] = avg.tolist()\\n\\n\\n    # writing to 1Dfile\\n    print "writing 1D file.."\\n    f = open(oneD_file, \\\'w\\\')\\n    writer = csv.writer(f, delimiter=\\\'\\\\t\\\')\\n\\n    value_list = []\\n\\n    new_keys = sorted([int(float(key.split(\\\'node_\\\')[1])) for key in node_dict.keys()])\\n\\n    roi_number_list = [str(n) for n in new_keys]\\n\\n    roi_number_str = []\\n    for number in roi_number_list:\\n\\n        roi_number_str.append("#" + number)\\n\\n\\n    print "new keys: ", new_keys\\n    print "roi number str: ", roi_number_str\\n    for key in new_keys:\\n        value_list.append(node_dict[\\\'node_%s\\\' % key])\\n\\n    column_list = zip(*value_list)\\n\\n\\n    writer.writerow(roi_number_str)\\n\\n    for column in column_list:\\n        writer.writerow(list(column))\\n    f.close()\\n    out_list.append(oneD_file)\\n\\n    # copy the 1D contents to txt file\\n    shutil.copy(oneD_file, txt_file)\\n    out_list.append(txt_file)\\n\\n    # if csv is required\\n    if output_type[0]:\\n        print "writing csv file.."\\n        f = open(csv_file, \\\'wt\\\')\\n        writer = csv.writer(f, delimiter=\\\',\\\',\\n                                quoting=csv.QUOTE_MINIMAL)\\n        headers = [\\\'node/volume\\\'] + np.arange(vol).tolist()\\n        writer.writerow(headers)\\n        writer.writerows(sorted_list)\\n        f.close()\\n        out_list.append(csv_file)\\n\\n    # if npz file is required\\n    if output_type[1]:\\n        print "writing npz file.."\\n        np.savez(numpy_file, roi_data=value_list, roi_numbers=roi_number_list)\\n        out_list.append(numpy_file)\\n\\n    return out_list\\n\'\n.'
p4507
sg3844
g37
sg178
g37
sbsg1455
(dp4508
g161
Nssg1457
(lp4509
g161
asg1459
Nsbsg58
Nsg59
S'timeseries_roi'
p4510
sg61
(dp4511
sg63
g4462
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4510
sg72
Nsg73
(lp4512
sg75
Nsg76
Nsb(dp4513
ssg334
(dp4514
sg336
(dp4515
g4450
(dp4516
sg4466
(dp4517
g4497
(dp4518
g340
(lp4519
(g4475
g3844
tp4520
asssg4482
(dp4521
g4497
(dp4522
g340
(lp4523
(g1913
g3843
tp4524
a(g178
g178
tp4525
asssg4497
(dp4526
g4450
(dp4527
g340
(lp4528
(g161
g4459
tp4529
assssg382
g4515
sg383
(dp4530
g4450
(dp4531
g4497
g4527
ssg4466
(dp4532
sg4482
(dp4533
sg4497
(dp4534
g4466
g4518
sg4482
g4522
sssg391
g4515
sbsg59
g4462
sg63
g1067
sg71
g4462
sg72
g392
((lp4535
(lp4536
g395
ag392
((lp4537
(lp4538
g398
ag395
aa(lp4539
g400
ag401
aa(lp4540
g403
ag404
aa(lp4541
g406
ag407
aa(lp4542
g409
ag410
aa(lp4543
g412
ag413
aa(lp4544
g415
ag416
aa(lp4545
g418
ag419
aatp4546
Rp4547
aa(lp4548
g423
ag392
((lp4549
(lp4550
g398
ag423
aa(lp4551
g427
ag428
aa(lp4552
g430
ag431
aa(lp4553
g433
ag434
aa(lp4554
g436
ag437
aa(lp4555
g439
ag440
aa(lp4556
g442
ag443
aa(lp4557
g445
ag446
aa(lp4558
g448
ag449
aa(lp4559
g451
ag452
aa(lp4560
g454
ag455
aa(lp4561
g457
ag458
aa(lp4562
g460
ag461
aa(lp4563
g463
ag464
aa(lp4564
g466
ag467
aa(lp4565
g469
ag470
aa(lp4566
g472
ag473
aa(lp4567
g475
ag476
aa(lp4568
g478
ag479
aatp4569
Rp4570
aa(lp4571
g483
ag392
((lp4572
(lp4573
g398
ag483
aa(lp4574
g487
ag488
aatp4575
Rp4576
aatp4577
Rp4578
sg76
NsbS'outputspec.roi_outputs'
p4579
tp4580
sS'functional_nuisance_residuals'
p4581
(g5
(g6
g7
Ntp4582
Rp4583
(dp4584
g11
g5
(g12
g7
Ntp4585
Rp4586
(dp4587
g16
(dp4588
g5
(g18
g7
Ntp4589
Rp4590
(dp4591
g22
(dp4592
sg24
g5
(g192
g7
Ntp4593
Rp4594
(dp4595
g29
g30
(g196
tp4596
Rp4597
(dp4598
g200
g37
sg38
g39
sg201
g37
sg202
g37
sg203
g37
sg204
g37
sg205
g37
sg206
g207
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg217
g37
sg177
g37
sg218
g37
sg219
g37
sg220
g37
sg221
g37
sg158
I00
sg222
g37
sg223
g37
sg162
S'-applyisoxfm 2'
p4599
sg224
g37
sg225
g37
sg164
g165
sg226
g37
sg227
g37
sg228
g37
sg229
g37
sg230
g37
sg161
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg235
g37
sg236
g37
sg237
g37
sg238
g37
sg239
g37
sg166
g5
(g167
g168
(dp4600
g170
g171
stp4601
Rp4602
(dp4603
g175
S'environ_items'
p4604
sg59
g166
sbsg245
g37
sg246
g37
sg178
g171
sg247
g37
sg248
g37
sg249
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'wm_anat_to_2mm_flirt_applyxfm'
p4605
sg61
(dp4606
sg63
S'nuisance_0'
p4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4605
sg72
Nsg73
(lp4608
sg75
Nsg76
Nsb(dp4609
sg5
(g18
g7
Ntp4610
Rp4611
(dp4612
g22
(dp4613
sg24
g5
(g192
g7
Ntp4614
Rp4615
(dp4616
g29
g30
(g196
tp4617
Rp4618
(dp4619
g200
g37
sg38
g39
sg201
g37
sg202
g37
sg203
g37
sg204
g37
sg205
g37
sg206
g207
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg217
g37
sg177
g37
sg218
g37
sg219
g37
sg220
g37
sg221
g37
sg158
I00
sg222
g37
sg223
g37
sg162
g4599
sg224
g37
sg225
g37
sg164
g165
sg226
g37
sg227
g37
sg228
g37
sg229
g37
sg230
g37
sg161
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg235
g37
sg236
g37
sg237
g37
sg238
g37
sg239
g37
sg166
g5
(g167
g168
(dp4620
g170
g171
stp4621
Rp4622
(dp4623
g175
S'environ_items'
p4624
sg59
g166
sbsg245
g37
sg246
g37
sg178
g171
sg247
g37
sg248
g37
sg249
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'gm_anat_to_2mm_flirt_applyxfm'
p4625
sg61
(dp4626
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4625
sg72
Nsg73
(lp4627
sg75
Nsg76
Nsb(dp4628
sg5
(g18
g7
Ntp4629
Rp4630
(dp4631
g22
(dp4632
sg24
g5
(g25
g7
Ntp4633
Rp4634
(dp4635
g29
g30
(g31
tp4636
Rp4637
(dp4638
g38
g39
sS'regressors'
p4639
g37
sg3712
g37
sbsg55
(lp4640
g3712
ag4639
asg57
I01
sbsg58
Nsg59
g60
sg61
(dp4641
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g60
sg72
Nsg73
(lp4642
sg75
Nsg76
Nsb(dp4643
sg5
(g18
g7
Ntp4644
Rp4645
(dp4646
g22
(dp4647
sg24
g5
(g1439
g7
Ntp4648
Rp4649
(dp4650
g1443
(lp4651
g3712
aS'selector'
p4652
aS'wm_sig_file'
p4653
aS'csf_sig_file'
p4654
aS'gm_sig_file'
p4655
aS'motion_file'
p4656
aS'compcor_ncomponents'
p4657
asg29
g30
(g1447
tp4658
Rp4659
(dp4660
g158
I00
sg38
g39
sg4656
g37
sg4657
g37
sg1453
S'S\'def calc_residuals(subject,\\n                   selector,\\n                   wm_sig_file = None,\\n                   csf_sig_file = None,\\n                   gm_sig_file = None,\\n                   motion_file = None,\\n                   compcor_ncomponents = 0):\\n    """\\n    Calculates residuals of nuisance regressors for every voxel for a subject.\\n\\n    Parameters\\n    ----------\\n    subject : string\\n        Path of a subject\\\'s realigned nifti file.\\n    selector : dictionary\\n        Dictionary of selected regressors.  Keys are  represented as a string of the regressor name and keys \\n        are True/False.  See notes for an example.\\n    wm_mask_file : string, optional\\n        Path to subject\\\'s white matter mask (in the same space as the subject\\\'s functional file)\\n    csf_mask_file : string, optional\\n        Path to subject\\\'s cerebral spinal fluid mask (in the same space as the subject\\\'s functional file)\\n    gm_mask_file : string, optional\\n        Path to subject\\\'s grey matter mask (in the same space as the subject\\\'s functional file)\\n    compcor_ncomponents : integer, optional\\n        The first `n` principal of CompCor components to use as regressors.  Default is 0.\\n\\n    Returns\\n    -------\\n    residual_file : string\\n        Path of residual file in nifti format\\n    regressors_file : string\\n        Path of csv file of regressors used.  Filename corresponds to the name of each\\n        regressor in each column.\\n\\n    Notes\\n    -----\\n\\n    Example of selector parameter:\\n\\n    >>> selector = {\\\'compcor\\\' : True,\\n    >>> \\\'wm\\\' : True,\\n    >>> \\\'csf\\\' : True,\\n    >>> \\\'gm\\\' : True,\\n    >>> \\\'global\\\' : True,\\n    >>> \\\'pc1\\\' : True,\\n    >>> \\\'motion\\\' : True,\\n    >>> \\\'linear\\\' : True,\\n    >>> \\\'quadratic\\\' : True}\\n\\n\\n    """\\n    import numpy as np\\n    import nibabel as nb\\n    import os\\n    import scipy\\n    from CPAC.nuisance import calc_compcor_components\\n\\n\\n    nii = nb.load(subject)\\n    data = nii.get_data().astype(np.float64)\\n    global_mask = (data != 0).sum(-1) != 0\\n\\n\\n    #Check and define regressors which are provided from files\\n    if wm_sig_file is not None:\\n        wm_sigs = np.load(wm_sig_file)\\n        if wm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'White matter signals length %d do not match data timepoints %d\\\' % (wm_sigs.shape[1], data.shape[3]))\\n    if csf_sig_file is not None:\\n        csf_sigs = np.load(csf_sig_file)\\n        if csf_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'CSF signals length %d do not match data timepoints %d\\\' % (csf_sigs.shape[1], data.shape[3]))\\n    if gm_sig_file is not None:\\n        gm_sigs = np.load(gm_sig_file)\\n        if gm_sigs.shape[1] != data.shape[3]:\\n            raise ValueError(\\\'Grey matter signals length %d do not match data timepoints %d\\\' % (gm_sigs.shape[1], data.shape[3]))\\n\\n    if motion_file is not None:\\n        motion = np.genfromtxt(motion_file)\\n        if motion.shape[0] != data.shape[3]:\\n            raise ValueError(\\\'Motion parameters %d do not match data timepoints %d\\\' % (motion.shape[0], data.shape[3]) )\\n\\n    #Calculate regressors\\n    regressor_map = {\\\'constant\\\' : np.ones((data.shape[3],1))}\\n    if(selector[\\\'compcor\\\']):\\n        print \\\'compcor_ncomponents \\\', compcor_ncomponents\\n        regressor_map[\\\'compcor\\\'] = calc_compcor_components(data, compcor_ncomponents, wm_sigs, csf_sigs)\\n\\n    if(selector[\\\'wm\\\']):\\n        regressor_map[\\\'wm\\\'] = wm_sigs.mean(0)\\n\\n    if(selector[\\\'csf\\\']):\\n        regressor_map[\\\'csf\\\'] = csf_sigs.mean(0)\\n\\n    if(selector[\\\'gm\\\']):\\n        regressor_map[\\\'gm\\\'] = gm_sigs.mean(0)\\n\\n    if(selector[\\\'global\\\']):\\n        regressor_map[\\\'global\\\'] = data[global_mask].mean(0)\\n\\n    if(selector[\\\'pc1\\\']):\\n        bdata = data[global_mask].T\\n        bdatac = bdata - np.tile(bdata.mean(0), (bdata.shape[0], 1))\\n        U, S, Vh = np.linalg.svd(bdatac, full_matrices=False)\\n        regressor_map[\\\'pc1\\\'] = U[:,0]\\n\\n    if(selector[\\\'motion\\\']):\\n        regressor_map[\\\'motion\\\'] = motion\\n\\n    if(selector[\\\'linear\\\']):\\n        regressor_map[\\\'linear\\\'] = np.arange(0, data.shape[3])\\n\\n    if(selector[\\\'quadratic\\\']):\\n        regressor_map[\\\'quadratic\\\'] = np.arange(0, data.shape[3])**2\\n\\n    print \\\'Regressors include: \\\', regressor_map.keys()\\n\\n    X = np.zeros((data.shape[3], 1))\\n    csv_filename = \\\'\\\'\\n    for rname, rval in regressor_map.items():\\n        X = np.hstack((X, rval.reshape(rval.shape[0],-1)))\\n        csv_filename += \\\'_\\\' + rname\\n    X = X[:,1:]\\n\\n    csv_filename = csv_filename[1:]\\n    csv_filename += \\\'.csv\\\'\\n    csv_filename = os.path.join(os.getcwd(), csv_filename)\\n    np.savetxt(csv_filename, X, delimiter=\\\'\\\\t\\\')\\n\\n    print \\\'Regressors dim: \\\', X.shape, \\\' starting regression\\\'\\n\\n    Y = data[global_mask].T\\n    B = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)\\n    Y_res = Y - X.dot(B)\\n\\n    data[global_mask] = Y_res.T\\n\\n    print \\\'Writing residual and regressors\\\'\\n    img = nb.Nifti1Image(data, header=nii.get_header(), affine=nii.get_affine())\\n    residual_file = os.path.join(os.getcwd(), \\\'residual.nii.gz\\\')\\n    img.to_filename(residual_file)\\n\\n    #Easier to read for debugging purposes\\n    regressors_file = os.path.join(os.getcwd(), \\\'nuisance_regressors.mat\\\')\\n\\n    if scipy.__version__ == \\\'0.7.0\\\':\\n        scipy.io.savemat(regressors_file, regressor_map)                        ### for scipy v0.7.0\\n    else:\\n        scipy.io.savemat(regressors_file, regressor_map, oned_as=\\\'column\\\')   ### for scipy v0.12: OK\\n\\n\\n\\n    return residual_file, csv_filename\\n\'\n.'
p4661
sg4654
g37
sg4653
g37
sg4655
g37
sg4652
g37
sg3712
g37
sbsg1455
(dp4662
S'regressors_file'
p4663
NsS'residual_file'
p4664
Nssg1457
(lp4665
g4664
ag4663
asg1459
Nsbsg58
Nsg59
S'residuals'
p4666
sg61
(dp4667
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
(lp4668
(g4652
(lp4669
(dp4670
S'global'
p4671
I0
sS'linear'
p4672
I1
sS'wm'
p4673
I0
sS'pc1'
p4674
I0
sS'motion'
p4675
I0
sS'quadratic'
p4676
I1
sS'gm'
p4677
I0
sS'compcor'
p4678
I1
sS'csf'
p4679
I1
satp4680
a(g4657
(lp4681
I5
atp4682
asg70
I00
sg71
g4666
sg72
Nsg73
(lp4683
sg75
Nsg76
Nsb(dp4684
sg5
(g18
g7
Ntp4685
Rp4686
(dp4687
g22
(dp4688
sg24
g5
(g192
g7
Ntp4689
Rp4690
(dp4691
g29
g30
(g196
tp4692
Rp4693
(dp4694
g200
g37
sg38
g39
sg201
g37
sg202
g37
sg203
g37
sg204
g37
sg205
g37
sg206
g37
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg217
g37
sg177
g37
sg218
g37
sg219
g37
sg220
g37
sg221
g37
sg158
I00
sg222
g37
sg223
g37
sg162
g4599
sg224
g37
sg225
g37
sg164
g165
sg226
g37
sg227
g37
sg228
g37
sg229
g37
sg230
g37
sg161
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg235
g37
sg236
g37
sg237
g37
sg238
g37
sg239
g37
sg166
g5
(g167
g168
(dp4695
g170
g171
stp4696
Rp4697
(dp4698
g175
S'environ_items'
p4699
sg59
g166
sbsg245
g37
sg246
g37
sg178
g171
sg247
g37
sg248
g37
sg249
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'func_to_2mm_flirt_applyxfm'
p4700
sg61
(dp4701
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4700
sg72
Nsg73
(lp4702
sg75
Nsg76
Nsb(dp4703
sg5
(g18
g7
Ntp4704
Rp4705
(dp4706
g22
(dp4707
sg24
g5
(g1439
g7
Ntp4708
Rp4709
(dp4710
g1443
(lp4711
g3843
aS'ventricles_mask_file'
p4712
aS'wm_seg_file'
p4713
aS'csf_seg_file'
p4714
aS'gm_seg_file'
p4715
ag106
ag88
ag754
asg29
g30
(g1447
tp4716
Rp4717
(dp4718
g158
I00
sg38
g39
sg106
g37
sg88
g37
sg3843
g37
sg1453
S'S"def extract_tissue_data(data_file,\\n                        ventricles_mask_file,\\n                        wm_seg_file, csf_seg_file, gm_seg_file,\\n                        wm_threshold=0.0, csf_threshold=0.0, gm_threshold=0.0):\\n    import numpy as np\\n    import nibabel as nb\\n    import os    \\n    from CPAC.nuisance import erode_mask\\n    from CPAC.utils import safe_shape\\n\\n    print \'Tissues extraction thresholds wm %d, csf %d, gm %d\' % (wm_threshold,\\n                                                                  csf_threshold,\\n                                                                  gm_threshold)\\n\\n    try:\\n        data = nb.load(data_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % data_file)\\n\\n\\n    try:\\n        lat_ventricles_mask = nb.load(ventricles_mask_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % lat_ventricles_mask)\\n\\n\\n    if not safe_shape(data, lat_ventricles_mask):\\n        raise ValueError(\'Spatial dimensions for data and the lateral ventricles mask do not match\')\\n\\n    try:\\n        wm_seg = nb.load(wm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % wm_seg)\\n\\n\\n    if not safe_shape(data, wm_seg):\\n        raise ValueError(\'Spatial dimensions for data, white matter segment do not match\')\\n\\n    wm_mask = erode_mask(wm_seg > wm_threshold)\\n    wm_sigs = data[wm_mask]\\n    file_wm = os.path.join(os.getcwd(), \'wm_signals.npy\')\\n    np.save(file_wm, wm_sigs)\\n    del wm_sigs\\n\\n    try:\\n        csf_seg = nb.load(csf_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % csf_seg)\\n\\n\\n    if not safe_shape(data, csf_seg):\\n        raise ValueError(\'Spatial dimensions for data, cerebral spinal fluid segment do not match\')\\n\\n    # Only take the CSF at the lateral ventricles as labeled in the Harvard\\n    # Oxford parcellation regions 4 and 43\\n    csf_mask = (csf_seg > csf_threshold)*(lat_ventricles_mask==1)\\n    csf_sigs = data[csf_mask]\\n    file_csf = os.path.join(os.getcwd(), \'csf_signals.npy\')\\n    np.save(file_csf, csf_sigs)\\n    del csf_sigs\\n\\n\\n    try:\\n        gm_seg = nb.load(gm_seg_file).get_data().astype(\'float64\')\\n    except:\\n        raise MemoryError(\'Unable to load %s\' % gm_seg)\\n\\n\\n    if not safe_shape(data, gm_seg):\\n        raise ValueError(\'Spatial dimensions for data, gray matter segment do not match\')\\n\\n\\n    gm_mask = erode_mask(gm_seg > gm_threshold)\\n    gm_sigs = data[gm_mask]\\n    file_gm = os.path.join(os.getcwd(), \'gm_signals.npy\')\\n    np.save(file_gm, gm_sigs)\\n    del gm_sigs\\n\\n\\n\\n    nii = nb.load(wm_seg_file)\\n    wm_mask_file = os.path.join(os.getcwd(), \'wm_mask.nii.gz\')\\n    csf_mask_file = os.path.join(os.getcwd(), \'csf_mask.nii.gz\')\\n    gm_mask_file = os.path.join(os.getcwd(), \'gm_mask.nii.gz\')\\n    nb.Nifti1Image(wm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(wm_mask_file)\\n    nb.Nifti1Image(csf_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(csf_mask_file)\\n    nb.Nifti1Image(gm_mask, header=nii.get_header(), affine=nii.get_affine()).to_filename(gm_mask_file)\\n\\n    return file_wm, file_csf, file_gm\\n"\n.'
p4719
sg4715
g37
sg4712
g37
sg754
g37
sg4714
g37
sg4713
g37
sbsg1455
(dp4720
S'file_gm'
p4721
NsS'file_wm'
p4722
NsS'file_csf'
p4723
Nssg1457
(lp4724
g4722
ag4723
ag4721
asg1459
Nsbsg58
Nsg59
S'tissue_masks'
p4725
sg61
(dp4726
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4725
sg72
Nsg73
(lp4727
sg75
Nsg76
Nsb(dp4728
sg5
(g18
g7
Ntp4729
Rp4730
(dp4731
g22
(dp4732
sg24
g5
(g25
g7
Ntp4733
Rp4734
(dp4735
g29
g30
(g31
tp4736
Rp4737
(dp4738
S'motion_components'
p4739
g37
sS'anat_to_mni_initial_xfm'
p4740
g37
sS'lat_ventricles_mask'
p4741
S'/home/eric/cpac_image_resources/HarvardOxford-lateral-ventricles-thr25-2mm.nii.gz'
p4742
sg50
g37
sS'anat_to_mni_rigid_xfm'
p4743
g37
sg4657
g37
sS'anat_to_mni_affine_xfm'
p4744
g37
sg4652
g37
sg49
g37
sS'template_brain'
p4745
g37
sg3496
g37
sS'mni_to_anat_linear_xfm'
p4746
g37
sg51
g37
sg38
g39
sg3712
g37
sbsg55
(lp4747
g3712
ag49
ag51
ag50
ag4746
ag4740
ag4743
ag4744
ag3496
ag4741
ag4739
ag4652
ag4657
ag4745
asg57
I01
sbsg58
Nsg59
g135
sg61
(dp4748
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g135
sg72
Nsg73
(lp4749
sg75
Nsg76
Nsb(dp4750
sg5
(g18
g7
Ntp4751
Rp4752
(dp4753
g22
(dp4754
sg24
g5
(g192
g7
Ntp4755
Rp4756
(dp4757
g29
g30
(g196
tp4758
Rp4759
(dp4760
g200
g37
sg38
g39
sg201
g37
sg202
g37
sg203
g37
sg204
g37
sg205
g37
sg206
g207
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg217
g37
sg177
g37
sg218
g37
sg219
g37
sg220
g37
sg221
g37
sg158
I00
sg222
g37
sg223
g37
sg162
g4599
sg224
g37
sg225
g37
sg164
g165
sg226
g37
sg227
g37
sg228
g37
sg229
g37
sg230
g37
sg161
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg235
g37
sg236
g37
sg237
g37
sg238
g37
sg239
g37
sg166
g5
(g167
g168
(dp4761
g170
g171
stp4762
Rp4763
(dp4764
g175
S'environ_items'
p4765
sg59
g166
sbsg245
g37
sg246
g37
sg178
g171
sg247
g37
sg248
g37
sg249
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'ho_mni_to_2mm_flirt_applyxfm'
p4766
sg61
(dp4767
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4766
sg72
Nsg73
(lp4768
sg75
Nsg76
Nsb(dp4769
sg5
(g18
g7
Ntp4770
Rp4771
(dp4772
g22
(dp4773
sg24
g5
(g192
g7
Ntp4774
Rp4775
(dp4776
g29
g30
(g196
tp4777
Rp4778
(dp4779
g200
g37
sg38
g39
sg201
g37
sg202
g37
sg203
g37
sg204
g37
sg205
g37
sg206
g207
sg208
g37
sg209
g37
sg210
g37
sg211
g37
sg212
g37
sg213
g37
sg214
g37
sg215
g37
sg216
g37
sg217
g37
sg177
g37
sg218
g37
sg219
g37
sg220
g37
sg221
g37
sg158
I00
sg222
g37
sg223
g37
sg162
g4599
sg224
g37
sg225
g37
sg164
g165
sg226
g37
sg227
g37
sg228
g37
sg229
g37
sg230
g37
sg161
g37
sg231
g37
sg232
g37
sg233
g37
sg234
g37
sg235
g37
sg236
g37
sg237
g37
sg238
g37
sg239
g37
sg166
g5
(g167
g168
(dp4780
g170
g171
stp4781
Rp4782
(dp4783
g175
S'environ_items'
p4784
sg59
g166
sbsg245
g37
sg246
g37
sg178
g171
sg247
g37
sg248
g37
sg249
g37
sbsg180
g171
sg181
Nsg182
g165
sbsg58
Nsg59
S'csf_anat_to_2mm_flirt_applyxfm'
p4785
sg61
(dp4786
sg63
g4607
sg65
Nsg66
I00
sg67
I00
sg68
Nsg69
Nsg70
I00
sg71
g4785
sg72
Nsg73
(lp4787
sg75
Nsg76
Nsb(dp4788
ssg334
(dp4789
sg336
(dp4790
g4590
(dp4791
g4705
(dp4792
g340
(lp4793
(g161
g4713
tp4794
asssg4611
(dp4795
g4705
(dp4796
g340
(lp4797
(g161
g4715
tp4798
asssg4630
(dp4799
sg4645
(dp4800
g4630
(dp4801
g340
(lp4802
(g4664
g3712
tp4803
a(g4663
g4639
tp4804
asssg4686
(dp4805
g4705
(dp4806
g340
(lp4807
(g161
g3843
tp4808
asssg4705
(dp4809
g4645
(dp4810
g340
(lp4811
(g4722
g4653
tp4812
a(g4723
g4654
tp4813
a(g4721
g4655
tp4814
asssg4730
(dp4815
g4590
(dp4816
g340
(lp4817
(g49
g177
tp4818
a(g49
g203
tp4819
assg4611
(dp4820
g340
(lp4821
(g50
g177
tp4822
a(g50
g203
tp4823
assg4645
(dp4824
g340
(lp4825
(g3712
g3712
tp4826
a(g4739
g4656
tp4827
a(g4652
g4652
tp4828
a(g4657
g4657
tp4829
assg4686
(dp4830
g340
(lp4831
(g3712
g177
tp4832
a(g51
g203
tp4833
a(g3496
g201
tp4834
assg4752
(dp4835
g340
(lp4836
(g4746
g201
tp4837
a(g4741
g177
tp4838
a(g51
g203
tp4839
assg4771
(dp4840
g340
(lp4841
(g51
g177
tp4842
a(g51
g203
tp4843
asssg4752
(dp4844
g4705
(dp4845
g340
(lp4846
(g161
g4712
tp4847
asssg4771
(dp4848
g4705
(dp4849
g340
(lp4850
(g161
g4714
tp4851
assssg382
g4790
sg383
(dp4852
g4590
(dp4853
g4730
g4816
ssg4611
(dp4854
g4730
g4820
ssg4630
(dp4855
g4645
g4801
ssg4645
(dp4856
g4730
g4824
sg4705
g4810
ssg4686
(dp4857
g4730
g4830
ssg4705
(dp4858
g4771
g4849
sg4611
g4796
sg4752
g4845
sg4686
g4806
sg4590
g4792
ssg4730
(dp4859
sg4752
(dp4860
g4730
g4835
ssg4771
(dp4861
g4730
g4840
sssg391
g4790
sbsg59
g4607
sg63
g1067
sg71
g4607
sg72
g392
((lp4862
(lp4863
g395
ag392
((lp4864
(lp4865
g398
ag395
aa(lp4866
g400
ag401
aa(lp4867
g403
ag404
aa(lp4868
g406
ag407
aa(lp4869
g409
ag410
aa(lp4870
g412
ag413
aa(lp4871
g415
ag416
aa(lp4872
g418
ag419
aatp4873
Rp4874
aa(lp4875
g423
ag392
((lp4876
(lp4877
g398
ag423
aa(lp4878
g427
ag428
aa(lp4879
g430
ag431
aa(lp4880
g433
ag434
aa(lp4881
g436
ag437
aa(lp4882
g439
ag440
aa(lp4883
g442
ag443
aa(lp4884
g445
ag446
aa(lp4885
g448
ag449
aa(lp4886
g451
ag452
aa(lp4887
g454
ag455
aa(lp4888
g457
ag458
aa(lp4889
g460
ag461
aa(lp4890
g463
ag464
aa(lp4891
g466
ag467
aa(lp4892
g469
ag470
aa(lp4893
g472
ag473
aa(lp4894
g475
ag476
aa(lp4895
g478
ag479
aatp4896
Rp4897
aa(lp4898
g483
ag392
((lp4899
(lp4900
g398
ag483
aa(lp4901
g487
ag488
aatp4902
Rp4903
aatp4904
Rp4905
sg76
NsbS'outputspec.subject'
p4906
tp4907
sg2034
(g1878
S'outputspec.motion_params'
p4908
tp4909
sS'anatomical_reorient'
p4910
(g2218
S'outputspec.reorient'
p4911
tp4912
sg2035
(g1878
S'outputspec.power_params'
p4913
tp4914
sS'mni_normalized_anatomical'
p4915
(g1116
S'outputspec.output_brain'
p4916
tp4917
sS'qc___skullstrip_vis_s'
p4918
(g4211
g1609
tp4919
sasS'status'
p4920
S'Running'
p4921
sS'strat_0'
p4922
(lp4923
g2255
ag1138
ag64
ag4437
ag2486
ag2893
aS'func_to_anat_FLIRT_0'
p4924
ag3483
ag1900
ag4607
ag3823
ag4462
ag3853
asg1933
g3713
sS'strategies'
p4925
(lp4926
(lp4927
S'_compcor_ncomponents_5_selector_pc10.linear1.wm0.global0.motion0.quadratic1.gm0.compcor1.csf1'
p4928
aS'_csf_threshold_0.96'
p4929
aS'_gm_threshold_0.7'
p4930
aS'_target_angle_deg_90'
p4931
aS'_threshold_0.2'
p4932
aS'_wm_threshold_0.96'
p4933
aasS'start_time'
p4934
F1430391155.71522
s.